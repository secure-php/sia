; ModuleID = '/home/phli/s2e-env/s2e/install/share/libs2e/op_helper.bc.x86_64'
source_filename = "llvm-link"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.CPUX86State = type { [16 x i64], i64, i64, i64, i64, i32, i16, i16, [8 x i8], [8 x %union.FPReg], %struct.float_status, %struct.floatx80, %struct.float_status, %struct.float_status, i32, [16 x %union.XMMReg], %union.XMMReg, %union.MMXReg, i64, i3
%union.FPReg = type { %struct.floatx80 }
%struct.floatx80 = type { i64, i16 }
%struct.float_status = type { i8, i8, i8, i8, i8, i8, i8 }
%union.XMMReg = type { [2 x i64] }
%union.MMXReg = type { i64 }
%struct.SegmentCache = type { i32, i64, i32, i32 }
%union.anon = type { [4 x %struct.CPUBreakpoint*] }
%struct.CPUBreakpoint = type { i64, i32, %union.anon.0 }
%struct.TranslationBlock = type { i64, i64, i64, i16, i32, %struct.tb_tc, %struct.TranslationBlock*, [2 x %struct.TranslationBlock*], [2 x i64], i32, [2 x i16], [2 x i64], i64, [2 x i64], [2 x i64], i32, i8*, i32, i64, i8*, i64, i32 }
%struct.tb_tc = type { i8*, i64 }
%struct.CPUTLBEntry = type { i64, i64, i64, i64, i64, i64, i8*, [8 x i8] }
%struct.CPUTLBRAMEntry = type { i64, i64, i8* }
%union.anon.0 = type { %struct.QTailQLink }
%struct.QTailQLink = type { i8*, %struct.QTailQLink* }
%struct.CPUWatchpoint = type { i64, i64, i32, %union.anon.0 }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.cpuid_t = type { i32, i32, i32, i32, i32, i32, i32, i32, [12 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.MTRRVar = type { i64, i64 }
%struct.DeviceState = type opaque
%struct.se_libcpu_interface_t = type { i32, %struct.mode, %struct.exec, %struct.tb, %struct.tlb, %struct.regs, %struct.mem, %struct.expr, %struct.libcpu, %struct.events, %struct.anon, %struct.anon.3 }
%struct.mode = type { i32*, i32*, i8**, i32*, i32*, i32*, i32* }
%struct.exec = type { void (i8*, i8*)*, void ()*, i32 ()*, i32 ()*, i32 ()*, i32 ()*, void ()*, void (i8*)*, i64 (%struct.CPUX86State*, %struct.TranslationBlock*)*, void (i32, i32, i32, i64, i32)*, i32* }
%struct.tb = type { i8* ()*, void (...)*, void (i8*, i8*)*, i32 (i8*)* }
%struct.tlb = type { void ()*, void (i8*, i32, i32)*, void (%struct.CPUX86State*, i32, i64, i64)* }
%struct.regs = type { void (i32, i8*, i32)*, void (i32, i8*, i32)*, void (%struct.CPUX86State*)* }
%struct.mem = type { i8 (i64)*, void (i64, i8)*, void (i64, i8*, i32)*, void (i64, i8*, i32)*, void (i64, i8*, i64)*, void (i64, i8*, i64)*, void (i64, i8*, i64)*, i64 (i32)*, i32 (i64)*, i32 (i64, i32)*, i32 (i64, i32)*, i64 (i64)*, i8 (i8*, i64)*, i16 
%struct.expr = type { i8* ()*, void (i8*)*, void ()*, i8* (i8*, i8*, i64)*, i64 (i8*)*, void (i8*, i64)*, void (i8*, i32, i32)*, i8* (i8*, i32, i32)*, i8* (i8*, i64)*, i8* (i8*, i64)* }
%struct.libcpu = type { i32 (%struct.CPUX86State*, i64)*, i32 (%struct.CPUX86State*, i64)* }
%struct.events = type { i32*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, void (i32, i32)*, void (i64, i64)*, void (i64, i32, i8*)*, void (i64, i32, i8*)*, void (i64, i64, i32, i32, i64)*, v
%struct.special_instruction_data_t = type { %union.MMXReg }
%struct.anon = type { void (i8*, ...)* }
%struct.anon.3 = type { i32 (i8*)* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.MemoryDescOps = type { i64 (i64, i32)*, void (i64, i64, i32)* }

@env = local_unnamed_addr global %struct.CPUX86State* null, align 8
@g_sqi = external local_unnamed_addr global %struct.se_libcpu_interface_t, align 8
@loglevel = external local_unnamed_addr global i32, align 4
@se_do_interrupt_all.count = internal unnamed_addr global i32 0, align 4
@logfile = external local_unnamed_addr global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [71 x i8] c"%6d: v=%02x e=%04x i=%d cpl=%d IP=%04x:%016lx pc=%016lx SP=%04x:%016lx\00", align 1
@.str.1 = private unnamed_addr constant [12 x i8] c" CR2=%016lx\00", align 1
@.str.2 = private unnamed_addr constant [12 x i8] c" EAX=%016lx\00", align 1
@.str.4 = private unnamed_addr constant [12 x i8] c"SMM: enter\0A\00", align 1
@parity_table = external local_unnamed_addr constant [256 x i8], align 16
@fcom_ccval = internal unnamed_addr constant [4 x i32] [i32 256, i32 16384, i32 0, i32 17664], align 16
@.str.6 = private unnamed_addr constant [15 x i8] c"vmrun! %016lx\0A\00", align 1
@.str.7 = private unnamed_addr constant [18 x i8] c"Injecting(%#hx): \00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"INTR\00", align 1
@.str.9 = private unnamed_addr constant [4 x i8] c"NMI\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"EXEPT\00", align 1
@.str.11 = private unnamed_addr constant [5 x i8] c"SOFT\00", align 1
@.str.12 = private unnamed_addr constant [10 x i8] c" %#x %#x\0A\00", align 1
@.str.13 = private unnamed_addr constant [36 x i8] c"vmload! %016lx\0AFS: %016lx | %016lx\0A\00", align 1
@.str.14 = private unnamed_addr constant [36 x i8] c"vmsave! %016lx\0AFS: %016lx | %016lx\0A\00", align 1
@.str.15 = private unnamed_addr constant [39 x i8] c"vmexit(%08x, %016lx, %016lx, %016lx)!\0A\00", align 1
@comis_eflags = internal unnamed_addr constant [4 x i32] [i32 1, i32 64, i32 0, i32 69], align 16
@rclb_table = external local_unnamed_addr constant [32 x i8], align 16
@rclw_table = external local_unnamed_addr constant [32 x i8], align 16
@.str.16 = private unnamed_addr constant [12 x i8] c"invalid tss\00", align 1
@.str.17 = private unnamed_addr constant [36 x i8] c"check_exception old: 0x%x new 0x%x\0A\00", align 1
@.str.18 = private unnamed_addr constant [14 x i8] c"Triple fault\0A\00", align 1
@.str.19 = private unnamed_addr constant [23 x i8] c"0 && \22Not implemented\22\00", align 1
@.str.20 = private unnamed_addr constant [69 x i8] c"/home/phli/s2e-env/s2e/source/s2e/libcpu/src/target-i386/op_helper.c\00", align 1
@__PRETTY_FUNCTION__.cpu_smm_update = private unnamed_addr constant [35 x i8] c"void cpu_smm_update(CPUX86State *)\00", align 1
@.str.21 = private unnamed_addr constant [16 x i8] c"Not implemented\00", align 1
@float16_default_nan = local_unnamed_addr constant i16 -512, align 2
@float32_default_nan = local_unnamed_addr constant i32 -4194304, align 4
@float64_default_nan = local_unnamed_addr constant i64 -2251799813685248, align 8
@floatx80_default_nan = local_unnamed_addr constant %struct.floatx80 { i64 -4611686018427387904, i16 -1 }, align 8
@float128_default_nan = local_unnamed_addr constant %struct.MTRRVar { i64 0, i64 -140737488355328 }, align 8
@float32_exp2_coefficients = internal unnamed_addr constant [15 x i64] [i64 4607182418800017408, i64 4602678819172646912, i64 4595172819793696085, i64 4586165620538955093, i64 4575957461383581969, i64 4564047942368979991, i64 4551452160554016794, i64 453
@estimateSqrt32.sqrtOddAdjustments = internal unnamed_addr constant [16 x i16] [i16 4, i16 34, i16 93, i16 177, i16 285, i16 415, i16 566, i16 736, i16 924, i16 1128, i16 1349, i16 1585, i16 1835, i16 2098, i16 2374, i16 2663], align 16
@estimateSqrt32.sqrtEvenAdjustments = internal unnamed_addr constant [16 x i16] [i16 2605, i16 2223, i16 1882, i16 1577, i16 1306, i16 1065, i16 854, i16 670, i16 512, i16 377, i16 265, i16 175, i16 104, i16 52, i16 18, i16 2], align 16

; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn
define i32 @compute_eflags() local_unnamed_addr #0 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 20
  %3 = load i64, i64* %2, align 8
  %4 = trunc i64 %3 to i32
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 1
  %6 = load i64, i64* %5, align 16
  %7 = trunc i64 %6 to i32
  %8 = tail call i32 @helper_cc_compute_all(i32 noundef %7)
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 19
  %10 = load i32, i32* %9, align 16
  %11 = and i32 %10, 1024
  %12 = or i32 %8, %4
  %13 = or i32 %12, %11
  %14 = or i32 %13, 2
  ret i32 %14
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn
define i32 @helper_cc_compute_all(i32 noundef %0) local_unnamed_addr #0 {
  switch i32 %0, label %1135 [
    i32 1, label %2
    i32 2, label %7
    i32 3, label %28
    i32 4, label %51
    i32 6, label %73
    i32 7, label %108
    i32 8, label %144
    i32 10, label %178
    i32 11, label %214
    i32 12, label %251
    i32 14, label %286
    i32 15, label %321
    i32 16, label %358
    i32 18, label %392
    i32 19, label %428
    i32 20, label %466
    i32 22, label %501
    i32 23, label %515
    i32 24, label %531
    i32 26, label %546
    i32 27, label %572
    i32 28, label %600
    i32 30, label %628
    i32 31, label %654
    i32 32, label %682
    i32 34, label %710
    i32 35, label %735
    i32 36, label %762
    i32 38, label %787
    i32 39, label %811
    i32 40, label %837
    i32 5, label %862
    i32 9, label %884
    i32 13, label %917
    i32 17, label %951
    i32 21, label %983
    i32 25, label %1016
    i32 29, label %1031
    i32 33, label %1058
    i32 37, label %1085
    i32 41, label %1110
  ]

2:                                                ; preds = %1
  %3 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %4 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 2
  %5 = load i64, i64* %4, align 8
  %6 = trunc i64 %5 to i32
  br label %1135

7:                                                ; preds = %1
  %8 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %8, i64 0, i32 2
  %10 = load i64, i64* %9, align 8
  %11 = icmp ne i64 %10, 0
  %12 = zext i1 %11 to i32
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %8, i64 0, i32 3
  %14 = load i64, i64* %13, align 16
  %15 = and i64 %14, 255
  %16 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %15
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = icmp eq i64 %15, 0
  %20 = select i1 %19, i32 64, i32 0
  %21 = trunc i64 %14 to i32
  %22 = and i32 %21, 128
  %23 = select i1 %11, i32 2048, i32 0
  %24 = or i32 %23, %12
  %25 = or i32 %24, %18
  %26 = or i32 %25, %22
  %27 = or i32 %26, %20
  br label %1135

28:                                               ; preds = %1
  %29 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %30 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %29, i64 0, i32 2
  %31 = load i64, i64* %30, align 8
  %32 = icmp ne i64 %31, 0
  %33 = zext i1 %32 to i32
  %34 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %29, i64 0, i32 3
  %35 = load i64, i64* %34, align 16
  %36 = and i64 %35, 255
  %37 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %36
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i32
  %40 = and i64 %35, 65535
  %41 = icmp eq i64 %40, 0
  %42 = select i1 %41, i32 64, i32 0
  %43 = trunc i64 %35 to i32
  %44 = lshr i32 %43, 8
  %45 = and i32 %44, 128
  %46 = select i1 %32, i32 2048, i32 0
  %47 = or i32 %46, %33
  %48 = or i32 %47, %39
  %49 = or i32 %48, %42
  %50 = or i32 %49, %45
  br label %1135

51:                                               ; preds = %1
  %52 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %53 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %52, i64 0, i32 2
  %54 = load i64, i64* %53, align 8
  %55 = icmp ne i64 %54, 0
  %56 = zext i1 %55 to i32
  %57 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %52, i64 0, i32 3
  %58 = load i64, i64* %57, align 16
  %59 = and i64 %58, 255
  %60 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %59
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i32
  %63 = trunc i64 %58 to i32
  %64 = icmp eq i32 %63, 0
  %65 = select i1 %64, i32 64, i32 0
  %66 = lshr i32 %63, 24
  %67 = and i32 %66, 128
  %68 = select i1 %55, i32 2048, i32 0
  %69 = or i32 %68, %56
  %70 = or i32 %69, %62
  %71 = or i32 %70, %65
  %72 = or i32 %71, %67
  br label %1135

73:                                               ; preds = %1
  %74 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %75 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %74, i64 0, i32 2
  %76 = load i64, i64* %75, align 8
  %77 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %74, i64 0, i32 3
  %78 = load i64, i64* %77, align 16
  %79 = sub i64 %78, %76
  %80 = trunc i64 %78 to i32
  %81 = and i32 %80, 255
  %82 = trunc i64 %76 to i32
  %83 = and i32 %82, 255
  %84 = icmp ult i32 %81, %83
  %85 = zext i1 %84 to i32
  %86 = and i64 %78, 255
  %87 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %86
  %88 = load i8, i8* %87, align 1
  %89 = zext i8 %88 to i32
  %90 = xor i64 %78, %76
  %91 = xor i64 %90, %79
  %92 = trunc i64 %91 to i32
  %93 = and i32 %92, 16
  %94 = icmp eq i32 %81, 0
  %95 = select i1 %94, i32 64, i32 0
  %96 = and i32 %80, 128
  %97 = xor i64 %76, %79
  %98 = xor i64 %97, -1
  %99 = and i64 %90, %98
  %100 = trunc i64 %99 to i32
  %101 = shl i32 %100, 4
  %102 = and i32 %101, 2048
  %103 = or i32 %96, %89
  %104 = or i32 %103, %85
  %105 = or i32 %104, %93
  %106 = or i32 %105, %95
  %107 = or i32 %106, %102
  br label %1135

108:                                              ; preds = %1
  %109 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %110 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %109, i64 0, i32 2
  %111 = load i64, i64* %110, align 8
  %112 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %109, i64 0, i32 3
  %113 = load i64, i64* %112, align 16
  %114 = sub i64 %113, %111
  %115 = trunc i64 %113 to i32
  %116 = and i32 %115, 65535
  %117 = trunc i64 %111 to i32
  %118 = and i32 %117, 65535
  %119 = icmp ult i32 %116, %118
  %120 = zext i1 %119 to i32
  %121 = and i64 %113, 255
  %122 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %121
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i32
  %125 = xor i64 %113, %111
  %126 = xor i64 %125, %114
  %127 = trunc i64 %126 to i32
  %128 = and i32 %127, 16
  %129 = icmp eq i32 %116, 0
  %130 = select i1 %129, i32 64, i32 0
  %131 = lshr i32 %115, 8
  %132 = and i32 %131, 128
  %133 = xor i64 %111, %114
  %134 = xor i64 %133, -1
  %135 = and i64 %125, %134
  %136 = trunc i64 %135 to i32
  %137 = lshr i32 %136, 4
  %138 = and i32 %137, 2048
  %139 = or i32 %132, %124
  %140 = or i32 %139, %120
  %141 = or i32 %140, %128
  %142 = or i32 %141, %130
  %143 = or i32 %142, %138
  br label %1135

144:                                              ; preds = %1
  %145 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %146 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %145, i64 0, i32 2
  %147 = load i64, i64* %146, align 8
  %148 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %145, i64 0, i32 3
  %149 = load i64, i64* %148, align 16
  %150 = sub i64 %149, %147
  %151 = trunc i64 %149 to i32
  %152 = trunc i64 %147 to i32
  %153 = icmp ult i32 %151, %152
  %154 = zext i1 %153 to i32
  %155 = and i64 %149, 255
  %156 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %155
  %157 = load i8, i8* %156, align 1
  %158 = zext i8 %157 to i32
  %159 = xor i64 %149, %147
  %160 = xor i64 %159, %150
  %161 = trunc i64 %160 to i32
  %162 = and i32 %161, 16
  %163 = icmp eq i32 %151, 0
  %164 = select i1 %163, i32 64, i32 0
  %165 = lshr i32 %151, 24
  %166 = and i32 %165, 128
  %167 = xor i64 %147, %150
  %168 = xor i64 %167, -1
  %169 = and i64 %159, %168
  %170 = trunc i64 %169 to i32
  %171 = lshr i32 %170, 20
  %172 = and i32 %171, 2048
  %173 = or i32 %154, %158
  %174 = or i32 %173, %164
  %175 = or i32 %174, %166
  %176 = or i32 %175, %162
  %177 = or i32 %176, %172
  br label %1135

178:                                              ; preds = %1
  %179 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %180 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %179, i64 0, i32 2
  %181 = load i64, i64* %180, align 8
  %182 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %179, i64 0, i32 3
  %183 = load i64, i64* %182, align 16
  %184 = xor i64 %181, -1
  %185 = add i64 %183, %184
  %186 = trunc i64 %183 to i32
  %187 = and i32 %186, 255
  %188 = trunc i64 %181 to i32
  %189 = and i32 %188, 255
  %190 = icmp ule i32 %187, %189
  %191 = zext i1 %190 to i32
  %192 = and i64 %183, 255
  %193 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %192
  %194 = load i8, i8* %193, align 1
  %195 = zext i8 %194 to i32
  %196 = xor i64 %183, %181
  %197 = xor i64 %196, %185
  %198 = trunc i64 %197 to i32
  %199 = and i32 %198, 16
  %200 = icmp eq i32 %187, 0
  %201 = select i1 %200, i32 64, i32 0
  %202 = and i32 %186, 128
  %203 = xor i64 %181, %185
  %204 = xor i64 %203, -1
  %205 = and i64 %196, %204
  %206 = trunc i64 %205 to i32
  %207 = shl i32 %206, 4
  %208 = and i32 %207, 2048
  %209 = or i32 %202, %195
  %210 = or i32 %209, %191
  %211 = or i32 %210, %199
  %212 = or i32 %211, %201
  %213 = or i32 %212, %208
  br label %1135

214:                                              ; preds = %1
  %215 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %216 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %215, i64 0, i32 2
  %217 = load i64, i64* %216, align 8
  %218 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %215, i64 0, i32 3
  %219 = load i64, i64* %218, align 16
  %220 = xor i64 %217, -1
  %221 = add i64 %219, %220
  %222 = trunc i64 %219 to i32
  %223 = and i32 %222, 65535
  %224 = trunc i64 %217 to i32
  %225 = and i32 %224, 65535
  %226 = icmp ule i32 %223, %225
  %227 = zext i1 %226 to i32
  %228 = and i64 %219, 255
  %229 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %228
  %230 = load i8, i8* %229, align 1
  %231 = zext i8 %230 to i32
  %232 = xor i64 %219, %217
  %233 = xor i64 %232, %221
  %234 = trunc i64 %233 to i32
  %235 = and i32 %234, 16
  %236 = icmp eq i32 %223, 0
  %237 = select i1 %236, i32 64, i32 0
  %238 = lshr i32 %222, 8
  %239 = and i32 %238, 128
  %240 = xor i64 %217, %221
  %241 = xor i64 %240, -1
  %242 = and i64 %232, %241
  %243 = trunc i64 %242 to i32
  %244 = lshr i32 %243, 4
  %245 = and i32 %244, 2048
  %246 = or i32 %239, %231
  %247 = or i32 %246, %227
  %248 = or i32 %247, %235
  %249 = or i32 %248, %237
  %250 = or i32 %249, %245
  br label %1135

251:                                              ; preds = %1
  %252 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %253 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %252, i64 0, i32 2
  %254 = load i64, i64* %253, align 8
  %255 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %252, i64 0, i32 3
  %256 = load i64, i64* %255, align 16
  %257 = xor i64 %254, -1
  %258 = add i64 %256, %257
  %259 = trunc i64 %256 to i32
  %260 = trunc i64 %254 to i32
  %261 = icmp ule i32 %259, %260
  %262 = zext i1 %261 to i32
  %263 = and i64 %256, 255
  %264 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %263
  %265 = load i8, i8* %264, align 1
  %266 = zext i8 %265 to i32
  %267 = xor i64 %256, %254
  %268 = xor i64 %267, %258
  %269 = trunc i64 %268 to i32
  %270 = and i32 %269, 16
  %271 = icmp eq i32 %259, 0
  %272 = select i1 %271, i32 64, i32 0
  %273 = lshr i32 %259, 24
  %274 = and i32 %273, 128
  %275 = xor i64 %254, %258
  %276 = xor i64 %275, -1
  %277 = and i64 %267, %276
  %278 = trunc i64 %277 to i32
  %279 = lshr i32 %278, 20
  %280 = and i32 %279, 2048
  %281 = or i32 %262, %266
  %282 = or i32 %281, %272
  %283 = or i32 %282, %274
  %284 = or i32 %283, %270
  %285 = or i32 %284, %280
  br label %1135

286:                                              ; preds = %1
  %287 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %288 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %287, i64 0, i32 3
  %289 = load i64, i64* %288, align 16
  %290 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %287, i64 0, i32 2
  %291 = load i64, i64* %290, align 8
  %292 = add i64 %291, %289
  %293 = trunc i64 %292 to i32
  %294 = and i32 %293, 255
  %295 = trunc i64 %291 to i32
  %296 = and i32 %295, 255
  %297 = icmp ult i32 %294, %296
  %298 = zext i1 %297 to i32
  %299 = and i64 %289, 255
  %300 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %299
  %301 = load i8, i8* %300, align 1
  %302 = zext i8 %301 to i32
  %303 = xor i64 %292, %289
  %304 = xor i64 %303, %291
  %305 = trunc i64 %304 to i32
  %306 = and i32 %305, 16
  %307 = icmp eq i64 %299, 0
  %308 = select i1 %307, i32 64, i32 0
  %309 = trunc i64 %289 to i32
  %310 = and i32 %309, 128
  %311 = xor i64 %292, %291
  %312 = and i64 %311, %303
  %313 = trunc i64 %312 to i32
  %314 = shl i32 %313, 4
  %315 = and i32 %314, 2048
  %316 = or i32 %310, %302
  %317 = or i32 %316, %308
  %318 = or i32 %317, %298
  %319 = or i32 %318, %306
  %320 = or i32 %319, %315
  br label %1135

321:                                              ; preds = %1
  %322 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %323 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %322, i64 0, i32 3
  %324 = load i64, i64* %323, align 16
  %325 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %322, i64 0, i32 2
  %326 = load i64, i64* %325, align 8
  %327 = add i64 %326, %324
  %328 = trunc i64 %327 to i32
  %329 = and i32 %328, 65535
  %330 = trunc i64 %326 to i32
  %331 = and i32 %330, 65535
  %332 = icmp ult i32 %329, %331
  %333 = zext i1 %332 to i32
  %334 = and i64 %324, 255
  %335 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %334
  %336 = load i8, i8* %335, align 1
  %337 = zext i8 %336 to i32
  %338 = xor i64 %327, %324
  %339 = xor i64 %338, %326
  %340 = trunc i64 %339 to i32
  %341 = and i32 %340, 16
  %342 = and i64 %324, 65535
  %343 = icmp eq i64 %342, 0
  %344 = select i1 %343, i32 64, i32 0
  %345 = trunc i64 %324 to i32
  %346 = lshr i32 %345, 8
  %347 = and i32 %346, 128
  %348 = xor i64 %327, %326
  %349 = and i64 %348, %338
  %350 = trunc i64 %349 to i32
  %351 = lshr i32 %350, 4
  %352 = and i32 %351, 2048
  %353 = or i32 %344, %337
  %354 = or i32 %353, %347
  %355 = or i32 %354, %333
  %356 = or i32 %355, %341
  %357 = or i32 %356, %352
  br label %1135

358:                                              ; preds = %1
  %359 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %360 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %359, i64 0, i32 3
  %361 = load i64, i64* %360, align 16
  %362 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %359, i64 0, i32 2
  %363 = load i64, i64* %362, align 8
  %364 = add i64 %363, %361
  %365 = trunc i64 %364 to i32
  %366 = trunc i64 %363 to i32
  %367 = icmp ult i32 %365, %366
  %368 = zext i1 %367 to i32
  %369 = and i64 %361, 255
  %370 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %369
  %371 = load i8, i8* %370, align 1
  %372 = zext i8 %371 to i32
  %373 = xor i64 %364, %361
  %374 = xor i64 %373, %363
  %375 = trunc i64 %374 to i32
  %376 = and i32 %375, 16
  %377 = trunc i64 %361 to i32
  %378 = icmp eq i32 %377, 0
  %379 = select i1 %378, i32 64, i32 0
  %380 = lshr i32 %377, 24
  %381 = and i32 %380, 128
  %382 = xor i64 %364, %363
  %383 = and i64 %382, %373
  %384 = trunc i64 %383 to i32
  %385 = lshr i32 %384, 20
  %386 = and i32 %385, 2048
  %387 = or i32 %379, %372
  %388 = or i32 %387, %381
  %389 = or i32 %388, %368
  %390 = or i32 %389, %376
  %391 = or i32 %390, %386
  br label %1135

392:                                              ; preds = %1
  %393 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %394 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %393, i64 0, i32 3
  %395 = load i64, i64* %394, align 16
  %396 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %393, i64 0, i32 2
  %397 = load i64, i64* %396, align 8
  %398 = add i64 %395, 1
  %399 = add i64 %398, %397
  %400 = trunc i64 %399 to i32
  %401 = and i32 %400, 255
  %402 = trunc i64 %397 to i32
  %403 = and i32 %402, 255
  %404 = icmp ule i32 %401, %403
  %405 = zext i1 %404 to i32
  %406 = and i64 %395, 255
  %407 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %406
  %408 = load i8, i8* %407, align 1
  %409 = zext i8 %408 to i32
  %410 = xor i64 %399, %395
  %411 = xor i64 %410, %397
  %412 = trunc i64 %411 to i32
  %413 = and i32 %412, 16
  %414 = icmp eq i64 %406, 0
  %415 = select i1 %414, i32 64, i32 0
  %416 = trunc i64 %395 to i32
  %417 = and i32 %416, 128
  %418 = xor i64 %399, %397
  %419 = and i64 %418, %410
  %420 = trunc i64 %419 to i32
  %421 = shl i32 %420, 4
  %422 = and i32 %421, 2048
  %423 = or i32 %417, %409
  %424 = or i32 %423, %415
  %425 = or i32 %424, %405
  %426 = or i32 %425, %413
  %427 = or i32 %426, %422
  br label %1135

428:                                              ; preds = %1
  %429 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %430 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %429, i64 0, i32 3
  %431 = load i64, i64* %430, align 16
  %432 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %429, i64 0, i32 2
  %433 = load i64, i64* %432, align 8
  %434 = add i64 %431, 1
  %435 = add i64 %434, %433
  %436 = trunc i64 %435 to i32
  %437 = and i32 %436, 65535
  %438 = trunc i64 %433 to i32
  %439 = and i32 %438, 65535
  %440 = icmp ule i32 %437, %439
  %441 = zext i1 %440 to i32
  %442 = and i64 %431, 255
  %443 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %442
  %444 = load i8, i8* %443, align 1
  %445 = zext i8 %444 to i32
  %446 = xor i64 %435, %431
  %447 = xor i64 %446, %433
  %448 = trunc i64 %447 to i32
  %449 = and i32 %448, 16
  %450 = and i64 %431, 65535
  %451 = icmp eq i64 %450, 0
  %452 = select i1 %451, i32 64, i32 0
  %453 = trunc i64 %431 to i32
  %454 = lshr i32 %453, 8
  %455 = and i32 %454, 128
  %456 = xor i64 %435, %433
  %457 = and i64 %456, %446
  %458 = trunc i64 %457 to i32
  %459 = lshr i32 %458, 4
  %460 = and i32 %459, 2048
  %461 = or i32 %452, %445
  %462 = or i32 %461, %455
  %463 = or i32 %462, %441
  %464 = or i32 %463, %449
  %465 = or i32 %464, %460
  br label %1135

466:                                              ; preds = %1
  %467 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %468 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %467, i64 0, i32 3
  %469 = load i64, i64* %468, align 16
  %470 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %467, i64 0, i32 2
  %471 = load i64, i64* %470, align 8
  %472 = add i64 %469, 1
  %473 = add i64 %472, %471
  %474 = trunc i64 %473 to i32
  %475 = trunc i64 %471 to i32
  %476 = icmp ule i32 %474, %475
  %477 = zext i1 %476 to i32
  %478 = and i64 %469, 255
  %479 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %478
  %480 = load i8, i8* %479, align 1
  %481 = zext i8 %480 to i32
  %482 = xor i64 %473, %469
  %483 = xor i64 %482, %471
  %484 = trunc i64 %483 to i32
  %485 = and i32 %484, 16
  %486 = trunc i64 %469 to i32
  %487 = icmp eq i32 %486, 0
  %488 = select i1 %487, i32 64, i32 0
  %489 = lshr i32 %486, 24
  %490 = and i32 %489, 128
  %491 = xor i64 %473, %471
  %492 = and i64 %491, %482
  %493 = trunc i64 %492 to i32
  %494 = lshr i32 %493, 20
  %495 = and i32 %494, 2048
  %496 = or i32 %488, %481
  %497 = or i32 %496, %490
  %498 = or i32 %497, %477
  %499 = or i32 %498, %485
  %500 = or i32 %499, %495
  br label %1135

501:                                              ; preds = %1
  %502 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %503 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %502, i64 0, i32 3
  %504 = load i64, i64* %503, align 16
  %505 = and i64 %504, 255
  %506 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %505
  %507 = load i8, i8* %506, align 1
  %508 = zext i8 %507 to i32
  %509 = icmp eq i64 %505, 0
  %510 = select i1 %509, i32 64, i32 0
  %511 = trunc i64 %504 to i32
  %512 = and i32 %511, 128
  %513 = or i32 %512, %508
  %514 = or i32 %513, %510
  br label %1135

515:                                              ; preds = %1
  %516 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %517 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %516, i64 0, i32 3
  %518 = load i64, i64* %517, align 16
  %519 = and i64 %518, 255
  %520 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %519
  %521 = load i8, i8* %520, align 1
  %522 = zext i8 %521 to i32
  %523 = and i64 %518, 65535
  %524 = icmp eq i64 %523, 0
  %525 = select i1 %524, i32 64, i32 0
  %526 = trunc i64 %518 to i32
  %527 = lshr i32 %526, 8
  %528 = and i32 %527, 128
  %529 = or i32 %525, %522
  %530 = or i32 %529, %528
  br label %1135

531:                                              ; preds = %1
  %532 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %533 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %532, i64 0, i32 3
  %534 = load i64, i64* %533, align 16
  %535 = and i64 %534, 255
  %536 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %535
  %537 = load i8, i8* %536, align 1
  %538 = zext i8 %537 to i32
  %539 = trunc i64 %534 to i32
  %540 = icmp eq i32 %539, 0
  %541 = select i1 %540, i32 64, i32 0
  %542 = lshr i32 %539, 24
  %543 = and i32 %542, 128
  %544 = or i32 %541, %538
  %545 = or i32 %544, %543
  br label %1135

546:                                              ; preds = %1
  %547 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %548 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %547, i64 0, i32 3
  %549 = load i64, i64* %548, align 16
  %550 = add i64 %549, 31
  %551 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %547, i64 0, i32 2
  %552 = load i64, i64* %551, align 8
  %553 = trunc i64 %552 to i32
  %554 = and i64 %549, 255
  %555 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %554
  %556 = load i8, i8* %555, align 1
  %557 = zext i8 %556 to i32
  %558 = xor i64 %550, %549
  %559 = trunc i64 %558 to i32
  %560 = and i32 %559, 16
  %561 = icmp eq i64 %554, 0
  %562 = select i1 %561, i32 64, i32 0
  %563 = trunc i64 %549 to i32
  %564 = and i32 %563, 128
  %565 = icmp eq i64 %554, 128
  %566 = select i1 %565, i32 2048, i32 0
  %567 = or i32 %564, %553
  %568 = or i32 %567, %557
  %569 = or i32 %568, %562
  %570 = or i32 %569, %566
  %571 = or i32 %570, %560
  br label %1135

572:                                              ; preds = %1
  %573 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %574 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %573, i64 0, i32 3
  %575 = load i64, i64* %574, align 16
  %576 = add i64 %575, 31
  %577 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %573, i64 0, i32 2
  %578 = load i64, i64* %577, align 8
  %579 = trunc i64 %578 to i32
  %580 = and i64 %575, 255
  %581 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %580
  %582 = load i8, i8* %581, align 1
  %583 = zext i8 %582 to i32
  %584 = xor i64 %576, %575
  %585 = trunc i64 %584 to i32
  %586 = and i32 %585, 16
  %587 = and i64 %575, 65535
  %588 = icmp eq i64 %587, 0
  %589 = select i1 %588, i32 64, i32 0
  %590 = trunc i64 %575 to i32
  %591 = lshr i32 %590, 8
  %592 = and i32 %591, 128
  %593 = icmp eq i64 %587, 32768
  %594 = select i1 %593, i32 2048, i32 0
  %595 = or i32 %583, %579
  %596 = or i32 %595, %589
  %597 = or i32 %596, %592
  %598 = or i32 %597, %594
  %599 = or i32 %598, %586
  br label %1135

600:                                              ; preds = %1
  %601 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %602 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %601, i64 0, i32 3
  %603 = load i64, i64* %602, align 16
  %604 = add i64 %603, 31
  %605 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %601, i64 0, i32 2
  %606 = load i64, i64* %605, align 8
  %607 = trunc i64 %606 to i32
  %608 = and i64 %603, 255
  %609 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %608
  %610 = load i8, i8* %609, align 1
  %611 = zext i8 %610 to i32
  %612 = xor i64 %604, %603
  %613 = trunc i64 %612 to i32
  %614 = and i32 %613, 16
  %615 = trunc i64 %603 to i32
  %616 = icmp eq i32 %615, 0
  %617 = select i1 %616, i32 64, i32 0
  %618 = lshr i32 %615, 24
  %619 = and i32 %618, 128
  %620 = and i64 %603, 4294967295
  %621 = icmp eq i64 %620, 2147483648
  %622 = select i1 %621, i32 2048, i32 0
  %623 = or i32 %611, %607
  %624 = or i32 %623, %617
  %625 = or i32 %624, %619
  %626 = or i32 %625, %622
  %627 = or i32 %626, %614
  br label %1135

628:                                              ; preds = %1
  %629 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %630 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %629, i64 0, i32 3
  %631 = load i64, i64* %630, align 16
  %632 = add i64 %631, 1
  %633 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %629, i64 0, i32 2
  %634 = load i64, i64* %633, align 8
  %635 = trunc i64 %634 to i32
  %636 = and i64 %631, 255
  %637 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %636
  %638 = load i8, i8* %637, align 1
  %639 = zext i8 %638 to i32
  %640 = xor i64 %632, %631
  %641 = trunc i64 %640 to i32
  %642 = and i32 %641, 16
  %643 = icmp eq i64 %636, 0
  %644 = select i1 %643, i32 64, i32 0
  %645 = trunc i64 %631 to i32
  %646 = and i32 %645, 128
  %647 = icmp eq i64 %636, 127
  %648 = select i1 %647, i32 2048, i32 0
  %649 = or i32 %646, %635
  %650 = or i32 %649, %639
  %651 = or i32 %650, %644
  %652 = or i32 %651, %648
  %653 = or i32 %652, %642
  br label %1135

654:                                              ; preds = %1
  %655 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %656 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %655, i64 0, i32 3
  %657 = load i64, i64* %656, align 16
  %658 = add i64 %657, 1
  %659 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %655, i64 0, i32 2
  %660 = load i64, i64* %659, align 8
  %661 = trunc i64 %660 to i32
  %662 = and i64 %657, 255
  %663 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %662
  %664 = load i8, i8* %663, align 1
  %665 = zext i8 %664 to i32
  %666 = xor i64 %658, %657
  %667 = trunc i64 %666 to i32
  %668 = and i32 %667, 16
  %669 = and i64 %657, 65535
  %670 = icmp eq i64 %669, 0
  %671 = select i1 %670, i32 64, i32 0
  %672 = trunc i64 %657 to i32
  %673 = lshr i32 %672, 8
  %674 = and i32 %673, 128
  %675 = icmp eq i64 %669, 32767
  %676 = select i1 %675, i32 2048, i32 0
  %677 = or i32 %665, %661
  %678 = or i32 %677, %671
  %679 = or i32 %678, %674
  %680 = or i32 %679, %676
  %681 = or i32 %680, %668
  br label %1135

682:                                              ; preds = %1
  %683 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %684 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %683, i64 0, i32 3
  %685 = load i64, i64* %684, align 16
  %686 = add i64 %685, 1
  %687 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %683, i64 0, i32 2
  %688 = load i64, i64* %687, align 8
  %689 = trunc i64 %688 to i32
  %690 = and i64 %685, 255
  %691 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %690
  %692 = load i8, i8* %691, align 1
  %693 = zext i8 %692 to i32
  %694 = xor i64 %686, %685
  %695 = trunc i64 %694 to i32
  %696 = and i32 %695, 16
  %697 = trunc i64 %685 to i32
  %698 = icmp eq i32 %697, 0
  %699 = select i1 %698, i32 64, i32 0
  %700 = lshr i32 %697, 24
  %701 = and i32 %700, 128
  %702 = and i64 %685, 4294967295
  %703 = icmp eq i64 %702, 2147483647
  %704 = select i1 %703, i32 2048, i32 0
  %705 = or i32 %693, %689
  %706 = or i32 %705, %699
  %707 = or i32 %706, %701
  %708 = or i32 %707, %704
  %709 = or i32 %708, %696
  br label %1135

710:                                              ; preds = %1
  %711 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %712 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %711, i64 0, i32 2
  %713 = load i64, i64* %712, align 8
  %714 = trunc i64 %713 to i32
  %715 = lshr i32 %714, 7
  %716 = and i32 %715, 1
  %717 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %711, i64 0, i32 3
  %718 = load i64, i64* %717, align 16
  %719 = and i64 %718, 255
  %720 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %719
  %721 = load i8, i8* %720, align 1
  %722 = zext i8 %721 to i32
  %723 = icmp eq i64 %719, 0
  %724 = select i1 %723, i32 64, i32 0
  %725 = trunc i64 %718 to i32
  %726 = and i32 %725, 128
  %727 = xor i64 %718, %713
  %728 = trunc i64 %727 to i32
  %729 = shl i32 %728, 4
  %730 = and i32 %729, 2048
  %731 = or i32 %716, %722
  %732 = or i32 %731, %726
  %733 = or i32 %732, %724
  %734 = or i32 %733, %730
  br label %1135

735:                                              ; preds = %1
  %736 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %737 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %736, i64 0, i32 2
  %738 = load i64, i64* %737, align 8
  %739 = trunc i64 %738 to i32
  %740 = lshr i32 %739, 15
  %741 = and i32 %740, 1
  %742 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %736, i64 0, i32 3
  %743 = load i64, i64* %742, align 16
  %744 = and i64 %743, 255
  %745 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %744
  %746 = load i8, i8* %745, align 1
  %747 = zext i8 %746 to i32
  %748 = and i64 %743, 65535
  %749 = icmp eq i64 %748, 0
  %750 = select i1 %749, i32 64, i32 0
  %751 = trunc i64 %743 to i32
  %752 = lshr i32 %751, 8
  %753 = and i32 %752, 128
  %754 = xor i64 %743, %738
  %755 = trunc i64 %754 to i32
  %756 = lshr i32 %755, 4
  %757 = and i32 %756, 2048
  %758 = or i32 %741, %747
  %759 = or i32 %758, %750
  %760 = or i32 %759, %753
  %761 = or i32 %760, %757
  br label %1135

762:                                              ; preds = %1
  %763 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %764 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %763, i64 0, i32 2
  %765 = load i64, i64* %764, align 8
  %766 = trunc i64 %765 to i32
  %767 = lshr i32 %766, 31
  %768 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %763, i64 0, i32 3
  %769 = load i64, i64* %768, align 16
  %770 = and i64 %769, 255
  %771 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %770
  %772 = load i8, i8* %771, align 1
  %773 = zext i8 %772 to i32
  %774 = trunc i64 %769 to i32
  %775 = icmp eq i32 %774, 0
  %776 = select i1 %775, i32 64, i32 0
  %777 = lshr i32 %774, 24
  %778 = and i32 %777, 128
  %779 = xor i64 %769, %765
  %780 = trunc i64 %779 to i32
  %781 = lshr i32 %780, 20
  %782 = and i32 %781, 2048
  %783 = or i32 %767, %773
  %784 = or i32 %783, %776
  %785 = or i32 %784, %778
  %786 = or i32 %785, %782
  br label %1135

787:                                              ; preds = %1
  %788 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %789 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %788, i64 0, i32 2
  %790 = load i64, i64* %789, align 8
  %791 = trunc i64 %790 to i32
  %792 = and i32 %791, 1
  %793 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %788, i64 0, i32 3
  %794 = load i64, i64* %793, align 16
  %795 = and i64 %794, 255
  %796 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %795
  %797 = load i8, i8* %796, align 1
  %798 = zext i8 %797 to i32
  %799 = icmp eq i64 %795, 0
  %800 = select i1 %799, i32 64, i32 0
  %801 = trunc i64 %794 to i32
  %802 = and i32 %801, 128
  %803 = xor i64 %794, %790
  %804 = trunc i64 %803 to i32
  %805 = shl i32 %804, 4
  %806 = and i32 %805, 2048
  %807 = or i32 %792, %798
  %808 = or i32 %807, %802
  %809 = or i32 %808, %800
  %810 = or i32 %809, %806
  br label %1135

811:                                              ; preds = %1
  %812 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %813 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %812, i64 0, i32 2
  %814 = load i64, i64* %813, align 8
  %815 = trunc i64 %814 to i32
  %816 = and i32 %815, 1
  %817 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %812, i64 0, i32 3
  %818 = load i64, i64* %817, align 16
  %819 = and i64 %818, 255
  %820 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %819
  %821 = load i8, i8* %820, align 1
  %822 = zext i8 %821 to i32
  %823 = and i64 %818, 65535
  %824 = icmp eq i64 %823, 0
  %825 = select i1 %824, i32 64, i32 0
  %826 = trunc i64 %818 to i32
  %827 = lshr i32 %826, 8
  %828 = and i32 %827, 128
  %829 = xor i64 %818, %814
  %830 = trunc i64 %829 to i32
  %831 = lshr i32 %830, 4
  %832 = and i32 %831, 2048
  %833 = or i32 %816, %822
  %834 = or i32 %833, %825
  %835 = or i32 %834, %828
  %836 = or i32 %835, %832
  br label %1135

837:                                              ; preds = %1
  %838 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %839 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %838, i64 0, i32 2
  %840 = load i64, i64* %839, align 8
  %841 = trunc i64 %840 to i32
  %842 = and i32 %841, 1
  %843 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %838, i64 0, i32 3
  %844 = load i64, i64* %843, align 16
  %845 = and i64 %844, 255
  %846 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %845
  %847 = load i8, i8* %846, align 1
  %848 = zext i8 %847 to i32
  %849 = trunc i64 %844 to i32
  %850 = icmp eq i32 %849, 0
  %851 = select i1 %850, i32 64, i32 0
  %852 = lshr i32 %849, 24
  %853 = and i32 %852, 128
  %854 = xor i64 %844, %840
  %855 = trunc i64 %854 to i32
  %856 = lshr i32 %855, 20
  %857 = and i32 %856, 2048
  %858 = or i32 %842, %848
  %859 = or i32 %858, %851
  %860 = or i32 %859, %853
  %861 = or i32 %860, %857
  br label %1135

862:                                              ; preds = %1
  %863 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %864 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %863, i64 0, i32 2
  %865 = load i64, i64* %864, align 8
  %866 = icmp ne i64 %865, 0
  %867 = zext i1 %866 to i32
  %868 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %863, i64 0, i32 3
  %869 = load i64, i64* %868, align 16
  %870 = and i64 %869, 255
  %871 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %870
  %872 = load i8, i8* %871, align 1
  %873 = zext i8 %872 to i32
  %874 = icmp eq i64 %869, 0
  %875 = select i1 %874, i32 64, i32 0
  %876 = lshr i64 %869, 56
  %877 = trunc i64 %876 to i32
  %878 = and i32 %877, 128
  %879 = select i1 %866, i32 2048, i32 0
  %880 = or i32 %879, %867
  %881 = or i32 %880, %873
  %882 = or i32 %881, %875
  %883 = or i32 %882, %878
  br label %1135

884:                                              ; preds = %1
  %885 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %886 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %885, i64 0, i32 2
  %887 = load i64, i64* %886, align 8
  %888 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %885, i64 0, i32 3
  %889 = load i64, i64* %888, align 16
  %890 = sub i64 %889, %887
  %891 = icmp ult i64 %889, %887
  %892 = zext i1 %891 to i32
  %893 = and i64 %889, 255
  %894 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %893
  %895 = load i8, i8* %894, align 1
  %896 = zext i8 %895 to i32
  %897 = xor i64 %889, %887
  %898 = xor i64 %897, %890
  %899 = trunc i64 %898 to i32
  %900 = and i32 %899, 16
  %901 = icmp eq i64 %889, 0
  %902 = select i1 %901, i32 64, i32 0
  %903 = lshr i64 %889, 56
  %904 = trunc i64 %903 to i32
  %905 = and i32 %904, 128
  %906 = xor i64 %887, %890
  %907 = xor i64 %906, -1
  %908 = and i64 %897, %907
  %909 = lshr i64 %908, 52
  %910 = trunc i64 %909 to i32
  %911 = and i32 %910, 2048
  %912 = or i32 %892, %896
  %913 = or i32 %912, %902
  %914 = or i32 %913, %905
  %915 = or i32 %914, %900
  %916 = or i32 %915, %911
  br label %1135

917:                                              ; preds = %1
  %918 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %919 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %918, i64 0, i32 2
  %920 = load i64, i64* %919, align 8
  %921 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %918, i64 0, i32 3
  %922 = load i64, i64* %921, align 16
  %923 = xor i64 %920, -1
  %924 = add i64 %922, %923
  %925 = icmp ule i64 %922, %920
  %926 = zext i1 %925 to i32
  %927 = and i64 %922, 255
  %928 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %927
  %929 = load i8, i8* %928, align 1
  %930 = zext i8 %929 to i32
  %931 = xor i64 %922, %920
  %932 = xor i64 %931, %924
  %933 = trunc i64 %932 to i32
  %934 = and i32 %933, 16
  %935 = icmp eq i64 %922, 0
  %936 = select i1 %935, i32 64, i32 0
  %937 = lshr i64 %922, 56
  %938 = trunc i64 %937 to i32
  %939 = and i32 %938, 128
  %940 = xor i64 %920, %924
  %941 = xor i64 %940, -1
  %942 = and i64 %931, %941
  %943 = lshr i64 %942, 52
  %944 = trunc i64 %943 to i32
  %945 = and i32 %944, 2048
  %946 = or i32 %926, %930
  %947 = or i32 %946, %936
  %948 = or i32 %947, %939
  %949 = or i32 %948, %934
  %950 = or i32 %949, %945
  br label %1135

951:                                              ; preds = %1
  %952 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %953 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %952, i64 0, i32 3
  %954 = load i64, i64* %953, align 16
  %955 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %952, i64 0, i32 2
  %956 = load i64, i64* %955, align 8
  %957 = add i64 %956, %954
  %958 = icmp ult i64 %957, %956
  %959 = zext i1 %958 to i32
  %960 = and i64 %954, 255
  %961 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %960
  %962 = load i8, i8* %961, align 1
  %963 = zext i8 %962 to i32
  %964 = xor i64 %957, %954
  %965 = xor i64 %964, %956
  %966 = trunc i64 %965 to i32
  %967 = and i32 %966, 16
  %968 = icmp eq i64 %954, 0
  %969 = select i1 %968, i32 64, i32 0
  %970 = lshr i64 %954, 56
  %971 = trunc i64 %970 to i32
  %972 = and i32 %971, 128
  %973 = xor i64 %957, %956
  %974 = and i64 %973, %964
  %975 = lshr i64 %974, 52
  %976 = trunc i64 %975 to i32
  %977 = and i32 %976, 2048
  %978 = or i32 %969, %963
  %979 = or i32 %978, %972
  %980 = or i32 %979, %959
  %981 = or i32 %980, %967
  %982 = or i32 %981, %977
  br label %1135

983:                                              ; preds = %1
  %984 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %985 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %984, i64 0, i32 3
  %986 = load i64, i64* %985, align 16
  %987 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %984, i64 0, i32 2
  %988 = load i64, i64* %987, align 8
  %989 = add i64 %986, 1
  %990 = add i64 %989, %988
  %991 = icmp ule i64 %990, %988
  %992 = zext i1 %991 to i32
  %993 = and i64 %986, 255
  %994 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %993
  %995 = load i8, i8* %994, align 1
  %996 = zext i8 %995 to i32
  %997 = xor i64 %990, %986
  %998 = xor i64 %997, %988
  %999 = trunc i64 %998 to i32
  %1000 = and i32 %999, 16
  %1001 = icmp eq i64 %986, 0
  %1002 = select i1 %1001, i32 64, i32 0
  %1003 = lshr i64 %986, 56
  %1004 = trunc i64 %1003 to i32
  %1005 = and i32 %1004, 128
  %1006 = xor i64 %990, %988
  %1007 = and i64 %1006, %997
  %1008 = lshr i64 %1007, 52
  %1009 = trunc i64 %1008 to i32
  %1010 = and i32 %1009, 2048
  %1011 = or i32 %1002, %996
  %1012 = or i32 %1011, %1005
  %1013 = or i32 %1012, %992
  %1014 = or i32 %1013, %1000
  %1015 = or i32 %1014, %1010
  br label %1135

1016:                                             ; preds = %1
  %1017 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %1018 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1017, i64 0, i32 3
  %1019 = load i64, i64* %1018, align 16
  %1020 = and i64 %1019, 255
  %1021 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %1020
  %1022 = load i8, i8* %1021, align 1
  %1023 = zext i8 %1022 to i32
  %1024 = icmp eq i64 %1019, 0
  %1025 = select i1 %1024, i32 64, i32 0
  %1026 = lshr i64 %1019, 56
  %1027 = trunc i64 %1026 to i32
  %1028 = and i32 %1027, 128
  %1029 = or i32 %1025, %1023
  %1030 = or i32 %1029, %1028
  br label %1135

1031:                                             ; preds = %1
  %1032 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %1033 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1032, i64 0, i32 3
  %1034 = load i64, i64* %1033, align 16
  %1035 = add i64 %1034, 31
  %1036 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1032, i64 0, i32 2
  %1037 = load i64, i64* %1036, align 8
  %1038 = trunc i64 %1037 to i32
  %1039 = and i64 %1034, 255
  %1040 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %1039
  %1041 = load i8, i8* %1040, align 1
  %1042 = zext i8 %1041 to i32
  %1043 = xor i64 %1035, %1034
  %1044 = trunc i64 %1043 to i32
  %1045 = and i32 %1044, 16
  %1046 = icmp eq i64 %1034, 0
  %1047 = select i1 %1046, i32 64, i32 0
  %1048 = lshr i64 %1034, 56
  %1049 = trunc i64 %1048 to i32
  %1050 = and i32 %1049, 128
  %1051 = icmp eq i64 %1034, -9223372036854775808
  %1052 = select i1 %1051, i32 2048, i32 0
  %1053 = or i32 %1047, %1038
  %1054 = or i32 %1053, %1052
  %1055 = or i32 %1054, %1042
  %1056 = or i32 %1055, %1050
  %1057 = or i32 %1056, %1045
  br label %1135

1058:                                             ; preds = %1
  %1059 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %1060 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1059, i64 0, i32 3
  %1061 = load i64, i64* %1060, align 16
  %1062 = add i64 %1061, 1
  %1063 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1059, i64 0, i32 2
  %1064 = load i64, i64* %1063, align 8
  %1065 = trunc i64 %1064 to i32
  %1066 = and i64 %1061, 255
  %1067 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %1066
  %1068 = load i8, i8* %1067, align 1
  %1069 = zext i8 %1068 to i32
  %1070 = xor i64 %1062, %1061
  %1071 = trunc i64 %1070 to i32
  %1072 = and i32 %1071, 16
  %1073 = icmp eq i64 %1061, 0
  %1074 = select i1 %1073, i32 64, i32 0
  %1075 = lshr i64 %1061, 56
  %1076 = trunc i64 %1075 to i32
  %1077 = and i32 %1076, 128
  %1078 = icmp eq i64 %1061, 9223372036854775807
  %1079 = select i1 %1078, i32 2048, i32 0
  %1080 = or i32 %1074, %1065
  %1081 = or i32 %1080, %1079
  %1082 = or i32 %1081, %1069
  %1083 = or i32 %1082, %1077
  %1084 = or i32 %1083, %1072
  br label %1135

1085:                                             ; preds = %1
  %1086 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %1087 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1086, i64 0, i32 2
  %1088 = load i64, i64* %1087, align 8
  %1089 = lshr i64 %1088, 63
  %1090 = trunc i64 %1089 to i32
  %1091 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1086, i64 0, i32 3
  %1092 = load i64, i64* %1091, align 16
  %1093 = and i64 %1092, 255
  %1094 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %1093
  %1095 = load i8, i8* %1094, align 1
  %1096 = zext i8 %1095 to i32
  %1097 = icmp eq i64 %1092, 0
  %1098 = select i1 %1097, i32 64, i32 0
  %1099 = lshr i64 %1092, 56
  %1100 = trunc i64 %1099 to i32
  %1101 = and i32 %1100, 128
  %1102 = xor i64 %1092, %1088
  %1103 = lshr i64 %1102, 52
  %1104 = trunc i64 %1103 to i32
  %1105 = and i32 %1104, 2048
  %1106 = or i32 %1096, %1090
  %1107 = or i32 %1106, %1098
  %1108 = or i32 %1107, %1101
  %1109 = or i32 %1108, %1105
  br label %1135

1110:                                             ; preds = %1
  %1111 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %1112 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1111, i64 0, i32 2
  %1113 = load i64, i64* %1112, align 8
  %1114 = trunc i64 %1113 to i32
  %1115 = and i32 %1114, 1
  %1116 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1111, i64 0, i32 3
  %1117 = load i64, i64* %1116, align 16
  %1118 = and i64 %1117, 255
  %1119 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %1118
  %1120 = load i8, i8* %1119, align 1
  %1121 = zext i8 %1120 to i32
  %1122 = icmp eq i64 %1117, 0
  %1123 = select i1 %1122, i32 64, i32 0
  %1124 = lshr i64 %1117, 56
  %1125 = trunc i64 %1124 to i32
  %1126 = and i32 %1125, 128
  %1127 = xor i64 %1117, %1113
  %1128 = lshr i64 %1127, 52
  %1129 = trunc i64 %1128 to i32
  %1130 = and i32 %1129, 2048
  %1131 = or i32 %1115, %1121
  %1132 = or i32 %1131, %1123
  %1133 = or i32 %1132, %1126
  %1134 = or i32 %1133, %1130
  br label %1135

1135:                                             ; preds = %1, %1110, %1085, %1058, %1031, %1016, %983, %951, %917, %884, %862, %837, %811, %787, %762, %735, %710, %682, %654, %628, %600, %572, %546, %531, %515, %501, %466, %428, %392, %358, %321, %286,
  %1136 = phi i32 [ %1134, %1110 ], [ %1109, %1085 ], [ %1084, %1058 ], [ %1057, %1031 ], [ %1030, %1016 ], [ %1015, %983 ], [ %982, %951 ], [ %950, %917 ], [ %916, %884 ], [ %883, %862 ], [ %861, %837 ], [ %836, %811 ], [ %810, %787 ], [ %786, %762 ], [
  ret i32 %1136
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn writeonly
define void @cpu_set_eflags(%struct.CPUX86State* nocapture noundef writeonly %0, i64 noundef %1) local_unnamed_addr #1 {
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 1
  store i64 1, i64* %3, align 16
  %4 = and i64 %1, 2261
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 2
  store i64 %4, i64* %5, align 8
  %6 = and i64 %1, 1024
  %7 = icmp eq i64 %6, 0
  %8 = select i1 %7, i32 1, i32 -1
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 19
  store i32 %8, i32* %9, align 16
  %10 = and i64 %1, -3286
  %11 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 20
  store i64 %10, i64* %11, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_write_eflags(i64 noundef %0, i32 noundef %1) local_unnamed_addr #2 {
  %3 = trunc i64 %0 to i32
  %4 = and i64 %0, 2261
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 2
  store i64 %4, i64* %6, align 8
  %7 = and i32 %3, 1024
  %8 = icmp eq i32 %7, 0
  %9 = select i1 %8, i32 1, i32 -1
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 19
  store i32 %9, i32* %10, align 16
  %11 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 20
  %12 = load i64, i64* %11, align 8
  %13 = xor i32 %1, -1
  %14 = sext i32 %13 to i64
  %15 = and i64 %12, %14
  %16 = and i32 %3, -3286
  %17 = and i32 %16, %1
  %18 = sext i32 %17 to i64
  %19 = or i64 %15, %18
  store i64 %19, i64* %11, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn
define i64 @helper_read_eflags() local_unnamed_addr #0 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 1
  %3 = load i64, i64* %2, align 16
  %4 = trunc i64 %3 to i32
  %5 = tail call i32 @helper_cc_compute_all(i32 noundef %4)
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 19
  %7 = load i32, i32* %6, align 16
  %8 = and i32 %7, 1024
  %9 = or i32 %8, %5
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 20
  %11 = load i64, i64* %10, align 8
  %12 = trunc i64 %11 to i32
  %13 = and i32 %12, -196609
  %14 = or i32 %9, %13
  %15 = zext i32 %14 to i64
  ret i64 %15
}

; Function Attrs: uwtable
define void @helper_check_iob(i32 noundef %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 26, i32 3
  %4 = load i32, i32* %3, align 4
  %5 = and i32 %4, 36608
  %6 = icmp eq i32 %5, 35072
  br i1 %6, label %7, label %30

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 26, i32 2
  %9 = load i32, i32* %8, align 8
  %10 = icmp ult i32 %9, 103
  br i1 %10, label %30, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 26, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = add i64 %13, 102
  %15 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* noundef nonnull %2, i64 noundef %14)
  %16 = ashr i32 %0, 3
  %17 = add nsw i32 %15, %16
  %18 = add nsw i32 %17, 1
  %19 = load i32, i32* %8, align 8
  %20 = icmp ugt i32 %18, %19
  br i1 %20, label %30, label %21

21:                                               ; preds = %11
  %22 = load i64, i64* %12, align 8
  %23 = sext i32 %17 to i64
  %24 = add i64 %22, %23
  %25 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* noundef nonnull %2, i64 noundef %24)
  %26 = and i32 %0, 7
  %27 = shl nuw nsw i32 1, %26
  %28 = and i32 %25, %27
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %31, label %30

30:                                               ; preds = %21, %11, %7, %1
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %2, i32 noundef 13, i32 noundef 0, i64 noundef 0)
  unreachable

31:                                               ; preds = %21
  ret void
}

; Function Attrs: uwtable
define internal fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* noundef %0, i64 noundef %1) unnamed_addr #3 {
  %3 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %7, label %6

6:                                                ; preds = %2
  tail call void @tcg_llvm_before_memory_access(i64 noundef %1, i64 noundef 0, i32 noundef 2, i32 noundef 0)
  br label %7

7:                                                ; preds = %6, %2
  %8 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %13, label %11

11:                                               ; preds = %7
  %12 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %1, i64 noundef 0, i64 noundef -1, i64 noundef 0)
  br label %13

13:                                               ; preds = %7, %11
  %14 = phi i64 [ %12, %11 ], [ %1, %7 ]
  %15 = lshr i64 %14, 12
  %16 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %15, i64 noundef 0, i64 noundef 4503599627370495, i64 noundef 0)
  %17 = and i64 %16, 1023
  %18 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 82, i64 0
  %19 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %18, align 8
  %20 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %19, i64 %17, i32 0
  %21 = load i64, i64* %20, align 8
  %22 = and i64 %21, -33
  %23 = and i64 %14, -4095
  %24 = icmp eq i64 %22, %23
  br i1 %24, label %27, label %25, !prof !5

25:                                               ; preds = %13
  %26 = tail call zeroext i16 @helper_ldw_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %14, i32 noundef 0, i8* noundef null)
  br label %38

27:                                               ; preds = %13
  %28 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %19, i64 %17, i32 4
  %29 = load i64, i64* %28, align 8
  %30 = add i64 %29, %14
  %31 = inttoptr i64 %30 to i16*
  %32 = load i16, i16* %31, align 2
  %33 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %38, label %36

36:                                               ; preds = %27
  %37 = zext i16 %32 to i64
  tail call void @tcg_llvm_after_memory_access(i64 noundef %14, i64 noundef %37, i32 noundef 2, i32 noundef 0, i64 noundef 0)
  br label %38

38:                                               ; preds = %27, %36, %25
  %39 = phi i16 [ %26, %25 ], [ %32, %36 ], [ %32, %27 ]
  %40 = zext i16 %39 to i32
  ret i32 %40
}

; Function Attrs: noreturn uwtable
define void @raise_exception_err_ra(%struct.CPUX86State* noundef %0, i32 noundef %1, i32 noundef %2, i64 noundef %3) local_unnamed_addr #4 {
  tail call fastcc void @raise_interrupt2(%struct.CPUX86State* noundef %0, i32 noundef %1, i32 noundef 0, i32 noundef %2, i32 noundef 0, i64 noundef %3) #28
  unreachable
}

; Function Attrs: noreturn uwtable
define internal fastcc void @raise_interrupt2(%struct.CPUX86State* noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i64 noundef %5) unnamed_addr #4 {
  %7 = icmp eq i32 %2, 0
  br i1 %7, label %8, label %60

8:                                                ; preds = %6
  %9 = add nsw i32 %1, 64
  %10 = sext i32 %3 to i64
  tail call void @helper_svm_check_intercept_param(i32 noundef %9, i64 noundef %10)
  %11 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %11, i64 0, i32 68
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 0
  %15 = add i32 %13, -10
  %16 = icmp ult i32 %15, 4
  %17 = or i1 %14, %16
  %18 = icmp eq i32 %1, 0
  %19 = add i32 %1, -10
  %20 = icmp ult i32 %19, 4
  %21 = or i1 %18, %20
  %22 = load i32, i32* @loglevel, align 4
  %23 = and i32 %22, 16
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %31, label %25

25:                                               ; preds = %8
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** @logfile, align 8
  %27 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* noundef %26, i8* noundef getelementptr inbounds ([36 x i8], [36 x i8]* @.str.17, i64 0, i64 0), i32 noundef %13, i32 noundef %1)
  %28 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %29 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %28, i64 0, i32 68
  %30 = load i32, i32* %29, align 4
  br label %31

31:                                               ; preds = %25, %8
  %32 = phi i32 [ %30, %25 ], [ %13, %8 ]
  %33 = phi %struct.CPUX86State* [ %28, %25 ], [ %11, %8 ]
  %34 = icmp eq i32 %32, 8
  br i1 %34, label %35, label %49

35:                                               ; preds = %31
  %36 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %33, i64 0, i32 21
  %37 = load i32, i32* %36, align 16
  %38 = and i32 %37, 2097152
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %41, label %40

40:                                               ; preds = %35
  tail call void @helper_vmexit(i32 noundef 127, i64 noundef 0)
  unreachable

41:                                               ; preds = %35
  %42 = load i32, i32* @loglevel, align 4
  %43 = and i32 %42, 512
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %48, label %45

45:                                               ; preds = %41
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** @logfile, align 8
  %47 = tail call i64 @fwrite(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18, i64 0, i64 0), i64 13, i64 1, %struct._IO_FILE* %46)
  br label %48

48:                                               ; preds = %45, %41
  tail call void @exit(i32 noundef -1) #29
  unreachable

49:                                               ; preds = %31
  %50 = and i1 %21, %17
  br i1 %50, label %54, label %51

51:                                               ; preds = %49
  %52 = icmp eq i32 %32, 14
  br i1 %52, label %53, label %55

53:                                               ; preds = %51
  switch i32 %1, label %72 [
    i32 14, label %54
    i32 13, label %54
    i32 12, label %54
    i32 11, label %54
    i32 10, label %54
    i32 0, label %54
    i32 8, label %56
  ]

54:                                               ; preds = %53, %53, %53, %53, %53, %53, %49
  br label %56

55:                                               ; preds = %51
  switch i32 %1, label %72 [
    i32 14, label %56
    i32 13, label %56
    i32 12, label %56
    i32 11, label %56
    i32 10, label %56
    i32 8, label %56
    i32 0, label %56
  ]

56:                                               ; preds = %55, %55, %55, %55, %55, %55, %55, %54, %53
  %57 = phi i32 [ 0, %54 ], [ %3, %53 ], [ %3, %55 ], [ %3, %55 ], [ %3, %55 ], [ %3, %55 ], [ %3, %55 ], [ %3, %55 ], [ %3, %55 ]
  %58 = phi i32 [ 8, %54 ], [ %1, %53 ], [ %1, %55 ], [ %1, %55 ], [ %1, %55 ], [ %1, %55 ], [ %1, %55 ], [ %1, %55 ], [ %1, %55 ]
  %59 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %33, i64 0, i32 68
  store i32 %58, i32* %59, align 4
  br label %72

60:                                               ; preds = %6
  %61 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %62 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %61, i64 0, i32 21
  %63 = load i32, i32* %62, align 16
  %64 = and i32 %63, 2097152
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %72, label %66, !prof !5

66:                                               ; preds = %60
  %67 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %61, i64 0, i32 42
  %68 = load i64, i64* %67, align 16
  %69 = and i64 %68, 2097152
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %72, label %71

71:                                               ; preds = %66
  tail call void @helper_vmexit(i32 noundef 117, i64 noundef 0)
  unreachable

72:                                               ; preds = %66, %60, %56, %55, %53
  %73 = phi i32 [ %57, %56 ], [ %3, %53 ], [ %3, %55 ], [ %3, %60 ], [ %3, %66 ]
  %74 = phi i32 [ %58, %56 ], [ %1, %53 ], [ %1, %55 ], [ %1, %60 ], [ %1, %66 ]
  %75 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 99
  store i32 %74, i32* %75, align 16
  %76 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 62
  store i32 %73, i32* %76, align 8
  %77 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 63
  store i32 %2, i32* %77, align 4
  %78 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 18
  %79 = load i64, i64* %78, align 8
  %80 = sext i32 %4 to i64
  %81 = add i64 %79, %80
  %82 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 64
  store i64 %81, i64* %82, align 16
  tail call void @cpu_loop_exit_restore(%struct.CPUX86State* noundef %0, i64 noundef %5) #28
  unreachable
}

; Function Attrs: uwtable
define void @helper_svm_check_intercept_param(i32 noundef %0, i64 noundef %1) local_unnamed_addr #3 {
  %3 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %4 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 21
  %5 = load i32, i32* %4, align 16
  %6 = and i32 %5, 2097152
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %105, label %8, !prof !5

8:                                                ; preds = %2
  switch i32 %0, label %96 [
    i32 0, label %9
    i32 1, label %9
    i32 2, label %9
    i32 3, label %9
    i32 4, label %9
    i32 5, label %9
    i32 6, label %9
    i32 7, label %9
    i32 8, label %9
    i32 16, label %17
    i32 17, label %17
    i32 18, label %17
    i32 19, label %17
    i32 20, label %17
    i32 21, label %17
    i32 22, label %17
    i32 23, label %17
    i32 24, label %17
    i32 32, label %26
    i32 33, label %26
    i32 34, label %26
    i32 35, label %26
    i32 36, label %26
    i32 37, label %26
    i32 38, label %26
    i32 39, label %26
    i32 48, label %35
    i32 49, label %35
    i32 50, label %35
    i32 51, label %35
    i32 52, label %35
    i32 53, label %35
    i32 54, label %35
    i32 55, label %35
    i32 64, label %44
    i32 65, label %44
    i32 66, label %44
    i32 67, label %44
    i32 68, label %44
    i32 69, label %44
    i32 70, label %44
    i32 71, label %44
    i32 72, label %44
    i32 73, label %44
    i32 74, label %44
    i32 75, label %44
    i32 76, label %44
    i32 77, label %44
    i32 78, label %44
    i32 79, label %44
    i32 80, label %44
    i32 81, label %44
    i32 82, label %44
    i32 83, label %44
    i32 84, label %44
    i32 85, label %44
    i32 86, label %44
    i32 87, label %44
    i32 88, label %44
    i32 89, label %44
    i32 90, label %44
    i32 91, label %44
    i32 92, label %44
    i32 93, label %44
    i32 94, label %44
    i32 95, label %44
    i32 124, label %52
  ]

9:                                                ; preds = %8, %8, %8, %8, %8, %8, %8, %8, %8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 43
  %11 = load i16, i16* %10, align 8
  %12 = zext i16 %11 to i32
  %13 = shl nuw nsw i32 1, %0
  %14 = and i32 %13, %12
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %105, label %16

16:                                               ; preds = %9
  tail call void @helper_vmexit(i32 noundef %0, i64 noundef %1)
  unreachable

17:                                               ; preds = %8, %8, %8, %8, %8, %8, %8, %8, %8
  %18 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 44
  %19 = load i16, i16* %18, align 2
  %20 = zext i16 %19 to i32
  %21 = add nsw i32 %0, -16
  %22 = shl nuw nsw i32 1, %21
  %23 = and i32 %22, %20
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %105, label %25

25:                                               ; preds = %17
  tail call void @helper_vmexit(i32 noundef %0, i64 noundef %1)
  unreachable

26:                                               ; preds = %8, %8, %8, %8, %8, %8, %8, %8
  %27 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 45
  %28 = load i16, i16* %27, align 4
  %29 = zext i16 %28 to i32
  %30 = add nsw i32 %0, -32
  %31 = shl nuw nsw i32 1, %30
  %32 = and i32 %31, %29
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %105, label %34

34:                                               ; preds = %26
  tail call void @helper_vmexit(i32 noundef %0, i64 noundef %1)
  unreachable

35:                                               ; preds = %8, %8, %8, %8, %8, %8, %8, %8
  %36 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 46
  %37 = load i16, i16* %36, align 2
  %38 = zext i16 %37 to i32
  %39 = add nsw i32 %0, -48
  %40 = shl nuw nsw i32 1, %39
  %41 = and i32 %40, %38
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %105, label %43

43:                                               ; preds = %35
  tail call void @helper_vmexit(i32 noundef %0, i64 noundef %1)
  unreachable

44:                                               ; preds = %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8
  %45 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 47
  %46 = load i32, i32* %45, align 16
  %47 = add nsw i32 %0, -64
  %48 = shl nuw i32 1, %47
  %49 = and i32 %46, %48
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %105, label %51

51:                                               ; preds = %44
  tail call void @helper_vmexit(i32 noundef %0, i64 noundef %1)
  unreachable

52:                                               ; preds = %8
  %53 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 42
  %54 = load i64, i64* %53, align 16
  %55 = and i64 %54, 268435456
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %105, label %57

57:                                               ; preds = %52
  %58 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 40
  %59 = load i64, i64* %58, align 16
  %60 = add i64 %59, 72
  %61 = tail call i64 @ldq_phys(i64 noundef %60)
  %62 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %63 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %62, i64 0, i32 0, i64 1
  %64 = load i64, i64* %63, align 8
  %65 = trunc i64 %64 to i32
  %66 = and i32 %65, -8192
  switch i32 %66, label %72 [
    i32 -1073676288, label %78
    i32 -1073741824, label %74
  ]

67:                                               ; preds = %72
  %68 = shl i64 %64, 1
  %69 = trunc i64 %68 to i32
  %70 = lshr i64 %68, 3
  %71 = trunc i64 %70 to i32
  br label %83

72:                                               ; preds = %57
  %73 = icmp ult i32 %65, 8192
  br i1 %73, label %67, label %82

74:                                               ; preds = %57
  %75 = shl nsw i32 %65, 1
  %76 = add i32 %75, -2147467264
  %77 = lshr i32 %76, 3
  br label %83

78:                                               ; preds = %57
  %79 = shl nsw i32 %65, 1
  %80 = add nsw i32 %79, 2147385344
  %81 = lshr i32 %80, 3
  br label %83

82:                                               ; preds = %72
  tail call void @helper_vmexit(i32 noundef 124, i64 noundef %1)
  unreachable

83:                                               ; preds = %78, %74, %67
  %84 = phi i32 [ %79, %78 ], [ %75, %74 ], [ %69, %67 ]
  %85 = phi i32 [ %81, %78 ], [ %77, %74 ], [ %71, %67 ]
  %86 = and i32 %84, 6
  %87 = zext i32 %85 to i64
  %88 = add i64 %61, %87
  %89 = tail call i32 @ldub_phys(i64 noundef %88)
  %90 = trunc i64 %1 to i32
  %91 = shl nuw i32 1, %90
  %92 = shl i32 %91, %86
  %93 = and i32 %89, %92
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %105, label %95

95:                                               ; preds = %83
  tail call void @helper_vmexit(i32 noundef 124, i64 noundef %1)
  unreachable

96:                                               ; preds = %8
  %97 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 42
  %98 = load i64, i64* %97, align 16
  %99 = add i32 %0, -96
  %100 = zext i32 %99 to i64
  %101 = shl nuw i64 1, %100
  %102 = and i64 %98, %101
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %105, label %104

104:                                              ; preds = %96
  tail call void @helper_vmexit(i32 noundef %0, i64 noundef %1)
  unreachable

105:                                              ; preds = %83, %96, %52, %44, %35, %26, %17, %9, %2
  ret void
}

; Function Attrs: nofree nounwind
declare noundef i32 @fprintf(%struct._IO_FILE* nocapture noundef, i8* nocapture noundef readonly, ...) #5

; Function Attrs: noreturn uwtable
define void @helper_vmexit(i32 noundef %0, i64 noundef %1) local_unnamed_addr #4 {
  %3 = load i32, i32* @loglevel, align 4
  %4 = and i32 %3, 2
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @logfile, align 8
  %8 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %8, i64 0, i32 40
  %10 = load i64, i64* %9, align 16
  %11 = add i64 %10, 128
  %12 = tail call i64 @ldq_phys(i64 noundef %11)
  %13 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %13, i64 0, i32 18
  %15 = load i64, i64* %14, align 8
  %16 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* noundef %7, i8* noundef getelementptr inbounds ([39 x i8], [39 x i8]* @.str.15, i64 0, i64 0), i32 noundef %0, i64 noundef %1, i64 noundef %12, i64 noundef %15)
  br label %17

17:                                               ; preds = %6, %2
  %18 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %19 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 21
  %20 = load i32, i32* %19, align 16
  %21 = and i32 %20, 3
  %22 = and i32 %20, 8
  %23 = icmp eq i32 %22, 0
  %24 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 40
  %25 = load i64, i64* %24, align 16
  %26 = add i64 %25, 104
  br i1 %23, label %32, label %27

27:                                               ; preds = %17
  tail call void @stl_phys(i64 noundef %26, i32 noundef 1)
  %28 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %29 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %28, i64 0, i32 21
  %30 = load i32, i32* %29, align 16
  %31 = and i32 %30, -9
  store i32 %31, i32* %29, align 16
  br label %34

32:                                               ; preds = %17
  tail call void @stl_phys(i64 noundef %26, i32 noundef 0)
  %33 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br label %34

34:                                               ; preds = %32, %27
  %35 = phi %struct.CPUX86State* [ %33, %32 ], [ %28, %27 ]
  %36 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %35, i64 0, i32 40
  %37 = load i64, i64* %36, align 16
  %38 = add i64 %37, 1024
  %39 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %35, i64 0, i32 24, i64 0, i32 0
  %40 = load i32, i32* %39, align 8
  tail call void @stw_phys(i64 noundef %38, i32 noundef %40)
  %41 = add i64 %37, 1032
  %42 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %35, i64 0, i32 24, i64 0, i32 1
  %43 = load i64, i64* %42, align 8
  tail call void @stq_phys(i64 noundef %41, i64 noundef %43)
  %44 = add i64 %37, 1028
  %45 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %35, i64 0, i32 24, i64 0, i32 2
  %46 = load i32, i32* %45, align 8
  tail call void @stl_phys(i64 noundef %44, i32 noundef %46)
  %47 = add i64 %37, 1026
  %48 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %35, i64 0, i32 24, i64 0, i32 3
  %49 = load i32, i32* %48, align 4
  %50 = lshr i32 %49, 8
  %51 = and i32 %50, 255
  %52 = lshr i32 %49, 12
  %53 = and i32 %52, 3840
  %54 = or i32 %51, %53
  tail call void @stw_phys(i64 noundef %47, i32 noundef %54)
  %55 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %56 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %55, i64 0, i32 40
  %57 = load i64, i64* %56, align 16
  %58 = add i64 %57, 1040
  %59 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %55, i64 0, i32 24, i64 1, i32 0
  %60 = load i32, i32* %59, align 8
  tail call void @stw_phys(i64 noundef %58, i32 noundef %60)
  %61 = add i64 %57, 1048
  %62 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %55, i64 0, i32 24, i64 1, i32 1
  %63 = load i64, i64* %62, align 8
  tail call void @stq_phys(i64 noundef %61, i64 noundef %63)
  %64 = add i64 %57, 1044
  %65 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %55, i64 0, i32 24, i64 1, i32 2
  %66 = load i32, i32* %65, align 8
  tail call void @stl_phys(i64 noundef %64, i32 noundef %66)
  %67 = add i64 %57, 1042
  %68 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %55, i64 0, i32 24, i64 1, i32 3
  %69 = load i32, i32* %68, align 4
  %70 = lshr i32 %69, 8
  %71 = and i32 %70, 255
  %72 = lshr i32 %69, 12
  %73 = and i32 %72, 3840
  %74 = or i32 %71, %73
  tail call void @stw_phys(i64 noundef %67, i32 noundef %74)
  %75 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %76 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %75, i64 0, i32 40
  %77 = load i64, i64* %76, align 16
  %78 = add i64 %77, 1056
  %79 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %75, i64 0, i32 24, i64 2, i32 0
  %80 = load i32, i32* %79, align 8
  tail call void @stw_phys(i64 noundef %78, i32 noundef %80)
  %81 = add i64 %77, 1064
  %82 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %75, i64 0, i32 24, i64 2, i32 1
  %83 = load i64, i64* %82, align 8
  tail call void @stq_phys(i64 noundef %81, i64 noundef %83)
  %84 = add i64 %77, 1060
  %85 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %75, i64 0, i32 24, i64 2, i32 2
  %86 = load i32, i32* %85, align 8
  tail call void @stl_phys(i64 noundef %84, i32 noundef %86)
  %87 = add i64 %77, 1058
  %88 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %75, i64 0, i32 24, i64 2, i32 3
  %89 = load i32, i32* %88, align 4
  %90 = lshr i32 %89, 8
  %91 = and i32 %90, 255
  %92 = lshr i32 %89, 12
  %93 = and i32 %92, 3840
  %94 = or i32 %91, %93
  tail call void @stw_phys(i64 noundef %87, i32 noundef %94)
  %95 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %96 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %95, i64 0, i32 40
  %97 = load i64, i64* %96, align 16
  %98 = add i64 %97, 1072
  %99 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %95, i64 0, i32 24, i64 3, i32 0
  %100 = load i32, i32* %99, align 8
  tail call void @stw_phys(i64 noundef %98, i32 noundef %100)
  %101 = add i64 %97, 1080
  %102 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %95, i64 0, i32 24, i64 3, i32 1
  %103 = load i64, i64* %102, align 8
  tail call void @stq_phys(i64 noundef %101, i64 noundef %103)
  %104 = add i64 %97, 1076
  %105 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %95, i64 0, i32 24, i64 3, i32 2
  %106 = load i32, i32* %105, align 8
  tail call void @stl_phys(i64 noundef %104, i32 noundef %106)
  %107 = add i64 %97, 1074
  %108 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %95, i64 0, i32 24, i64 3, i32 3
  %109 = load i32, i32* %108, align 4
  %110 = lshr i32 %109, 8
  %111 = and i32 %110, 255
  %112 = lshr i32 %109, 12
  %113 = and i32 %112, 3840
  %114 = or i32 %111, %113
  tail call void @stw_phys(i64 noundef %107, i32 noundef %114)
  %115 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %116 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %115, i64 0, i32 40
  %117 = load i64, i64* %116, align 16
  %118 = add i64 %117, 1128
  %119 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %115, i64 0, i32 27, i32 1
  %120 = load i64, i64* %119, align 8
  tail call void @stq_phys(i64 noundef %118, i64 noundef %120)
  %121 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %122 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %121, i64 0, i32 40
  %123 = load i64, i64* %122, align 16
  %124 = add i64 %123, 1124
  %125 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %121, i64 0, i32 27, i32 2
  %126 = load i32, i32* %125, align 16
  tail call void @stl_phys(i64 noundef %124, i32 noundef %126)
  %127 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %128 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %127, i64 0, i32 40
  %129 = load i64, i64* %128, align 16
  %130 = add i64 %129, 1160
  %131 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %127, i64 0, i32 28, i32 1
  %132 = load i64, i64* %131, align 8
  tail call void @stq_phys(i64 noundef %130, i64 noundef %132)
  %133 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %134 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %133, i64 0, i32 40
  %135 = load i64, i64* %134, align 16
  %136 = add i64 %135, 1156
  %137 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %133, i64 0, i32 28, i32 2
  %138 = load i32, i32* %137, align 8
  tail call void @stl_phys(i64 noundef %136, i32 noundef %138)
  %139 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %140 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %139, i64 0, i32 40
  %141 = load i64, i64* %140, align 16
  %142 = add i64 %141, 1232
  %143 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %139, i64 0, i32 37
  %144 = load i64, i64* %143, align 8
  tail call void @stq_phys(i64 noundef %142, i64 noundef %144)
  %145 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %146 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %145, i64 0, i32 40
  %147 = load i64, i64* %146, align 16
  %148 = add i64 %147, 1368
  %149 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %145, i64 0, i32 29, i64 0
  %150 = load i64, i64* %149, align 16
  tail call void @stq_phys(i64 noundef %148, i64 noundef %150)
  %151 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %152 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %151, i64 0, i32 40
  %153 = load i64, i64* %152, align 16
  %154 = add i64 %153, 1600
  %155 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %151, i64 0, i32 29, i64 2
  %156 = load i64, i64* %155, align 16
  tail call void @stq_phys(i64 noundef %154, i64 noundef %156)
  %157 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %158 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %157, i64 0, i32 40
  %159 = load i64, i64* %158, align 16
  %160 = add i64 %159, 1360
  %161 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %157, i64 0, i32 29, i64 3
  %162 = load i64, i64* %161, align 8
  tail call void @stq_phys(i64 noundef %160, i64 noundef %162)
  %163 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %164 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %163, i64 0, i32 40
  %165 = load i64, i64* %164, align 16
  %166 = add i64 %165, 1352
  %167 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %163, i64 0, i32 29, i64 4
  %168 = load i64, i64* %167, align 16
  tail call void @stq_phys(i64 noundef %166, i64 noundef %168)
  %169 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %170 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %169, i64 0, i32 40
  %171 = load i64, i64* %170, align 16
  %172 = add i64 %171, 96
  %173 = tail call i32 @ldl_phys(i64 noundef %172)
  %174 = and i32 %173, -272
  %175 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %176 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %175, i64 0, i32 48
  %177 = load i8, i8* %176, align 4
  %178 = and i8 %177, 15
  %179 = zext i8 %178 to i32
  %180 = or i32 %174, %179
  %181 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %175, i64 0, i32 80
  %182 = load i32, i32* %181, align 16
  %183 = and i32 %182, 256
  %184 = or i32 %180, %183
  %185 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %175, i64 0, i32 40
  %186 = load i64, i64* %185, align 16
  %187 = add i64 %186, 96
  tail call void @stl_phys(i64 noundef %187, i32 noundef %184)
  %188 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %189 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %188, i64 0, i32 40
  %190 = load i64, i64* %189, align 16
  %191 = add i64 %190, 1392
  %192 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %188, i64 0, i32 20
  %193 = load i64, i64* %192, align 8
  %194 = trunc i64 %193 to i32
  %195 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %188, i64 0, i32 1
  %196 = load i64, i64* %195, align 16
  %197 = trunc i64 %196 to i32
  %198 = tail call i32 @helper_cc_compute_all(i32 noundef %197) #30
  %199 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %188, i64 0, i32 19
  %200 = load i32, i32* %199, align 16
  %201 = and i32 %200, 1024
  %202 = or i32 %198, %194
  %203 = or i32 %202, %201
  %204 = or i32 %203, 2
  %205 = zext i32 %204 to i64
  tail call void @stq_phys(i64 noundef %191, i64 noundef %205)
  %206 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %207 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %206, i64 0, i32 40
  %208 = load i64, i64* %207, align 16
  %209 = add i64 %208, 1400
  %210 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %206, i64 0, i32 18
  %211 = load i64, i64* %210, align 8
  tail call void @stq_phys(i64 noundef %209, i64 noundef %211)
  %212 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %213 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %212, i64 0, i32 40
  %214 = load i64, i64* %213, align 16
  %215 = add i64 %214, 1496
  %216 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %212, i64 0, i32 0, i64 4
  %217 = load i64, i64* %216, align 16
  tail call void @stq_phys(i64 noundef %215, i64 noundef %217)
  %218 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %219 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %218, i64 0, i32 40
  %220 = load i64, i64* %219, align 16
  %221 = add i64 %220, 1528
  %222 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %218, i64 0, i32 0, i64 0
  %223 = load i64, i64* %222, align 16
  tail call void @stq_phys(i64 noundef %221, i64 noundef %223)
  %224 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %225 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %224, i64 0, i32 40
  %226 = load i64, i64* %225, align 16
  %227 = add i64 %226, 1376
  %228 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %224, i64 0, i32 65, i64 7
  %229 = load i64, i64* %228, align 8
  tail call void @stq_phys(i64 noundef %227, i64 noundef %229)
  %230 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %231 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %230, i64 0, i32 40
  %232 = load i64, i64* %231, align 16
  %233 = add i64 %232, 1384
  %234 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %230, i64 0, i32 65, i64 6
  %235 = load i64, i64* %234, align 8
  tail call void @stq_phys(i64 noundef %233, i64 noundef %235)
  %236 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %237 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %236, i64 0, i32 40
  %238 = load i64, i64* %237, align 16
  %239 = add i64 %238, 1227
  %240 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %236, i64 0, i32 21
  %241 = load i32, i32* %240, align 16
  %242 = and i32 %241, 3
  tail call void @stb_phys(i64 noundef %239, i32 noundef %242)
  %243 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %244 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %243, i64 0, i32 22
  %245 = load i32, i32* %244, align 4
  %246 = and i32 %245, -11
  store i32 %246, i32* %244, align 4
  %247 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %243, i64 0, i32 21
  %248 = load i32, i32* %247, align 16
  %249 = and i32 %248, -2097153
  store i32 %249, i32* %247, align 16
  %250 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %243, i64 0, i32 42
  store i64 0, i64* %250, align 16
  %251 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %243, i64 0, i32 47
  store i32 0, i32* %251, align 16
  %252 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %243, i64 0, i32 80
  %253 = load i32, i32* %252, align 16
  %254 = and i32 %253, -257
  store i32 %254, i32* %252, align 16
  %255 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %243, i64 0, i32 41
  store i64 0, i64* %255, align 8
  %256 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %243, i64 0, i32 39
  %257 = load i64, i64* %256, align 8
  %258 = add i64 %257, 1128
  %259 = tail call i64 @ldq_phys(i64 noundef %258)
  %260 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %261 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %260, i64 0, i32 27, i32 1
  store i64 %259, i64* %261, align 8
  %262 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %260, i64 0, i32 39
  %263 = load i64, i64* %262, align 8
  %264 = add i64 %263, 1124
  %265 = tail call i32 @ldl_phys(i64 noundef %264)
  %266 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %267 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %266, i64 0, i32 27, i32 2
  store i32 %265, i32* %267, align 16
  %268 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %266, i64 0, i32 39
  %269 = load i64, i64* %268, align 8
  %270 = add i64 %269, 1160
  %271 = tail call i64 @ldq_phys(i64 noundef %270)
  %272 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %273 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %272, i64 0, i32 28, i32 1
  store i64 %271, i64* %273, align 8
  %274 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %272, i64 0, i32 39
  %275 = load i64, i64* %274, align 8
  %276 = add i64 %275, 1156
  %277 = tail call i32 @ldl_phys(i64 noundef %276)
  %278 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %279 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %278, i64 0, i32 28, i32 2
  store i32 %277, i32* %279, align 8
  %280 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %278, i64 0, i32 39
  %281 = load i64, i64* %280, align 8
  %282 = add i64 %281, 1368
  %283 = tail call i64 @ldq_phys(i64 noundef %282)
  %284 = trunc i64 %283 to i32
  %285 = or i32 %284, 1
  tail call void @cpu_x86_update_cr0(%struct.CPUX86State* noundef %278, i32 noundef %285)
  %286 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %287 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %286, i64 0, i32 39
  %288 = load i64, i64* %287, align 8
  %289 = add i64 %288, 1352
  %290 = tail call i64 @ldq_phys(i64 noundef %289)
  %291 = trunc i64 %290 to i32
  tail call void @cpu_x86_update_cr4(%struct.CPUX86State* noundef %286, i32 noundef %291)
  %292 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %293 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %292, i64 0, i32 39
  %294 = load i64, i64* %293, align 8
  %295 = add i64 %294, 1360
  %296 = tail call i64 @ldq_phys(i64 noundef %295)
  tail call void @cpu_x86_update_cr3(%struct.CPUX86State* noundef %292, i64 noundef %296)
  %297 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %298 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %297, i64 0, i32 39
  %299 = load i64, i64* %298, align 8
  %300 = add i64 %299, 1232
  %301 = tail call i64 @ldq_phys(i64 noundef %300)
  %302 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %297, i64 0, i32 37
  store i64 %301, i64* %302, align 8
  %303 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %297, i64 0, i32 21
  %304 = load i32, i32* %303, align 16
  %305 = and i32 %304, -1064961
  %306 = trunc i64 %301 to i32
  %307 = shl i32 %306, 4
  %308 = and i32 %307, 16384
  %309 = or i32 %305, %308
  %310 = shl i32 %306, 8
  %311 = and i32 %310, 1048576
  %312 = or i32 %309, %311
  store i32 %312, i32* %303, align 16
  %313 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %314 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %313, i64 0, i32 20
  store i64 0, i64* %314, align 8
  %315 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %313, i64 0, i32 39
  %316 = load i64, i64* %315, align 8
  %317 = add i64 %316, 1392
  %318 = tail call i64 @ldq_phys(i64 noundef %317)
  %319 = and i64 %318, 2261
  %320 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %321 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %320, i64 0, i32 2
  store i64 %319, i64* %321, align 8
  %322 = and i64 %318, 1024
  %323 = icmp eq i64 %322, 0
  %324 = select i1 %323, i32 1, i32 -1
  %325 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %320, i64 0, i32 19
  store i32 %324, i32* %325, align 16
  %326 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %320, i64 0, i32 20
  %327 = load i64, i64* %326, align 8
  %328 = and i64 %327, 3285
  %329 = shl i64 %318, 32
  %330 = ashr exact i64 %329, 32
  %331 = and i64 %330, -3286
  %332 = or i64 %328, %331
  store i64 %332, i64* %326, align 8
  %333 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %320, i64 0, i32 1
  store i64 1, i64* %333, align 16
  %334 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %320, i64 0, i32 39
  %335 = load i64, i64* %334, align 8
  %336 = add i64 %335, 1024
  %337 = tail call i32 @lduw_phys(i64 noundef %336)
  %338 = add i64 %335, 1032
  %339 = tail call i64 @ldq_phys(i64 noundef %338)
  %340 = add i64 %335, 1028
  %341 = tail call i32 @ldl_phys(i64 noundef %340)
  %342 = add i64 %335, 1026
  %343 = tail call i32 @lduw_phys(i64 noundef %342)
  %344 = shl i32 %343, 8
  %345 = and i32 %344, 65280
  %346 = shl i32 %343, 12
  %347 = and i32 %346, 15728640
  %348 = or i32 %345, %347
  %349 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %320, i64 0, i32 24, i64 0, i32 0
  store i32 %337, i32* %349, align 8
  %350 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %320, i64 0, i32 24, i64 0, i32 1
  store i64 %339, i64* %350, align 8
  %351 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %320, i64 0, i32 24, i64 0, i32 2
  store i32 %341, i32* %351, align 8
  %352 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %320, i64 0, i32 24, i64 0, i32 3
  store i32 %348, i32* %352, align 4
  %353 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %320, i64 0, i32 21
  %354 = load i32, i32* %353, align 16
  %355 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %320, i64 0, i32 24, i64 2, i32 3
  %356 = load i32, i32* %355, align 4
  %357 = lshr i32 %356, 17
  %358 = and i32 %357, 32
  %359 = and i32 %354, 32768
  %360 = icmp eq i32 %359, 0
  br i1 %360, label %361, label %385

361:                                              ; preds = %34
  %362 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %320, i64 0, i32 29, i64 0
  %363 = load i64, i64* %362, align 16
  %364 = and i64 %363, 1
  %365 = icmp eq i64 %364, 0
  br i1 %365, label %373, label %366

366:                                              ; preds = %361
  %367 = load i64, i64* %326, align 8
  %368 = and i64 %367, 131072
  %369 = icmp ne i64 %368, 0
  %370 = and i32 %354, 16
  %371 = icmp eq i32 %370, 0
  %372 = select i1 %369, i1 true, i1 %371
  br i1 %372, label %373, label %375

373:                                              ; preds = %366, %361
  %374 = or i32 %358, 64
  br label %385

375:                                              ; preds = %366
  %376 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %320, i64 0, i32 24, i64 3, i32 1
  %377 = load i64, i64* %376, align 8
  %378 = or i64 %377, %339
  %379 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %320, i64 0, i32 24, i64 2, i32 1
  %380 = load i64, i64* %379, align 8
  %381 = or i64 %378, %380
  %382 = icmp eq i64 %381, 0
  %383 = select i1 %382, i32 0, i32 64
  %384 = or i32 %383, %358
  br label %385

385:                                              ; preds = %34, %373, %375
  %386 = phi i32 [ %358, %34 ], [ %374, %373 ], [ %384, %375 ]
  %387 = and i32 %354, -97
  %388 = or i32 %386, %387
  store i32 %388, i32* %353, align 16
  %389 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %390 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %389, i64 0, i32 39
  %391 = load i64, i64* %390, align 8
  %392 = add i64 %391, 1040
  tail call fastcc void @svm_load_seg_cache(i64 noundef %392, %struct.CPUX86State* noundef %389, i32 noundef 1)
  %393 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %394 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %393, i64 0, i32 39
  %395 = load i64, i64* %394, align 8
  %396 = add i64 %395, 1056
  %397 = tail call i32 @lduw_phys(i64 noundef %396)
  %398 = add i64 %395, 1064
  %399 = tail call i64 @ldq_phys(i64 noundef %398)
  %400 = add i64 %395, 1060
  %401 = tail call i32 @ldl_phys(i64 noundef %400)
  %402 = add i64 %395, 1058
  %403 = tail call i32 @lduw_phys(i64 noundef %402)
  %404 = shl i32 %403, 8
  %405 = and i32 %404, 65280
  %406 = shl i32 %403, 12
  %407 = and i32 %406, 15728640
  %408 = or i32 %405, %407
  %409 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %393, i64 0, i32 24, i64 2, i32 0
  store i32 %397, i32* %409, align 8
  %410 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %393, i64 0, i32 24, i64 2, i32 1
  store i64 %399, i64* %410, align 8
  %411 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %393, i64 0, i32 24, i64 2, i32 2
  store i32 %401, i32* %411, align 8
  %412 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %393, i64 0, i32 24, i64 2, i32 3
  store i32 %408, i32* %412, align 4
  %413 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %393, i64 0, i32 21
  %414 = load i32, i32* %413, align 16
  %415 = lshr exact i32 %407, 17
  %416 = and i32 %415, 32
  %417 = and i32 %414, 32768
  %418 = icmp eq i32 %417, 0
  br i1 %418, label %419, label %444

419:                                              ; preds = %385
  %420 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %393, i64 0, i32 29, i64 0
  %421 = load i64, i64* %420, align 16
  %422 = and i64 %421, 1
  %423 = icmp eq i64 %422, 0
  br i1 %423, label %432, label %424

424:                                              ; preds = %419
  %425 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %393, i64 0, i32 20
  %426 = load i64, i64* %425, align 8
  %427 = and i64 %426, 131072
  %428 = icmp ne i64 %427, 0
  %429 = and i32 %414, 16
  %430 = icmp eq i32 %429, 0
  %431 = select i1 %428, i1 true, i1 %430
  br i1 %431, label %432, label %434

432:                                              ; preds = %424, %419
  %433 = or i32 %416, 64
  br label %444

434:                                              ; preds = %424
  %435 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %393, i64 0, i32 24, i64 3, i32 1
  %436 = load i64, i64* %435, align 8
  %437 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %393, i64 0, i32 24, i64 0, i32 1
  %438 = load i64, i64* %437, align 8
  %439 = or i64 %436, %399
  %440 = or i64 %439, %438
  %441 = icmp eq i64 %440, 0
  %442 = select i1 %441, i32 0, i32 64
  %443 = or i32 %442, %416
  br label %444

444:                                              ; preds = %385, %432, %434
  %445 = phi i32 [ %416, %385 ], [ %433, %432 ], [ %443, %434 ]
  %446 = and i32 %414, -97
  %447 = or i32 %445, %446
  store i32 %447, i32* %413, align 16
  %448 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %449 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %448, i64 0, i32 39
  %450 = load i64, i64* %449, align 8
  %451 = add i64 %450, 1072
  %452 = tail call i32 @lduw_phys(i64 noundef %451)
  %453 = add i64 %450, 1080
  %454 = tail call i64 @ldq_phys(i64 noundef %453)
  %455 = add i64 %450, 1076
  %456 = tail call i32 @ldl_phys(i64 noundef %455)
  %457 = add i64 %450, 1074
  %458 = tail call i32 @lduw_phys(i64 noundef %457)
  %459 = shl i32 %458, 8
  %460 = and i32 %459, 65280
  %461 = shl i32 %458, 12
  %462 = and i32 %461, 15728640
  %463 = or i32 %460, %462
  %464 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %448, i64 0, i32 24, i64 3, i32 0
  store i32 %452, i32* %464, align 8
  %465 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %448, i64 0, i32 24, i64 3, i32 1
  store i64 %454, i64* %465, align 8
  %466 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %448, i64 0, i32 24, i64 3, i32 2
  store i32 %456, i32* %466, align 8
  %467 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %448, i64 0, i32 24, i64 3, i32 3
  store i32 %463, i32* %467, align 4
  %468 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %448, i64 0, i32 21
  %469 = load i32, i32* %468, align 16
  %470 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %448, i64 0, i32 24, i64 2, i32 3
  %471 = load i32, i32* %470, align 4
  %472 = lshr i32 %471, 17
  %473 = and i32 %472, 32
  %474 = and i32 %469, 32768
  %475 = icmp eq i32 %474, 0
  br i1 %475, label %476, label %501

476:                                              ; preds = %444
  %477 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %448, i64 0, i32 29, i64 0
  %478 = load i64, i64* %477, align 16
  %479 = and i64 %478, 1
  %480 = icmp eq i64 %479, 0
  br i1 %480, label %489, label %481

481:                                              ; preds = %476
  %482 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %448, i64 0, i32 20
  %483 = load i64, i64* %482, align 8
  %484 = and i64 %483, 131072
  %485 = icmp ne i64 %484, 0
  %486 = and i32 %469, 16
  %487 = icmp eq i32 %486, 0
  %488 = select i1 %485, i1 true, i1 %487
  br i1 %488, label %489, label %491

489:                                              ; preds = %481, %476
  %490 = or i32 %473, 64
  br label %501

491:                                              ; preds = %481
  %492 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %448, i64 0, i32 24, i64 0, i32 1
  %493 = load i64, i64* %492, align 8
  %494 = or i64 %493, %454
  %495 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %448, i64 0, i32 24, i64 2, i32 1
  %496 = load i64, i64* %495, align 8
  %497 = or i64 %494, %496
  %498 = icmp eq i64 %497, 0
  %499 = select i1 %498, i32 0, i32 64
  %500 = or i32 %499, %473
  br label %501

501:                                              ; preds = %444, %489, %491
  %502 = phi i32 [ %473, %444 ], [ %490, %489 ], [ %500, %491 ]
  %503 = and i32 %469, -97
  %504 = or i32 %502, %503
  store i32 %504, i32* %468, align 16
  %505 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %506 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %505, i64 0, i32 39
  %507 = load i64, i64* %506, align 8
  %508 = add i64 %507, 1400
  %509 = tail call i64 @ldq_phys(i64 noundef %508)
  %510 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %511 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %510, i64 0, i32 18
  store i64 %509, i64* %511, align 8
  %512 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %510, i64 0, i32 39
  %513 = load i64, i64* %512, align 8
  %514 = add i64 %513, 1496
  %515 = tail call i64 @ldq_phys(i64 noundef %514)
  %516 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %517 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %516, i64 0, i32 0, i64 4
  store i64 %515, i64* %517, align 16
  %518 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %516, i64 0, i32 39
  %519 = load i64, i64* %518, align 8
  %520 = add i64 %519, 1528
  %521 = tail call i64 @ldq_phys(i64 noundef %520)
  %522 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %523 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %522, i64 0, i32 0, i64 0
  store i64 %521, i64* %523, align 16
  %524 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %525 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %524, i64 0, i32 39
  %526 = load i64, i64* %525, align 8
  %527 = add i64 %526, 1384
  %528 = tail call i64 @ldq_phys(i64 noundef %527)
  %529 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %530 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %529, i64 0, i32 65, i64 6
  store i64 %528, i64* %530, align 8
  %531 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %529, i64 0, i32 39
  %532 = load i64, i64* %531, align 8
  %533 = add i64 %532, 1376
  %534 = tail call i64 @ldq_phys(i64 noundef %533)
  %535 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %536 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %535, i64 0, i32 65, i64 7
  store i64 %534, i64* %536, align 8
  %537 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 16), align 8
  %538 = load i32, i32* %537, align 4
  %539 = icmp eq i32 %538, 0
  br i1 %539, label %546, label %540, !prof !5

540:                                              ; preds = %501
  %541 = load void (i32, i32)*, void (i32, i32)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 19), align 8
  %542 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %535, i64 0, i32 21
  %543 = load i32, i32* %542, align 16
  %544 = and i32 %543, 3
  tail call void %541(i32 noundef %544, i32 noundef 0)
  %545 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br label %546

546:                                              ; preds = %501, %540
  %547 = phi %struct.CPUX86State* [ %535, %501 ], [ %545, %540 ]
  %548 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %535, i64 0, i32 21
  %549 = load i32, i32* %548, align 16
  %550 = and i32 %549, -4
  store i32 %550, i32* %548, align 16
  %551 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %547, i64 0, i32 40
  %552 = load i64, i64* %551, align 16
  %553 = add i64 %552, 112
  %554 = zext i32 %0 to i64
  tail call void @stq_phys(i64 noundef %553, i64 noundef %554)
  %555 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %556 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %555, i64 0, i32 40
  %557 = load i64, i64* %556, align 16
  %558 = add i64 %557, 120
  tail call void @stq_phys(i64 noundef %558, i64 noundef %1)
  %559 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %560 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %559, i64 0, i32 40
  %561 = load i64, i64* %560, align 16
  %562 = add i64 %561, 136
  %563 = add i64 %561, 168
  %564 = tail call i32 @ldl_phys(i64 noundef %563)
  tail call void @stl_phys(i64 noundef %562, i32 noundef %564)
  %565 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %566 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %565, i64 0, i32 40
  %567 = load i64, i64* %566, align 16
  %568 = add i64 %567, 140
  %569 = add i64 %567, 172
  %570 = tail call i32 @ldl_phys(i64 noundef %569)
  tail call void @stl_phys(i64 noundef %568, i32 noundef %570)
  %571 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %572 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %571, i64 0, i32 40
  %573 = load i64, i64* %572, align 16
  %574 = add i64 %573, 168
  tail call void @stl_phys(i64 noundef %574, i32 noundef 0)
  %575 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %576 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %575, i64 0, i32 22
  %577 = load i32, i32* %576, align 4
  %578 = and i32 %577, -2
  store i32 %578, i32* %576, align 4
  %579 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %575, i64 0, i32 29, i64 0
  %580 = load i64, i64* %579, align 16
  %581 = or i64 %580, 1
  store i64 %581, i64* %579, align 16
  %582 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %575, i64 0, i32 20
  %583 = load i64, i64* %582, align 8
  %584 = and i64 %583, -131073
  store i64 %584, i64* %582, align 8
  %585 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %575, i64 0, i32 99
  store i32 -1, i32* %585, align 16
  %586 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %575, i64 0, i32 62
  store i32 0, i32* %586, align 8
  %587 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %575, i64 0, i32 68
  store i32 -1, i32* %587, align 4
  %588 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 16), align 8
  %589 = load i32, i32* %588, align 4
  %590 = icmp eq i32 %589, 0
  br i1 %590, label %594, label %591, !prof !5

591:                                              ; preds = %546
  %592 = load void (i32, i32)*, void (i32, i32)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 19), align 8
  tail call void %592(i32 noundef %21, i32 noundef 0)
  %593 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br label %594

594:                                              ; preds = %591, %546
  %595 = phi %struct.CPUX86State* [ %593, %591 ], [ %575, %546 ]
  tail call void @cpu_loop_exit(%struct.CPUX86State* noundef %595) #28
  unreachable
}

; Function Attrs: nofree nounwind
declare noundef i64 @fwrite(i8* nocapture noundef, i64 noundef, i64 noundef, %struct._IO_FILE* nocapture noundef) local_unnamed_addr #6

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) local_unnamed_addr #7

; Function Attrs: noreturn
declare void @cpu_loop_exit_restore(%struct.CPUX86State* noundef, i64 noundef) local_unnamed_addr #8

declare i64 @ldq_phys(i64 noundef) local_unnamed_addr #9

declare void @stl_phys(i64 noundef, i32 noundef) local_unnamed_addr #9

declare void @stw_phys(i64 noundef, i32 noundef) local_unnamed_addr #9

declare void @stq_phys(i64 noundef, i64 noundef) local_unnamed_addr #9

declare i32 @ldl_phys(i64 noundef) local_unnamed_addr #9

declare void @stb_phys(i64 noundef, i32 noundef) local_unnamed_addr #9

declare void @cpu_x86_update_cr0(%struct.CPUX86State* noundef, i32 noundef) local_unnamed_addr #9

declare void @cpu_x86_update_cr4(%struct.CPUX86State* noundef, i32 noundef) local_unnamed_addr #9

declare void @cpu_x86_update_cr3(%struct.CPUX86State* noundef, i64 noundef) local_unnamed_addr #9

declare i32 @lduw_phys(i64 noundef) local_unnamed_addr #9

; Function Attrs: inlinehint uwtable
define internal fastcc void @svm_load_seg_cache(i64 noundef %0, %struct.CPUX86State* nocapture noundef %1, i32 noundef %2) unnamed_addr #10 {
  %4 = tail call i32 @lduw_phys(i64 noundef %0)
  %5 = add i64 %0, 8
  %6 = tail call i64 @ldq_phys(i64 noundef %5)
  %7 = add i64 %0, 4
  %8 = tail call i32 @ldl_phys(i64 noundef %7)
  %9 = add i64 %0, 2
  %10 = tail call i32 @lduw_phys(i64 noundef %9)
  %11 = shl i32 %10, 8
  %12 = and i32 %11, 65280
  %13 = shl i32 %10, 12
  %14 = and i32 %13, 15728640
  %15 = or i32 %12, %14
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 24, i64 %16, i32 0
  store i32 %4, i32* %17, align 8
  %18 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 24, i64 %16, i32 1
  store i64 %6, i64* %18, align 8
  %19 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 24, i64 %16, i32 2
  store i32 %8, i32* %19, align 8
  %20 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 24, i64 %16, i32 3
  store i32 %15, i32* %20, align 4
  %21 = icmp eq i32 %2, 1
  %22 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 21
  %23 = load i32, i32* %22, align 16
  br i1 %21, label %24, label %40

24:                                               ; preds = %3
  %25 = and i32 %23, 16384
  %26 = icmp eq i32 %25, 0
  %27 = and i32 %10, 512
  %28 = icmp eq i32 %27, 0
  %29 = or i1 %28, %26
  br i1 %29, label %33, label %30

30:                                               ; preds = %24
  %31 = and i32 %23, -32881
  %32 = or i32 %31, 32816
  br label %40

33:                                               ; preds = %24
  %34 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 24, i64 1, i32 3
  %35 = load i32, i32* %34, align 4
  %36 = lshr i32 %35, 18
  %37 = and i32 %36, 16
  %38 = and i32 %23, -32785
  %39 = or i32 %37, %38
  br label %40

40:                                               ; preds = %33, %30, %3
  %41 = phi i32 [ %32, %30 ], [ %39, %33 ], [ %23, %3 ]
  %42 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 24, i64 2, i32 3
  %43 = load i32, i32* %42, align 4
  %44 = lshr i32 %43, 17
  %45 = and i32 %44, 32
  %46 = and i32 %41, 32768
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %75

48:                                               ; preds = %40
  %49 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 29, i64 0
  %50 = load i64, i64* %49, align 16
  %51 = and i64 %50, 1
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %61, label %53

53:                                               ; preds = %48
  %54 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 20
  %55 = load i64, i64* %54, align 8
  %56 = and i64 %55, 131072
  %57 = icmp ne i64 %56, 0
  %58 = and i32 %41, 16
  %59 = icmp eq i32 %58, 0
  %60 = select i1 %57, i1 true, i1 %59
  br i1 %60, label %61, label %63

61:                                               ; preds = %53, %48
  %62 = or i32 %45, 64
  br label %75

63:                                               ; preds = %53
  %64 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 24, i64 3, i32 1
  %65 = load i64, i64* %64, align 8
  %66 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 24, i64 0, i32 1
  %67 = load i64, i64* %66, align 8
  %68 = or i64 %67, %65
  %69 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 24, i64 2, i32 1
  %70 = load i64, i64* %69, align 8
  %71 = or i64 %68, %70
  %72 = icmp eq i64 %71, 0
  %73 = select i1 %72, i32 0, i32 64
  %74 = or i32 %73, %45
  br label %75

75:                                               ; preds = %40, %61, %63
  %76 = phi i32 [ %45, %40 ], [ %62, %61 ], [ %74, %63 ]
  %77 = and i32 %41, -97
  %78 = or i32 %76, %77
  store i32 %78, i32* %22, align 16
  ret void
}

; Function Attrs: noreturn
declare void @cpu_loop_exit(%struct.CPUX86State* noundef) local_unnamed_addr #8

declare i32 @ldub_phys(i64 noundef) local_unnamed_addr #9

declare void @tcg_llvm_before_memory_access(i64 noundef, i64 noundef, i32 noundef, i32 noundef) local_unnamed_addr #9

declare i64 @tcg_llvm_fork_and_concretize(i64 noundef, i64 noundef, i64 noundef, i64 noundef) local_unnamed_addr #9

; Function Attrs: uwtable
define zeroext i16 @helper_ldw_mmu(%struct.CPUX86State* noundef %0, i64 noundef %1, i32 noundef %2, i8* noundef %3) local_unnamed_addr #3 {
  %5 = and i32 %2, 15
  %6 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %10, label %9

9:                                                ; preds = %4
  tail call void @tcg_llvm_before_memory_access(i64 noundef %1, i64 noundef 0, i32 noundef 2, i32 noundef 0)
  br label %10

10:                                               ; preds = %9, %4
  %11 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %16, label %14

14:                                               ; preds = %10
  %15 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %1, i64 noundef 0, i64 noundef -1, i64 noundef 0)
  br label %16

16:                                               ; preds = %10, %14
  %17 = phi i64 [ %15, %14 ], [ %1, %10 ]
  %18 = lshr i64 %17, 12
  %19 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %18, i64 noundef 0, i64 noundef 4503599627370495, i64 noundef 0)
  %20 = and i64 %19, 1023
  %21 = zext i32 %5 to i64
  %22 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 82, i64 %21
  %23 = and i64 %17, -4096
  %24 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %22, align 8
  %25 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %24, i64 %20
  %26 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %25, i64 0, i32 0
  %27 = load i64, i64* %26, align 8
  %28 = and i64 %27, -2048
  %29 = icmp eq i64 %23, %28
  br i1 %29, label %32, label %30, !prof !5

30:                                               ; preds = %16
  %31 = shl i64 %19, 12
  br label %67

32:                                               ; preds = %67, %16
  %33 = phi %struct.CPUTLBEntry* [ %24, %16 ], [ %68, %67 ]
  %34 = phi %struct.CPUTLBEntry* [ %25, %16 ], [ %69, %67 ]
  %35 = phi i64 [ %27, %16 ], [ %71, %67 ]
  %36 = and i64 %35, 4063
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %51, label %38, !prof !5

38:                                               ; preds = %32
  %39 = and i64 %17, 1
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %54

41:                                               ; preds = %38
  %42 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 84, i64 %21, i64 %20
  %43 = load i64, i64* %42, align 8
  %44 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 90
  store %struct.CPUTLBEntry* %34, %struct.CPUTLBEntry** %44, align 8
  %45 = tail call zeroext i16 @io_read_chkw_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %43, i64 noundef %17, i8* noundef %3)
  %46 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %47 = load i32, i32* %46, align 4
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %74, label %49

49:                                               ; preds = %41
  %50 = zext i16 %45 to i64
  tail call void @tcg_llvm_after_memory_access(i64 noundef %17, i64 noundef %50, i32 noundef 2, i32 noundef 1, i64 noundef 0)
  br label %74

51:                                               ; preds = %32
  %52 = and i64 %17, 4095
  %53 = icmp eq i64 %52, 4095
  br i1 %53, label %54, label %56, !prof !6

54:                                               ; preds = %51, %38
  %55 = tail call fastcc zeroext i16 @slow_ldw_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %17, i32 noundef %5, i8* noundef %3)
  br label %74

56:                                               ; preds = %51
  %57 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %33, i64 %20, i32 4
  %58 = load i64, i64* %57, align 8
  %59 = add i64 %58, %17
  %60 = inttoptr i64 %59 to i16*
  %61 = load i16, i16* %60, align 2
  %62 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %63 = load i32, i32* %62, align 4
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %74, label %65

65:                                               ; preds = %56
  %66 = zext i16 %61 to i64
  tail call void @tcg_llvm_after_memory_access(i64 noundef %17, i64 noundef %66, i32 noundef 2, i32 noundef 0, i64 noundef 0)
  br label %74

67:                                               ; preds = %30, %67
  tail call void @tlb_fill(%struct.CPUX86State* undef, i64 noundef %17, i64 noundef %31, i32 noundef 0, i32 noundef %5, i8* noundef %3)
  %68 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %22, align 8
  %69 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %68, i64 %20
  %70 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %69, i64 0, i32 0
  %71 = load i64, i64* %70, align 8
  %72 = and i64 %71, -2048
  %73 = icmp eq i64 %23, %72
  br i1 %73, label %32, label %67, !prof !5

74:                                               ; preds = %49, %41, %56, %65, %54
  %75 = phi i16 [ %55, %54 ], [ %45, %49 ], [ %45, %41 ], [ %61, %65 ], [ %61, %56 ]
  ret i16 %75
}

declare void @tcg_llvm_after_memory_access(i64 noundef, i64 noundef, i32 noundef, i32 noundef, i64 noundef) local_unnamed_addr #9

; Function Attrs: uwtable
define zeroext i16 @io_read_chkw_mmu(%struct.CPUX86State* noundef %0, i64 noundef %1, i64 noundef %2, i8* noundef %3) local_unnamed_addr #3 {
  %5 = alloca i16, align 2
  %6 = bitcast i16* %5 to i8*
  %7 = tail call %struct.MemoryDescOps* @phys_get_ops(i64 noundef %1)
  %8 = ptrtoint i8* %3 to i64
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 76
  store i64 %8, i64* %9, align 8
  tail call void @tcg_llvm_write_mem_io_vaddr(i64 noundef %2, i32 noundef 0)
  %10 = tail call zeroext i1 @se_ismemfunc(%struct.MemoryDescOps* noundef %7, i32 noundef 0)
  br i1 %10, label %11, label %17

11:                                               ; preds = %4
  %12 = and i64 %1, -4096
  %13 = add i64 %12, %2
  %14 = tail call i64 @se_notdirty_mem_read(i64 noundef %13)
  %15 = inttoptr i64 %14 to i16*
  %16 = load i16, i16* %15, align 2
  store volatile i16 %16, i16* %5, align 2
  br label %19

17:                                               ; preds = %4
  %18 = tail call zeroext i16 @io_readw_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %1, i64 noundef %2, i8* noundef %3)
  store volatile i16 %18, i16* %5, align 2
  br label %19

19:                                               ; preds = %11, %17
  %20 = load volatile i16, i16* %5, align 2
  %21 = zext i16 %20 to i64
  %22 = tail call i64 @tcg_llvm_trace_mmio_access(i64 noundef %2, i64 noundef %21, i32 noundef 2, i32 noundef 0)
  tail call void @tcg_llvm_write_mem_io_vaddr(i64 noundef 0, i32 noundef 1)
  %23 = load volatile i16, i16* %5, align 2
  ret i16 %23
}

; Function Attrs: uwtable
define internal fastcc zeroext i16 @slow_ldw_mmu(%struct.CPUX86State* noundef %0, i64 noundef %1, i32 noundef %2, i8* noundef %3) unnamed_addr #3 {
  %5 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %9, label %8

8:                                                ; preds = %4
  tail call void @tcg_llvm_before_memory_access(i64 noundef %1, i64 noundef 0, i32 noundef 2, i32 noundef 0)
  br label %9

9:                                                ; preds = %8, %4
  %10 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %15, label %13

13:                                               ; preds = %9
  %14 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %1, i64 noundef 0, i64 noundef -1, i64 noundef 0)
  br label %15

15:                                               ; preds = %9, %13
  %16 = phi i64 [ %14, %13 ], [ %1, %9 ]
  %17 = lshr i64 %16, 12
  %18 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %17, i64 noundef 0, i64 noundef 4503599627370495, i64 noundef 0)
  %19 = and i64 %18, 1023
  %20 = zext i32 %2 to i64
  %21 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 82, i64 %20
  %22 = and i64 %16, -4096
  %23 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %21, align 8
  %24 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %23, i64 %19
  %25 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %24, i64 0, i32 0
  %26 = load i64, i64* %25, align 8
  %27 = and i64 %26, -2048
  %28 = icmp eq i64 %22, %27
  br i1 %28, label %31, label %29

29:                                               ; preds = %15
  %30 = shl i64 %18, 12
  br label %74

31:                                               ; preds = %74, %15
  %32 = phi %struct.CPUTLBEntry* [ %23, %15 ], [ %75, %74 ]
  %33 = phi %struct.CPUTLBEntry* [ %24, %15 ], [ %76, %74 ]
  %34 = phi i64 [ %26, %15 ], [ %78, %74 ]
  %35 = and i64 %34, 4063
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %50, label %37

37:                                               ; preds = %31
  %38 = and i64 %16, 1
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %40, label %55

40:                                               ; preds = %37
  %41 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 84, i64 %20, i64 %19
  %42 = load i64, i64* %41, align 8
  %43 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 90
  store %struct.CPUTLBEntry* %33, %struct.CPUTLBEntry** %43, align 8
  %44 = tail call zeroext i16 @io_read_chkw_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %42, i64 noundef %16, i8* noundef %3)
  %45 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %46 = load i32, i32* %45, align 4
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %53, label %48

48:                                               ; preds = %40
  %49 = zext i16 %44 to i64
  tail call void @tcg_llvm_after_memory_access(i64 noundef %16, i64 noundef %49, i32 noundef 2, i32 noundef 1, i64 noundef 0)
  br label %53

50:                                               ; preds = %31
  %51 = and i64 %16, 4095
  %52 = icmp eq i64 %51, 4095
  br i1 %52, label %55, label %63

53:                                               ; preds = %72, %63, %40, %48, %55
  %54 = phi i16 [ %62, %55 ], [ %44, %48 ], [ %44, %40 ], [ %68, %72 ], [ %68, %63 ]
  ret i16 %54

55:                                               ; preds = %50, %37
  %56 = and i64 %16, -2
  %57 = add i64 %56, 2
  %58 = tail call fastcc zeroext i16 @slow_ldw_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %56, i32 noundef %2, i8* noundef %3)
  %59 = tail call fastcc zeroext i16 @slow_ldw_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %57, i32 noundef %2, i8* noundef %3)
  %60 = trunc i64 %16 to i16
  %61 = shl i16 %60, 3
  %62 = tail call i16 @llvm.fshr.i16(i16 %59, i16 %58, i16 %61)
  br label %53

63:                                               ; preds = %50
  %64 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %32, i64 %19, i32 4
  %65 = load i64, i64* %64, align 8
  %66 = add i64 %65, %16
  %67 = inttoptr i64 %66 to i16*
  %68 = load i16, i16* %67, align 2
  %69 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %70 = load i32, i32* %69, align 4
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %53, label %72

72:                                               ; preds = %63
  %73 = zext i16 %68 to i64
  tail call void @tcg_llvm_after_memory_access(i64 noundef %16, i64 noundef %73, i32 noundef 2, i32 noundef 0, i64 noundef 0)
  br label %53

74:                                               ; preds = %29, %74
  tail call void @tlb_fill(%struct.CPUX86State* undef, i64 noundef %16, i64 noundef %30, i32 noundef 0, i32 noundef %2, i8* noundef %3)
  %75 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %21, align 8
  %76 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %75, i64 %19
  %77 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %76, i64 0, i32 0
  %78 = load i64, i64* %77, align 8
  %79 = and i64 %78, -2048
  %80 = icmp eq i64 %22, %79
  br i1 %80, label %31, label %74
}

; Function Attrs: uwtable
define void @tlb_fill(%struct.CPUX86State* nocapture readnone %0, i64 noundef %1, i64 noundef %2, i32 noundef %3, i32 noundef %4, i8* noundef %5) local_unnamed_addr #3 {
  %7 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 14), align 8
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %12, label %10, !prof !5

10:                                               ; preds = %6
  %11 = load void (i64, i32, i8*)*, void (i64, i32, i8*)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 22), align 8
  tail call void %11(i64 noundef %1, i32 noundef %3, i8* noundef %5)
  br label %12

12:                                               ; preds = %10, %6
  %13 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %14 = tail call i32 @cpu_x86_handle_mmu_fault(%struct.CPUX86State* noundef %13, i64 noundef %2, i32 noundef %3, i32 noundef %4)
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %45, label %16

16:                                               ; preds = %12
  %17 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %18 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %17, i64 0, i32 99
  %19 = load i32, i32* %18, align 16
  %20 = icmp eq i32 %19, 14
  br i1 %20, label %21, label %32

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %17, i64 0, i32 47
  %23 = load i32, i32* %22, align 16
  %24 = and i32 %23, 16384
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %30, label %26

26:                                               ; preds = %21
  %27 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %17, i64 0, i32 40
  %28 = load i64, i64* %27, align 16
  %29 = add i64 %28, 128
  tail call void @stq_phys(i64 noundef %29, i64 noundef %1)
  br label %32

30:                                               ; preds = %21
  %31 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %17, i64 0, i32 29, i64 2
  store i64 %1, i64* %31, align 16
  br label %32

32:                                               ; preds = %26, %30, %16
  %33 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 13), align 8
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %38, label %36, !prof !5

36:                                               ; preds = %32
  %37 = load void (i64, i32, i8*)*, void (i64, i32, i8*)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 21), align 8
  tail call void %37(i64 noundef %1, i32 noundef %3, i8* noundef %5)
  br label %38

38:                                               ; preds = %36, %32
  %39 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %40 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %39, i64 0, i32 99
  %41 = load i32, i32* %40, align 16
  %42 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %39, i64 0, i32 62
  %43 = load i32, i32* %42, align 8
  %44 = ptrtoint i8* %5 to i64
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef %39, i32 noundef %41, i32 noundef %43, i64 noundef %44) #28
  unreachable

45:                                               ; preds = %12
  ret void
}

declare i32 @cpu_x86_handle_mmu_fault(%struct.CPUX86State* noundef, i64 noundef, i32 noundef, i32 noundef) local_unnamed_addr #9

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i16 @llvm.fshr.i16(i16, i16, i16) #11

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #12

declare %struct.MemoryDescOps* @phys_get_ops(i64 noundef) local_unnamed_addr #9

declare void @tcg_llvm_write_mem_io_vaddr(i64 noundef, i32 noundef) local_unnamed_addr #9

declare zeroext i1 @se_ismemfunc(%struct.MemoryDescOps* noundef, i32 noundef) local_unnamed_addr #9

declare i64 @se_notdirty_mem_read(i64 noundef) local_unnamed_addr #9

declare zeroext i16 @io_readw_mmu(%struct.CPUX86State* noundef, i64 noundef, i64 noundef, i8* noundef) local_unnamed_addr #9

declare i64 @tcg_llvm_trace_mmio_access(i64 noundef, i64 noundef, i32 noundef, i32 noundef) local_unnamed_addr #9

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #12

; Function Attrs: uwtable
define void @helper_check_iow(i32 noundef %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 26, i32 3
  %4 = load i32, i32* %3, align 4
  %5 = and i32 %4, 36608
  %6 = icmp eq i32 %5, 35072
  br i1 %6, label %7, label %30

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 26, i32 2
  %9 = load i32, i32* %8, align 8
  %10 = icmp ult i32 %9, 103
  br i1 %10, label %30, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 26, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = add i64 %13, 102
  %15 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* noundef nonnull %2, i64 noundef %14)
  %16 = ashr i32 %0, 3
  %17 = add nsw i32 %15, %16
  %18 = add nsw i32 %17, 1
  %19 = load i32, i32* %8, align 8
  %20 = icmp ugt i32 %18, %19
  br i1 %20, label %30, label %21

21:                                               ; preds = %11
  %22 = load i64, i64* %12, align 8
  %23 = sext i32 %17 to i64
  %24 = add i64 %22, %23
  %25 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* noundef nonnull %2, i64 noundef %24)
  %26 = and i32 %0, 7
  %27 = ashr i32 %25, %26
  %28 = and i32 %27, 3
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %31, label %30

30:                                               ; preds = %21, %11, %7, %1
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %2, i32 noundef 13, i32 noundef 0, i64 noundef 0)
  unreachable

31:                                               ; preds = %21
  ret void
}

; Function Attrs: uwtable
define void @helper_check_iol(i32 noundef %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 26, i32 3
  %4 = load i32, i32* %3, align 4
  %5 = and i32 %4, 36608
  %6 = icmp eq i32 %5, 35072
  br i1 %6, label %7, label %30

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 26, i32 2
  %9 = load i32, i32* %8, align 8
  %10 = icmp ult i32 %9, 103
  br i1 %10, label %30, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 26, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = add i64 %13, 102
  %15 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* noundef nonnull %2, i64 noundef %14)
  %16 = ashr i32 %0, 3
  %17 = add nsw i32 %15, %16
  %18 = add nsw i32 %17, 1
  %19 = load i32, i32* %8, align 8
  %20 = icmp ugt i32 %18, %19
  br i1 %20, label %30, label %21

21:                                               ; preds = %11
  %22 = load i64, i64* %12, align 8
  %23 = sext i32 %17 to i64
  %24 = add i64 %22, %23
  %25 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* noundef nonnull %2, i64 noundef %24)
  %26 = and i32 %0, 7
  %27 = ashr i32 %25, %26
  %28 = and i32 %27, 15
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %31, label %30

30:                                               ; preds = %21, %11, %7, %1
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %2, i32 noundef 13, i32 noundef 0, i64 noundef 0)
  unreachable

31:                                               ; preds = %21
  ret void
}

; Function Attrs: uwtable
define void @helper_outb(i32 noundef %0, i32 noundef %1) local_unnamed_addr #3 {
  %3 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 6), align 8
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %10, label %6

6:                                                ; preds = %2
  %7 = zext i32 %0 to i64
  %8 = tail call i64 @tcg_llvm_get_value(i64 noundef %7, i1 noundef zeroext false)
  %9 = trunc i64 %8 to i32
  br label %10

10:                                               ; preds = %6, %2
  %11 = phi i32 [ %9, %6 ], [ %0, %2 ]
  %12 = zext i32 %11 to i64
  %13 = zext i32 %1 to i64
  %14 = tail call i64 @tcg_llvm_trace_port_access(i64 noundef %12, i64 noundef %13, i32 noundef 8, i32 noundef 1)
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %28, label %16

16:                                               ; preds = %10
  %17 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 5), align 8
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %25, label %20

20:                                               ; preds = %16
  %21 = and i32 %1, 255
  %22 = zext i32 %21 to i64
  %23 = tail call i64 @tcg_llvm_get_value(i64 noundef %22, i1 noundef zeroext false)
  %24 = trunc i64 %23 to i32
  br label %25

25:                                               ; preds = %20, %16
  %26 = phi i32 [ %24, %20 ], [ %1, %16 ]
  %27 = trunc i32 %26 to i8
  tail call void @cpu_outb(i32 noundef %11, i8 noundef zeroext %27)
  br label %28

28:                                               ; preds = %25, %10
  ret void
}

declare i64 @tcg_llvm_get_value(i64 noundef, i1 noundef zeroext) local_unnamed_addr #9

declare i64 @tcg_llvm_trace_port_access(i64 noundef, i64 noundef, i32 noundef, i32 noundef) local_unnamed_addr #9

declare void @cpu_outb(i32 noundef, i8 noundef zeroext) local_unnamed_addr #9

; Function Attrs: uwtable
define i64 @helper_inb(i32 noundef %0) local_unnamed_addr #3 {
  %2 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 6), align 8
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = zext i32 %0 to i64
  %7 = tail call i64 @tcg_llvm_get_value(i64 noundef %6, i1 noundef zeroext false)
  %8 = trunc i64 %7 to i32
  br label %9

9:                                                ; preds = %5, %1
  %10 = phi i32 [ %8, %5 ], [ %0, %1 ]
  %11 = tail call zeroext i8 @cpu_inb(i32 noundef %10)
  %12 = zext i8 %11 to i64
  %13 = zext i32 %10 to i64
  %14 = tail call i64 @tcg_llvm_trace_port_access(i64 noundef %13, i64 noundef %12, i32 noundef 8, i32 noundef 0)
  ret i64 %14
}

declare zeroext i8 @cpu_inb(i32 noundef) local_unnamed_addr #9

; Function Attrs: uwtable
define void @helper_outw(i32 noundef %0, i32 noundef %1) local_unnamed_addr #3 {
  %3 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 6), align 8
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %10, label %6

6:                                                ; preds = %2
  %7 = zext i32 %0 to i64
  %8 = tail call i64 @tcg_llvm_get_value(i64 noundef %7, i1 noundef zeroext false)
  %9 = trunc i64 %8 to i32
  br label %10

10:                                               ; preds = %6, %2
  %11 = phi i32 [ %9, %6 ], [ %0, %2 ]
  %12 = zext i32 %11 to i64
  %13 = zext i32 %1 to i64
  %14 = tail call i64 @tcg_llvm_trace_port_access(i64 noundef %12, i64 noundef %13, i32 noundef 16, i32 noundef 1)
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %28, label %16

16:                                               ; preds = %10
  %17 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 5), align 8
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %25, label %20

20:                                               ; preds = %16
  %21 = and i32 %1, 65535
  %22 = zext i32 %21 to i64
  %23 = tail call i64 @tcg_llvm_get_value(i64 noundef %22, i1 noundef zeroext false)
  %24 = trunc i64 %23 to i32
  br label %25

25:                                               ; preds = %20, %16
  %26 = phi i32 [ %24, %20 ], [ %1, %16 ]
  %27 = trunc i32 %26 to i16
  tail call void @cpu_outw(i32 noundef %11, i16 noundef zeroext %27)
  br label %28

28:                                               ; preds = %25, %10
  ret void
}

declare void @cpu_outw(i32 noundef, i16 noundef zeroext) local_unnamed_addr #9

; Function Attrs: uwtable
define i64 @helper_inw(i32 noundef %0) local_unnamed_addr #3 {
  %2 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 6), align 8
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = zext i32 %0 to i64
  %7 = tail call i64 @tcg_llvm_get_value(i64 noundef %6, i1 noundef zeroext false)
  %8 = trunc i64 %7 to i32
  br label %9

9:                                                ; preds = %5, %1
  %10 = phi i32 [ %8, %5 ], [ %0, %1 ]
  %11 = tail call zeroext i16 @cpu_inw(i32 noundef %10)
  %12 = zext i16 %11 to i64
  %13 = zext i32 %10 to i64
  %14 = tail call i64 @tcg_llvm_trace_port_access(i64 noundef %13, i64 noundef %12, i32 noundef 16, i32 noundef 0)
  ret i64 %14
}

declare zeroext i16 @cpu_inw(i32 noundef) local_unnamed_addr #9

; Function Attrs: uwtable
define void @helper_outl(i32 noundef %0, i32 noundef %1) local_unnamed_addr #3 {
  %3 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 6), align 8
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %10, label %6

6:                                                ; preds = %2
  %7 = zext i32 %0 to i64
  %8 = tail call i64 @tcg_llvm_get_value(i64 noundef %7, i1 noundef zeroext false)
  %9 = trunc i64 %8 to i32
  br label %10

10:                                               ; preds = %6, %2
  %11 = phi i32 [ %9, %6 ], [ %0, %2 ]
  %12 = zext i32 %11 to i64
  %13 = zext i32 %1 to i64
  %14 = tail call i64 @tcg_llvm_trace_port_access(i64 noundef %12, i64 noundef %13, i32 noundef 32, i32 noundef 1)
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %25, label %16

16:                                               ; preds = %10
  %17 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 5), align 8
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %23, label %20

20:                                               ; preds = %16
  %21 = tail call i64 @tcg_llvm_get_value(i64 noundef %13, i1 noundef zeroext false)
  %22 = trunc i64 %21 to i32
  br label %23

23:                                               ; preds = %20, %16
  %24 = phi i32 [ %22, %20 ], [ %1, %16 ]
  tail call void @cpu_outl(i32 noundef %11, i32 noundef %24)
  br label %25

25:                                               ; preds = %23, %10
  ret void
}

declare void @cpu_outl(i32 noundef, i32 noundef) local_unnamed_addr #9

; Function Attrs: uwtable
define i64 @helper_inl(i32 noundef %0) local_unnamed_addr #3 {
  %2 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 6), align 8
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = zext i32 %0 to i64
  %7 = tail call i64 @tcg_llvm_get_value(i64 noundef %6, i1 noundef zeroext false)
  %8 = trunc i64 %7 to i32
  br label %9

9:                                                ; preds = %5, %1
  %10 = phi i32 [ %8, %5 ], [ %0, %1 ]
  %11 = tail call i32 @cpu_inl(i32 noundef %10)
  %12 = zext i32 %11 to i64
  %13 = zext i32 %10 to i64
  %14 = tail call i64 @tcg_llvm_trace_port_access(i64 noundef %13, i64 noundef %12, i32 noundef 32, i32 noundef 0)
  ret i64 %14
}

declare i32 @cpu_inl(i32 noundef) local_unnamed_addr #9

; Function Attrs: uwtable
define void @helper_syscall(i32 noundef %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 21
  %4 = load i32, i32* %3, align 16
  %5 = and i32 %4, 3
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 37
  %7 = load i64, i64* %6, align 8
  %8 = and i64 %7, 1
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %10, label %11

10:                                               ; preds = %1
  tail call fastcc void @raise_interrupt2(%struct.CPUX86State* noundef nonnull %2, i32 noundef 6, i32 noundef 0, i32 noundef 0, i32 noundef 0, i64 noundef 0) #28
  unreachable

11:                                               ; preds = %1
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 38
  %13 = load i64, i64* %12, align 16
  %14 = lshr i64 %13, 32
  %15 = trunc i64 %14 to i32
  %16 = and i32 %4, 16384
  %17 = icmp eq i32 %16, 0
  %18 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 18
  %19 = load i64, i64* %18, align 8
  br i1 %17, label %155, label %20

20:                                               ; preds = %11
  %21 = sext i32 %0 to i64
  %22 = add i64 %19, %21
  %23 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 0, i64 1
  store i64 %22, i64* %23, align 8
  %24 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 20
  %25 = load i64, i64* %24, align 8
  %26 = trunc i64 %25 to i32
  %27 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 1
  %28 = load i64, i64* %27, align 16
  %29 = trunc i64 %28 to i32
  %30 = tail call i32 @helper_cc_compute_all(i32 noundef %29) #30
  %31 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 19
  %32 = load i32, i32* %31, align 16
  %33 = and i32 %32, 1024
  %34 = or i32 %30, %26
  %35 = or i32 %34, %33
  %36 = or i32 %35, 2
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 0, i64 11
  store i64 %37, i64* %38, align 8
  %39 = and i32 %4, 32768
  %40 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 16), align 8
  %41 = load i32, i32* %40, align 4
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %47, label %43, !prof !5

43:                                               ; preds = %20
  %44 = load void (i32, i32)*, void (i32, i32)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 19), align 8
  tail call void %44(i32 noundef %5, i32 noundef 0)
  %45 = load i32, i32* %3, align 16
  %46 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br label %47

47:                                               ; preds = %20, %43
  %48 = phi %struct.CPUX86State* [ %2, %20 ], [ %46, %43 ]
  %49 = phi i32 [ %4, %20 ], [ %45, %43 ]
  %50 = and i32 %49, -4
  store i32 %50, i32* %3, align 16
  %51 = and i32 %15, 65532
  %52 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %48, i64 0, i32 24, i64 1, i32 0
  store i32 %51, i32* %52, align 8
  %53 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %48, i64 0, i32 24, i64 1, i32 1
  store i64 0, i64* %53, align 8
  %54 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %48, i64 0, i32 24, i64 1, i32 2
  store i32 -1, i32* %54, align 8
  %55 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %48, i64 0, i32 24, i64 1, i32 3
  store i32 10525440, i32* %55, align 4
  %56 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %48, i64 0, i32 21
  %57 = load i32, i32* %56, align 16
  %58 = and i32 %57, 16384
  %59 = icmp eq i32 %58, 0
  %60 = and i32 %57, -32881
  %61 = or i32 %60, 32816
  %62 = and i32 %57, -32785
  %63 = select i1 %59, i32 %62, i32 %61
  %64 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %48, i64 0, i32 24, i64 2, i32 3
  %65 = load i32, i32* %64, align 4
  %66 = lshr i32 %65, 17
  %67 = and i32 %66, 32
  %68 = and i32 %63, 32768
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %97

70:                                               ; preds = %47
  %71 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %48, i64 0, i32 29, i64 0
  %72 = load i64, i64* %71, align 16
  %73 = and i64 %72, 1
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %83, label %75

75:                                               ; preds = %70
  %76 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %48, i64 0, i32 20
  %77 = load i64, i64* %76, align 8
  %78 = and i64 %77, 131072
  %79 = icmp ne i64 %78, 0
  %80 = and i32 %63, 16
  %81 = icmp eq i32 %80, 0
  %82 = select i1 %79, i1 true, i1 %81
  br i1 %82, label %83, label %85

83:                                               ; preds = %75, %70
  %84 = or i32 %67, 64
  br label %97

85:                                               ; preds = %75
  %86 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %48, i64 0, i32 24, i64 3, i32 1
  %87 = load i64, i64* %86, align 8
  %88 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %48, i64 0, i32 24, i64 0, i32 1
  %89 = load i64, i64* %88, align 8
  %90 = or i64 %89, %87
  %91 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %48, i64 0, i32 24, i64 2, i32 1
  %92 = load i64, i64* %91, align 8
  %93 = or i64 %90, %92
  %94 = icmp eq i64 %93, 0
  %95 = select i1 %94, i32 0, i32 64
  %96 = or i32 %95, %67
  br label %97

97:                                               ; preds = %47, %83, %85
  %98 = phi i32 [ %67, %47 ], [ %84, %83 ], [ %96, %85 ]
  %99 = and i32 %63, -97
  %100 = or i32 %98, %99
  store i32 %100, i32* %56, align 16
  %101 = add i32 %15, 8
  %102 = and i32 %101, 65532
  %103 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %48, i64 0, i32 24, i64 2, i32 0
  store i32 %102, i32* %103, align 8
  %104 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %48, i64 0, i32 24, i64 2, i32 1
  store i64 0, i64* %104, align 8
  %105 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %48, i64 0, i32 24, i64 2, i32 2
  store i32 -1, i32* %105, align 8
  store i32 12620544, i32* %64, align 4
  br i1 %69, label %106, label %127

106:                                              ; preds = %97
  %107 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %48, i64 0, i32 29, i64 0
  %108 = load i64, i64* %107, align 16
  %109 = and i64 %108, 1
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %127, label %111

111:                                              ; preds = %106
  %112 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %48, i64 0, i32 20
  %113 = load i64, i64* %112, align 8
  %114 = and i64 %113, 131072
  %115 = icmp ne i64 %114, 0
  %116 = and i32 %63, 16
  %117 = icmp eq i32 %116, 0
  %118 = select i1 %115, i1 true, i1 %117
  br i1 %118, label %127, label %119

119:                                              ; preds = %111
  %120 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %48, i64 0, i32 24, i64 3, i32 1
  %121 = load i64, i64* %120, align 8
  %122 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %48, i64 0, i32 24, i64 0, i32 1
  %123 = load i64, i64* %122, align 8
  %124 = or i64 %123, %121
  %125 = icmp eq i64 %124, 0
  %126 = select i1 %125, i32 32, i32 96
  br label %127

127:                                              ; preds = %106, %111, %97, %119
  %128 = phi i32 [ 32, %97 ], [ %126, %119 ], [ 96, %111 ], [ 96, %106 ]
  %129 = or i32 %128, %99
  store i32 %129, i32* %56, align 16
  %130 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %48, i64 0, i32 1
  %131 = load i64, i64* %130, align 16
  %132 = trunc i64 %131 to i32
  %133 = tail call i32 @helper_cc_compute_all(i32 noundef %132)
  %134 = zext i32 %133 to i64
  %135 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %48, i64 0, i32 53
  %136 = load i64, i64* %135, align 16
  %137 = xor i64 %136, -1
  %138 = and i64 %134, %137
  %139 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %48, i64 0, i32 2
  store i64 %138, i64* %139, align 8
  store i64 1, i64* %130, align 16
  %140 = and i64 %136, 1024
  %141 = icmp eq i64 %140, 0
  br i1 %141, label %144, label %142

142:                                              ; preds = %127
  %143 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %48, i64 0, i32 19
  store i32 1, i32* %143, align 16
  br label %144

144:                                              ; preds = %142, %127
  %145 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %48, i64 0, i32 20
  %146 = load i64, i64* %145, align 8
  %147 = and i64 %146, %137
  store i64 %147, i64* %145, align 8
  %148 = icmp eq i32 %39, 0
  br i1 %148, label %152, label %149

149:                                              ; preds = %144
  %150 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %48, i64 0, i32 51
  %151 = load i64, i64* %150, align 16
  br label %237

152:                                              ; preds = %144
  %153 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %48, i64 0, i32 52
  %154 = load i64, i64* %153, align 8
  br label %237

155:                                              ; preds = %11
  %156 = trunc i64 %19 to i32
  %157 = add i32 %156, %0
  %158 = zext i32 %157 to i64
  %159 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 0, i64 1
  store i64 %158, i64* %159, align 8
  %160 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 16), align 8
  %161 = load i32, i32* %160, align 4
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %167, label %163, !prof !5

163:                                              ; preds = %155
  %164 = load void (i32, i32)*, void (i32, i32)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 19), align 8
  tail call void %164(i32 noundef %5, i32 noundef 0)
  %165 = load i32, i32* %3, align 16
  %166 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br label %167

167:                                              ; preds = %155, %163
  %168 = phi %struct.CPUX86State* [ %2, %155 ], [ %166, %163 ]
  %169 = phi i32 [ %4, %155 ], [ %165, %163 ]
  %170 = and i32 %169, -4
  store i32 %170, i32* %3, align 16
  %171 = and i32 %15, 65532
  %172 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %168, i64 0, i32 24, i64 1, i32 0
  store i32 %171, i32* %172, align 8
  %173 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %168, i64 0, i32 24, i64 1, i32 1
  store i64 0, i64* %173, align 8
  %174 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %168, i64 0, i32 24, i64 1, i32 2
  store i32 -1, i32* %174, align 8
  %175 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %168, i64 0, i32 24, i64 1, i32 3
  store i32 12622592, i32* %175, align 4
  %176 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %168, i64 0, i32 21
  %177 = load i32, i32* %176, align 16
  %178 = and i32 %177, -32881
  %179 = or i32 %178, 16
  %180 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %168, i64 0, i32 24, i64 2, i32 3
  %181 = load i32, i32* %180, align 4
  %182 = lshr i32 %181, 17
  %183 = and i32 %182, 32
  %184 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %168, i64 0, i32 29, i64 0
  %185 = load i64, i64* %184, align 16
  %186 = and i64 %185, 1
  %187 = icmp eq i64 %186, 0
  br i1 %187, label %193, label %188

188:                                              ; preds = %167
  %189 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %168, i64 0, i32 20
  %190 = load i64, i64* %189, align 8
  %191 = and i64 %190, 131072
  %192 = icmp eq i64 %191, 0
  br i1 %192, label %195, label %193

193:                                              ; preds = %188, %167
  %194 = or i32 %183, 64
  br label %207

195:                                              ; preds = %188
  %196 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %168, i64 0, i32 24, i64 3, i32 1
  %197 = load i64, i64* %196, align 8
  %198 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %168, i64 0, i32 24, i64 0, i32 1
  %199 = load i64, i64* %198, align 8
  %200 = or i64 %199, %197
  %201 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %168, i64 0, i32 24, i64 2, i32 1
  %202 = load i64, i64* %201, align 8
  %203 = or i64 %200, %202
  %204 = icmp eq i64 %203, 0
  %205 = select i1 %204, i32 0, i32 64
  %206 = or i32 %205, %183
  br label %207

207:                                              ; preds = %193, %195
  %208 = phi i32 [ %194, %193 ], [ %206, %195 ]
  %209 = or i32 %208, %179
  store i32 %209, i32* %176, align 16
  %210 = add i32 %15, 8
  %211 = and i32 %210, 65532
  %212 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %168, i64 0, i32 24, i64 2, i32 0
  store i32 %211, i32* %212, align 8
  %213 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %168, i64 0, i32 24, i64 2, i32 1
  store i64 0, i64* %213, align 8
  %214 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %168, i64 0, i32 24, i64 2, i32 2
  store i32 -1, i32* %214, align 8
  store i32 12620544, i32* %180, align 4
  %215 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %168, i64 0, i32 20
  %216 = load i64, i64* %215, align 8
  %217 = xor i1 %187, true
  %218 = and i64 %216, 131072
  %219 = icmp eq i64 %218, 0
  %220 = select i1 %217, i1 %219, i1 false
  br i1 %220, label %221, label %229

221:                                              ; preds = %207
  %222 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %168, i64 0, i32 24, i64 3, i32 1
  %223 = load i64, i64* %222, align 8
  %224 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %168, i64 0, i32 24, i64 0, i32 1
  %225 = load i64, i64* %224, align 8
  %226 = or i64 %225, %223
  %227 = icmp eq i64 %226, 0
  %228 = select i1 %227, i32 32, i32 96
  br label %229

229:                                              ; preds = %207, %221
  %230 = phi i32 [ %228, %221 ], [ 96, %207 ]
  %231 = or i32 %230, %179
  store i32 %231, i32* %176, align 16
  %232 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %168, i64 0, i32 20
  %233 = and i64 %216, -197121
  store i64 %233, i64* %232, align 8
  %234 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %168, i64 0, i32 38
  %235 = load i64, i64* %234, align 16
  %236 = and i64 %235, 4294967295
  br label %237

237:                                              ; preds = %149, %152, %229
  %238 = phi %struct.CPUX86State* [ %48, %149 ], [ %48, %152 ], [ %168, %229 ]
  %239 = phi i64 [ %151, %149 ], [ %154, %152 ], [ %236, %229 ]
  %240 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %238, i64 0, i32 18
  store i64 %239, i64* %240, align 8
  %241 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 16), align 8
  %242 = load i32, i32* %241, align 4
  %243 = icmp eq i32 %242, 0
  br i1 %243, label %246, label %244, !prof !5

244:                                              ; preds = %237
  %245 = load void (i32, i32)*, void (i32, i32)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 19), align 8
  tail call void %245(i32 noundef %5, i32 noundef 0)
  br label %246

246:                                              ; preds = %244, %237
  ret void
}

; Function Attrs: noreturn uwtable
define void @raise_exception_err(%struct.CPUX86State* noundef %0, i32 noundef %1, i32 noundef %2) local_unnamed_addr #4 {
  tail call fastcc void @raise_interrupt2(%struct.CPUX86State* noundef %0, i32 noundef %1, i32 noundef 0, i32 noundef %2, i32 noundef 0, i64 noundef 0) #28
  unreachable
}

; Function Attrs: uwtable
define void @helper_sysret(i32 noundef %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 21
  %4 = load i32, i32* %3, align 16
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 37
  %6 = load i64, i64* %5, align 8
  %7 = and i64 %6, 1
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %9, label %10

9:                                                ; preds = %1
  tail call fastcc void @raise_interrupt2(%struct.CPUX86State* noundef nonnull %2, i32 noundef 6, i32 noundef 0, i32 noundef 0, i32 noundef 0, i64 noundef 0) #28
  unreachable

10:                                               ; preds = %1
  %11 = and i32 %4, 3
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 29, i64 0
  %13 = load i64, i64* %12, align 16
  %14 = and i64 %13, 1
  %15 = icmp eq i64 %14, 0
  %16 = icmp ne i32 %11, 0
  %17 = select i1 %15, i1 true, i1 %16
  br i1 %17, label %18, label %19

18:                                               ; preds = %10
  tail call fastcc void @raise_interrupt2(%struct.CPUX86State* noundef nonnull %2, i32 noundef 13, i32 noundef 0, i32 noundef 0, i32 noundef 0, i64 noundef 0) #28
  unreachable

19:                                               ; preds = %10
  %20 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 38
  %21 = load i64, i64* %20, align 16
  %22 = lshr i64 %21, 48
  %23 = trunc i64 %22 to i32
  %24 = and i32 %4, 16384
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %128, label %26

26:                                               ; preds = %19
  %27 = icmp eq i32 %0, 2
  br i1 %27, label %28, label %44

28:                                               ; preds = %26
  %29 = add nuw nsw i32 %23, 16
  %30 = or i32 %29, 3
  %31 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 24, i64 1, i32 0
  store i32 %30, i32* %31, align 8
  %32 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 24, i64 1, i32 1
  store i64 0, i64* %32, align 8
  %33 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 24, i64 1, i32 2
  store i32 -1, i32* %33, align 8
  %34 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 24, i64 1, i32 3
  store i32 10550016, i32* %34, align 4
  %35 = and i32 %4, -32881
  %36 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 24, i64 2, i32 3
  %37 = load i32, i32* %36, align 4
  %38 = lshr i32 %37, 17
  %39 = and i32 %38, 32
  %40 = or i32 %35, %39
  %41 = or i32 %40, 32784
  %42 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 0, i64 1
  %43 = load i64, i64* %42, align 8
  br label %80

44:                                               ; preds = %26
  %45 = or i32 %23, 3
  %46 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 24, i64 1, i32 0
  store i32 %45, i32* %46, align 8
  %47 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 24, i64 1, i32 1
  store i64 0, i64* %47, align 8
  %48 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 24, i64 1, i32 2
  store i32 -1, i32* %48, align 8
  %49 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 24, i64 1, i32 3
  store i32 12647168, i32* %49, align 4
  %50 = and i32 %4, -32881
  %51 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 24, i64 2, i32 3
  %52 = load i32, i32* %51, align 4
  %53 = lshr i32 %52, 17
  %54 = and i32 %53, 32
  %55 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 20
  %56 = load i64, i64* %55, align 8
  %57 = and i64 %56, 131072
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %61, label %59

59:                                               ; preds = %44
  %60 = or i32 %54, 64
  br label %73

61:                                               ; preds = %44
  %62 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 24, i64 3, i32 1
  %63 = load i64, i64* %62, align 8
  %64 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 24, i64 0, i32 1
  %65 = load i64, i64* %64, align 8
  %66 = or i64 %65, %63
  %67 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 24, i64 2, i32 1
  %68 = load i64, i64* %67, align 8
  %69 = or i64 %66, %68
  %70 = icmp eq i64 %69, 0
  %71 = select i1 %70, i32 0, i32 64
  %72 = or i32 %71, %54
  br label %73

73:                                               ; preds = %59, %61
  %74 = phi i32 [ %60, %59 ], [ %72, %61 ]
  %75 = or i32 %50, %74
  %76 = or i32 %75, 16
  %77 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 0, i64 1
  %78 = load i64, i64* %77, align 8
  %79 = and i64 %78, 4294967295
  br label %80

80:                                               ; preds = %73, %28
  %81 = phi i64 [ %79, %73 ], [ %43, %28 ]
  %82 = phi i32 [ %76, %73 ], [ %41, %28 ]
  %83 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 18
  store i64 %81, i64* %83, align 8
  %84 = add nuw nsw i32 %23, 8
  %85 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 24, i64 2, i32 0
  store i32 %84, i32* %85, align 8
  %86 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 24, i64 2, i32 1
  store i64 0, i64* %86, align 8
  %87 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 24, i64 2, i32 2
  store i32 -1, i32* %87, align 8
  %88 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 24, i64 2, i32 3
  store i32 12645120, i32* %88, align 4
  %89 = and i32 %82, 32768
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %91, label %104

91:                                               ; preds = %80
  %92 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 20
  %93 = load i64, i64* %92, align 8
  %94 = and i64 %93, 131072
  %95 = icmp eq i64 %94, 0
  br i1 %95, label %96, label %104

96:                                               ; preds = %91
  %97 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 24, i64 3, i32 1
  %98 = load i64, i64* %97, align 8
  %99 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 24, i64 0, i32 1
  %100 = load i64, i64* %99, align 8
  %101 = or i64 %100, %98
  %102 = icmp eq i64 %101, 0
  %103 = select i1 %102, i32 32, i32 96
  br label %104

104:                                              ; preds = %91, %80, %96
  %105 = phi i32 [ 32, %80 ], [ %103, %96 ], [ 96, %91 ]
  %106 = and i32 %82, -97
  %107 = or i32 %105, %106
  store i32 %107, i32* %3, align 16
  %108 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 0, i64 11
  %109 = load i64, i64* %108, align 8
  %110 = and i64 %109, 2261
  %111 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 2
  store i64 %110, i64* %111, align 8
  %112 = and i64 %109, 1024
  %113 = icmp eq i64 %112, 0
  %114 = select i1 %113, i32 1, i32 -1
  %115 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 19
  store i32 %114, i32* %115, align 16
  %116 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 20
  %117 = load i64, i64* %116, align 8
  %118 = and i64 %117, -2585345
  %119 = and i64 %109, 2585344
  %120 = or i64 %118, %119
  store i64 %120, i64* %116, align 8
  %121 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 16), align 8
  %122 = load i32, i32* %121, align 4
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %170, label %124, !prof !5

124:                                              ; preds = %104
  %125 = load void (i32, i32)*, void (i32, i32)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 19), align 8
  %126 = and i32 %82, 3
  tail call void %125(i32 noundef %126, i32 noundef 3)
  %127 = load i32, i32* %3, align 16
  br label %170

128:                                              ; preds = %19
  %129 = or i32 %23, 3
  %130 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 24, i64 1, i32 0
  store i32 %129, i32* %130, align 8
  %131 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 24, i64 1, i32 1
  store i64 0, i64* %131, align 8
  %132 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 24, i64 1, i32 2
  store i32 -1, i32* %132, align 8
  %133 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 24, i64 1, i32 3
  store i32 12647168, i32* %133, align 4
  %134 = and i32 %4, -32881
  %135 = or i32 %134, 16
  %136 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 24, i64 2, i32 3
  %137 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 20
  %138 = load i64, i64* %137, align 8
  %139 = and i64 %138, 131072
  %140 = icmp eq i64 %139, 0
  %141 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 0, i64 1
  %142 = load i64, i64* %141, align 8
  %143 = and i64 %142, 4294967295
  %144 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 18
  store i64 %143, i64* %144, align 8
  %145 = add nuw nsw i32 %23, 8
  %146 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 24, i64 2, i32 0
  store i32 %145, i32* %146, align 8
  %147 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 24, i64 2, i32 1
  store i64 0, i64* %147, align 8
  %148 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 24, i64 2, i32 2
  store i32 -1, i32* %148, align 8
  store i32 12645120, i32* %136, align 4
  br i1 %140, label %149, label %157

149:                                              ; preds = %128
  %150 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 24, i64 3, i32 1
  %151 = load i64, i64* %150, align 8
  %152 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 24, i64 0, i32 1
  %153 = load i64, i64* %152, align 8
  %154 = or i64 %153, %151
  %155 = icmp eq i64 %154, 0
  %156 = select i1 %155, i32 32, i32 96
  br label %157

157:                                              ; preds = %128, %149
  %158 = phi i32 [ %156, %149 ], [ 96, %128 ]
  %159 = or i32 %158, %135
  store i32 %159, i32* %3, align 16
  %160 = or i64 %138, 512
  store i64 %160, i64* %137, align 8
  %161 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 16), align 8
  %162 = load i32, i32* %161, align 4
  %163 = icmp eq i32 %162, 0
  br i1 %163, label %167, label %164, !prof !5

164:                                              ; preds = %157
  %165 = load void (i32, i32)*, void (i32, i32)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 19), align 8
  tail call void %165(i32 noundef 0, i32 noundef 3)
  %166 = load i32, i32* %3, align 16
  br label %167

167:                                              ; preds = %157, %164
  %168 = phi i32 [ %159, %157 ], [ %166, %164 ]
  %169 = and i32 %168, -4
  br label %170

170:                                              ; preds = %124, %104, %167
  %171 = phi i32 [ %169, %167 ], [ %107, %104 ], [ %127, %124 ]
  %172 = or i32 %171, 3
  store i32 %172, i32* %3, align 16
  %173 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 16), align 8
  %174 = load i32, i32* %173, align 4
  %175 = icmp eq i32 %174, 0
  br i1 %175, label %178, label %176, !prof !5

176:                                              ; preds = %170
  %177 = load void (i32, i32)*, void (i32, i32)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 19), align 8
  tail call void %177(i32 noundef 0, i32 noundef 3)
  br label %178

178:                                              ; preds = %176, %170
  ret void
}

; Function Attrs: uwtable
define void @se_do_interrupt_all(i32 noundef %0, i32 noundef %1, i32 noundef %2, i64 noundef %3, i32 noundef %4) local_unnamed_addr #3 {
  %6 = load i32, i32* @loglevel, align 4
  %7 = and i32 %6, 16
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %61, label %9

9:                                                ; preds = %5
  %10 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %11 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %10, i64 0, i32 29, i64 0
  %12 = load i64, i64* %11, align 16
  %13 = and i64 %12, 1
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %61, label %15

15:                                               ; preds = %9
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @logfile, align 8
  %17 = icmp eq %struct._IO_FILE* %16, null
  br i1 %17, label %37, label %18

18:                                               ; preds = %15
  %19 = load i32, i32* @se_do_interrupt_all.count, align 4
  %20 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %10, i64 0, i32 21
  %21 = load i32, i32* %20, align 16
  %22 = and i32 %21, 3
  %23 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %10, i64 0, i32 24, i64 1, i32 0
  %24 = load i32, i32* %23, align 8
  %25 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %10, i64 0, i32 18
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %10, i64 0, i32 24, i64 1, i32 1
  %28 = load i64, i64* %27, align 8
  %29 = shl i64 %28, 32
  %30 = ashr exact i64 %29, 32
  %31 = add i64 %30, %26
  %32 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %10, i64 0, i32 24, i64 2, i32 0
  %33 = load i32, i32* %32, align 16
  %34 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %10, i64 0, i32 0, i64 4
  %35 = load i64, i64* %34, align 16
  %36 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* noundef nonnull %16, i8* noundef getelementptr inbounds ([71 x i8], [71 x i8]* @.str, i64 0, i64 0), i32 noundef %19, i32 noundef %0, i32 noundef %2, i32 noundef %1, i32 nound
  br label %37

37:                                               ; preds = %15, %18
  %38 = icmp eq i32 %0, 14
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** @logfile, align 8
  %40 = icmp eq %struct._IO_FILE* %39, null
  br i1 %38, label %41, label %45

41:                                               ; preds = %37
  br i1 %40, label %58, label %42

42:                                               ; preds = %41
  %43 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %44 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %43, i64 0, i32 29, i64 2
  br label %49

45:                                               ; preds = %37
  br i1 %40, label %58, label %46

46:                                               ; preds = %45
  %47 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %48 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %47, i64 0, i32 0, i64 0
  br label %49

49:                                               ; preds = %42, %46
  %50 = phi i64* [ %44, %42 ], [ %48, %46 ]
  %51 = phi i8* [ getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0), %42 ], [ getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), %46 ]
  %52 = load i64, i64* %50, align 16
  %53 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* noundef nonnull %39, i8* noundef %51, i64 noundef %52)
  %54 = load %struct._IO_FILE*, %struct._IO_FILE** @logfile, align 8
  %55 = icmp eq %struct._IO_FILE* %54, null
  br i1 %55, label %58, label %56

56:                                               ; preds = %49
  %57 = tail call i32 @fputc(i32 10, %struct._IO_FILE* nonnull %54)
  br label %58

58:                                               ; preds = %45, %41, %49, %56
  %59 = load i32, i32* @se_do_interrupt_all.count, align 4
  %60 = add nsw i32 %59, 1
  store i32 %60, i32* @se_do_interrupt_all.count, align 4
  br label %61

61:                                               ; preds = %9, %58, %5
  %62 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %63 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %62, i64 0, i32 29, i64 0
  %64 = load i64, i64* %63, align 16
  %65 = and i64 %64, 1
  %66 = icmp eq i64 %65, 0
  %67 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %62, i64 0, i32 21
  %68 = load i32, i32* %67, align 16
  %69 = and i32 %68, 2097152
  %70 = icmp eq i32 %69, 0
  br i1 %66, label %1072, label %71

71:                                               ; preds = %61
  br i1 %70, label %95, label %72

72:                                               ; preds = %71
  %73 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %62, i64 0, i32 40
  %74 = load i64, i64* %73, align 16
  %75 = add i64 %74, 168
  %76 = tail call i32 @ldl_phys(i64 noundef %75)
  %77 = icmp sgt i32 %76, -1
  br i1 %77, label %78, label %95

78:                                               ; preds = %72
  %79 = icmp eq i32 %1, 0
  %80 = select i1 %79, i32 768, i32 1024
  %81 = or i32 %80, %0
  %82 = or i32 %81, -2147483648
  switch i32 %0, label %89 [
    i32 8, label %83
    i32 10, label %83
    i32 11, label %83
    i32 12, label %83
    i32 13, label %83
    i32 14, label %83
    i32 17, label %83
  ]

83:                                               ; preds = %78, %78, %78, %78, %78, %78, %78
  %84 = or i32 %81, -2147481600
  %85 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %86 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %85, i64 0, i32 40
  %87 = load i64, i64* %86, align 16
  %88 = add i64 %87, 172
  tail call void @stl_phys(i64 noundef %88, i32 noundef %2)
  br label %89

89:                                               ; preds = %83, %78
  %90 = phi i32 [ %84, %83 ], [ %82, %78 ]
  %91 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %92 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %91, i64 0, i32 40
  %93 = load i64, i64* %92, align 16
  %94 = add i64 %93, 168
  tail call void @stl_phys(i64 noundef %94, i32 noundef %90)
  br label %95

95:                                               ; preds = %89, %72, %71
  %96 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %97 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 21
  %98 = load i32, i32* %97, align 16
  %99 = and i32 %98, 16384
  %100 = icmp eq i32 %99, 0
  %101 = icmp eq i32 %1, 0
  %102 = or i32 %4, %1
  %103 = icmp eq i32 %102, 0
  br i1 %100, label %435, label %104

104:                                              ; preds = %95
  br i1 %103, label %105, label %113

105:                                              ; preds = %104
  %106 = add i32 %0, -8
  %107 = icmp ult i32 %106, 10
  br i1 %107, label %108, label %113

108:                                              ; preds = %105
  %109 = trunc i32 %106 to i10
  %110 = lshr i10 386, %109
  %111 = and i10 %110, 1
  %112 = icmp ne i10 %111, 0
  br label %113

113:                                              ; preds = %105, %108, %104
  %114 = phi i1 [ true, %104 ], [ %112, %108 ], [ true, %105 ]
  br i1 %101, label %115, label %118

115:                                              ; preds = %113
  %116 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 18
  %117 = load i64, i64* %116, align 8
  br label %118

118:                                              ; preds = %115, %113
  %119 = phi i64 [ %117, %115 ], [ %3, %113 ]
  %120 = shl nsw i32 %0, 4
  %121 = or i32 %120, 15
  %122 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 28, i32 2
  %123 = load i32, i32* %122, align 8
  %124 = icmp ugt i32 %121, %123
  br i1 %124, label %125, label %127

125:                                              ; preds = %118
  %126 = or i32 %120, 2
  tail call fastcc void @raise_interrupt2(%struct.CPUX86State* noundef nonnull %96, i32 noundef 13, i32 noundef 0, i32 noundef %126, i32 noundef 0, i64 noundef 0) #28
  unreachable

127:                                              ; preds = %118
  %128 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 28, i32 1
  %129 = load i64, i64* %128, align 8
  %130 = sext i32 %120 to i64
  %131 = add i64 %129, %130
  %132 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef nonnull %96, i64 noundef %131)
  %133 = add i64 %131, 4
  %134 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef nonnull %96, i64 noundef %133)
  %135 = add i64 %131, 8
  %136 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef nonnull %96, i64 noundef %135)
  %137 = and i32 %134, 7680
  %138 = icmp eq i32 %137, 3584
  br i1 %138, label %141, label %139

139:                                              ; preds = %127
  %140 = or i32 %120, 2
  tail call fastcc void @raise_interrupt2(%struct.CPUX86State* noundef nonnull %96, i32 noundef 13, i32 noundef 0, i32 noundef %140, i32 noundef 0, i64 noundef 0) #28
  unreachable

141:                                              ; preds = %127
  %142 = load i32, i32* %97, align 16
  %143 = and i32 %142, 3
  br i1 %101, label %150, label %144

144:                                              ; preds = %141
  %145 = lshr i32 %134, 13
  %146 = and i32 %145, 3
  %147 = icmp ult i32 %146, %143
  br i1 %147, label %148, label %150

148:                                              ; preds = %144
  %149 = or i32 %120, 2
  tail call fastcc void @raise_interrupt2(%struct.CPUX86State* noundef nonnull %96, i32 noundef 13, i32 noundef 0, i32 noundef %149, i32 noundef 0, i64 noundef 0) #28
  unreachable

150:                                              ; preds = %144, %141
  %151 = and i32 %134, 32768
  %152 = icmp eq i32 %151, 0
  br i1 %152, label %153, label %155

153:                                              ; preds = %150
  %154 = or i32 %120, 2
  tail call fastcc void @raise_interrupt2(%struct.CPUX86State* noundef nonnull %96, i32 noundef 11, i32 noundef 0, i32 noundef %154, i32 noundef 0, i64 noundef 0) #28
  unreachable

155:                                              ; preds = %150
  %156 = lshr i32 %132, 16
  %157 = and i32 %134, 7
  %158 = and i32 %156, 65532
  %159 = icmp eq i32 %158, 0
  br i1 %159, label %160, label %161

160:                                              ; preds = %155
  tail call fastcc void @raise_interrupt2(%struct.CPUX86State* noundef nonnull %96, i32 noundef 13, i32 noundef 0, i32 noundef 0, i32 noundef 0, i64 noundef 0) #28
  unreachable

161:                                              ; preds = %155
  %162 = and i32 %132, 262144
  %163 = icmp eq i32 %162, 0
  %164 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %165 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %164, i64 0, i32 25
  %166 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %164, i64 0, i32 27
  %167 = select i1 %163, %struct.SegmentCache* %166, %struct.SegmentCache* %165
  %168 = or i32 %156, 7
  %169 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %167, i64 0, i32 2
  %170 = load i32, i32* %169, align 8
  %171 = icmp ugt i32 %168, %170
  br i1 %171, label %172, label %173

172:                                              ; preds = %161
  tail call fastcc void @raise_interrupt2(%struct.CPUX86State* noundef nonnull %96, i32 noundef 13, i32 noundef 0, i32 noundef %158, i32 noundef 0, i64 noundef 0) #28
  unreachable

173:                                              ; preds = %161
  %174 = and i32 %156, 65528
  %175 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %167, i64 0, i32 1
  %176 = load i64, i64* %175, align 8
  %177 = zext i32 %174 to i64
  %178 = add i64 %176, %177
  %179 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef %164, i64 noundef %178)
  %180 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %181 = add i64 %178, 4
  %182 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef %180, i64 noundef %181)
  %183 = and i32 %182, 6144
  %184 = icmp eq i32 %183, 6144
  br i1 %184, label %186, label %185

185:                                              ; preds = %173
  tail call fastcc void @raise_interrupt2(%struct.CPUX86State* noundef nonnull %96, i32 noundef 13, i32 noundef 0, i32 noundef %158, i32 noundef 0, i64 noundef 0) #28
  unreachable

186:                                              ; preds = %173
  %187 = lshr i32 %182, 13
  %188 = and i32 %187, 3
  %189 = icmp ugt i32 %188, %143
  br i1 %189, label %190, label %191

190:                                              ; preds = %186
  tail call fastcc void @raise_interrupt2(%struct.CPUX86State* noundef nonnull %96, i32 noundef 13, i32 noundef 0, i32 noundef %158, i32 noundef 0, i64 noundef 0) #28
  unreachable

191:                                              ; preds = %186
  %192 = and i32 %182, 32768
  %193 = icmp eq i32 %192, 0
  br i1 %193, label %194, label %195

194:                                              ; preds = %191
  tail call fastcc void @raise_interrupt2(%struct.CPUX86State* noundef nonnull %96, i32 noundef 11, i32 noundef 0, i32 noundef %158, i32 noundef 0, i64 noundef 0) #28
  unreachable

195:                                              ; preds = %191
  %196 = and i32 %182, 6291456
  %197 = icmp eq i32 %196, 2097152
  br i1 %197, label %199, label %198

198:                                              ; preds = %195
  tail call fastcc void @raise_interrupt2(%struct.CPUX86State* noundef nonnull %96, i32 noundef 13, i32 noundef 0, i32 noundef %158, i32 noundef 0, i64 noundef 0) #28
  unreachable

199:                                              ; preds = %195
  %200 = and i32 %182, 1024
  %201 = icmp eq i32 %200, 0
  br i1 %201, label %202, label %206

202:                                              ; preds = %199
  %203 = icmp ult i32 %188, %143
  %204 = icmp ne i32 %157, 0
  %205 = select i1 %203, i1 true, i1 %204
  br i1 %205, label %208, label %258

206:                                              ; preds = %199
  %207 = icmp eq i32 %157, 0
  br i1 %207, label %260, label %210

208:                                              ; preds = %202
  %209 = icmp eq i32 %157, 0
  br i1 %209, label %234, label %210

210:                                              ; preds = %208, %206
  %211 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %212 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %211, i64 0, i32 26, i32 3
  %213 = load i32, i32* %212, align 4
  %214 = and i32 %213, 32768
  %215 = icmp eq i32 %214, 0
  br i1 %215, label %216, label %217

216:                                              ; preds = %210
  tail call void (%struct.CPUX86State*, i8*, ...) @cpu_abort(%struct.CPUX86State* noundef nonnull %211, i8* noundef getelementptr inbounds ([12 x i8], [12 x i8]* @.str.16, i64 0, i64 0)) #28
  unreachable

217:                                              ; preds = %210
  %218 = shl nuw nsw i32 %157, 3
  %219 = add nuw nsw i32 %218, 35
  %220 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %211, i64 0, i32 26, i32 2
  %221 = load i32, i32* %220, align 8
  %222 = icmp ugt i32 %219, %221
  br i1 %222, label %223, label %227

223:                                              ; preds = %217
  %224 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %211, i64 0, i32 26, i32 0
  %225 = load i32, i32* %224, align 8
  %226 = and i32 %225, 65532
  tail call fastcc void @raise_interrupt2(%struct.CPUX86State* noundef nonnull %211, i32 noundef 10, i32 noundef 0, i32 noundef %226, i32 noundef 0, i64 noundef 0) #28
  unreachable

227:                                              ; preds = %217
  %228 = add nuw nsw i32 %218, 28
  %229 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %211, i64 0, i32 26, i32 1
  %230 = load i64, i64* %229, align 8
  %231 = zext i32 %228 to i64
  %232 = add i64 %230, %231
  %233 = tail call fastcc i64 @cpu_ldq_kernel(%struct.CPUX86State* noundef nonnull %211, i64 noundef %232)
  br label %270

234:                                              ; preds = %208
  %235 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %236 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %235, i64 0, i32 26, i32 3
  %237 = load i32, i32* %236, align 4
  %238 = and i32 %237, 32768
  %239 = icmp eq i32 %238, 0
  br i1 %239, label %240, label %241

240:                                              ; preds = %234
  tail call void (%struct.CPUX86State*, i8*, ...) @cpu_abort(%struct.CPUX86State* noundef nonnull %235, i8* noundef getelementptr inbounds ([12 x i8], [12 x i8]* @.str.16, i64 0, i64 0)) #28
  unreachable

241:                                              ; preds = %234
  %242 = shl nuw nsw i32 %188, 3
  %243 = add nuw nsw i32 %242, 11
  %244 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %235, i64 0, i32 26, i32 2
  %245 = load i32, i32* %244, align 8
  %246 = icmp ugt i32 %243, %245
  br i1 %246, label %247, label %251

247:                                              ; preds = %241
  %248 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %235, i64 0, i32 26, i32 0
  %249 = load i32, i32* %248, align 8
  %250 = and i32 %249, 65532
  tail call fastcc void @raise_interrupt2(%struct.CPUX86State* noundef nonnull %235, i32 noundef 10, i32 noundef 0, i32 noundef %250, i32 noundef 0, i64 noundef 0) #28
  unreachable

251:                                              ; preds = %241
  %252 = or i32 %242, 4
  %253 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %235, i64 0, i32 26, i32 1
  %254 = load i64, i64* %253, align 8
  %255 = zext i32 %252 to i64
  %256 = add i64 %254, %255
  %257 = tail call fastcc i64 @cpu_ldq_kernel(%struct.CPUX86State* noundef nonnull %235, i64 noundef %256)
  br label %270

258:                                              ; preds = %202
  %259 = icmp eq i32 %188, %143
  br i1 %259, label %260, label %269

260:                                              ; preds = %258, %206
  %261 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 20
  %262 = load i64, i64* %261, align 8
  %263 = and i64 %262, 131072
  %264 = icmp eq i64 %263, 0
  br i1 %264, label %266, label %265

265:                                              ; preds = %260
  tail call fastcc void @raise_interrupt2(%struct.CPUX86State* noundef nonnull %96, i32 noundef 13, i32 noundef 0, i32 noundef %158, i32 noundef 0, i64 noundef 0) #28
  unreachable

266:                                              ; preds = %260
  %267 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 0, i64 4
  %268 = load i64, i64* %267, align 16
  br label %270

269:                                              ; preds = %258
  tail call fastcc void @raise_interrupt2(%struct.CPUX86State* noundef nonnull %96, i32 noundef 13, i32 noundef 0, i32 noundef %158, i32 noundef 0, i64 noundef 0) #28
  unreachable

270:                                              ; preds = %266, %251, %227
  %271 = phi i1 [ true, %266 ], [ false, %251 ], [ false, %227 ]
  %272 = phi i64 [ %268, %266 ], [ %257, %251 ], [ %233, %227 ]
  %273 = phi i32 [ %143, %266 ], [ %188, %251 ], [ %188, %227 ]
  %274 = and i64 %272, -16
  %275 = add i64 %274, -8
  %276 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 2, i32 0
  %277 = load i32, i32* %276, align 16
  %278 = zext i32 %277 to i64
  tail call fastcc void @cpu_stq_kernel(%struct.CPUX86State* noundef nonnull %96, i64 noundef %275, i64 noundef %278)
  %279 = add i64 %274, -16
  %280 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 0, i64 4
  %281 = load i64, i64* %280, align 16
  tail call fastcc void @cpu_stq_kernel(%struct.CPUX86State* noundef nonnull %96, i64 noundef %279, i64 noundef %281)
  %282 = add i64 %274, -24
  %283 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %284 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %283, i64 0, i32 20
  %285 = load i64, i64* %284, align 8
  %286 = trunc i64 %285 to i32
  %287 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %283, i64 0, i32 1
  %288 = load i64, i64* %287, align 16
  %289 = trunc i64 %288 to i32
  %290 = tail call i32 @helper_cc_compute_all(i32 noundef %289) #30
  %291 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %283, i64 0, i32 19
  %292 = load i32, i32* %291, align 16
  %293 = and i32 %292, 1024
  %294 = or i32 %290, %286
  %295 = or i32 %294, %293
  %296 = or i32 %295, 2
  %297 = zext i32 %296 to i64
  tail call fastcc void @cpu_stq_kernel(%struct.CPUX86State* noundef nonnull %96, i64 noundef %282, i64 noundef %297)
  %298 = add i64 %274, -32
  %299 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 1, i32 0
  %300 = load i32, i32* %299, align 8
  %301 = zext i32 %300 to i64
  tail call fastcc void @cpu_stq_kernel(%struct.CPUX86State* noundef nonnull %96, i64 noundef %298, i64 noundef %301)
  %302 = add i64 %274, -40
  tail call fastcc void @cpu_stq_kernel(%struct.CPUX86State* noundef nonnull %96, i64 noundef %302, i64 noundef %119)
  br i1 %114, label %306, label %303

303:                                              ; preds = %270
  %304 = add i64 %274, -48
  %305 = sext i32 %2 to i64
  tail call fastcc void @cpu_stq_kernel(%struct.CPUX86State* noundef nonnull %96, i64 noundef %304, i64 noundef %305)
  br label %306

306:                                              ; preds = %303, %270
  %307 = phi i64 [ %304, %303 ], [ %302, %270 ]
  br i1 %271, label %308, label %314

308:                                              ; preds = %306
  %309 = load i32, i32* %97, align 16
  %310 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 2, i32 3
  %311 = load i32, i32* %310, align 4
  %312 = lshr i32 %311, 17
  %313 = and i32 %312, 32
  br label %346

314:                                              ; preds = %306
  store i32 %273, i32* %276, align 8
  %315 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 2, i32 1
  %316 = bitcast i64* %315 to i8*
  %317 = call i8* @memset(i8* %316, i32 0, i64 16)
  %318 = load i32, i32* %97, align 16
  %319 = and i32 %318, 32768
  %320 = icmp eq i32 %319, 0
  br i1 %320, label %321, label %342

321:                                              ; preds = %314
  %322 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 29, i64 0
  %323 = load i64, i64* %322, align 16
  %324 = and i64 %323, 1
  %325 = icmp eq i64 %324, 0
  br i1 %325, label %342, label %326

326:                                              ; preds = %321
  %327 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 20
  %328 = load i64, i64* %327, align 8
  %329 = and i64 %328, 131072
  %330 = icmp ne i64 %329, 0
  %331 = and i32 %318, 16
  %332 = icmp eq i32 %331, 0
  %333 = select i1 %330, i1 true, i1 %332
  br i1 %333, label %342, label %334

334:                                              ; preds = %326
  %335 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 3, i32 1
  %336 = load i64, i64* %335, align 8
  %337 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 0, i32 1
  %338 = load i64, i64* %337, align 8
  %339 = or i64 %338, %336
  %340 = icmp eq i64 %339, 0
  %341 = select i1 %340, i32 0, i32 64
  br label %342

342:                                              ; preds = %334, %326, %321, %314
  %343 = phi i32 [ 0, %314 ], [ %341, %334 ], [ 64, %326 ], [ 64, %321 ]
  %344 = and i32 %318, -97
  %345 = or i32 %343, %344
  br label %346

346:                                              ; preds = %342, %308
  %347 = phi i32 [ %313, %308 ], [ 0, %342 ]
  %348 = phi i32 [ %309, %308 ], [ %345, %342 ]
  store i64 %307, i64* %280, align 16
  %349 = or i32 %273, %158
  %350 = lshr i32 %179, 16
  %351 = shl i32 %182, 16
  %352 = and i32 %351, 16711680
  %353 = and i32 %182, -16777216
  %354 = or i32 %353, %350
  %355 = or i32 %354, %352
  %356 = zext i32 %355 to i64
  %357 = and i32 %179, 65535
  %358 = and i32 %182, 983040
  %359 = or i32 %358, %357
  %360 = and i32 %182, 8388608
  %361 = icmp eq i32 %360, 0
  %362 = shl nuw i32 %359, 12
  %363 = or i32 %362, 4095
  %364 = select i1 %361, i32 %359, i32 %363
  store i32 %349, i32* %299, align 8
  %365 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 1, i32 1
  store i64 %356, i64* %365, align 8
  %366 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 1, i32 2
  store i32 %364, i32* %366, align 8
  %367 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 1, i32 3
  store i32 %182, i32* %367, align 4
  %368 = and i32 %348, 16384
  %369 = icmp eq i32 %368, 0
  %370 = lshr i32 %182, 18
  %371 = and i32 %370, 16
  %372 = select i1 %369, i32 %371, i32 32816
  %373 = and i32 %348, -32881
  %374 = and i32 %372, 32768
  %375 = icmp eq i32 %374, 0
  br i1 %375, label %376, label %403

376:                                              ; preds = %346
  %377 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 29, i64 0
  %378 = load i64, i64* %377, align 16
  %379 = and i64 %378, 1
  %380 = icmp eq i64 %379, 0
  br i1 %380, label %389, label %381

381:                                              ; preds = %376
  %382 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 20
  %383 = load i64, i64* %382, align 8
  %384 = and i64 %383, 131072
  %385 = icmp ne i64 %384, 0
  %386 = and i32 %372, 16
  %387 = icmp eq i32 %386, 0
  %388 = select i1 %385, i1 true, i1 %387
  br i1 %388, label %389, label %391

389:                                              ; preds = %381, %376
  %390 = or i32 %347, 64
  br label %403

391:                                              ; preds = %381
  %392 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 3, i32 1
  %393 = load i64, i64* %392, align 8
  %394 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 0, i32 1
  %395 = load i64, i64* %394, align 8
  %396 = or i64 %395, %393
  %397 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 2, i32 1
  %398 = load i64, i64* %397, align 8
  %399 = or i64 %396, %398
  %400 = icmp eq i64 %399, 0
  %401 = select i1 %400, i32 0, i32 64
  %402 = or i32 %401, %347
  br label %403

403:                                              ; preds = %391, %389, %346
  %404 = phi i32 [ %347, %346 ], [ %390, %389 ], [ %402, %391 ]
  %405 = and i32 %372, 32784
  %406 = or i32 %405, %373
  %407 = or i32 %406, %404
  store i32 %407, i32* %97, align 16
  %408 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 16), align 8
  %409 = load i32, i32* %408, align 4
  %410 = icmp eq i32 %409, 0
  br i1 %410, label %415, label %411, !prof !5

411:                                              ; preds = %403
  %412 = load void (i32, i32)*, void (i32, i32)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 19), align 8
  %413 = and i32 %348, 3
  tail call void %412(i32 noundef %413, i32 noundef %273)
  %414 = load i32, i32* %97, align 16
  br label %415

415:                                              ; preds = %403, %411
  %416 = phi i32 [ %407, %403 ], [ %414, %411 ]
  %417 = zext i32 %136 to i64
  %418 = shl nuw i64 %417, 32
  %419 = and i32 %134, -65536
  %420 = zext i32 %419 to i64
  %421 = or i64 %418, %420
  %422 = and i32 %132, 65535
  %423 = zext i32 %422 to i64
  %424 = or i64 %421, %423
  %425 = and i32 %416, -4
  %426 = or i32 %425, %273
  store i32 %426, i32* %97, align 16
  %427 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 18
  store i64 %424, i64* %427, align 8
  %428 = and i32 %134, 256
  %429 = icmp eq i32 %428, 0
  %430 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 20
  %431 = load i64, i64* %430, align 8
  %432 = and i64 %431, -213761
  %433 = select i1 %429, i64 %432, i64 %431
  %434 = and i64 %433, -213249
  store i64 %434, i64* %430, align 8
  br label %1153

435:                                              ; preds = %95
  br i1 %103, label %436, label %444

436:                                              ; preds = %435
  %437 = add i32 %0, -8
  %438 = icmp ult i32 %437, 10
  br i1 %438, label %439, label %444

439:                                              ; preds = %436
  %440 = trunc i32 %437 to i10
  %441 = lshr i10 386, %440
  %442 = and i10 %441, 1
  %443 = icmp ne i10 %442, 0
  br label %444

444:                                              ; preds = %436, %439, %435
  %445 = phi i1 [ true, %435 ], [ %443, %439 ], [ true, %436 ]
  br i1 %101, label %446, label %449

446:                                              ; preds = %444
  %447 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 18
  %448 = load i64, i64* %447, align 8
  br label %449

449:                                              ; preds = %446, %444
  %450 = phi i64 [ %448, %446 ], [ %3, %444 ]
  %451 = trunc i64 %450 to i32
  %452 = shl nsw i32 %0, 3
  %453 = or i32 %452, 7
  %454 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 28, i32 2
  %455 = load i32, i32* %454, align 8
  %456 = icmp ugt i32 %453, %455
  br i1 %456, label %457, label %459

457:                                              ; preds = %449
  %458 = or i32 %452, 2
  tail call fastcc void @raise_interrupt2(%struct.CPUX86State* noundef nonnull %96, i32 noundef 13, i32 noundef 0, i32 noundef %458, i32 noundef 0, i64 noundef 0) #28
  unreachable

459:                                              ; preds = %449
  %460 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 28, i32 1
  %461 = load i64, i64* %460, align 8
  %462 = sext i32 %452 to i64
  %463 = add i64 %461, %462
  %464 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef nonnull %96, i64 noundef %463)
  %465 = add i64 %463, 4
  %466 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef nonnull %96, i64 noundef %465)
  %467 = lshr i32 %466, 8
  %468 = and i32 %467, 31
  switch i32 %468, label %506 [
    i32 5, label %469
    i32 6, label %508
    i32 7, label %508
    i32 14, label %508
    i32 15, label %508
  ]

469:                                              ; preds = %459
  %470 = and i32 %466, 32768
  %471 = icmp eq i32 %470, 0
  br i1 %471, label %472, label %474

472:                                              ; preds = %469
  %473 = or i32 %452, 2
  tail call fastcc void @raise_interrupt2(%struct.CPUX86State* noundef nonnull %96, i32 noundef 11, i32 noundef 0, i32 noundef %473, i32 noundef 0, i64 noundef 0) #28
  unreachable

474:                                              ; preds = %469
  tail call fastcc void @switch_tss(%struct.CPUX86State* noundef nonnull %96, i32 noundef %452, i32 noundef %464, i32 noundef %466, i32 noundef 2, i32 noundef %451)
  br i1 %445, label %1153, label %475

475:                                              ; preds = %474
  %476 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 26, i32 3
  %477 = load i32, i32* %476, align 4
  %478 = lshr i32 %477, 11
  %479 = and i32 %478, 1
  %480 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 2, i32 3
  %481 = load i32, i32* %480, align 4
  %482 = and i32 %481, 4194304
  %483 = icmp eq i32 %482, 0
  %484 = select i1 %483, i32 65535, i32 -1
  %485 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 0, i64 4
  %486 = load i64, i64* %485, align 16
  %487 = shl nsw i32 -2, %479
  %488 = trunc i64 %486 to i32
  %489 = add i32 %487, %488
  %490 = and i32 %489, %484
  %491 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 2, i32 1
  %492 = load i64, i64* %491, align 8
  %493 = zext i32 %490 to i64
  %494 = add i64 %492, %493
  %495 = icmp eq i32 %479, 0
  br i1 %495, label %497, label %496

496:                                              ; preds = %475
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* noundef nonnull %96, i64 noundef %494, i32 noundef %2)
  br label %498

497:                                              ; preds = %475
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* noundef nonnull %96, i64 noundef %494, i32 noundef %2)
  br label %498

498:                                              ; preds = %497, %496
  br i1 %483, label %499, label %505

499:                                              ; preds = %498
  %500 = load i64, i64* %485, align 16
  %501 = and i64 %500, -65536
  %502 = and i32 %489, 65535
  %503 = zext i32 %502 to i64
  %504 = or i64 %501, %503
  store i64 %504, i64* %485, align 16
  br label %1153

505:                                              ; preds = %498
  store i64 %493, i64* %485, align 16
  br label %1153

506:                                              ; preds = %459
  %507 = or i32 %452, 2
  tail call fastcc void @raise_interrupt2(%struct.CPUX86State* noundef nonnull %96, i32 noundef 13, i32 noundef 0, i32 noundef %507, i32 noundef 0, i64 noundef 0) #28
  unreachable

508:                                              ; preds = %459, %459, %459, %459
  %509 = load i32, i32* %97, align 16
  %510 = and i32 %509, 3
  br i1 %101, label %517, label %511

511:                                              ; preds = %508
  %512 = lshr i32 %466, 13
  %513 = and i32 %512, 3
  %514 = icmp ult i32 %513, %510
  br i1 %514, label %515, label %517

515:                                              ; preds = %511
  %516 = or i32 %452, 2
  tail call fastcc void @raise_interrupt2(%struct.CPUX86State* noundef nonnull %96, i32 noundef 13, i32 noundef 0, i32 noundef %516, i32 noundef 0, i64 noundef 0) #28
  unreachable

517:                                              ; preds = %511, %508
  %518 = and i32 %466, 32768
  %519 = icmp eq i32 %518, 0
  br i1 %519, label %520, label %522

520:                                              ; preds = %517
  %521 = or i32 %452, 2
  tail call fastcc void @raise_interrupt2(%struct.CPUX86State* noundef nonnull %96, i32 noundef 11, i32 noundef 0, i32 noundef %521, i32 noundef 0, i64 noundef 0) #28
  unreachable

522:                                              ; preds = %517
  %523 = lshr i32 %464, 16
  %524 = and i32 %466, -65536
  %525 = and i32 %464, 65535
  %526 = or i32 %524, %525
  %527 = and i32 %523, 65532
  %528 = icmp eq i32 %527, 0
  br i1 %528, label %529, label %530

529:                                              ; preds = %522
  tail call fastcc void @raise_interrupt2(%struct.CPUX86State* noundef nonnull %96, i32 noundef 13, i32 noundef 0, i32 noundef 0, i32 noundef 0, i64 noundef 0) #28
  unreachable

530:                                              ; preds = %522
  %531 = and i32 %464, 262144
  %532 = icmp eq i32 %531, 0
  %533 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %534 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %533, i64 0, i32 25
  %535 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %533, i64 0, i32 27
  %536 = select i1 %532, %struct.SegmentCache* %535, %struct.SegmentCache* %534
  %537 = or i32 %523, 7
  %538 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %536, i64 0, i32 2
  %539 = load i32, i32* %538, align 8
  %540 = icmp ugt i32 %537, %539
  br i1 %540, label %541, label %542

541:                                              ; preds = %530
  tail call fastcc void @raise_interrupt2(%struct.CPUX86State* noundef nonnull %96, i32 noundef 13, i32 noundef 0, i32 noundef %527, i32 noundef 0, i64 noundef 0) #28
  unreachable

542:                                              ; preds = %530
  %543 = and i32 %523, 65528
  %544 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %536, i64 0, i32 1
  %545 = load i64, i64* %544, align 8
  %546 = zext i32 %543 to i64
  %547 = add i64 %545, %546
  %548 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef %533, i64 noundef %547)
  %549 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %550 = add i64 %547, 4
  %551 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef %549, i64 noundef %550)
  %552 = and i32 %551, 6144
  %553 = icmp eq i32 %552, 6144
  br i1 %553, label %555, label %554

554:                                              ; preds = %542
  tail call fastcc void @raise_interrupt2(%struct.CPUX86State* noundef nonnull %96, i32 noundef 13, i32 noundef 0, i32 noundef %527, i32 noundef 0, i64 noundef 0) #28
  unreachable

555:                                              ; preds = %542
  %556 = lshr i32 %551, 13
  %557 = and i32 %556, 3
  %558 = icmp ugt i32 %557, %510
  br i1 %558, label %559, label %560

559:                                              ; preds = %555
  tail call fastcc void @raise_interrupt2(%struct.CPUX86State* noundef nonnull %96, i32 noundef 13, i32 noundef 0, i32 noundef %527, i32 noundef 0, i64 noundef 0) #28
  unreachable

560:                                              ; preds = %555
  %561 = and i32 %551, 32768
  %562 = icmp eq i32 %561, 0
  br i1 %562, label %563, label %564

563:                                              ; preds = %560
  tail call fastcc void @raise_interrupt2(%struct.CPUX86State* noundef nonnull %96, i32 noundef 11, i32 noundef 0, i32 noundef %527, i32 noundef 0, i64 noundef 0) #28
  unreachable

564:                                              ; preds = %560
  %565 = and i32 %551, 1024
  %566 = icmp eq i32 %565, 0
  %567 = icmp ult i32 %557, %510
  %568 = select i1 %566, i1 %567, i1 false
  br i1 %568, label %569, label %649

569:                                              ; preds = %564
  %570 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 26, i32 3
  %571 = load i32, i32* %570, align 4
  %572 = and i32 %571, 32768
  %573 = icmp eq i32 %572, 0
  br i1 %573, label %574, label %575

574:                                              ; preds = %569
  tail call void (%struct.CPUX86State*, i8*, ...) @cpu_abort(%struct.CPUX86State* noundef nonnull %96, i8* noundef getelementptr inbounds ([12 x i8], [12 x i8]* @.str.16, i64 0, i64 0)) #28
  unreachable

575:                                              ; preds = %569
  %576 = lshr i32 %571, 11
  %577 = and i32 %576, 1
  %578 = shl nuw nsw i32 %557, 2
  %579 = add nuw nsw i32 %578, 6
  %580 = shl nuw nsw i32 %579, %577
  %581 = add nsw i32 %580, -1
  %582 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 26, i32 2
  %583 = load i32, i32* %582, align 8
  %584 = icmp ugt i32 %581, %583
  br i1 %584, label %585, label %589

585:                                              ; preds = %575
  %586 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 26, i32 0
  %587 = load i32, i32* %586, align 8
  %588 = and i32 %587, 65532
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %96, i32 noundef 10, i32 noundef %588, i64 noundef 0)
  unreachable

589:                                              ; preds = %575
  %590 = or i32 %578, 2
  %591 = shl i32 %590, %577
  %592 = icmp eq i32 %577, 0
  %593 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 26, i32 1
  %594 = load i64, i64* %593, align 8
  %595 = zext i32 %591 to i64
  %596 = add i64 %594, %595
  br i1 %592, label %597, label %599

597:                                              ; preds = %589
  %598 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* noundef nonnull %96, i64 noundef %596)
  br label %601

599:                                              ; preds = %589
  %600 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef nonnull %96, i64 noundef %596)
  br label %601

601:                                              ; preds = %599, %597
  %602 = phi i32 [ %600, %599 ], [ %598, %597 ]
  %603 = phi i64 [ 4, %599 ], [ 2, %597 ]
  %604 = load i64, i64* %593, align 8
  %605 = add nuw nsw i64 %603, %595
  %606 = add i64 %605, %604
  %607 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* noundef nonnull %96, i64 noundef %606)
  %608 = and i32 %607, 65532
  %609 = icmp eq i32 %608, 0
  br i1 %609, label %610, label %611

610:                                              ; preds = %601
  tail call fastcc void @raise_interrupt2(%struct.CPUX86State* noundef nonnull %96, i32 noundef 10, i32 noundef 0, i32 noundef 0, i32 noundef 0, i64 noundef 0) #28
  unreachable

611:                                              ; preds = %601
  %612 = and i32 %607, 3
  %613 = icmp eq i32 %612, %557
  br i1 %613, label %615, label %614

614:                                              ; preds = %611
  tail call fastcc void @raise_interrupt2(%struct.CPUX86State* noundef nonnull %96, i32 noundef 10, i32 noundef 0, i32 noundef %608, i32 noundef 0, i64 noundef 0) #28
  unreachable

615:                                              ; preds = %611
  %616 = and i32 %607, 4
  %617 = icmp eq i32 %616, 0
  %618 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %619 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %618, i64 0, i32 25
  %620 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %618, i64 0, i32 27
  %621 = select i1 %617, %struct.SegmentCache* %620, %struct.SegmentCache* %619
  %622 = or i32 %607, 7
  %623 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %621, i64 0, i32 2
  %624 = load i32, i32* %623, align 8
  %625 = icmp ugt i32 %622, %624
  br i1 %625, label %639, label %626

626:                                              ; preds = %615
  %627 = and i32 %607, -8
  %628 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %621, i64 0, i32 1
  %629 = load i64, i64* %628, align 8
  %630 = sext i32 %627 to i64
  %631 = add i64 %629, %630
  %632 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef %618, i64 noundef %631)
  %633 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %634 = add i64 %631, 4
  %635 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef %633, i64 noundef %634)
  %636 = lshr i32 %635, 13
  %637 = and i32 %636, 3
  %638 = icmp eq i32 %637, %557
  br i1 %638, label %641, label %640

639:                                              ; preds = %615
  tail call fastcc void @raise_interrupt2(%struct.CPUX86State* noundef nonnull %96, i32 noundef 10, i32 noundef 0, i32 noundef %608, i32 noundef 0, i64 noundef 0) #28
  unreachable

640:                                              ; preds = %626
  tail call fastcc void @raise_interrupt2(%struct.CPUX86State* noundef nonnull %96, i32 noundef 10, i32 noundef 0, i32 noundef %608, i32 noundef 0, i64 noundef 0) #28
  unreachable

641:                                              ; preds = %626
  %642 = and i32 %635, 6656
  %643 = icmp eq i32 %642, 4608
  br i1 %643, label %645, label %644

644:                                              ; preds = %641
  tail call fastcc void @raise_interrupt2(%struct.CPUX86State* noundef nonnull %96, i32 noundef 10, i32 noundef 0, i32 noundef %608, i32 noundef 0, i64 noundef 0) #28
  unreachable

645:                                              ; preds = %641
  %646 = and i32 %635, 32768
  %647 = icmp eq i32 %646, 0
  br i1 %647, label %648, label %673

648:                                              ; preds = %645
  tail call fastcc void @raise_interrupt2(%struct.CPUX86State* noundef nonnull %96, i32 noundef 10, i32 noundef 0, i32 noundef %608, i32 noundef 0, i64 noundef 0) #28
  unreachable

649:                                              ; preds = %564
  %650 = icmp ne i32 %565, 0
  %651 = icmp eq i32 %557, %510
  %652 = select i1 %650, i1 true, i1 %651
  br i1 %652, label %653, label %672

653:                                              ; preds = %649
  %654 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 20
  %655 = load i64, i64* %654, align 8
  %656 = and i64 %655, 131072
  %657 = icmp eq i64 %656, 0
  br i1 %657, label %659, label %658

658:                                              ; preds = %653
  tail call fastcc void @raise_interrupt2(%struct.CPUX86State* noundef nonnull %96, i32 noundef 13, i32 noundef 0, i32 noundef %527, i32 noundef 0, i64 noundef 0) #28
  unreachable

659:                                              ; preds = %653
  %660 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 2, i32 3
  %661 = load i32, i32* %660, align 4
  %662 = and i32 %661, 4194304
  %663 = icmp eq i32 %662, 0
  %664 = select i1 %663, i32 65535, i32 -1
  %665 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 2, i32 1
  %666 = load i64, i64* %665, align 8
  %667 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 0, i64 4
  %668 = load i64, i64* %667, align 16
  %669 = trunc i64 %668 to i32
  %670 = and i32 %466, 6144
  %671 = icmp eq i32 %670, 2048
  br i1 %671, label %731, label %814

672:                                              ; preds = %649
  tail call fastcc void @raise_interrupt2(%struct.CPUX86State* noundef nonnull %96, i32 noundef 13, i32 noundef 0, i32 noundef %527, i32 noundef 0, i64 noundef 0) #28
  unreachable

673:                                              ; preds = %645
  %674 = and i32 %635, 4194304
  %675 = icmp eq i32 %674, 0
  %676 = select i1 %675, i32 65535, i32 -1
  %677 = lshr i32 %632, 16
  %678 = shl i32 %635, 16
  %679 = and i32 %678, 16711680
  %680 = and i32 %635, -16777216
  %681 = or i32 %680, %677
  %682 = or i32 %681, %679
  %683 = zext i32 %682 to i64
  %684 = and i32 %466, 6144
  %685 = icmp eq i32 %684, 2048
  %686 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 20
  %687 = load i64, i64* %686, align 8
  %688 = and i64 %687, 131072
  %689 = icmp eq i64 %688, 0
  br i1 %685, label %690, label %773

690:                                              ; preds = %673
  br i1 %689, label %716, label %691

691:                                              ; preds = %690
  %692 = add i32 %602, -4
  %693 = and i32 %676, %692
  %694 = add i32 %693, %682
  %695 = zext i32 %694 to i64
  %696 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 5, i32 0
  %697 = load i32, i32* %696, align 8
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* noundef nonnull %96, i64 noundef %695, i32 noundef %697)
  %698 = add i32 %602, -8
  %699 = and i32 %676, %698
  %700 = add i32 %699, %682
  %701 = zext i32 %700 to i64
  %702 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 4, i32 0
  %703 = load i32, i32* %702, align 16
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* noundef nonnull %96, i64 noundef %701, i32 noundef %703)
  %704 = add i32 %602, -12
  %705 = and i32 %676, %704
  %706 = add i32 %705, %682
  %707 = zext i32 %706 to i64
  %708 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 3, i32 0
  %709 = load i32, i32* %708, align 8
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* noundef nonnull %96, i64 noundef %707, i32 noundef %709)
  %710 = add i32 %602, -16
  %711 = and i32 %676, %710
  %712 = add i32 %711, %682
  %713 = zext i32 %712 to i64
  %714 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 0, i32 0
  %715 = load i32, i32* %714, align 16
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* noundef nonnull %96, i64 noundef %713, i32 noundef %715)
  br label %716

716:                                              ; preds = %691, %690
  %717 = phi i32 [ %602, %690 ], [ %710, %691 ]
  %718 = add i32 %717, -4
  %719 = and i32 %718, %676
  %720 = add i32 %719, %682
  %721 = zext i32 %720 to i64
  %722 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 2, i32 0
  %723 = load i32, i32* %722, align 16
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* noundef nonnull %96, i64 noundef %721, i32 noundef %723)
  %724 = add i32 %717, -8
  %725 = and i32 %724, %676
  %726 = add i32 %725, %682
  %727 = zext i32 %726 to i64
  %728 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 0, i64 4
  %729 = load i64, i64* %728, align 16
  %730 = trunc i64 %729 to i32
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* noundef nonnull %96, i64 noundef %727, i32 noundef %730)
  br label %731

731:                                              ; preds = %716, %659
  %732 = phi i32 [ %607, %716 ], [ 0, %659 ]
  %733 = phi i32 [ %632, %716 ], [ 0, %659 ]
  %734 = phi i32 [ %635, %716 ], [ 0, %659 ]
  %735 = phi i32 [ %557, %716 ], [ %510, %659 ]
  %736 = phi i64 [ %683, %716 ], [ %666, %659 ]
  %737 = phi i32 [ %676, %716 ], [ %664, %659 ]
  %738 = phi i32 [ %724, %716 ], [ %669, %659 ]
  %739 = add i32 %738, -4
  %740 = and i32 %739, %737
  %741 = trunc i64 %736 to i32
  %742 = add i32 %740, %741
  %743 = zext i32 %742 to i64
  %744 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %745 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %744, i64 0, i32 20
  %746 = load i64, i64* %745, align 8
  %747 = trunc i64 %746 to i32
  %748 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %744, i64 0, i32 1
  %749 = load i64, i64* %748, align 16
  %750 = trunc i64 %749 to i32
  %751 = tail call i32 @helper_cc_compute_all(i32 noundef %750) #30
  %752 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %744, i64 0, i32 19
  %753 = load i32, i32* %752, align 16
  %754 = and i32 %753, 1024
  %755 = or i32 %751, %747
  %756 = or i32 %755, %754
  %757 = or i32 %756, 2
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* noundef nonnull %96, i64 noundef %743, i32 noundef %757)
  %758 = add i32 %738, -8
  %759 = and i32 %758, %737
  %760 = add i32 %759, %741
  %761 = zext i32 %760 to i64
  %762 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 1, i32 0
  %763 = load i32, i32* %762, align 8
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* noundef nonnull %96, i64 noundef %761, i32 noundef %763)
  %764 = add i32 %738, -12
  %765 = and i32 %764, %737
  %766 = add i32 %765, %741
  %767 = zext i32 %766 to i64
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* noundef nonnull %96, i64 noundef %767, i32 noundef %451)
  br i1 %445, label %855, label %768

768:                                              ; preds = %731
  %769 = add i32 %738, -16
  %770 = and i32 %769, %737
  %771 = add i32 %770, %741
  %772 = zext i32 %771 to i64
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* noundef nonnull %96, i64 noundef %772, i32 noundef %2)
  br i1 %568, label %863, label %960

773:                                              ; preds = %673
  br i1 %689, label %799, label %774

774:                                              ; preds = %773
  %775 = add i32 %602, -2
  %776 = and i32 %676, %775
  %777 = zext i32 %776 to i64
  %778 = add nuw nsw i64 %777, %683
  %779 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 5, i32 0
  %780 = load i32, i32* %779, align 8
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* noundef nonnull %96, i64 noundef %778, i32 noundef %780)
  %781 = add i32 %602, -4
  %782 = and i32 %676, %781
  %783 = zext i32 %782 to i64
  %784 = add nuw nsw i64 %783, %683
  %785 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 4, i32 0
  %786 = load i32, i32* %785, align 16
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* noundef nonnull %96, i64 noundef %784, i32 noundef %786)
  %787 = add i32 %602, -6
  %788 = and i32 %676, %787
  %789 = zext i32 %788 to i64
  %790 = add nuw nsw i64 %789, %683
  %791 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 3, i32 0
  %792 = load i32, i32* %791, align 8
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* noundef nonnull %96, i64 noundef %790, i32 noundef %792)
  %793 = add i32 %602, -8
  %794 = and i32 %676, %793
  %795 = zext i32 %794 to i64
  %796 = add nuw nsw i64 %795, %683
  %797 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 0, i32 0
  %798 = load i32, i32* %797, align 16
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* noundef nonnull %96, i64 noundef %796, i32 noundef %798)
  br label %799

799:                                              ; preds = %774, %773
  %800 = phi i32 [ %602, %773 ], [ %793, %774 ]
  %801 = add i32 %800, -2
  %802 = and i32 %801, %676
  %803 = zext i32 %802 to i64
  %804 = add nuw nsw i64 %803, %683
  %805 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 2, i32 0
  %806 = load i32, i32* %805, align 16
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* noundef nonnull %96, i64 noundef %804, i32 noundef %806)
  %807 = add i32 %800, -4
  %808 = and i32 %807, %676
  %809 = zext i32 %808 to i64
  %810 = add nuw nsw i64 %809, %683
  %811 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 0, i64 4
  %812 = load i64, i64* %811, align 16
  %813 = trunc i64 %812 to i32
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* noundef nonnull %96, i64 noundef %810, i32 noundef %813)
  br label %814

814:                                              ; preds = %799, %659
  %815 = phi i32 [ %607, %799 ], [ 0, %659 ]
  %816 = phi i32 [ %632, %799 ], [ 0, %659 ]
  %817 = phi i32 [ %635, %799 ], [ 0, %659 ]
  %818 = phi i32 [ %557, %799 ], [ %510, %659 ]
  %819 = phi i64 [ %683, %799 ], [ %666, %659 ]
  %820 = phi i32 [ %676, %799 ], [ %664, %659 ]
  %821 = phi i32 [ %807, %799 ], [ %669, %659 ]
  %822 = add i32 %821, -2
  %823 = and i32 %822, %820
  %824 = zext i32 %823 to i64
  %825 = add i64 %819, %824
  %826 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %827 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %826, i64 0, i32 20
  %828 = load i64, i64* %827, align 8
  %829 = trunc i64 %828 to i32
  %830 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %826, i64 0, i32 1
  %831 = load i64, i64* %830, align 16
  %832 = trunc i64 %831 to i32
  %833 = tail call i32 @helper_cc_compute_all(i32 noundef %832) #30
  %834 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %826, i64 0, i32 19
  %835 = load i32, i32* %834, align 16
  %836 = and i32 %835, 1024
  %837 = or i32 %833, %829
  %838 = or i32 %837, %836
  %839 = or i32 %838, 2
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* noundef nonnull %96, i64 noundef %825, i32 noundef %839)
  %840 = add i32 %821, -4
  %841 = and i32 %840, %820
  %842 = zext i32 %841 to i64
  %843 = add i64 %819, %842
  %844 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 1, i32 0
  %845 = load i32, i32* %844, align 8
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* noundef nonnull %96, i64 noundef %843, i32 noundef %845)
  %846 = add i32 %821, -6
  %847 = and i32 %846, %820
  %848 = zext i32 %847 to i64
  %849 = add i64 %819, %848
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* noundef nonnull %96, i64 noundef %849, i32 noundef %451)
  br i1 %445, label %855, label %850

850:                                              ; preds = %814
  %851 = add i32 %821, -8
  %852 = and i32 %851, %820
  %853 = zext i32 %852 to i64
  %854 = add i64 %819, %853
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* noundef nonnull %96, i64 noundef %854, i32 noundef %2)
  br i1 %568, label %863, label %960

855:                                              ; preds = %814, %731
  %856 = phi i64 [ %736, %731 ], [ %819, %814 ]
  %857 = phi i32 [ %737, %731 ], [ %820, %814 ]
  %858 = phi i32 [ %735, %731 ], [ %818, %814 ]
  %859 = phi i32 [ %734, %731 ], [ %817, %814 ]
  %860 = phi i32 [ %733, %731 ], [ %816, %814 ]
  %861 = phi i32 [ %732, %731 ], [ %815, %814 ]
  %862 = phi i32 [ %764, %731 ], [ %846, %814 ]
  br i1 %568, label %863, label %960

863:                                              ; preds = %855, %850, %768
  %864 = phi i32 [ %769, %768 ], [ %862, %855 ], [ %851, %850 ]
  %865 = phi i32 [ %732, %768 ], [ %861, %855 ], [ %815, %850 ]
  %866 = phi i32 [ %733, %768 ], [ %860, %855 ], [ %816, %850 ]
  %867 = phi i32 [ %734, %768 ], [ %859, %855 ], [ %817, %850 ]
  %868 = phi i32 [ %735, %768 ], [ %858, %855 ], [ %818, %850 ]
  %869 = phi i32 [ %737, %768 ], [ %857, %855 ], [ %820, %850 ]
  %870 = phi i64 [ %736, %768 ], [ %856, %855 ], [ %819, %850 ]
  %871 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 20
  %872 = load i64, i64* %871, align 8
  %873 = and i64 %872, 131072
  %874 = icmp eq i64 %873, 0
  br i1 %874, label %875, label %877

875:                                              ; preds = %863
  %876 = load i32, i32* %97, align 16
  br label %914

877:                                              ; preds = %863
  %878 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 0, i32 0
  store i32 0, i32* %878, align 8
  %879 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 0, i32 1
  %880 = bitcast i64* %879 to i8*
  %881 = call i8* @memset(i8* %880, i32 0, i64 16)
  %882 = load i32, i32* %97, align 16
  %883 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 2, i32 3
  %884 = load i32, i32* %883, align 4
  %885 = lshr i32 %884, 17
  %886 = and i32 %885, 32
  %887 = and i32 %882, 32768
  %888 = icmp eq i32 %887, 0
  %889 = and i32 %882, -97
  %890 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 3, i32 0
  store i32 0, i32* %890, align 8
  %891 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 3, i32 1
  %892 = bitcast i64* %891 to i8*
  %893 = call i8* @memset(i8* %892, i32 0, i64 16)
  br i1 %888, label %899, label %894

894:                                              ; preds = %877
  %895 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 4, i32 1
  %896 = or i32 %886, %889
  %897 = bitcast i64* %895 to i8*
  %898 = call i8* @memset(i8* %897, i32 0, i64 16)
  store i32 %896, i32* %97, align 16
  br label %907

899:                                              ; preds = %877
  %900 = or i32 %886, %889
  %901 = or i32 %900, 64
  store i32 %901, i32* %97, align 16
  %902 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 4, i32 1
  %903 = bitcast i64* %902 to i8*
  %904 = call i8* @memset(i8* %903, i32 0, i64 16)
  %905 = or i32 %886, %889
  %906 = or i32 %905, 64
  br label %907

907:                                              ; preds = %899, %894
  %908 = phi i32 [ %906, %899 ], [ %896, %894 ]
  %909 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 4, i32 0
  store i32 0, i32* %909, align 8
  %910 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 5, i32 0
  store i32 0, i32* %910, align 8
  %911 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 5, i32 1
  %912 = bitcast i64* %911 to i8*
  %913 = call i8* @memset(i8* %912, i32 0, i64 16)
  br label %914

914:                                              ; preds = %907, %875
  %915 = phi i32 [ %876, %875 ], [ %908, %907 ]
  %916 = and i32 %865, -4
  %917 = or i32 %868, %916
  %918 = and i32 %866, 65535
  %919 = and i32 %867, 983040
  %920 = or i32 %919, %918
  %921 = and i32 %867, 8388608
  %922 = icmp eq i32 %921, 0
  %923 = shl nuw i32 %920, 12
  %924 = or i32 %923, 4095
  %925 = select i1 %922, i32 %920, i32 %924
  %926 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 2, i32 0
  store i32 %917, i32* %926, align 8
  %927 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 2, i32 1
  store i64 %870, i64* %927, align 8
  %928 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 2, i32 2
  store i32 %925, i32* %928, align 8
  %929 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 2, i32 3
  store i32 %867, i32* %929, align 4
  %930 = lshr i32 %867, 17
  %931 = and i32 %930, 32
  %932 = and i32 %915, 32768
  %933 = icmp eq i32 %932, 0
  br i1 %933, label %934, label %956

934:                                              ; preds = %914
  %935 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 29, i64 0
  %936 = load i64, i64* %935, align 16
  %937 = and i64 %936, 1
  %938 = icmp eq i64 %937, 0
  br i1 %938, label %944, label %939

939:                                              ; preds = %934
  %940 = icmp ne i64 %873, 0
  %941 = and i32 %915, 16
  %942 = icmp eq i32 %941, 0
  %943 = select i1 %940, i1 true, i1 %942
  br i1 %943, label %944, label %946

944:                                              ; preds = %939, %934
  %945 = or i32 %931, 64
  br label %956

946:                                              ; preds = %939
  %947 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 3, i32 1
  %948 = load i64, i64* %947, align 8
  %949 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 0, i32 1
  %950 = load i64, i64* %949, align 8
  %951 = or i64 %948, %870
  %952 = or i64 %951, %950
  %953 = icmp eq i64 %952, 0
  %954 = select i1 %953, i32 0, i32 64
  %955 = or i32 %954, %931
  br label %956

956:                                              ; preds = %946, %944, %914
  %957 = phi i32 [ %931, %914 ], [ %945, %944 ], [ %955, %946 ]
  %958 = and i32 %915, -97
  %959 = or i32 %957, %958
  store i32 %959, i32* %97, align 16
  br label %960

960:                                              ; preds = %956, %855, %850, %768
  %961 = phi i32 [ %862, %855 ], [ %864, %956 ], [ %769, %768 ], [ %851, %850 ]
  %962 = phi i32 [ %857, %855 ], [ %869, %956 ], [ %737, %768 ], [ %820, %850 ]
  %963 = phi i32 [ %858, %855 ], [ %868, %956 ], [ %735, %768 ], [ %818, %850 ]
  switch i32 %962, label %974 [
    i32 65535, label %964
    i32 -1, label %971
  ]

964:                                              ; preds = %960
  %965 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 0, i64 4
  %966 = load i64, i64* %965, align 16
  %967 = and i64 %966, -65536
  %968 = and i32 %961, 65535
  %969 = zext i32 %968 to i64
  %970 = or i64 %967, %969
  store i64 %970, i64* %965, align 16
  br label %977

971:                                              ; preds = %960
  %972 = zext i32 %961 to i64
  %973 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 0, i64 4
  store i64 %972, i64* %973, align 16
  br label %977

974:                                              ; preds = %960
  %975 = zext i32 %961 to i64
  %976 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 0, i64 4
  store i64 %975, i64* %976, align 16
  br label %977

977:                                              ; preds = %974, %971, %964
  %978 = or i32 %963, %527
  %979 = lshr i32 %548, 16
  %980 = shl i32 %551, 16
  %981 = and i32 %980, 16711680
  %982 = and i32 %551, -16777216
  %983 = or i32 %982, %979
  %984 = or i32 %983, %981
  %985 = zext i32 %984 to i64
  %986 = and i32 %548, 65535
  %987 = and i32 %551, 983040
  %988 = or i32 %987, %986
  %989 = and i32 %551, 8388608
  %990 = icmp eq i32 %989, 0
  %991 = shl nuw i32 %988, 12
  %992 = or i32 %991, 4095
  %993 = select i1 %990, i32 %988, i32 %992
  %994 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 1, i32 0
  store i32 %978, i32* %994, align 8
  %995 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 1, i32 1
  store i64 %985, i64* %995, align 8
  %996 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 1, i32 2
  store i32 %993, i32* %996, align 8
  %997 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 1, i32 3
  store i32 %551, i32* %997, align 4
  %998 = load i32, i32* %97, align 16
  %999 = and i32 %998, 16384
  %1000 = icmp eq i32 %999, 0
  %1001 = and i32 %551, 2097152
  %1002 = icmp eq i32 %1001, 0
  %1003 = or i1 %1002, %1000
  %1004 = lshr i32 %551, 18
  %1005 = and i32 %1004, 16
  %1006 = select i1 %1003, i32 %1005, i32 32816
  %1007 = and i32 %998, -32881
  %1008 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 2, i32 3
  %1009 = load i32, i32* %1008, align 4
  %1010 = lshr i32 %1009, 17
  %1011 = and i32 %1010, 32
  %1012 = and i32 %1006, 32768
  %1013 = icmp eq i32 %1012, 0
  br i1 %1013, label %1014, label %1041

1014:                                             ; preds = %977
  %1015 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 29, i64 0
  %1016 = load i64, i64* %1015, align 16
  %1017 = and i64 %1016, 1
  %1018 = icmp eq i64 %1017, 0
  br i1 %1018, label %1027, label %1019

1019:                                             ; preds = %1014
  %1020 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 20
  %1021 = load i64, i64* %1020, align 8
  %1022 = and i64 %1021, 131072
  %1023 = icmp ne i64 %1022, 0
  %1024 = and i32 %1006, 16
  %1025 = icmp eq i32 %1024, 0
  %1026 = select i1 %1023, i1 true, i1 %1025
  br i1 %1026, label %1027, label %1029

1027:                                             ; preds = %1019, %1014
  %1028 = or i32 %1011, 64
  br label %1041

1029:                                             ; preds = %1019
  %1030 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 3, i32 1
  %1031 = load i64, i64* %1030, align 8
  %1032 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 0, i32 1
  %1033 = load i64, i64* %1032, align 8
  %1034 = or i64 %1033, %1031
  %1035 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 24, i64 2, i32 1
  %1036 = load i64, i64* %1035, align 8
  %1037 = or i64 %1034, %1036
  %1038 = icmp eq i64 %1037, 0
  %1039 = select i1 %1038, i32 0, i32 64
  %1040 = or i32 %1039, %1011
  br label %1041

1041:                                             ; preds = %1029, %1027, %977
  %1042 = phi i32 [ %1011, %977 ], [ %1028, %1027 ], [ %1040, %1029 ]
  %1043 = and i32 %1006, 32784
  %1044 = or i32 %1043, %1007
  %1045 = or i32 %1044, %1042
  store i32 %1045, i32* %97, align 16
  %1046 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 16), align 8
  %1047 = load i32, i32* %1046, align 4
  %1048 = icmp eq i32 %1047, 0
  br i1 %1048, label %1054, label %1049, !prof !5

1049:                                             ; preds = %1041
  %1050 = load void (i32, i32)*, void (i32, i32)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 19), align 8
  %1051 = and i32 %998, 3
  tail call void %1050(i32 noundef %1051, i32 noundef %963)
  %1052 = load i32, i32* %97, align 16
  %1053 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 16), align 8
  br label %1054

1054:                                             ; preds = %1049, %1041
  %1055 = phi i32* [ %1046, %1041 ], [ %1053, %1049 ]
  %1056 = phi i32 [ %1045, %1041 ], [ %1052, %1049 ]
  %1057 = and i32 %1056, -4
  %1058 = or i32 %1057, %963
  store i32 %1058, i32* %97, align 16
  %1059 = zext i32 %526 to i64
  %1060 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 18
  store i64 %1059, i64* %1060, align 8
  %1061 = and i32 %466, 256
  %1062 = icmp eq i32 %1061, 0
  %1063 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 20
  %1064 = load i64, i64* %1063, align 8
  %1065 = and i64 %1064, -213761
  %1066 = select i1 %1062, i64 %1065, i64 %1064
  %1067 = and i64 %1066, -213249
  store i64 %1067, i64* %1063, align 8
  %1068 = load i32, i32* %1055, align 4
  %1069 = icmp eq i32 %1068, 0
  br i1 %1069, label %1153, label %1070, !prof !5

1070:                                             ; preds = %1054
  %1071 = load void (i32, i32)*, void (i32, i32)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 19), align 8
  tail call void %1071(i32 noundef %510, i32 noundef %963)
  br label %1153

1072:                                             ; preds = %61
  br i1 %70, label %1088, label %1073

1073:                                             ; preds = %1072
  %1074 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %62, i64 0, i32 40
  %1075 = load i64, i64* %1074, align 16
  %1076 = add i64 %1075, 168
  %1077 = tail call i32 @ldl_phys(i64 noundef %1076)
  %1078 = icmp sgt i32 %1077, -1
  br i1 %1078, label %1079, label %1088

1079:                                             ; preds = %1073
  %1080 = icmp eq i32 %1, 0
  %1081 = select i1 %1080, i32 768, i32 1024
  %1082 = or i32 %1081, %0
  %1083 = or i32 %1082, -2147483648
  %1084 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %1085 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1084, i64 0, i32 40
  %1086 = load i64, i64* %1085, align 16
  %1087 = add i64 %1086, 168
  tail call void @stl_phys(i64 noundef %1087, i32 noundef %1083)
  br label %1088

1088:                                             ; preds = %1079, %1073, %1072
  %1089 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %1090 = shl nsw i32 %0, 2
  %1091 = or i32 %1090, 3
  %1092 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1089, i64 0, i32 28, i32 2
  %1093 = load i32, i32* %1092, align 8
  %1094 = icmp ugt i32 %1091, %1093
  br i1 %1094, label %1095, label %1098

1095:                                             ; preds = %1088
  %1096 = shl nsw i32 %0, 3
  %1097 = or i32 %1096, 2
  tail call fastcc void @raise_interrupt2(%struct.CPUX86State* noundef nonnull %1089, i32 noundef 13, i32 noundef 0, i32 noundef %1097, i32 noundef 0, i64 noundef 0) #28
  unreachable

1098:                                             ; preds = %1088
  %1099 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1089, i64 0, i32 28, i32 1
  %1100 = load i64, i64* %1099, align 8
  %1101 = sext i32 %1090 to i64
  %1102 = add i64 %1100, %1101
  %1103 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* noundef nonnull %1089, i64 noundef %1102)
  %1104 = add i64 %1102, 2
  %1105 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* noundef nonnull %1089, i64 noundef %1104)
  %1106 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1089, i64 0, i32 0, i64 4
  %1107 = load i64, i64* %1106, align 16
  %1108 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1089, i64 0, i32 24, i64 2, i32 1
  %1109 = load i64, i64* %1108, align 8
  %1110 = icmp eq i32 %1, 0
  br i1 %1110, label %1111, label %1114

1111:                                             ; preds = %1098
  %1112 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1089, i64 0, i32 18
  %1113 = load i64, i64* %1112, align 8
  br label %1114

1114:                                             ; preds = %1098, %1111
  %1115 = phi i64 [ %1113, %1111 ], [ %3, %1098 ]
  %1116 = trunc i64 %1115 to i32
  %1117 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1089, i64 0, i32 24, i64 1, i32 0
  %1118 = load i32, i32* %1117, align 8
  %1119 = add i64 %1107, 65534
  %1120 = and i64 %1119, 65535
  %1121 = add i64 %1120, %1109
  %1122 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %1123 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1122, i64 0, i32 20
  %1124 = load i64, i64* %1123, align 8
  %1125 = trunc i64 %1124 to i32
  %1126 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1122, i64 0, i32 1
  %1127 = load i64, i64* %1126, align 16
  %1128 = trunc i64 %1127 to i32
  %1129 = tail call i32 @helper_cc_compute_all(i32 noundef %1128) #30
  %1130 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1122, i64 0, i32 19
  %1131 = load i32, i32* %1130, align 16
  %1132 = and i32 %1131, 1024
  %1133 = or i32 %1129, %1125
  %1134 = or i32 %1133, %1132
  %1135 = or i32 %1134, 2
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* noundef nonnull %1089, i64 noundef %1121, i32 noundef %1135)
  %1136 = add i64 %1107, 65532
  %1137 = and i64 %1136, 65535
  %1138 = add i64 %1137, %1109
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* noundef nonnull %1089, i64 noundef %1138, i32 noundef %1118)
  %1139 = add i64 %1107, 65530
  %1140 = and i64 %1139, 65535
  %1141 = add i64 %1140, %1109
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* noundef nonnull %1089, i64 noundef %1141, i32 noundef %1116)
  %1142 = load i64, i64* %1106, align 16
  %1143 = and i64 %1142, -65536
  %1144 = or i64 %1143, %1140
  store i64 %1144, i64* %1106, align 16
  %1145 = zext i32 %1103 to i64
  %1146 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1089, i64 0, i32 18
  store i64 %1145, i64* %1146, align 8
  store i32 %1105, i32* %1117, align 8
  %1147 = shl i32 %1105, 4
  %1148 = zext i32 %1147 to i64
  %1149 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1089, i64 0, i32 24, i64 1, i32 1
  store i64 %1148, i64* %1149, align 8
  %1150 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1089, i64 0, i32 20
  %1151 = load i64, i64* %1150, align 8
  %1152 = and i64 %1151, -328449
  store i64 %1152, i64* %1150, align 8
  br label %1153

1153:                                             ; preds = %1070, %1054, %505, %499, %474, %415, %1114
  %1154 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %1155 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1154, i64 0, i32 21
  %1156 = load i32, i32* %1155, align 16
  %1157 = and i32 %1156, 2097152
  %1158 = icmp eq i32 %1157, 0
  br i1 %1158, label %1169, label %1159

1159:                                             ; preds = %1153
  %1160 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1154, i64 0, i32 40
  %1161 = load i64, i64* %1160, align 16
  %1162 = add i64 %1161, 168
  %1163 = tail call i32 @ldl_phys(i64 noundef %1162)
  %1164 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %1165 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1164, i64 0, i32 40
  %1166 = load i64, i64* %1165, align 16
  %1167 = add i64 %1166, 168
  %1168 = and i32 %1163, 2147483647
  tail call void @stl_phys(i64 noundef %1167, i32 noundef %1168)
  br label %1169

1169:                                             ; preds = %1159, %1153
  ret void
}

; Function Attrs: nofree nounwind
declare noundef i32 @fputc(i32 noundef, %struct._IO_FILE* nocapture noundef) local_unnamed_addr #6

; Function Attrs: uwtable
define internal fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef %0, i64 noundef %1) unnamed_addr #3 {
  %3 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %7, label %6

6:                                                ; preds = %2
  tail call void @tcg_llvm_before_memory_access(i64 noundef %1, i64 noundef 0, i32 noundef 4, i32 noundef 0)
  br label %7

7:                                                ; preds = %6, %2
  %8 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %13, label %11

11:                                               ; preds = %7
  %12 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %1, i64 noundef 0, i64 noundef -1, i64 noundef 0)
  br label %13

13:                                               ; preds = %7, %11
  %14 = phi i64 [ %12, %11 ], [ %1, %7 ]
  %15 = lshr i64 %14, 12
  %16 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %15, i64 noundef 0, i64 noundef 4503599627370495, i64 noundef 0)
  %17 = and i64 %16, 1023
  %18 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 82, i64 0
  %19 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %18, align 8
  %20 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %19, i64 %17, i32 0
  %21 = load i64, i64* %20, align 8
  %22 = and i64 %21, -33
  %23 = and i64 %14, -4093
  %24 = icmp eq i64 %22, %23
  br i1 %24, label %27, label %25, !prof !5

25:                                               ; preds = %13
  %26 = tail call i32 @helper_ldl_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %14, i32 noundef 0, i8* noundef null)
  br label %38

27:                                               ; preds = %13
  %28 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %19, i64 %17, i32 4
  %29 = load i64, i64* %28, align 8
  %30 = add i64 %29, %14
  %31 = inttoptr i64 %30 to i32*
  %32 = load i32, i32* %31, align 4
  %33 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %38, label %36

36:                                               ; preds = %27
  %37 = zext i32 %32 to i64
  tail call void @tcg_llvm_after_memory_access(i64 noundef %14, i64 noundef %37, i32 noundef 4, i32 noundef 0, i64 noundef 0)
  br label %38

38:                                               ; preds = %27, %36, %25
  %39 = phi i32 [ %26, %25 ], [ %32, %36 ], [ %32, %27 ]
  ret i32 %39
}

; Function Attrs: noreturn
declare void @cpu_abort(%struct.CPUX86State* noundef, i8* noundef, ...) local_unnamed_addr #8

; Function Attrs: uwtable
define internal fastcc i64 @cpu_ldq_kernel(%struct.CPUX86State* noundef %0, i64 noundef %1) unnamed_addr #3 {
  %3 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %7, label %6

6:                                                ; preds = %2
  tail call void @tcg_llvm_before_memory_access(i64 noundef %1, i64 noundef 0, i32 noundef 8, i32 noundef 0)
  br label %7

7:                                                ; preds = %6, %2
  %8 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %13, label %11

11:                                               ; preds = %7
  %12 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %1, i64 noundef 0, i64 noundef -1, i64 noundef 0)
  br label %13

13:                                               ; preds = %7, %11
  %14 = phi i64 [ %12, %11 ], [ %1, %7 ]
  %15 = lshr i64 %14, 12
  %16 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %15, i64 noundef 0, i64 noundef 4503599627370495, i64 noundef 0)
  %17 = and i64 %16, 1023
  %18 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 82, i64 0
  %19 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %18, align 8
  %20 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %19, i64 %17, i32 0
  %21 = load i64, i64* %20, align 8
  %22 = and i64 %21, -33
  %23 = and i64 %14, -4089
  %24 = icmp eq i64 %22, %23
  br i1 %24, label %27, label %25, !prof !5

25:                                               ; preds = %13
  %26 = tail call i64 @helper_ldq_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %14, i32 noundef 0, i8* noundef null)
  br label %37

27:                                               ; preds = %13
  %28 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %19, i64 %17, i32 4
  %29 = load i64, i64* %28, align 8
  %30 = add i64 %29, %14
  %31 = inttoptr i64 %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %37, label %36

36:                                               ; preds = %27
  tail call void @tcg_llvm_after_memory_access(i64 noundef %14, i64 noundef %32, i32 noundef 8, i32 noundef 0, i64 noundef 0)
  br label %37

37:                                               ; preds = %27, %36, %25
  %38 = phi i64 [ %26, %25 ], [ %32, %36 ], [ %32, %27 ]
  ret i64 %38
}

; Function Attrs: uwtable
define internal fastcc void @cpu_stq_kernel(%struct.CPUX86State* noundef %0, i64 noundef %1, i64 noundef %2) unnamed_addr #3 {
  %4 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %8, label %7

7:                                                ; preds = %3
  tail call void @tcg_llvm_before_memory_access(i64 noundef %1, i64 noundef %2, i32 noundef 8, i32 noundef 1)
  br label %8

8:                                                ; preds = %7, %3
  %9 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %14, label %12

12:                                               ; preds = %8
  %13 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %1, i64 noundef 0, i64 noundef -1, i64 noundef 0)
  br label %14

14:                                               ; preds = %8, %12
  %15 = phi i64 [ %13, %12 ], [ %1, %8 ]
  %16 = lshr i64 %15, 12
  %17 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %16, i64 noundef 0, i64 noundef 4503599627370495, i64 noundef 0)
  %18 = and i64 %17, 1023
  %19 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 82, i64 0
  %20 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %19, align 8
  %21 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %20, i64 %18, i32 1
  %22 = load i64, i64* %21, align 8
  %23 = and i64 %22, -33
  %24 = and i64 %15, -4089
  %25 = icmp eq i64 %23, %24
  br i1 %25, label %27, label %26, !prof !5

26:                                               ; preds = %14
  tail call void @helper_stq_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %15, i64 noundef %2, i32 noundef 0, i8* noundef null)
  br label %36

27:                                               ; preds = %14
  %28 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %20, i64 %18, i32 4
  %29 = load i64, i64* %28, align 8
  %30 = add i64 %29, %15
  %31 = inttoptr i64 %30 to i64*
  store i64 %2, i64* %31, align 8
  %32 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %33 = load i32, i32* %32, align 4
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %36, label %35

35:                                               ; preds = %27
  tail call void @tcg_llvm_after_memory_access(i64 noundef %15, i64 noundef %2, i32 noundef 8, i32 noundef 2, i64 noundef 0)
  br label %36

36:                                               ; preds = %27, %35, %26
  ret void
}

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #13

; Function Attrs: uwtable
define internal fastcc void @switch_tss(%struct.CPUX86State* noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5) unnamed_addr #3 {
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 21
  %8 = load i32, i32* %7, align 16
  %9 = and i32 %8, 3
  %10 = lshr i32 %3, 8
  %11 = and i32 %10, 15
  %12 = icmp eq i32 %11, 5
  br i1 %12, label %13, label %53

13:                                               ; preds = %6
  %14 = and i32 %3, 32768
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %18

16:                                               ; preds = %13
  %17 = and i32 %1, 65532
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %0, i32 noundef 11, i32 noundef %17, i64 noundef 0)
  unreachable

18:                                               ; preds = %13
  %19 = lshr i32 %2, 16
  %20 = and i32 %2, 262144
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %24, label %22

22:                                               ; preds = %18
  %23 = and i32 %19, 65532
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %0, i32 noundef 10, i32 noundef %23, i64 noundef 0)
  unreachable

24:                                               ; preds = %18
  %25 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %26 = or i32 %19, 7
  %27 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %25, i64 0, i32 27, i32 2
  %28 = load i32, i32* %27, align 8
  %29 = icmp ugt i32 %26, %28
  br i1 %29, label %30, label %32

30:                                               ; preds = %24
  %31 = and i32 %19, 65532
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %0, i32 noundef 13, i32 noundef %31, i64 noundef 0)
  unreachable

32:                                               ; preds = %24
  %33 = and i32 %19, 65528
  %34 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %25, i64 0, i32 27, i32 1
  %35 = load i64, i64* %34, align 8
  %36 = zext i32 %33 to i64
  %37 = add i64 %35, %36
  %38 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef nonnull %25, i64 noundef %37)
  %39 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %40 = add i64 %37, 4
  %41 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef %39, i64 noundef %40)
  %42 = and i32 %41, 4096
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %46, label %44

44:                                               ; preds = %32
  %45 = and i32 %19, 65532
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %0, i32 noundef 13, i32 noundef %45, i64 noundef 0)
  unreachable

46:                                               ; preds = %32
  %47 = lshr i32 %41, 8
  %48 = and i32 %47, 15
  %49 = and i32 %41, 1792
  %50 = icmp eq i32 %49, 256
  br i1 %50, label %53, label %51

51:                                               ; preds = %46
  %52 = and i32 %19, 65532
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %0, i32 noundef 13, i32 noundef %52, i64 noundef 0)
  unreachable

53:                                               ; preds = %46, %6
  %54 = phi i32 [ %38, %46 ], [ %2, %6 ]
  %55 = phi i32 [ %41, %46 ], [ %3, %6 ]
  %56 = phi i32 [ %48, %46 ], [ %11, %6 ]
  %57 = phi i32 [ %19, %46 ], [ %1, %6 ]
  %58 = and i32 %55, 32768
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %62

60:                                               ; preds = %53
  %61 = and i32 %57, 65532
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %0, i32 noundef 11, i32 noundef %61, i64 noundef 0)
  unreachable

62:                                               ; preds = %53
  %63 = and i32 %56, 8
  %64 = icmp eq i32 %63, 0
  %65 = select i1 %64, i32 43, i32 103
  %66 = and i32 %54, 65535
  %67 = and i32 %55, 983040
  %68 = or i32 %67, %66
  %69 = and i32 %55, 8388608
  %70 = icmp eq i32 %69, 0
  %71 = shl nuw i32 %68, 12
  %72 = or i32 %71, 4095
  %73 = select i1 %70, i32 %68, i32 %72
  %74 = lshr i32 %54, 16
  %75 = shl i32 %55, 16
  %76 = and i32 %75, 16711680
  %77 = and i32 %55, -16777216
  %78 = or i32 %77, %74
  %79 = or i32 %78, %76
  %80 = zext i32 %79 to i64
  %81 = and i32 %57, 4
  %82 = icmp ne i32 %81, 0
  %83 = icmp slt i32 %73, %65
  %84 = select i1 %82, i1 true, i1 %83
  br i1 %84, label %85, label %87

85:                                               ; preds = %62
  %86 = and i32 %57, 65532
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %0, i32 noundef 10, i32 noundef %86, i64 noundef 0)
  unreachable

87:                                               ; preds = %62
  %88 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 26
  %89 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 26, i32 3
  %90 = load i32, i32* %89, align 4
  %91 = and i32 %90, 2048
  %92 = icmp eq i32 %91, 0
  %93 = select i1 %92, i64 43, i64 103
  br i1 %64, label %133, label %94

94:                                               ; preds = %87
  %95 = add nuw nsw i64 %80, 28
  %96 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %95)
  %97 = add nuw nsw i64 %80, 32
  %98 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %97)
  %99 = add nuw nsw i64 %80, 36
  %100 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %99)
  %101 = add nuw nsw i64 %80, 40
  %102 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %101)
  %103 = add nuw nsw i64 %80, 44
  %104 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %103)
  %105 = add nuw nsw i64 %80, 48
  %106 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %105)
  %107 = add nuw nsw i64 %80, 52
  %108 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %107)
  %109 = add nuw nsw i64 %80, 56
  %110 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %109)
  %111 = add nuw nsw i64 %80, 60
  %112 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %111)
  %113 = add nuw nsw i64 %80, 64
  %114 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %113)
  %115 = add nuw nsw i64 %80, 68
  %116 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %115)
  %117 = add nuw nsw i64 %80, 72
  %118 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %117)
  %119 = add nuw nsw i64 %80, 76
  %120 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %119)
  %121 = add nuw nsw i64 %80, 80
  %122 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %121)
  %123 = add nuw nsw i64 %80, 84
  %124 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %123)
  %125 = add nuw nsw i64 %80, 88
  %126 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %125)
  %127 = add nuw nsw i64 %80, 92
  %128 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %127)
  %129 = add nuw nsw i64 %80, 96
  %130 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %129)
  %131 = add nuw nsw i64 %80, 100
  %132 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %131)
  br label %171

133:                                              ; preds = %87
  %134 = add nuw nsw i64 %80, 14
  %135 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %134)
  %136 = add nuw nsw i64 %80, 16
  %137 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %136)
  %138 = add nuw nsw i64 %80, 18
  %139 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %138)
  %140 = or i32 %139, -65536
  %141 = add nuw nsw i64 %80, 20
  %142 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %141)
  %143 = or i32 %142, -65536
  %144 = add nuw nsw i64 %80, 22
  %145 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %144)
  %146 = or i32 %145, -65536
  %147 = add nuw nsw i64 %80, 24
  %148 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %147)
  %149 = or i32 %148, -65536
  %150 = add nuw nsw i64 %80, 26
  %151 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %150)
  %152 = or i32 %151, -65536
  %153 = add nuw nsw i64 %80, 28
  %154 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %153)
  %155 = or i32 %154, -65536
  %156 = add nuw nsw i64 %80, 30
  %157 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %156)
  %158 = or i32 %157, -65536
  %159 = add nuw nsw i64 %80, 32
  %160 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %159)
  %161 = or i32 %160, -65536
  %162 = add nuw nsw i64 %80, 34
  %163 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %162)
  %164 = add nuw nsw i64 %80, 38
  %165 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %164)
  %166 = add nuw nsw i64 %80, 42
  %167 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %166)
  %168 = add nuw nsw i64 %80, 46
  %169 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %168)
  %170 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %166)
  br label %171

171:                                              ; preds = %133, %94
  %172 = phi i32 [ %161, %133 ], [ %116, %94 ]
  %173 = phi i32 [ %158, %133 ], [ %114, %94 ]
  %174 = phi i32 [ %155, %133 ], [ %112, %94 ]
  %175 = phi i32 [ %152, %133 ], [ %110, %94 ]
  %176 = phi i32 [ %149, %133 ], [ %108, %94 ]
  %177 = phi i32 [ %146, %133 ], [ %106, %94 ]
  %178 = phi i32 [ %143, %133 ], [ %104, %94 ]
  %179 = phi i32 [ %140, %133 ], [ %102, %94 ]
  %180 = phi i32 [ 0, %133 ], [ %128, %94 ]
  %181 = phi i32 [ 0, %133 ], [ %126, %94 ]
  %182 = phi i32 [ %169, %133 ], [ %124, %94 ]
  %183 = phi i32 [ %167, %133 ], [ %122, %94 ]
  %184 = phi i32 [ %165, %133 ], [ %120, %94 ]
  %185 = phi i32 [ %163, %133 ], [ %118, %94 ]
  %186 = phi i32 [ %170, %133 ], [ %130, %94 ]
  %187 = phi i32 [ 0, %133 ], [ %96, %94 ]
  %188 = phi i32 [ %135, %133 ], [ %98, %94 ]
  %189 = phi i32 [ %137, %133 ], [ %100, %94 ]
  %190 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 26, i32 1
  %191 = load i64, i64* %190, align 8
  %192 = tail call fastcc i32 @cpu_ldub_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %191)
  %193 = load i64, i64* %190, align 8
  %194 = add i64 %193, %93
  %195 = tail call fastcc i32 @cpu_ldub_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %194)
  %196 = load i64, i64* %190, align 8
  tail call fastcc void @cpu_stb_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %196, i32 noundef %192)
  %197 = load i64, i64* %190, align 8
  %198 = add i64 %197, %93
  tail call fastcc void @cpu_stb_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %198, i32 noundef %195)
  %199 = icmp eq i32 %4, 1
  %200 = icmp ult i32 %4, 2
  br i1 %200, label %201, label %212

201:                                              ; preds = %171
  %202 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 27, i32 1
  %203 = load i64, i64* %202, align 8
  %204 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %88, i64 0, i32 0
  %205 = load i32, i32* %204, align 8
  %206 = and i32 %205, -8
  %207 = zext i32 %206 to i64
  %208 = add i64 %203, 4
  %209 = add i64 %208, %207
  %210 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %209)
  %211 = and i32 %210, -513
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %209, i32 noundef %211)
  br label %212

212:                                              ; preds = %171, %201
  %213 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %214 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %213, i64 0, i32 20
  %215 = load i64, i64* %214, align 8
  %216 = trunc i64 %215 to i32
  %217 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %213, i64 0, i32 1
  %218 = load i64, i64* %217, align 16
  %219 = trunc i64 %218 to i32
  %220 = tail call i32 @helper_cc_compute_all(i32 noundef %219) #30
  %221 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %213, i64 0, i32 19
  %222 = load i32, i32* %221, align 16
  %223 = and i32 %222, 1024
  %224 = or i32 %220, %216
  %225 = or i32 %224, %223
  %226 = or i32 %225, 2
  %227 = and i32 %226, -16385
  %228 = select i1 %199, i32 %227, i32 %226
  %229 = load i64, i64* %190, align 8
  br i1 %64, label %297, label %230

230:                                              ; preds = %212
  %231 = add i64 %229, 32
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %231, i32 noundef %5)
  %232 = load i64, i64* %190, align 8
  %233 = add i64 %232, 36
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %233, i32 noundef %228)
  %234 = load i64, i64* %190, align 8
  %235 = add i64 %234, 40
  %236 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 0, i64 0
  %237 = load i64, i64* %236, align 16
  %238 = trunc i64 %237 to i32
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %235, i32 noundef %238)
  %239 = load i64, i64* %190, align 8
  %240 = add i64 %239, 44
  %241 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 0, i64 1
  %242 = load i64, i64* %241, align 8
  %243 = trunc i64 %242 to i32
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %240, i32 noundef %243)
  %244 = load i64, i64* %190, align 8
  %245 = add i64 %244, 48
  %246 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 0, i64 2
  %247 = load i64, i64* %246, align 16
  %248 = trunc i64 %247 to i32
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %245, i32 noundef %248)
  %249 = load i64, i64* %190, align 8
  %250 = add i64 %249, 52
  %251 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 0, i64 3
  %252 = load i64, i64* %251, align 8
  %253 = trunc i64 %252 to i32
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %250, i32 noundef %253)
  %254 = load i64, i64* %190, align 8
  %255 = add i64 %254, 56
  %256 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 0, i64 4
  %257 = load i64, i64* %256, align 16
  %258 = trunc i64 %257 to i32
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %255, i32 noundef %258)
  %259 = load i64, i64* %190, align 8
  %260 = add i64 %259, 60
  %261 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 0, i64 5
  %262 = load i64, i64* %261, align 8
  %263 = trunc i64 %262 to i32
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %260, i32 noundef %263)
  %264 = load i64, i64* %190, align 8
  %265 = add i64 %264, 64
  %266 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 0, i64 6
  %267 = load i64, i64* %266, align 16
  %268 = trunc i64 %267 to i32
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %265, i32 noundef %268)
  %269 = load i64, i64* %190, align 8
  %270 = add i64 %269, 68
  %271 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 0, i64 7
  %272 = load i64, i64* %271, align 8
  %273 = trunc i64 %272 to i32
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %270, i32 noundef %273)
  %274 = load i64, i64* %190, align 8
  %275 = add i64 %274, 72
  %276 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 0, i32 0
  %277 = load i32, i32* %276, align 8
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %275, i32 noundef %277)
  %278 = load i64, i64* %190, align 8
  %279 = add i64 %278, 76
  %280 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 1, i32 0
  %281 = load i32, i32* %280, align 8
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %279, i32 noundef %281)
  %282 = load i64, i64* %190, align 8
  %283 = add i64 %282, 80
  %284 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 2, i32 0
  %285 = load i32, i32* %284, align 8
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %283, i32 noundef %285)
  %286 = load i64, i64* %190, align 8
  %287 = add i64 %286, 84
  %288 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 3, i32 0
  %289 = load i32, i32* %288, align 8
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %287, i32 noundef %289)
  %290 = load i64, i64* %190, align 8
  %291 = add i64 %290, 88
  %292 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 4, i32 0
  %293 = load i32, i32* %292, align 8
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %291, i32 noundef %293)
  %294 = load i64, i64* %190, align 8
  %295 = add i64 %294, 92
  %296 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 5, i32 0
  br label %356

297:                                              ; preds = %212
  %298 = add i64 %229, 14
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %298, i32 noundef %5)
  %299 = load i64, i64* %190, align 8
  %300 = add i64 %299, 16
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %300, i32 noundef %228)
  %301 = load i64, i64* %190, align 8
  %302 = add i64 %301, 18
  %303 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 0, i64 0
  %304 = load i64, i64* %303, align 16
  %305 = trunc i64 %304 to i32
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %302, i32 noundef %305)
  %306 = load i64, i64* %190, align 8
  %307 = add i64 %306, 20
  %308 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 0, i64 1
  %309 = load i64, i64* %308, align 8
  %310 = trunc i64 %309 to i32
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %307, i32 noundef %310)
  %311 = load i64, i64* %190, align 8
  %312 = add i64 %311, 22
  %313 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 0, i64 2
  %314 = load i64, i64* %313, align 16
  %315 = trunc i64 %314 to i32
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %312, i32 noundef %315)
  %316 = load i64, i64* %190, align 8
  %317 = add i64 %316, 24
  %318 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 0, i64 3
  %319 = load i64, i64* %318, align 8
  %320 = trunc i64 %319 to i32
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %317, i32 noundef %320)
  %321 = load i64, i64* %190, align 8
  %322 = add i64 %321, 26
  %323 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 0, i64 4
  %324 = load i64, i64* %323, align 16
  %325 = trunc i64 %324 to i32
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %322, i32 noundef %325)
  %326 = load i64, i64* %190, align 8
  %327 = add i64 %326, 28
  %328 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 0, i64 5
  %329 = load i64, i64* %328, align 8
  %330 = trunc i64 %329 to i32
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %327, i32 noundef %330)
  %331 = load i64, i64* %190, align 8
  %332 = add i64 %331, 30
  %333 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 0, i64 6
  %334 = load i64, i64* %333, align 16
  %335 = trunc i64 %334 to i32
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %332, i32 noundef %335)
  %336 = load i64, i64* %190, align 8
  %337 = add i64 %336, 32
  %338 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 0, i64 7
  %339 = load i64, i64* %338, align 8
  %340 = trunc i64 %339 to i32
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %337, i32 noundef %340)
  %341 = load i64, i64* %190, align 8
  %342 = add i64 %341, 34
  %343 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 0, i32 0
  %344 = load i32, i32* %343, align 8
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %342, i32 noundef %344)
  %345 = load i64, i64* %190, align 8
  %346 = add i64 %345, 38
  %347 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 1, i32 0
  %348 = load i32, i32* %347, align 8
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %346, i32 noundef %348)
  %349 = load i64, i64* %190, align 8
  %350 = add i64 %349, 42
  %351 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 2, i32 0
  %352 = load i32, i32* %351, align 8
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %350, i32 noundef %352)
  %353 = load i64, i64* %190, align 8
  %354 = add i64 %353, 46
  %355 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 3, i32 0
  br label %356

356:                                              ; preds = %230, %297
  %357 = phi i32* [ %296, %230 ], [ %355, %297 ]
  %358 = phi i64 [ %295, %230 ], [ %354, %297 ]
  %359 = load i32, i32* %357, align 8
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %358, i32 noundef %359)
  %360 = icmp eq i32 %4, 2
  br i1 %360, label %361, label %365

361:                                              ; preds = %356
  %362 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %88, i64 0, i32 0
  %363 = load i32, i32* %362, align 8
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %80, i32 noundef %363)
  %364 = or i32 %189, 16384
  br label %368

365:                                              ; preds = %356
  %366 = and i32 %4, -3
  %367 = icmp eq i32 %366, 0
  br i1 %367, label %368, label %378

368:                                              ; preds = %361, %365
  %369 = phi i32 [ %364, %361 ], [ %189, %365 ]
  %370 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 27, i32 1
  %371 = load i64, i64* %370, align 8
  %372 = and i32 %57, -8
  %373 = or i32 %372, 4
  %374 = sext i32 %373 to i64
  %375 = add i64 %371, %374
  %376 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %375)
  %377 = or i32 %376, 512
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %375, i32 noundef %377)
  br label %378

378:                                              ; preds = %365, %368
  %379 = phi i32 [ %189, %365 ], [ %369, %368 ]
  %380 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 29, i64 0
  %381 = load i64, i64* %380, align 16
  %382 = or i64 %381, 8
  store i64 %382, i64* %380, align 16
  %383 = load i32, i32* %7, align 16
  %384 = or i32 %383, 2048
  store i32 %384, i32* %7, align 16
  %385 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %88, i64 0, i32 0
  store i32 %57, i32* %385, align 8
  store i64 %80, i64* %190, align 8
  %386 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 26, i32 2
  store i32 %73, i32* %386, align 8
  %387 = and i32 %55, -513
  store i32 %387, i32* %89, align 4
  br i1 %64, label %392, label %388

388:                                              ; preds = %378
  %389 = icmp ult i64 %382, 2147483648
  br i1 %389, label %392, label %390

390:                                              ; preds = %388
  %391 = zext i32 %187 to i64
  tail call void @cpu_x86_update_cr3(%struct.CPUX86State* noundef nonnull %0, i64 noundef %391)
  br label %392

392:                                              ; preds = %378, %390, %388
  %393 = phi i64 [ -2585345, %388 ], [ -2585345, %390 ], [ -29441, %378 ]
  %394 = phi i32 [ 2585344, %388 ], [ 2585344, %390 ], [ 29440, %378 ]
  %395 = zext i32 %188 to i64
  %396 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 18
  store i64 %395, i64* %396, align 8
  %397 = and i32 %379, 2261
  %398 = zext i32 %397 to i64
  %399 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %400 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %399, i64 0, i32 2
  store i64 %398, i64* %400, align 8
  %401 = and i32 %379, 1024
  %402 = icmp eq i32 %401, 0
  %403 = select i1 %402, i32 1, i32 -1
  %404 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %399, i64 0, i32 19
  store i32 %403, i32* %404, align 16
  %405 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %399, i64 0, i32 20
  %406 = load i64, i64* %405, align 8
  %407 = and i64 %406, %393
  %408 = and i32 %379, %394
  %409 = zext i32 %408 to i64
  %410 = or i64 %407, %409
  store i64 %410, i64* %405, align 8
  %411 = zext i32 %179 to i64
  %412 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 0, i64 0
  store i64 %411, i64* %412, align 16
  %413 = zext i32 %178 to i64
  %414 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 0, i64 1
  store i64 %413, i64* %414, align 8
  %415 = zext i32 %177 to i64
  %416 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 0, i64 2
  store i64 %415, i64* %416, align 16
  %417 = zext i32 %176 to i64
  %418 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 0, i64 3
  store i64 %417, i64* %418, align 8
  %419 = zext i32 %175 to i64
  %420 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 0, i64 4
  store i64 %419, i64* %420, align 16
  %421 = zext i32 %174 to i64
  %422 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 0, i64 5
  store i64 %421, i64* %422, align 8
  %423 = zext i32 %173 to i64
  %424 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 0, i64 6
  store i64 %423, i64* %424, align 16
  %425 = zext i32 %172 to i64
  %426 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 0, i64 7
  store i64 %425, i64* %426, align 8
  %427 = and i32 %379, 131072
  %428 = icmp eq i32 %427, 0
  br i1 %428, label %526, label %429

429:                                              ; preds = %392
  %430 = and i32 %185, 65535
  %431 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %432 = shl nuw nsw i32 %430, 4
  %433 = zext i32 %432 to i64
  %434 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %431, i64 0, i32 24, i64 0, i32 0
  store i32 %430, i32* %434, align 8
  %435 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %431, i64 0, i32 24, i64 0, i32 1
  store i64 %433, i64* %435, align 8
  %436 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %431, i64 0, i32 24, i64 0, i32 2
  store i32 65535, i32* %436, align 8
  %437 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %431, i64 0, i32 24, i64 0, i32 3
  store i32 0, i32* %437, align 4
  %438 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %431, i64 0, i32 21
  %439 = load i32, i32* %438, align 16
  %440 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %431, i64 0, i32 24, i64 2, i32 3
  %441 = load i32, i32* %440, align 4
  %442 = lshr i32 %441, 17
  %443 = and i32 %442, 32
  %444 = and i32 %439, 32768
  %445 = icmp eq i32 %444, 0
  br i1 %445, label %446, label %471

446:                                              ; preds = %429
  %447 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %431, i64 0, i32 29, i64 0
  %448 = load i64, i64* %447, align 16
  %449 = and i64 %448, 1
  %450 = icmp eq i64 %449, 0
  br i1 %450, label %459, label %451

451:                                              ; preds = %446
  %452 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %431, i64 0, i32 20
  %453 = load i64, i64* %452, align 8
  %454 = and i64 %453, 131072
  %455 = icmp ne i64 %454, 0
  %456 = and i32 %439, 16
  %457 = icmp eq i32 %456, 0
  %458 = select i1 %455, i1 true, i1 %457
  br i1 %458, label %459, label %461

459:                                              ; preds = %451, %446
  %460 = or i32 %443, 64
  br label %471

461:                                              ; preds = %451
  %462 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %431, i64 0, i32 24, i64 3, i32 1
  %463 = load i64, i64* %462, align 8
  %464 = or i64 %463, %433
  %465 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %431, i64 0, i32 24, i64 2, i32 1
  %466 = load i64, i64* %465, align 8
  %467 = or i64 %464, %466
  %468 = icmp eq i64 %467, 0
  %469 = select i1 %468, i32 0, i32 64
  %470 = or i32 %469, %443
  br label %471

471:                                              ; preds = %429, %459, %461
  %472 = phi i32 [ %443, %429 ], [ %460, %459 ], [ %470, %461 ]
  %473 = and i32 %439, -97
  %474 = or i32 %472, %473
  store i32 %474, i32* %438, align 16
  %475 = and i32 %184, 65535
  %476 = shl nuw nsw i32 %475, 4
  %477 = zext i32 %476 to i64
  %478 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %431, i64 0, i32 24, i64 1, i32 0
  store i32 %475, i32* %478, align 8
  %479 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %431, i64 0, i32 24, i64 1, i32 1
  store i64 %477, i64* %479, align 8
  %480 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %431, i64 0, i32 24, i64 1, i32 2
  store i32 65535, i32* %480, align 8
  %481 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %431, i64 0, i32 24, i64 1, i32 3
  store i32 0, i32* %481, align 4
  %482 = and i32 %439, -32881
  %483 = or i32 %443, %482
  %484 = or i32 %483, 64
  store i32 %484, i32* %438, align 16
  %485 = and i32 %183, 65535
  %486 = shl nuw nsw i32 %485, 4
  %487 = zext i32 %486 to i64
  %488 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %431, i64 0, i32 24, i64 2, i32 0
  store i32 %485, i32* %488, align 8
  %489 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %431, i64 0, i32 24, i64 2, i32 1
  store i64 %487, i64* %489, align 8
  %490 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %431, i64 0, i32 24, i64 2, i32 2
  store i32 65535, i32* %490, align 8
  store i32 0, i32* %440, align 4
  %491 = or i32 %482, 64
  store i32 %491, i32* %438, align 16
  %492 = and i32 %182, 65535
  %493 = shl nuw nsw i32 %492, 4
  %494 = zext i32 %493 to i64
  %495 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %431, i64 0, i32 24, i64 3, i32 0
  store i32 %492, i32* %495, align 8
  %496 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %431, i64 0, i32 24, i64 3, i32 1
  store i64 %494, i64* %496, align 8
  %497 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %431, i64 0, i32 24, i64 3, i32 2
  store i32 65535, i32* %497, align 8
  %498 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %431, i64 0, i32 24, i64 3, i32 3
  store i32 0, i32* %498, align 4
  %499 = or i32 %482, 64
  store i32 %499, i32* %438, align 16
  %500 = and i32 %181, 65535
  %501 = shl nuw nsw i32 %500, 4
  %502 = zext i32 %501 to i64
  %503 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %431, i64 0, i32 24, i64 4, i32 0
  store i32 %500, i32* %503, align 8
  %504 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %431, i64 0, i32 24, i64 4, i32 1
  store i64 %502, i64* %504, align 8
  %505 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %431, i64 0, i32 24, i64 4, i32 2
  store i32 65535, i32* %505, align 8
  %506 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %431, i64 0, i32 24, i64 4, i32 3
  store i32 0, i32* %506, align 4
  %507 = or i32 %482, 64
  store i32 %507, i32* %438, align 16
  %508 = and i32 %180, 65535
  %509 = shl nuw nsw i32 %508, 4
  %510 = zext i32 %509 to i64
  %511 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %431, i64 0, i32 24, i64 5, i32 0
  store i32 %508, i32* %511, align 8
  %512 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %431, i64 0, i32 24, i64 5, i32 1
  store i64 %510, i64* %512, align 8
  %513 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %431, i64 0, i32 24, i64 5, i32 2
  store i32 65535, i32* %513, align 8
  %514 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %431, i64 0, i32 24, i64 5, i32 3
  store i32 0, i32* %514, align 4
  %515 = or i32 %482, 64
  store i32 %515, i32* %438, align 16
  %516 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 16), align 8
  %517 = load i32, i32* %516, align 4
  %518 = icmp eq i32 %517, 0
  br i1 %518, label %523, label %519, !prof !5

519:                                              ; preds = %471
  %520 = load void (i32, i32)*, void (i32, i32)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 19), align 8
  %521 = load i32, i32* %7, align 16
  %522 = and i32 %521, 3
  tail call void %520(i32 noundef %522, i32 noundef 3)
  br label %523

523:                                              ; preds = %471, %519
  %524 = load i32, i32* %7, align 16
  %525 = or i32 %524, 3
  br label %564

526:                                              ; preds = %392
  %527 = and i32 %184, 3
  %528 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 16), align 8
  %529 = load i32, i32* %528, align 4
  %530 = icmp eq i32 %529, 0
  br i1 %530, label %535, label %531, !prof !5

531:                                              ; preds = %526
  %532 = load void (i32, i32)*, void (i32, i32)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 19), align 8
  %533 = load i32, i32* %7, align 16
  %534 = and i32 %533, 3
  tail call void %532(i32 noundef %534, i32 noundef %527)
  br label %535

535:                                              ; preds = %531, %526
  %536 = load i32, i32* %7, align 16
  %537 = and i32 %536, -32884
  %538 = or i32 %537, %527
  %539 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 3, i32 1
  %540 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 0, i32 1
  %541 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 2, i32 1
  %542 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 0, i32 0
  store i32 %185, i32* %542, align 8
  %543 = bitcast i64* %540 to i8*
  %544 = call i8* @memset(i8* %543, i32 0, i64 16)
  %545 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 1, i32 0
  store i32 %184, i32* %545, align 8
  %546 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 1, i32 1
  %547 = bitcast i64* %546 to i8*
  %548 = call i8* @memset(i8* %547, i32 0, i64 16)
  %549 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 2, i32 0
  store i32 %183, i32* %549, align 8
  %550 = bitcast i64* %541 to i8*
  %551 = call i8* @memset(i8* %550, i32 0, i64 16)
  %552 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 3, i32 0
  store i32 %182, i32* %552, align 8
  %553 = bitcast i64* %539 to i8*
  %554 = call i8* @memset(i8* %553, i32 0, i64 16)
  %555 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 4, i32 0
  store i32 %181, i32* %555, align 8
  %556 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 4, i32 1
  %557 = bitcast i64* %556 to i8*
  %558 = call i8* @memset(i8* %557, i32 0, i64 16)
  %559 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 5, i32 0
  store i32 %180, i32* %559, align 8
  %560 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 5, i32 1
  %561 = bitcast i64* %560 to i8*
  %562 = call i8* @memset(i8* %561, i32 0, i64 16)
  %563 = or i32 %538, 64
  br label %564

564:                                              ; preds = %535, %523
  %565 = phi i32 [ %525, %523 ], [ %563, %535 ]
  %566 = phi i32 [ 3, %523 ], [ %527, %535 ]
  store i32 %565, i32* %7, align 16
  %567 = and i32 %186, -5
  %568 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 25, i32 0
  store i32 %567, i32* %568, align 16
  %569 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 25, i32 1
  %570 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 25, i32 2
  %571 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 25, i32 3
  %572 = bitcast i64* %569 to i8*
  %573 = call i8* @memset(i8* %572, i32 0, i64 16)
  %574 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 16), align 8
  %575 = load i32, i32* %574, align 4
  %576 = icmp eq i32 %575, 0
  br i1 %576, label %579, label %577, !prof !5

577:                                              ; preds = %564
  %578 = load void (i32, i32)*, void (i32, i32)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 19), align 8
  tail call void %578(i32 noundef %9, i32 noundef %566)
  br label %579

579:                                              ; preds = %577, %564
  %580 = and i32 %186, 4
  %581 = icmp eq i32 %580, 0
  %582 = and i32 %186, 65532
  br i1 %581, label %584, label %583

583:                                              ; preds = %579
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %0, i32 noundef 10, i32 noundef %582, i64 noundef 0)
  unreachable

584:                                              ; preds = %579
  %585 = icmp eq i32 %582, 0
  br i1 %585, label %624, label %586

586:                                              ; preds = %584
  %587 = or i32 %186, 7
  %588 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 27, i32 2
  %589 = load i32, i32* %588, align 8
  %590 = icmp ugt i32 %587, %589
  br i1 %590, label %591, label %592

591:                                              ; preds = %586
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %0, i32 noundef 10, i32 noundef %582, i64 noundef 0)
  unreachable

592:                                              ; preds = %586
  %593 = and i32 %186, -8
  %594 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 27, i32 1
  %595 = load i64, i64* %594, align 8
  %596 = zext i32 %593 to i64
  %597 = add i64 %595, %596
  %598 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %597)
  %599 = add i64 %597, 4
  %600 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %599)
  %601 = and i32 %600, 7936
  %602 = icmp eq i32 %601, 512
  br i1 %602, label %604, label %603

603:                                              ; preds = %592
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %0, i32 noundef 10, i32 noundef %582, i64 noundef 0)
  unreachable

604:                                              ; preds = %592
  %605 = and i32 %600, 32768
  %606 = icmp eq i32 %605, 0
  br i1 %606, label %607, label %608

607:                                              ; preds = %604
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %0, i32 noundef 10, i32 noundef %582, i64 noundef 0)
  unreachable

608:                                              ; preds = %604
  %609 = lshr i32 %598, 16
  %610 = shl i32 %600, 16
  %611 = and i32 %610, 16711680
  %612 = and i32 %600, -16777216
  %613 = or i32 %612, %609
  %614 = or i32 %613, %611
  %615 = zext i32 %614 to i64
  store i64 %615, i64* %569, align 8
  %616 = and i32 %598, 65535
  %617 = and i32 %600, 983040
  %618 = or i32 %617, %616
  %619 = and i32 %600, 8388608
  %620 = icmp eq i32 %619, 0
  %621 = shl nuw i32 %618, 12
  %622 = or i32 %621, 4095
  %623 = select i1 %620, i32 %618, i32 %622
  store i32 %623, i32* %570, align 8
  store i32 %600, i32* %571, align 4
  br label %624

624:                                              ; preds = %608, %584
  br i1 %428, label %625, label %626

625:                                              ; preds = %624
  tail call fastcc void @tss_load_seg(%struct.CPUX86State* noundef nonnull %0, i32 noundef 1, i32 noundef %184)
  tail call fastcc void @tss_load_seg(%struct.CPUX86State* noundef nonnull %0, i32 noundef 2, i32 noundef %183)
  tail call fastcc void @tss_load_seg(%struct.CPUX86State* noundef nonnull %0, i32 noundef 0, i32 noundef %185)
  tail call fastcc void @tss_load_seg(%struct.CPUX86State* noundef nonnull %0, i32 noundef 3, i32 noundef %182)
  tail call fastcc void @tss_load_seg(%struct.CPUX86State* noundef nonnull %0, i32 noundef 4, i32 noundef %181)
  tail call fastcc void @tss_load_seg(%struct.CPUX86State* noundef nonnull %0, i32 noundef 5, i32 noundef %180)
  br label %626

626:                                              ; preds = %625, %624
  %627 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 1, i32 2
  %628 = load i32, i32* %627, align 8
  %629 = icmp ugt i32 %188, %628
  br i1 %629, label %630, label %631

630:                                              ; preds = %626
  tail call fastcc void @raise_interrupt2(%struct.CPUX86State* noundef nonnull %0, i32 noundef 13, i32 noundef 0, i32 noundef 0, i32 noundef 0, i64 noundef 0) #28
  unreachable

631:                                              ; preds = %626
  %632 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 65, i64 7
  %633 = load i64, i64* %632, align 8
  %634 = and i64 %633, 85
  %635 = icmp eq i64 %634, 0
  br i1 %635, label %662, label %636

636:                                              ; preds = %631
  %637 = and i64 %633, 3
  %638 = icmp eq i64 %637, 1
  br i1 %638, label %639, label %641

639:                                              ; preds = %636
  tail call void @hw_breakpoint_remove(%struct.CPUX86State* noundef nonnull %0, i32 noundef 0)
  %640 = load i64, i64* %632, align 8
  br label %641

641:                                              ; preds = %636, %639
  %642 = phi i64 [ %633, %636 ], [ %640, %639 ]
  %643 = and i64 %642, 12
  %644 = icmp eq i64 %643, 4
  br i1 %644, label %645, label %647

645:                                              ; preds = %641
  tail call void @hw_breakpoint_remove(%struct.CPUX86State* noundef nonnull %0, i32 noundef 1)
  %646 = load i64, i64* %632, align 8
  br label %647

647:                                              ; preds = %645, %641
  %648 = phi i64 [ %646, %645 ], [ %642, %641 ]
  %649 = and i64 %648, 48
  %650 = icmp eq i64 %649, 16
  br i1 %650, label %651, label %653

651:                                              ; preds = %647
  tail call void @hw_breakpoint_remove(%struct.CPUX86State* noundef nonnull %0, i32 noundef 2)
  %652 = load i64, i64* %632, align 8
  br label %653

653:                                              ; preds = %651, %647
  %654 = phi i64 [ %652, %651 ], [ %648, %647 ]
  %655 = and i64 %654, 192
  %656 = icmp eq i64 %655, 64
  br i1 %656, label %657, label %659

657:                                              ; preds = %653
  tail call void @hw_breakpoint_remove(%struct.CPUX86State* noundef nonnull %0, i32 noundef 3)
  %658 = load i64, i64* %632, align 8
  br label %659

659:                                              ; preds = %657, %653
  %660 = phi i64 [ %658, %657 ], [ %654, %653 ]
  %661 = and i64 %660, -86
  store i64 %661, i64* %632, align 8
  br label %662

662:                                              ; preds = %659, %631
  ret void
}

; Function Attrs: uwtable
define internal fastcc void @cpu_stl_kernel(%struct.CPUX86State* noundef %0, i64 noundef %1, i32 noundef %2) unnamed_addr #3 {
  %4 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = zext i32 %2 to i64
  tail call void @tcg_llvm_before_memory_access(i64 noundef %1, i64 noundef %8, i32 noundef 4, i32 noundef 1)
  br label %9

9:                                                ; preds = %7, %3
  %10 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %15, label %13

13:                                               ; preds = %9
  %14 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %1, i64 noundef 0, i64 noundef -1, i64 noundef 0)
  br label %15

15:                                               ; preds = %9, %13
  %16 = phi i64 [ %14, %13 ], [ %1, %9 ]
  %17 = lshr i64 %16, 12
  %18 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %17, i64 noundef 0, i64 noundef 4503599627370495, i64 noundef 0)
  %19 = and i64 %18, 1023
  %20 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 82, i64 0
  %21 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %20, align 8
  %22 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %21, i64 %19, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = and i64 %23, -33
  %25 = and i64 %16, -4093
  %26 = icmp eq i64 %24, %25
  br i1 %26, label %28, label %27, !prof !5

27:                                               ; preds = %15
  tail call void @helper_stl_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %16, i32 noundef %2, i32 noundef 0, i8* noundef null)
  br label %38

28:                                               ; preds = %15
  %29 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %21, i64 %19, i32 4
  %30 = load i64, i64* %29, align 8
  %31 = add i64 %30, %16
  %32 = inttoptr i64 %31 to i32*
  store i32 %2, i32* %32, align 4
  %33 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %38, label %36

36:                                               ; preds = %28
  %37 = zext i32 %2 to i64
  tail call void @tcg_llvm_after_memory_access(i64 noundef %16, i64 noundef %37, i32 noundef 4, i32 noundef 2, i64 noundef 0)
  br label %38

38:                                               ; preds = %28, %36, %27
  ret void
}

; Function Attrs: uwtable
define internal fastcc void @cpu_stw_kernel(%struct.CPUX86State* noundef %0, i64 noundef %1, i32 noundef %2) unnamed_addr #3 {
  %4 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = zext i32 %2 to i64
  tail call void @tcg_llvm_before_memory_access(i64 noundef %1, i64 noundef %8, i32 noundef 2, i32 noundef 1)
  br label %9

9:                                                ; preds = %7, %3
  %10 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %15, label %13

13:                                               ; preds = %9
  %14 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %1, i64 noundef 0, i64 noundef -1, i64 noundef 0)
  br label %15

15:                                               ; preds = %9, %13
  %16 = phi i64 [ %14, %13 ], [ %1, %9 ]
  %17 = lshr i64 %16, 12
  %18 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %17, i64 noundef 0, i64 noundef 4503599627370495, i64 noundef 0)
  %19 = and i64 %18, 1023
  %20 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 82, i64 0
  %21 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %20, align 8
  %22 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %21, i64 %19, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = and i64 %23, -33
  %25 = and i64 %16, -4095
  %26 = icmp eq i64 %24, %25
  br i1 %26, label %29, label %27, !prof !5

27:                                               ; preds = %15
  %28 = trunc i32 %2 to i16
  tail call void @helper_stw_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %16, i16 noundef zeroext %28, i32 noundef 0, i8* noundef null)
  br label %40

29:                                               ; preds = %15
  %30 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %21, i64 %19, i32 4
  %31 = load i64, i64* %30, align 8
  %32 = add i64 %31, %16
  %33 = trunc i32 %2 to i16
  %34 = inttoptr i64 %32 to i16*
  store i16 %33, i16* %34, align 2
  %35 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %36 = load i32, i32* %35, align 4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %40, label %38

38:                                               ; preds = %29
  %39 = zext i32 %2 to i64
  tail call void @tcg_llvm_after_memory_access(i64 noundef %16, i64 noundef %39, i32 noundef 2, i32 noundef 2, i64 noundef 0)
  br label %40

40:                                               ; preds = %29, %38, %27
  ret void
}

; Function Attrs: uwtable
define void @helper_stw_mmu(%struct.CPUX86State* noundef %0, i64 noundef %1, i16 noundef zeroext %2, i32 noundef %3, i8* noundef %4) local_unnamed_addr #3 {
  %6 = and i32 %3, 15
  %7 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %12, label %10

10:                                               ; preds = %5
  %11 = zext i16 %2 to i64
  tail call void @tcg_llvm_before_memory_access(i64 noundef %1, i64 noundef %11, i32 noundef 2, i32 noundef 1)
  br label %12

12:                                               ; preds = %10, %5
  %13 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %18, label %16

16:                                               ; preds = %12
  %17 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %1, i64 noundef 0, i64 noundef -1, i64 noundef 0)
  br label %18

18:                                               ; preds = %12, %16
  %19 = phi i64 [ %17, %16 ], [ %1, %12 ]
  %20 = lshr i64 %19, 12
  %21 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %20, i64 noundef 0, i64 noundef 4503599627370495, i64 noundef 0)
  %22 = and i64 %21, 1023
  %23 = zext i32 %6 to i64
  %24 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 82, i64 %23
  %25 = and i64 %19, -4096
  %26 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %24, align 8
  %27 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %26, i64 %22, i32 1
  %28 = load i64, i64* %27, align 8
  %29 = and i64 %28, -2048
  %30 = icmp eq i64 %25, %29
  br i1 %30, label %33, label %31, !prof !5

31:                                               ; preds = %18
  %32 = shl i64 %21, 12
  br label %65

33:                                               ; preds = %65, %18
  %34 = phi %struct.CPUTLBEntry* [ %26, %18 ], [ %66, %65 ]
  %35 = phi i64 [ %28, %18 ], [ %68, %65 ]
  %36 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %34, i64 %22
  %37 = and i64 %35, 4063
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %51, label %39, !prof !5

39:                                               ; preds = %33
  %40 = and i64 %19, 1
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %42, label %54

42:                                               ; preds = %39
  %43 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 84, i64 %23, i64 %22
  %44 = load i64, i64* %43, align 8
  %45 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 90
  store %struct.CPUTLBEntry* %36, %struct.CPUTLBEntry** %45, align 8
  tail call void @io_write_chkw_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %44, i16 noundef zeroext %2, i64 noundef %19, i8* noundef %4)
  %46 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %47 = load i32, i32* %46, align 4
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %71, label %49

49:                                               ; preds = %42
  %50 = zext i16 %2 to i64
  tail call void @tcg_llvm_after_memory_access(i64 noundef %19, i64 noundef %50, i32 noundef 2, i32 noundef 3, i64 noundef 0)
  br label %71

51:                                               ; preds = %33
  %52 = and i64 %19, 4095
  %53 = icmp eq i64 %52, 4095
  br i1 %53, label %54, label %55, !prof !6

54:                                               ; preds = %51, %39
  tail call fastcc void @slow_stw_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %19, i16 noundef zeroext %2, i32 noundef %6, i8* noundef %4)
  br label %71

55:                                               ; preds = %51
  %56 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %34, i64 %22, i32 4
  %57 = load i64, i64* %56, align 8
  %58 = add i64 %57, %19
  %59 = inttoptr i64 %58 to i16*
  store i16 %2, i16* %59, align 2
  %60 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %61 = load i32, i32* %60, align 4
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %71, label %63

63:                                               ; preds = %55
  %64 = zext i16 %2 to i64
  tail call void @tcg_llvm_after_memory_access(i64 noundef %19, i64 noundef %64, i32 noundef 2, i32 noundef 2, i64 noundef 0)
  br label %71

65:                                               ; preds = %31, %65
  tail call void @tlb_fill(%struct.CPUX86State* undef, i64 noundef %19, i64 noundef %32, i32 noundef 1, i32 noundef %6, i8* noundef %4)
  %66 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %24, align 8
  %67 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %66, i64 %22, i32 1
  %68 = load i64, i64* %67, align 8
  %69 = and i64 %68, -2048
  %70 = icmp eq i64 %25, %69
  br i1 %70, label %33, label %65, !prof !5

71:                                               ; preds = %49, %42, %55, %63, %54
  ret void
}

; Function Attrs: uwtable
define void @io_write_chkw_mmu(%struct.CPUX86State* noundef %0, i64 noundef %1, i16 noundef zeroext %2, i64 noundef %3, i8* noundef %4) local_unnamed_addr #3 {
  %6 = tail call %struct.MemoryDescOps* @phys_get_ops(i64 noundef %1)
  tail call void @tcg_llvm_write_mem_io_vaddr(i64 noundef %3, i32 noundef 0)
  %7 = ptrtoint i8* %4 to i64
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 76
  store i64 %7, i64* %8, align 8
  %9 = tail call zeroext i1 @se_ismemfunc(%struct.MemoryDescOps* noundef %6, i32 noundef 1)
  br i1 %9, label %10, label %15

10:                                               ; preds = %5
  %11 = and i64 %1, -4096
  %12 = add i64 %11, %3
  %13 = tail call i64 @se_notdirty_mem_write(i64 noundef %12, i32 noundef 2)
  %14 = inttoptr i64 %13 to i16*
  store i16 %2, i16* %14, align 2
  br label %16

15:                                               ; preds = %5
  tail call void @io_writew_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %1, i16 noundef zeroext %2, i64 noundef %3, i8* noundef %4)
  br label %16

16:                                               ; preds = %10, %15
  %17 = zext i16 %2 to i64
  %18 = tail call i64 @tcg_llvm_trace_mmio_access(i64 noundef %3, i64 noundef %17, i32 noundef 2, i32 noundef 1)
  tail call void @tcg_llvm_write_mem_io_vaddr(i64 noundef 0, i32 noundef 1)
  ret void
}

; Function Attrs: uwtable
define internal fastcc void @slow_stw_mmu(%struct.CPUX86State* noundef %0, i64 noundef %1, i16 noundef zeroext %2, i32 noundef %3, i8* noundef %4) unnamed_addr #3 {
  %6 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %5
  %10 = zext i16 %2 to i64
  tail call void @tcg_llvm_before_memory_access(i64 noundef %1, i64 noundef %10, i32 noundef 2, i32 noundef 1)
  br label %11

11:                                               ; preds = %9, %5
  %12 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %17, label %15

15:                                               ; preds = %11
  %16 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %1, i64 noundef 0, i64 noundef -1, i64 noundef 0)
  br label %17

17:                                               ; preds = %11, %15
  %18 = phi i64 [ %16, %15 ], [ %1, %11 ]
  %19 = lshr i64 %18, 12
  %20 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %19, i64 noundef 0, i64 noundef 4503599627370495, i64 noundef 0)
  %21 = and i64 %20, 1023
  %22 = zext i32 %3 to i64
  %23 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 82, i64 %22
  %24 = and i64 %18, -4096
  %25 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %23, align 8
  %26 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %25, i64 %21, i32 1
  %27 = load i64, i64* %26, align 8
  %28 = and i64 %27, -2048
  %29 = icmp eq i64 %24, %28
  br i1 %29, label %32, label %30

30:                                               ; preds = %17
  %31 = shl i64 %20, 12
  br label %68

32:                                               ; preds = %68, %17
  %33 = phi %struct.CPUTLBEntry* [ %25, %17 ], [ %69, %68 ]
  %34 = phi i64 [ %27, %17 ], [ %71, %68 ]
  %35 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %33, i64 %21
  %36 = and i64 %34, 4063
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %50, label %38

38:                                               ; preds = %32
  %39 = and i64 %18, 1
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %53

41:                                               ; preds = %38
  %42 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 84, i64 %22, i64 %21
  %43 = load i64, i64* %42, align 8
  %44 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 90
  store %struct.CPUTLBEntry* %35, %struct.CPUTLBEntry** %44, align 8
  tail call void @io_write_chkw_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %43, i16 noundef zeroext %2, i64 noundef %18, i8* noundef %4)
  %45 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %46 = load i32, i32* %45, align 4
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %74, label %48

48:                                               ; preds = %41
  %49 = zext i16 %2 to i64
  tail call void @tcg_llvm_after_memory_access(i64 noundef %18, i64 noundef %49, i32 noundef 2, i32 noundef 3, i64 noundef 0)
  br label %74

50:                                               ; preds = %32
  %51 = and i64 %18, 4095
  %52 = icmp eq i64 %51, 4095
  br i1 %52, label %53, label %58

53:                                               ; preds = %50, %38
  %54 = add i64 %18, 1
  %55 = lshr i16 %2, 8
  %56 = trunc i16 %55 to i8
  tail call fastcc void @slow_stb_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %54, i8 noundef zeroext %56, i32 noundef %3, i8* noundef %4)
  %57 = trunc i16 %2 to i8
  tail call fastcc void @slow_stb_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %18, i8 noundef zeroext %57, i32 noundef %3, i8* noundef %4)
  br label %74

58:                                               ; preds = %50
  %59 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %33, i64 %21, i32 4
  %60 = load i64, i64* %59, align 8
  %61 = add i64 %60, %18
  %62 = inttoptr i64 %61 to i16*
  store i16 %2, i16* %62, align 2
  %63 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %64 = load i32, i32* %63, align 4
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %74, label %66

66:                                               ; preds = %58
  %67 = zext i16 %2 to i64
  tail call void @tcg_llvm_after_memory_access(i64 noundef %18, i64 noundef %67, i32 noundef 2, i32 noundef 2, i64 noundef 0)
  br label %74

68:                                               ; preds = %30, %68
  tail call void @tlb_fill(%struct.CPUX86State* undef, i64 noundef %18, i64 noundef %31, i32 noundef 1, i32 noundef %3, i8* noundef %4)
  %69 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %23, align 8
  %70 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %69, i64 %21, i32 1
  %71 = load i64, i64* %70, align 8
  %72 = and i64 %71, -2048
  %73 = icmp eq i64 %24, %72
  br i1 %73, label %32, label %68

74:                                               ; preds = %53, %48, %41, %58, %66
  ret void
}

; Function Attrs: uwtable
define internal fastcc void @slow_stb_mmu(%struct.CPUX86State* noundef %0, i64 noundef %1, i8 noundef zeroext %2, i32 noundef %3, i8* noundef %4) unnamed_addr #3 {
  %6 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %5
  %10 = zext i8 %2 to i64
  tail call void @tcg_llvm_before_memory_access(i64 noundef %1, i64 noundef %10, i32 noundef 1, i32 noundef 1)
  br label %11

11:                                               ; preds = %9, %5
  %12 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %17, label %15

15:                                               ; preds = %11
  %16 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %1, i64 noundef 0, i64 noundef -1, i64 noundef 0)
  br label %17

17:                                               ; preds = %11, %15
  %18 = phi i64 [ %16, %15 ], [ %1, %11 ]
  %19 = lshr i64 %18, 12
  %20 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %19, i64 noundef 0, i64 noundef 4503599627370495, i64 noundef 0)
  %21 = and i64 %20, 1023
  %22 = zext i32 %3 to i64
  %23 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 82, i64 %22
  %24 = and i64 %18, -4096
  %25 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %23, align 8
  %26 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %25, i64 %21, i32 1
  %27 = load i64, i64* %26, align 8
  %28 = and i64 %27, -2048
  %29 = icmp eq i64 %24, %28
  br i1 %29, label %32, label %30

30:                                               ; preds = %17
  %31 = shl i64 %20, 12
  br label %53

32:                                               ; preds = %53, %17
  %33 = phi %struct.CPUTLBEntry* [ %25, %17 ], [ %54, %53 ]
  %34 = phi i64 [ %27, %17 ], [ %56, %53 ]
  %35 = and i64 %34, 4063
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %45, label %37

37:                                               ; preds = %32
  %38 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %33, i64 %21
  %39 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 84, i64 %22, i64 %21
  %40 = load i64, i64* %39, align 8
  %41 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 90
  store %struct.CPUTLBEntry* %38, %struct.CPUTLBEntry** %41, align 8
  tail call void @io_write_chkb_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %40, i8 noundef zeroext %2, i64 noundef %18, i8* noundef %4)
  %42 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %43 = load i32, i32* %42, align 4
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %62, label %59

45:                                               ; preds = %32
  %46 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %33, i64 %21, i32 4
  %47 = load i64, i64* %46, align 8
  %48 = add i64 %47, %18
  %49 = inttoptr i64 %48 to i8*
  store i8 %2, i8* %49, align 1
  %50 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %51 = load i32, i32* %50, align 4
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %62, label %59

53:                                               ; preds = %30, %53
  tail call void @tlb_fill(%struct.CPUX86State* undef, i64 noundef %18, i64 noundef %31, i32 noundef 1, i32 noundef %3, i8* noundef %4)
  %54 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %23, align 8
  %55 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %54, i64 %21, i32 1
  %56 = load i64, i64* %55, align 8
  %57 = and i64 %56, -2048
  %58 = icmp eq i64 %24, %57
  br i1 %58, label %32, label %53

59:                                               ; preds = %45, %37
  %60 = phi i32 [ 3, %37 ], [ 2, %45 ]
  %61 = zext i8 %2 to i64
  tail call void @tcg_llvm_after_memory_access(i64 noundef %18, i64 noundef %61, i32 noundef 1, i32 noundef %60, i64 noundef 0)
  br label %62

62:                                               ; preds = %59, %37, %45
  ret void
}

; Function Attrs: uwtable
define void @io_write_chkb_mmu(%struct.CPUX86State* noundef %0, i64 noundef %1, i8 noundef zeroext %2, i64 noundef %3, i8* noundef %4) local_unnamed_addr #3 {
  %6 = tail call %struct.MemoryDescOps* @phys_get_ops(i64 noundef %1)
  tail call void @tcg_llvm_write_mem_io_vaddr(i64 noundef %3, i32 noundef 0)
  %7 = ptrtoint i8* %4 to i64
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 76
  store i64 %7, i64* %8, align 8
  %9 = tail call zeroext i1 @se_ismemfunc(%struct.MemoryDescOps* noundef %6, i32 noundef 1)
  br i1 %9, label %10, label %15

10:                                               ; preds = %5
  %11 = and i64 %1, -4096
  %12 = add i64 %11, %3
  %13 = tail call i64 @se_notdirty_mem_write(i64 noundef %12, i32 noundef 1)
  %14 = inttoptr i64 %13 to i8*
  store i8 %2, i8* %14, align 1
  br label %16

15:                                               ; preds = %5
  tail call void @io_writeb_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %1, i8 noundef zeroext %2, i64 noundef %3, i8* noundef %4)
  br label %16

16:                                               ; preds = %10, %15
  %17 = zext i8 %2 to i64
  %18 = tail call i64 @tcg_llvm_trace_mmio_access(i64 noundef %3, i64 noundef %17, i32 noundef 1, i32 noundef 1)
  tail call void @tcg_llvm_write_mem_io_vaddr(i64 noundef 0, i32 noundef 1)
  ret void
}

declare i64 @se_notdirty_mem_write(i64 noundef, i32 noundef) local_unnamed_addr #9

declare void @io_writeb_mmu(%struct.CPUX86State* noundef, i64 noundef, i8 noundef zeroext, i64 noundef, i8* noundef) local_unnamed_addr #9

declare void @io_writew_mmu(%struct.CPUX86State* noundef, i64 noundef, i16 noundef zeroext, i64 noundef, i8* noundef) local_unnamed_addr #9

; Function Attrs: uwtable
define void @helper_stl_mmu(%struct.CPUX86State* noundef %0, i64 noundef %1, i32 noundef %2, i32 noundef %3, i8* noundef %4) local_unnamed_addr #3 {
  %6 = and i32 %3, 15
  %7 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %12, label %10

10:                                               ; preds = %5
  %11 = zext i32 %2 to i64
  tail call void @tcg_llvm_before_memory_access(i64 noundef %1, i64 noundef %11, i32 noundef 4, i32 noundef 1)
  br label %12

12:                                               ; preds = %10, %5
  %13 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %18, label %16

16:                                               ; preds = %12
  %17 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %1, i64 noundef 0, i64 noundef -1, i64 noundef 0)
  br label %18

18:                                               ; preds = %12, %16
  %19 = phi i64 [ %17, %16 ], [ %1, %12 ]
  %20 = lshr i64 %19, 12
  %21 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %20, i64 noundef 0, i64 noundef 4503599627370495, i64 noundef 0)
  %22 = and i64 %21, 1023
  %23 = zext i32 %6 to i64
  %24 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 82, i64 %23
  %25 = and i64 %19, -4096
  %26 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %24, align 8
  %27 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %26, i64 %22, i32 1
  %28 = load i64, i64* %27, align 8
  %29 = and i64 %28, -2048
  %30 = icmp eq i64 %25, %29
  br i1 %30, label %33, label %31, !prof !5

31:                                               ; preds = %18
  %32 = shl i64 %21, 12
  br label %65

33:                                               ; preds = %65, %18
  %34 = phi %struct.CPUTLBEntry* [ %26, %18 ], [ %66, %65 ]
  %35 = phi i64 [ %28, %18 ], [ %68, %65 ]
  %36 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %34, i64 %22
  %37 = and i64 %35, 4063
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %51, label %39, !prof !5

39:                                               ; preds = %33
  %40 = and i64 %19, 3
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %42, label %54

42:                                               ; preds = %39
  %43 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 84, i64 %23, i64 %22
  %44 = load i64, i64* %43, align 8
  %45 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 90
  store %struct.CPUTLBEntry* %36, %struct.CPUTLBEntry** %45, align 8
  tail call void @io_write_chkl_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %44, i32 noundef %2, i64 noundef %19, i8* noundef %4)
  %46 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %47 = load i32, i32* %46, align 4
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %71, label %49

49:                                               ; preds = %42
  %50 = zext i32 %2 to i64
  tail call void @tcg_llvm_after_memory_access(i64 noundef %19, i64 noundef %50, i32 noundef 4, i32 noundef 3, i64 noundef 0)
  br label %71

51:                                               ; preds = %33
  %52 = and i64 %19, 4095
  %53 = icmp ugt i64 %52, 4092
  br i1 %53, label %54, label %55, !prof !6

54:                                               ; preds = %51, %39
  tail call fastcc void @slow_stl_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %19, i32 noundef %2, i32 noundef %6, i8* noundef %4)
  br label %71

55:                                               ; preds = %51
  %56 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %34, i64 %22, i32 4
  %57 = load i64, i64* %56, align 8
  %58 = add i64 %57, %19
  %59 = inttoptr i64 %58 to i32*
  store i32 %2, i32* %59, align 4
  %60 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %61 = load i32, i32* %60, align 4
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %71, label %63

63:                                               ; preds = %55
  %64 = zext i32 %2 to i64
  tail call void @tcg_llvm_after_memory_access(i64 noundef %19, i64 noundef %64, i32 noundef 4, i32 noundef 2, i64 noundef 0)
  br label %71

65:                                               ; preds = %31, %65
  tail call void @tlb_fill(%struct.CPUX86State* undef, i64 noundef %19, i64 noundef %32, i32 noundef 1, i32 noundef %6, i8* noundef %4)
  %66 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %24, align 8
  %67 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %66, i64 %22, i32 1
  %68 = load i64, i64* %67, align 8
  %69 = and i64 %68, -2048
  %70 = icmp eq i64 %25, %69
  br i1 %70, label %33, label %65, !prof !5

71:                                               ; preds = %49, %42, %55, %63, %54
  ret void
}

; Function Attrs: uwtable
define void @io_write_chkl_mmu(%struct.CPUX86State* noundef %0, i64 noundef %1, i32 noundef %2, i64 noundef %3, i8* noundef %4) local_unnamed_addr #3 {
  %6 = tail call %struct.MemoryDescOps* @phys_get_ops(i64 noundef %1)
  tail call void @tcg_llvm_write_mem_io_vaddr(i64 noundef %3, i32 noundef 0)
  %7 = ptrtoint i8* %4 to i64
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 76
  store i64 %7, i64* %8, align 8
  %9 = tail call zeroext i1 @se_ismemfunc(%struct.MemoryDescOps* noundef %6, i32 noundef 1)
  br i1 %9, label %10, label %15

10:                                               ; preds = %5
  %11 = and i64 %1, -4096
  %12 = add i64 %11, %3
  %13 = tail call i64 @se_notdirty_mem_write(i64 noundef %12, i32 noundef 4)
  %14 = inttoptr i64 %13 to i32*
  store i32 %2, i32* %14, align 4
  br label %16

15:                                               ; preds = %5
  tail call void @io_writel_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %1, i32 noundef %2, i64 noundef %3, i8* noundef %4)
  br label %16

16:                                               ; preds = %10, %15
  %17 = zext i32 %2 to i64
  %18 = tail call i64 @tcg_llvm_trace_mmio_access(i64 noundef %3, i64 noundef %17, i32 noundef 4, i32 noundef 1)
  tail call void @tcg_llvm_write_mem_io_vaddr(i64 noundef 0, i32 noundef 1)
  ret void
}

; Function Attrs: uwtable
define internal fastcc void @slow_stl_mmu(%struct.CPUX86State* noundef %0, i64 noundef %1, i32 noundef %2, i32 noundef %3, i8* noundef %4) unnamed_addr #3 {
  %6 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %5
  %10 = zext i32 %2 to i64
  tail call void @tcg_llvm_before_memory_access(i64 noundef %1, i64 noundef %10, i32 noundef 4, i32 noundef 1)
  br label %11

11:                                               ; preds = %9, %5
  %12 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %17, label %15

15:                                               ; preds = %11
  %16 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %1, i64 noundef 0, i64 noundef -1, i64 noundef 0)
  br label %17

17:                                               ; preds = %11, %15
  %18 = phi i64 [ %16, %15 ], [ %1, %11 ]
  %19 = lshr i64 %18, 12
  %20 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %19, i64 noundef 0, i64 noundef 4503599627370495, i64 noundef 0)
  %21 = and i64 %20, 1023
  %22 = zext i32 %3 to i64
  %23 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 82, i64 %22
  %24 = and i64 %18, -4096
  %25 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %23, align 8
  %26 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %25, i64 %21, i32 1
  %27 = load i64, i64* %26, align 8
  %28 = and i64 %27, -2048
  %29 = icmp eq i64 %24, %28
  br i1 %29, label %32, label %30

30:                                               ; preds = %17
  %31 = shl i64 %20, 12
  br label %74

32:                                               ; preds = %74, %17
  %33 = phi %struct.CPUTLBEntry* [ %25, %17 ], [ %75, %74 ]
  %34 = phi i64 [ %27, %17 ], [ %77, %74 ]
  %35 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %33, i64 %21
  %36 = and i64 %34, 4063
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %50, label %38

38:                                               ; preds = %32
  %39 = and i64 %18, 3
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %53

41:                                               ; preds = %38
  %42 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 84, i64 %22, i64 %21
  %43 = load i64, i64* %42, align 8
  %44 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 90
  store %struct.CPUTLBEntry* %35, %struct.CPUTLBEntry** %44, align 8
  tail call void @io_write_chkl_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %43, i32 noundef %2, i64 noundef %18, i8* noundef %4)
  %45 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %46 = load i32, i32* %45, align 4
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %80, label %48

48:                                               ; preds = %41
  %49 = zext i32 %2 to i64
  tail call void @tcg_llvm_after_memory_access(i64 noundef %18, i64 noundef %49, i32 noundef 4, i32 noundef 3, i64 noundef 0)
  br label %80

50:                                               ; preds = %32
  %51 = and i64 %18, 4095
  %52 = icmp ugt i64 %51, 4092
  br i1 %52, label %53, label %64

53:                                               ; preds = %50, %38
  %54 = add i64 %18, 3
  %55 = lshr i32 %2, 24
  %56 = trunc i32 %55 to i8
  tail call fastcc void @slow_stb_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %54, i8 noundef zeroext %56, i32 noundef %3, i8* noundef %4)
  %57 = add i64 %18, 2
  %58 = lshr i32 %2, 16
  %59 = trunc i32 %58 to i8
  tail call fastcc void @slow_stb_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %57, i8 noundef zeroext %59, i32 noundef %3, i8* noundef %4)
  %60 = add i64 %18, 1
  %61 = lshr i32 %2, 8
  %62 = trunc i32 %61 to i8
  tail call fastcc void @slow_stb_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %60, i8 noundef zeroext %62, i32 noundef %3, i8* noundef %4)
  %63 = trunc i32 %2 to i8
  tail call fastcc void @slow_stb_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %18, i8 noundef zeroext %63, i32 noundef %3, i8* noundef %4)
  br label %80

64:                                               ; preds = %50
  %65 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %33, i64 %21, i32 4
  %66 = load i64, i64* %65, align 8
  %67 = add i64 %66, %18
  %68 = inttoptr i64 %67 to i32*
  store i32 %2, i32* %68, align 4
  %69 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %70 = load i32, i32* %69, align 4
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %80, label %72

72:                                               ; preds = %64
  %73 = zext i32 %2 to i64
  tail call void @tcg_llvm_after_memory_access(i64 noundef %18, i64 noundef %73, i32 noundef 4, i32 noundef 2, i64 noundef 0)
  br label %80

74:                                               ; preds = %30, %74
  tail call void @tlb_fill(%struct.CPUX86State* undef, i64 noundef %18, i64 noundef %31, i32 noundef 1, i32 noundef %3, i8* noundef %4)
  %75 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %23, align 8
  %76 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %75, i64 %21, i32 1
  %77 = load i64, i64* %76, align 8
  %78 = and i64 %77, -2048
  %79 = icmp eq i64 %24, %78
  br i1 %79, label %32, label %74

80:                                               ; preds = %53, %48, %41, %64, %72
  ret void
}

declare void @io_writel_mmu(%struct.CPUX86State* noundef, i64 noundef, i32 noundef, i64 noundef, i8* noundef) local_unnamed_addr #9

; Function Attrs: uwtable
define internal fastcc i32 @cpu_ldub_kernel(%struct.CPUX86State* noundef %0, i64 noundef %1) unnamed_addr #3 {
  %3 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %7, label %6

6:                                                ; preds = %2
  tail call void @tcg_llvm_before_memory_access(i64 noundef %1, i64 noundef 0, i32 noundef 1, i32 noundef 0)
  br label %7

7:                                                ; preds = %6, %2
  %8 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %13, label %11

11:                                               ; preds = %7
  %12 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %1, i64 noundef 0, i64 noundef -1, i64 noundef 0)
  br label %13

13:                                               ; preds = %7, %11
  %14 = phi i64 [ %12, %11 ], [ %1, %7 ]
  %15 = lshr i64 %14, 12
  %16 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %15, i64 noundef 0, i64 noundef 4503599627370495, i64 noundef 0)
  %17 = and i64 %16, 1023
  %18 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 82, i64 0
  %19 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %18, align 8
  %20 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %19, i64 %17, i32 0
  %21 = load i64, i64* %20, align 8
  %22 = and i64 %21, -33
  %23 = and i64 %14, -4096
  %24 = icmp eq i64 %22, %23
  br i1 %24, label %27, label %25, !prof !5

25:                                               ; preds = %13
  %26 = tail call zeroext i8 @helper_ldb_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %14, i32 noundef 0, i8* noundef null)
  br label %38

27:                                               ; preds = %13
  %28 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %19, i64 %17, i32 4
  %29 = load i64, i64* %28, align 8
  %30 = add i64 %29, %14
  %31 = inttoptr i64 %30 to i8*
  %32 = load i8, i8* %31, align 1
  %33 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %38, label %36

36:                                               ; preds = %27
  %37 = zext i8 %32 to i64
  tail call void @tcg_llvm_after_memory_access(i64 noundef %14, i64 noundef %37, i32 noundef 1, i32 noundef 0, i64 noundef 0)
  br label %38

38:                                               ; preds = %27, %36, %25
  %39 = phi i8 [ %26, %25 ], [ %32, %36 ], [ %32, %27 ]
  %40 = zext i8 %39 to i32
  ret i32 %40
}

; Function Attrs: uwtable
define internal fastcc void @cpu_stb_kernel(%struct.CPUX86State* noundef %0, i64 noundef %1, i32 noundef %2) unnamed_addr #3 {
  %4 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = zext i32 %2 to i64
  tail call void @tcg_llvm_before_memory_access(i64 noundef %1, i64 noundef %8, i32 noundef 1, i32 noundef 1)
  br label %9

9:                                                ; preds = %7, %3
  %10 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %15, label %13

13:                                               ; preds = %9
  %14 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %1, i64 noundef 0, i64 noundef -1, i64 noundef 0)
  br label %15

15:                                               ; preds = %9, %13
  %16 = phi i64 [ %14, %13 ], [ %1, %9 ]
  %17 = lshr i64 %16, 12
  %18 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %17, i64 noundef 0, i64 noundef 4503599627370495, i64 noundef 0)
  %19 = and i64 %18, 1023
  %20 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 82, i64 0
  %21 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %20, align 8
  %22 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %21, i64 %19, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = and i64 %23, -33
  %25 = and i64 %16, -4096
  %26 = icmp eq i64 %24, %25
  br i1 %26, label %29, label %27, !prof !5

27:                                               ; preds = %15
  %28 = trunc i32 %2 to i8
  tail call void @helper_stb_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %16, i8 noundef zeroext %28, i32 noundef 0, i8* noundef null)
  br label %40

29:                                               ; preds = %15
  %30 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %21, i64 %19, i32 4
  %31 = load i64, i64* %30, align 8
  %32 = add i64 %31, %16
  %33 = inttoptr i64 %32 to i8*
  %34 = trunc i32 %2 to i8
  store i8 %34, i8* %33, align 1
  %35 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %36 = load i32, i32* %35, align 4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %40, label %38

38:                                               ; preds = %29
  %39 = zext i32 %2 to i64
  tail call void @tcg_llvm_after_memory_access(i64 noundef %16, i64 noundef %39, i32 noundef 1, i32 noundef 2, i64 noundef 0)
  br label %40

40:                                               ; preds = %29, %38, %27
  ret void
}

; Function Attrs: uwtable
define internal fastcc void @tss_load_seg(%struct.CPUX86State* noundef %0, i32 noundef %1, i32 noundef %2) unnamed_addr #3 {
  %4 = and i32 %2, 65532
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %148, label %6

6:                                                ; preds = %3
  %7 = and i32 %2, 4
  %8 = icmp eq i32 %7, 0
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 25
  %11 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 27
  %12 = select i1 %8, %struct.SegmentCache* %11, %struct.SegmentCache* %10
  %13 = or i32 %2, 7
  %14 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %12, i64 0, i32 2
  %15 = load i32, i32* %14, align 8
  %16 = icmp ugt i32 %13, %15
  br i1 %16, label %17, label %18

17:                                               ; preds = %6
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef %0, i32 noundef 10, i32 noundef %4, i64 noundef 0)
  unreachable

18:                                               ; preds = %6
  %19 = and i32 %2, -8
  %20 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %12, i64 0, i32 1
  %21 = load i64, i64* %20, align 8
  %22 = sext i32 %19 to i64
  %23 = add i64 %21, %22
  %24 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef %9, i64 noundef %23)
  %25 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %26 = add i64 %23, 4
  %27 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef %25, i64 noundef %26)
  %28 = and i32 %27, 4096
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %31

30:                                               ; preds = %18
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef %0, i32 noundef 10, i32 noundef %4, i64 noundef 0)
  unreachable

31:                                               ; preds = %18
  %32 = and i32 %2, 3
  %33 = lshr i32 %27, 13
  %34 = and i32 %33, 3
  %35 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 21
  %36 = load i32, i32* %35, align 16
  %37 = and i32 %36, 3
  switch i32 %1, label %54 [
    i32 1, label %38
    i32 2, label %45
  ]

38:                                               ; preds = %31
  %39 = and i32 %27, 2048
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %42

41:                                               ; preds = %38
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %0, i32 noundef 10, i32 noundef %4, i64 noundef 0)
  unreachable

42:                                               ; preds = %38
  %43 = icmp eq i32 %34, %32
  br i1 %43, label %66, label %44

44:                                               ; preds = %42
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %0, i32 noundef 10, i32 noundef %4, i64 noundef 0)
  unreachable

45:                                               ; preds = %31
  %46 = and i32 %27, 2560
  %47 = icmp eq i32 %46, 512
  br i1 %47, label %49, label %48

48:                                               ; preds = %45
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %0, i32 noundef 10, i32 noundef %4, i64 noundef 0)
  unreachable

49:                                               ; preds = %45
  %50 = icmp eq i32 %34, %37
  %51 = icmp eq i32 %34, %32
  %52 = and i1 %51, %50
  br i1 %52, label %66, label %53

53:                                               ; preds = %49
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %0, i32 noundef 10, i32 noundef %4, i64 noundef 0)
  unreachable

54:                                               ; preds = %31
  %55 = and i32 %27, 2560
  %56 = icmp eq i32 %55, 2048
  br i1 %56, label %57, label %58

57:                                               ; preds = %54
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %0, i32 noundef 10, i32 noundef %4, i64 noundef 0)
  unreachable

58:                                               ; preds = %54
  %59 = and i32 %27, 3072
  %60 = icmp eq i32 %59, 3072
  br i1 %60, label %66, label %61

61:                                               ; preds = %58
  %62 = icmp ult i32 %34, %37
  %63 = icmp ult i32 %34, %32
  %64 = or i1 %63, %62
  br i1 %64, label %65, label %66

65:                                               ; preds = %61
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %0, i32 noundef 10, i32 noundef %4, i64 noundef 0)
  unreachable

66:                                               ; preds = %42, %61, %49, %58
  %67 = and i32 %27, 32768
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %70

69:                                               ; preds = %66
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %0, i32 noundef 11, i32 noundef %4, i64 noundef 0)
  unreachable

70:                                               ; preds = %66
  %71 = lshr i32 %24, 16
  %72 = shl i32 %27, 16
  %73 = and i32 %72, 16711680
  %74 = and i32 %27, -16777216
  %75 = or i32 %74, %71
  %76 = or i32 %75, %73
  %77 = zext i32 %76 to i64
  %78 = and i32 %24, 65535
  %79 = and i32 %27, 983040
  %80 = or i32 %79, %78
  %81 = and i32 %27, 8388608
  %82 = icmp eq i32 %81, 0
  %83 = shl nuw i32 %80, 12
  %84 = or i32 %83, 4095
  %85 = select i1 %82, i32 %80, i32 %84
  %86 = sext i32 %1 to i64
  %87 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 %86, i32 0
  store i32 %2, i32* %87, align 8
  %88 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 %86, i32 1
  store i64 %77, i64* %88, align 8
  %89 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 %86, i32 2
  store i32 %85, i32* %89, align 8
  %90 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 %86, i32 3
  store i32 %27, i32* %90, align 4
  %91 = icmp eq i32 %1, 1
  %92 = load i32, i32* %35, align 16
  br i1 %91, label %93, label %109

93:                                               ; preds = %70
  %94 = and i32 %92, 16384
  %95 = icmp eq i32 %94, 0
  %96 = and i32 %27, 2097152
  %97 = icmp eq i32 %96, 0
  %98 = or i1 %97, %95
  br i1 %98, label %102, label %99

99:                                               ; preds = %93
  %100 = and i32 %92, -32881
  %101 = or i32 %100, 32816
  br label %109

102:                                              ; preds = %93
  %103 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 1, i32 3
  %104 = load i32, i32* %103, align 4
  %105 = lshr i32 %104, 18
  %106 = and i32 %105, 16
  %107 = and i32 %92, -32785
  %108 = or i32 %106, %107
  br label %109

109:                                              ; preds = %102, %99, %70
  %110 = phi i32 [ %101, %99 ], [ %108, %102 ], [ %92, %70 ]
  %111 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 2, i32 3
  %112 = load i32, i32* %111, align 4
  %113 = lshr i32 %112, 17
  %114 = and i32 %113, 32
  %115 = and i32 %110, 32768
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %117, label %144

117:                                              ; preds = %109
  %118 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 29, i64 0
  %119 = load i64, i64* %118, align 16
  %120 = and i64 %119, 1
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %130, label %122

122:                                              ; preds = %117
  %123 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 20
  %124 = load i64, i64* %123, align 8
  %125 = and i64 %124, 131072
  %126 = icmp ne i64 %125, 0
  %127 = and i32 %110, 16
  %128 = icmp eq i32 %127, 0
  %129 = select i1 %126, i1 true, i1 %128
  br i1 %129, label %130, label %132

130:                                              ; preds = %122, %117
  %131 = or i32 %114, 64
  br label %144

132:                                              ; preds = %122
  %133 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 3, i32 1
  %134 = load i64, i64* %133, align 8
  %135 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 0, i32 1
  %136 = load i64, i64* %135, align 8
  %137 = or i64 %136, %134
  %138 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 2, i32 1
  %139 = load i64, i64* %138, align 8
  %140 = or i64 %137, %139
  %141 = icmp eq i64 %140, 0
  %142 = select i1 %141, i32 0, i32 64
  %143 = or i32 %142, %114
  br label %144

144:                                              ; preds = %109, %130, %132
  %145 = phi i32 [ %114, %109 ], [ %131, %130 ], [ %143, %132 ]
  %146 = and i32 %110, -97
  %147 = or i32 %145, %146
  store i32 %147, i32* %35, align 16
  br label %152

148:                                              ; preds = %3
  %149 = add i32 %1, -1
  %150 = icmp ult i32 %149, 2
  br i1 %150, label %151, label %152

151:                                              ; preds = %148
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef %0, i32 noundef 10, i32 noundef 0, i64 noundef 0)
  unreachable

152:                                              ; preds = %148, %144
  ret void
}

declare void @hw_breakpoint_remove(%struct.CPUX86State* noundef, i32 noundef) local_unnamed_addr #9

; Function Attrs: uwtable
define void @helper_stb_mmu(%struct.CPUX86State* noundef %0, i64 noundef %1, i8 noundef zeroext %2, i32 noundef %3, i8* noundef %4) local_unnamed_addr #3 {
  %6 = and i32 %3, 15
  %7 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %12, label %10

10:                                               ; preds = %5
  %11 = zext i8 %2 to i64
  tail call void @tcg_llvm_before_memory_access(i64 noundef %1, i64 noundef %11, i32 noundef 1, i32 noundef 1)
  br label %12

12:                                               ; preds = %10, %5
  %13 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %18, label %16

16:                                               ; preds = %12
  %17 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %1, i64 noundef 0, i64 noundef -1, i64 noundef 0)
  br label %18

18:                                               ; preds = %12, %16
  %19 = phi i64 [ %17, %16 ], [ %1, %12 ]
  %20 = lshr i64 %19, 12
  %21 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %20, i64 noundef 0, i64 noundef 4503599627370495, i64 noundef 0)
  %22 = and i64 %21, 1023
  %23 = zext i32 %6 to i64
  %24 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 82, i64 %23
  %25 = and i64 %19, -4096
  %26 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %24, align 8
  %27 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %26, i64 %22, i32 1
  %28 = load i64, i64* %27, align 8
  %29 = and i64 %28, -2048
  %30 = icmp eq i64 %25, %29
  br i1 %30, label %33, label %31, !prof !5

31:                                               ; preds = %18
  %32 = shl i64 %21, 12
  br label %54

33:                                               ; preds = %54, %18
  %34 = phi %struct.CPUTLBEntry* [ %26, %18 ], [ %55, %54 ]
  %35 = phi i64 [ %28, %18 ], [ %57, %54 ]
  %36 = and i64 %35, 4063
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %46, label %38, !prof !5

38:                                               ; preds = %33
  %39 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %34, i64 %22
  %40 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 84, i64 %23, i64 %22
  %41 = load i64, i64* %40, align 8
  %42 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 90
  store %struct.CPUTLBEntry* %39, %struct.CPUTLBEntry** %42, align 8
  tail call void @io_write_chkb_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %41, i8 noundef zeroext %2, i64 noundef %19, i8* noundef %4)
  %43 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %44 = load i32, i32* %43, align 4
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %63, label %60

46:                                               ; preds = %33
  %47 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %34, i64 %22, i32 4
  %48 = load i64, i64* %47, align 8
  %49 = add i64 %48, %19
  %50 = inttoptr i64 %49 to i8*
  store i8 %2, i8* %50, align 1
  %51 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %52 = load i32, i32* %51, align 4
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %63, label %60

54:                                               ; preds = %31, %54
  tail call void @tlb_fill(%struct.CPUX86State* undef, i64 noundef %19, i64 noundef %32, i32 noundef 1, i32 noundef %6, i8* noundef %4)
  %55 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %24, align 8
  %56 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %55, i64 %22, i32 1
  %57 = load i64, i64* %56, align 8
  %58 = and i64 %57, -2048
  %59 = icmp eq i64 %25, %58
  br i1 %59, label %33, label %54, !prof !5

60:                                               ; preds = %46, %38
  %61 = phi i32 [ 3, %38 ], [ 2, %46 ]
  %62 = zext i8 %2 to i64
  tail call void @tcg_llvm_after_memory_access(i64 noundef %19, i64 noundef %62, i32 noundef 1, i32 noundef %61, i64 noundef 0)
  br label %63

63:                                               ; preds = %60, %38, %46
  ret void
}

; Function Attrs: uwtable
define zeroext i8 @helper_ldb_mmu(%struct.CPUX86State* noundef %0, i64 noundef %1, i32 noundef %2, i8* noundef %3) local_unnamed_addr #3 {
  %5 = and i32 %2, 15
  %6 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %10, label %9

9:                                                ; preds = %4
  tail call void @tcg_llvm_before_memory_access(i64 noundef %1, i64 noundef 0, i32 noundef 1, i32 noundef 0)
  br label %10

10:                                               ; preds = %9, %4
  %11 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %16, label %14

14:                                               ; preds = %10
  %15 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %1, i64 noundef 0, i64 noundef -1, i64 noundef 0)
  br label %16

16:                                               ; preds = %10, %14
  %17 = phi i64 [ %15, %14 ], [ %1, %10 ]
  %18 = lshr i64 %17, 12
  %19 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %18, i64 noundef 0, i64 noundef 4503599627370495, i64 noundef 0)
  %20 = and i64 %19, 1023
  %21 = zext i32 %5 to i64
  %22 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 82, i64 %21
  %23 = and i64 %17, -4096
  %24 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %22, align 8
  %25 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %24, i64 %20
  %26 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %25, i64 0, i32 0
  %27 = load i64, i64* %26, align 8
  %28 = and i64 %27, -2048
  %29 = icmp eq i64 %23, %28
  br i1 %29, label %32, label %30, !prof !5

30:                                               ; preds = %16
  %31 = shl i64 %19, 12
  br label %55

32:                                               ; preds = %55, %16
  %33 = phi %struct.CPUTLBEntry* [ %24, %16 ], [ %56, %55 ]
  %34 = phi %struct.CPUTLBEntry* [ %25, %16 ], [ %57, %55 ]
  %35 = phi i64 [ %27, %16 ], [ %59, %55 ]
  %36 = and i64 %35, 4063
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %46, label %38, !prof !5

38:                                               ; preds = %32
  %39 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 84, i64 %21, i64 %20
  %40 = load i64, i64* %39, align 8
  %41 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 90
  store %struct.CPUTLBEntry* %34, %struct.CPUTLBEntry** %41, align 8
  %42 = tail call zeroext i8 @io_read_chkb_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %40, i64 noundef %17, i8* noundef %3)
  %43 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %44 = load i32, i32* %43, align 4
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %66, label %62

46:                                               ; preds = %32
  %47 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %33, i64 %20, i32 4
  %48 = load i64, i64* %47, align 8
  %49 = add i64 %48, %17
  %50 = inttoptr i64 %49 to i8*
  %51 = load i8, i8* %50, align 1
  %52 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %53 = load i32, i32* %52, align 4
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %66, label %62

55:                                               ; preds = %30, %55
  tail call void @tlb_fill(%struct.CPUX86State* undef, i64 noundef %17, i64 noundef %31, i32 noundef 0, i32 noundef %5, i8* noundef %3)
  %56 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %22, align 8
  %57 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %56, i64 %20
  %58 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %57, i64 0, i32 0
  %59 = load i64, i64* %58, align 8
  %60 = and i64 %59, -2048
  %61 = icmp eq i64 %23, %60
  br i1 %61, label %32, label %55, !prof !5

62:                                               ; preds = %46, %38
  %63 = phi i8 [ %42, %38 ], [ %51, %46 ]
  %64 = phi i32 [ 1, %38 ], [ 0, %46 ]
  %65 = zext i8 %63 to i64
  tail call void @tcg_llvm_after_memory_access(i64 noundef %17, i64 noundef %65, i32 noundef 1, i32 noundef %64, i64 noundef 0)
  br label %66

66:                                               ; preds = %62, %38, %46
  %67 = phi i8 [ %42, %38 ], [ %51, %46 ], [ %63, %62 ]
  ret i8 %67
}

; Function Attrs: uwtable
define zeroext i8 @io_read_chkb_mmu(%struct.CPUX86State* noundef %0, i64 noundef %1, i64 noundef %2, i8* noundef %3) local_unnamed_addr #3 {
  %5 = alloca i8, align 1
  %6 = tail call %struct.MemoryDescOps* @phys_get_ops(i64 noundef %1)
  %7 = ptrtoint i8* %3 to i64
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 76
  store i64 %7, i64* %8, align 8
  tail call void @tcg_llvm_write_mem_io_vaddr(i64 noundef %2, i32 noundef 0)
  %9 = tail call zeroext i1 @se_ismemfunc(%struct.MemoryDescOps* noundef %6, i32 noundef 0)
  br i1 %9, label %10, label %16

10:                                               ; preds = %4
  %11 = and i64 %1, -4096
  %12 = add i64 %11, %2
  %13 = tail call i64 @se_notdirty_mem_read(i64 noundef %12)
  %14 = inttoptr i64 %13 to i8*
  %15 = load i8, i8* %14, align 1
  store volatile i8 %15, i8* %5, align 1
  br label %18

16:                                               ; preds = %4
  %17 = tail call zeroext i8 @io_readb_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %1, i64 noundef %2, i8* noundef %3)
  store volatile i8 %17, i8* %5, align 1
  br label %18

18:                                               ; preds = %10, %16
  %19 = load volatile i8, i8* %5, align 1
  %20 = zext i8 %19 to i64
  %21 = tail call i64 @tcg_llvm_trace_mmio_access(i64 noundef %2, i64 noundef %20, i32 noundef 1, i32 noundef 0)
  tail call void @tcg_llvm_write_mem_io_vaddr(i64 noundef 0, i32 noundef 1)
  %22 = load volatile i8, i8* %5, align 1
  ret i8 %22
}

declare zeroext i8 @io_readb_mmu(%struct.CPUX86State* noundef, i64 noundef, i64 noundef, i8* noundef) local_unnamed_addr #9

; Function Attrs: uwtable
define void @helper_stq_mmu(%struct.CPUX86State* noundef %0, i64 noundef %1, i64 noundef %2, i32 noundef %3, i8* noundef %4) local_unnamed_addr #3 {
  %6 = and i32 %3, 15
  %7 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %11, label %10

10:                                               ; preds = %5
  tail call void @tcg_llvm_before_memory_access(i64 noundef %1, i64 noundef %2, i32 noundef 8, i32 noundef 1)
  br label %11

11:                                               ; preds = %10, %5
  %12 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %17, label %15

15:                                               ; preds = %11
  %16 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %1, i64 noundef 0, i64 noundef -1, i64 noundef 0)
  br label %17

17:                                               ; preds = %11, %15
  %18 = phi i64 [ %16, %15 ], [ %1, %11 ]
  %19 = lshr i64 %18, 12
  %20 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %19, i64 noundef 0, i64 noundef 4503599627370495, i64 noundef 0)
  %21 = and i64 %20, 1023
  %22 = zext i32 %6 to i64
  %23 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 82, i64 %22
  %24 = and i64 %18, -4096
  %25 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %23, align 8
  %26 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %25, i64 %21, i32 1
  %27 = load i64, i64* %26, align 8
  %28 = and i64 %27, -2048
  %29 = icmp eq i64 %24, %28
  br i1 %29, label %32, label %30, !prof !5

30:                                               ; preds = %17
  %31 = shl i64 %20, 12
  br label %62

32:                                               ; preds = %62, %17
  %33 = phi %struct.CPUTLBEntry* [ %25, %17 ], [ %63, %62 ]
  %34 = phi i64 [ %27, %17 ], [ %65, %62 ]
  %35 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %33, i64 %21
  %36 = and i64 %34, 4063
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %49, label %38, !prof !5

38:                                               ; preds = %32
  %39 = and i64 %18, 7
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %52

41:                                               ; preds = %38
  %42 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 84, i64 %22, i64 %21
  %43 = load i64, i64* %42, align 8
  %44 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 90
  store %struct.CPUTLBEntry* %35, %struct.CPUTLBEntry** %44, align 8
  tail call void @io_write_chkq_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %43, i64 noundef %2, i64 noundef %18, i8* noundef %4)
  %45 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %46 = load i32, i32* %45, align 4
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %68, label %48

48:                                               ; preds = %41
  tail call void @tcg_llvm_after_memory_access(i64 noundef %18, i64 noundef %2, i32 noundef 8, i32 noundef 3, i64 noundef 0)
  br label %68

49:                                               ; preds = %32
  %50 = and i64 %18, 4095
  %51 = icmp ugt i64 %50, 4088
  br i1 %51, label %52, label %53, !prof !6

52:                                               ; preds = %49, %38
  tail call fastcc void @slow_stq_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %18, i64 noundef %2, i32 noundef %6, i8* noundef %4)
  br label %68

53:                                               ; preds = %49
  %54 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %33, i64 %21, i32 4
  %55 = load i64, i64* %54, align 8
  %56 = add i64 %55, %18
  %57 = inttoptr i64 %56 to i64*
  store i64 %2, i64* %57, align 8
  %58 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %59 = load i32, i32* %58, align 4
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %68, label %61

61:                                               ; preds = %53
  tail call void @tcg_llvm_after_memory_access(i64 noundef %18, i64 noundef %2, i32 noundef 8, i32 noundef 2, i64 noundef 0)
  br label %68

62:                                               ; preds = %30, %62
  tail call void @tlb_fill(%struct.CPUX86State* undef, i64 noundef %18, i64 noundef %31, i32 noundef 1, i32 noundef %6, i8* noundef %4)
  %63 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %23, align 8
  %64 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %63, i64 %21, i32 1
  %65 = load i64, i64* %64, align 8
  %66 = and i64 %65, -2048
  %67 = icmp eq i64 %24, %66
  br i1 %67, label %32, label %62, !prof !5

68:                                               ; preds = %48, %41, %53, %61, %52
  ret void
}

; Function Attrs: uwtable
define void @io_write_chkq_mmu(%struct.CPUX86State* noundef %0, i64 noundef %1, i64 noundef %2, i64 noundef %3, i8* noundef %4) local_unnamed_addr #3 {
  %6 = tail call %struct.MemoryDescOps* @phys_get_ops(i64 noundef %1)
  %7 = and i64 %1, -4096
  %8 = add i64 %7, %3
  tail call void @tcg_llvm_write_mem_io_vaddr(i64 noundef %3, i32 noundef 0)
  %9 = ptrtoint i8* %4 to i64
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 76
  store i64 %9, i64* %10, align 8
  %11 = tail call zeroext i1 @se_ismemfunc(%struct.MemoryDescOps* noundef %6, i32 noundef 1)
  br i1 %11, label %12, label %21

12:                                               ; preds = %5
  %13 = tail call i64 @se_notdirty_mem_write(i64 noundef %8, i32 noundef 8)
  %14 = trunc i64 %2 to i32
  %15 = inttoptr i64 %13 to i32*
  store i32 %14, i32* %15, align 4
  %16 = add i64 %8, 4
  %17 = tail call i64 @se_notdirty_mem_write(i64 noundef %16, i32 noundef 8)
  %18 = lshr i64 %2, 32
  %19 = trunc i64 %18 to i32
  %20 = inttoptr i64 %17 to i32*
  store i32 %19, i32* %20, align 4
  br label %22

21:                                               ; preds = %5
  tail call void @io_writeq_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %1, i64 noundef %2, i64 noundef %3, i8* noundef %4)
  br label %22

22:                                               ; preds = %12, %21
  %23 = tail call i64 @tcg_llvm_trace_mmio_access(i64 noundef %3, i64 noundef %2, i32 noundef 8, i32 noundef 1)
  tail call void @tcg_llvm_write_mem_io_vaddr(i64 noundef 0, i32 noundef 1)
  ret void
}

; Function Attrs: uwtable
define internal fastcc void @slow_stq_mmu(%struct.CPUX86State* noundef %0, i64 noundef %1, i64 noundef %2, i32 noundef %3, i8* noundef %4) unnamed_addr #3 {
  %6 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %10, label %9

9:                                                ; preds = %5
  tail call void @tcg_llvm_before_memory_access(i64 noundef %1, i64 noundef %2, i32 noundef 8, i32 noundef 1)
  br label %10

10:                                               ; preds = %9, %5
  %11 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %16, label %14

14:                                               ; preds = %10
  %15 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %1, i64 noundef 0, i64 noundef -1, i64 noundef 0)
  br label %16

16:                                               ; preds = %10, %14
  %17 = phi i64 [ %15, %14 ], [ %1, %10 ]
  %18 = lshr i64 %17, 12
  %19 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %18, i64 noundef 0, i64 noundef 4503599627370495, i64 noundef 0)
  %20 = and i64 %19, 1023
  %21 = zext i32 %3 to i64
  %22 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 82, i64 %21
  %23 = and i64 %17, -4096
  %24 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %22, align 8
  %25 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %24, i64 %20, i32 1
  %26 = load i64, i64* %25, align 8
  %27 = and i64 %26, -2048
  %28 = icmp eq i64 %23, %27
  br i1 %28, label %31, label %29

29:                                               ; preds = %16
  %30 = shl i64 %19, 12
  br label %83

31:                                               ; preds = %83, %16
  %32 = phi %struct.CPUTLBEntry* [ %24, %16 ], [ %84, %83 ]
  %33 = phi i64 [ %26, %16 ], [ %86, %83 ]
  %34 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %32, i64 %20
  %35 = and i64 %33, 4063
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %48, label %37

37:                                               ; preds = %31
  %38 = and i64 %17, 7
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %40, label %51

40:                                               ; preds = %37
  %41 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 84, i64 %21, i64 %20
  %42 = load i64, i64* %41, align 8
  %43 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 90
  store %struct.CPUTLBEntry* %34, %struct.CPUTLBEntry** %43, align 8
  tail call void @io_write_chkq_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %42, i64 noundef %2, i64 noundef %17, i8* noundef %4)
  %44 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %45 = load i32, i32* %44, align 4
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %89, label %47

47:                                               ; preds = %40
  tail call void @tcg_llvm_after_memory_access(i64 noundef %17, i64 noundef %2, i32 noundef 8, i32 noundef 3, i64 noundef 0)
  br label %89

48:                                               ; preds = %31
  %49 = and i64 %17, 4095
  %50 = icmp ugt i64 %49, 4088
  br i1 %50, label %51, label %74

51:                                               ; preds = %48, %37
  %52 = add i64 %17, 7
  %53 = lshr i64 %2, 56
  %54 = trunc i64 %53 to i8
  tail call fastcc void @slow_stb_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %52, i8 noundef zeroext %54, i32 noundef %3, i8* noundef %4)
  %55 = add i64 %17, 6
  %56 = lshr i64 %2, 48
  %57 = trunc i64 %56 to i8
  tail call fastcc void @slow_stb_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %55, i8 noundef zeroext %57, i32 noundef %3, i8* noundef %4)
  %58 = add i64 %17, 5
  %59 = lshr i64 %2, 40
  %60 = trunc i64 %59 to i8
  tail call fastcc void @slow_stb_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %58, i8 noundef zeroext %60, i32 noundef %3, i8* noundef %4)
  %61 = add i64 %17, 4
  %62 = lshr i64 %2, 32
  %63 = trunc i64 %62 to i8
  tail call fastcc void @slow_stb_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %61, i8 noundef zeroext %63, i32 noundef %3, i8* noundef %4)
  %64 = add i64 %17, 3
  %65 = lshr i64 %2, 24
  %66 = trunc i64 %65 to i8
  tail call fastcc void @slow_stb_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %64, i8 noundef zeroext %66, i32 noundef %3, i8* noundef %4)
  %67 = add i64 %17, 2
  %68 = lshr i64 %2, 16
  %69 = trunc i64 %68 to i8
  tail call fastcc void @slow_stb_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %67, i8 noundef zeroext %69, i32 noundef %3, i8* noundef %4)
  %70 = add i64 %17, 1
  %71 = lshr i64 %2, 8
  %72 = trunc i64 %71 to i8
  tail call fastcc void @slow_stb_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %70, i8 noundef zeroext %72, i32 noundef %3, i8* noundef %4)
  %73 = trunc i64 %2 to i8
  tail call fastcc void @slow_stb_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %17, i8 noundef zeroext %73, i32 noundef %3, i8* noundef %4)
  br label %89

74:                                               ; preds = %48
  %75 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %32, i64 %20, i32 4
  %76 = load i64, i64* %75, align 8
  %77 = add i64 %76, %17
  %78 = inttoptr i64 %77 to i64*
  store i64 %2, i64* %78, align 8
  %79 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %80 = load i32, i32* %79, align 4
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %89, label %82

82:                                               ; preds = %74
  tail call void @tcg_llvm_after_memory_access(i64 noundef %17, i64 noundef %2, i32 noundef 8, i32 noundef 2, i64 noundef 0)
  br label %89

83:                                               ; preds = %29, %83
  tail call void @tlb_fill(%struct.CPUX86State* undef, i64 noundef %17, i64 noundef %30, i32 noundef 1, i32 noundef %3, i8* noundef %4)
  %84 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %22, align 8
  %85 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %84, i64 %20, i32 1
  %86 = load i64, i64* %85, align 8
  %87 = and i64 %86, -2048
  %88 = icmp eq i64 %23, %87
  br i1 %88, label %31, label %83

89:                                               ; preds = %51, %47, %40, %74, %82
  ret void
}

declare void @io_writeq_mmu(%struct.CPUX86State* noundef, i64 noundef, i64 noundef, i64 noundef, i8* noundef) local_unnamed_addr #9

; Function Attrs: uwtable
define i64 @helper_ldq_mmu(%struct.CPUX86State* noundef %0, i64 noundef %1, i32 noundef %2, i8* noundef %3) local_unnamed_addr #3 {
  %5 = and i32 %2, 15
  %6 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %10, label %9

9:                                                ; preds = %4
  tail call void @tcg_llvm_before_memory_access(i64 noundef %1, i64 noundef 0, i32 noundef 8, i32 noundef 0)
  br label %10

10:                                               ; preds = %9, %4
  %11 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %16, label %14

14:                                               ; preds = %10
  %15 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %1, i64 noundef 0, i64 noundef -1, i64 noundef 0)
  br label %16

16:                                               ; preds = %10, %14
  %17 = phi i64 [ %15, %14 ], [ %1, %10 ]
  %18 = lshr i64 %17, 12
  %19 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %18, i64 noundef 0, i64 noundef 4503599627370495, i64 noundef 0)
  %20 = and i64 %19, 1023
  %21 = zext i32 %5 to i64
  %22 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 82, i64 %21
  %23 = and i64 %17, -4096
  %24 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %22, align 8
  %25 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %24, i64 %20
  %26 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %25, i64 0, i32 0
  %27 = load i64, i64* %26, align 8
  %28 = and i64 %27, -2048
  %29 = icmp eq i64 %23, %28
  br i1 %29, label %32, label %30, !prof !5

30:                                               ; preds = %16
  %31 = shl i64 %19, 12
  br label %65

32:                                               ; preds = %65, %16
  %33 = phi %struct.CPUTLBEntry* [ %24, %16 ], [ %66, %65 ]
  %34 = phi %struct.CPUTLBEntry* [ %25, %16 ], [ %67, %65 ]
  %35 = phi i64 [ %27, %16 ], [ %69, %65 ]
  %36 = and i64 %35, 4063
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %50, label %38, !prof !5

38:                                               ; preds = %32
  %39 = and i64 %17, 7
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %53

41:                                               ; preds = %38
  %42 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 84, i64 %21, i64 %20
  %43 = load i64, i64* %42, align 8
  %44 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 90
  store %struct.CPUTLBEntry* %34, %struct.CPUTLBEntry** %44, align 8
  %45 = tail call i64 @io_read_chkq_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %43, i64 noundef %17, i8* noundef %3)
  %46 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %47 = load i32, i32* %46, align 4
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %72, label %49

49:                                               ; preds = %41
  tail call void @tcg_llvm_after_memory_access(i64 noundef %17, i64 noundef %45, i32 noundef 8, i32 noundef 1, i64 noundef 0)
  br label %72

50:                                               ; preds = %32
  %51 = and i64 %17, 4095
  %52 = icmp ugt i64 %51, 4088
  br i1 %52, label %53, label %55, !prof !6

53:                                               ; preds = %50, %38
  %54 = tail call fastcc i64 @slow_ldq_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %17, i32 noundef %5, i8* noundef %3)
  br label %72

55:                                               ; preds = %50
  %56 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %33, i64 %20, i32 4
  %57 = load i64, i64* %56, align 8
  %58 = add i64 %57, %17
  %59 = inttoptr i64 %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %62 = load i32, i32* %61, align 4
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %72, label %64

64:                                               ; preds = %55
  tail call void @tcg_llvm_after_memory_access(i64 noundef %17, i64 noundef %60, i32 noundef 8, i32 noundef 0, i64 noundef 0)
  br label %72

65:                                               ; preds = %30, %65
  tail call void @tlb_fill(%struct.CPUX86State* undef, i64 noundef %17, i64 noundef %31, i32 noundef 0, i32 noundef %5, i8* noundef %3)
  %66 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %22, align 8
  %67 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %66, i64 %20
  %68 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %67, i64 0, i32 0
  %69 = load i64, i64* %68, align 8
  %70 = and i64 %69, -2048
  %71 = icmp eq i64 %23, %70
  br i1 %71, label %32, label %65, !prof !5

72:                                               ; preds = %49, %41, %55, %64, %53
  %73 = phi i64 [ %54, %53 ], [ %45, %49 ], [ %45, %41 ], [ %60, %64 ], [ %60, %55 ]
  ret i64 %73
}

; Function Attrs: uwtable
define i64 @io_read_chkq_mmu(%struct.CPUX86State* noundef %0, i64 noundef %1, i64 noundef %2, i8* noundef %3) local_unnamed_addr #3 {
  %5 = alloca i64, align 8
  %6 = bitcast i64* %5 to i8*
  %7 = tail call %struct.MemoryDescOps* @phys_get_ops(i64 noundef %1)
  %8 = and i64 %1, -4096
  %9 = add i64 %8, %2
  %10 = ptrtoint i8* %3 to i64
  %11 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 76
  store i64 %10, i64* %11, align 8
  tail call void @tcg_llvm_write_mem_io_vaddr(i64 noundef %2, i32 noundef 0)
  %12 = tail call zeroext i1 @se_ismemfunc(%struct.MemoryDescOps* noundef %7, i32 noundef 0)
  br i1 %12, label %13, label %26

13:                                               ; preds = %4
  %14 = tail call i64 @se_notdirty_mem_read(i64 noundef %9)
  %15 = inttoptr i64 %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = trunc i64 %16 to i32
  %18 = bitcast i64* %5 to i32*
  store i32 %17, i32* %18, align 8
  %19 = add i64 %9, 4
  %20 = tail call i64 @se_notdirty_mem_read(i64 noundef %19)
  %21 = inttoptr i64 %20 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = trunc i64 %22 to i32
  %24 = getelementptr inbounds i8, i8* %6, i64 4
  %25 = bitcast i8* %24 to i32*
  store i32 %23, i32* %25, align 4
  br label %28

26:                                               ; preds = %4
  %27 = tail call i64 @io_readq_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %1, i64 noundef %2, i8* noundef %3)
  store volatile i64 %27, i64* %5, align 8
  br label %28

28:                                               ; preds = %13, %26
  %29 = load volatile i64, i64* %5, align 8
  %30 = tail call i64 @tcg_llvm_trace_mmio_access(i64 noundef %2, i64 noundef %29, i32 noundef 8, i32 noundef 0)
  tail call void @tcg_llvm_write_mem_io_vaddr(i64 noundef 0, i32 noundef 1)
  %31 = load volatile i64, i64* %5, align 8
  ret i64 %31
}

; Function Attrs: uwtable
define internal fastcc i64 @slow_ldq_mmu(%struct.CPUX86State* noundef %0, i64 noundef %1, i32 noundef %2, i8* noundef %3) unnamed_addr #3 {
  %5 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %9, label %8

8:                                                ; preds = %4
  tail call void @tcg_llvm_before_memory_access(i64 noundef %1, i64 noundef 0, i32 noundef 8, i32 noundef 0)
  br label %9

9:                                                ; preds = %8, %4
  %10 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %15, label %13

13:                                               ; preds = %9
  %14 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %1, i64 noundef 0, i64 noundef -1, i64 noundef 0)
  br label %15

15:                                               ; preds = %9, %13
  %16 = phi i64 [ %14, %13 ], [ %1, %9 ]
  %17 = lshr i64 %16, 12
  %18 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %17, i64 noundef 0, i64 noundef 4503599627370495, i64 noundef 0)
  %19 = and i64 %18, 1023
  %20 = zext i32 %2 to i64
  %21 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 82, i64 %20
  %22 = and i64 %16, -4096
  %23 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %21, align 8
  %24 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %23, i64 %19
  %25 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %24, i64 0, i32 0
  %26 = load i64, i64* %25, align 8
  %27 = and i64 %26, -2048
  %28 = icmp eq i64 %22, %27
  br i1 %28, label %31, label %29

29:                                               ; preds = %15
  %30 = shl i64 %18, 12
  br label %71

31:                                               ; preds = %71, %15
  %32 = phi %struct.CPUTLBEntry* [ %23, %15 ], [ %72, %71 ]
  %33 = phi %struct.CPUTLBEntry* [ %24, %15 ], [ %73, %71 ]
  %34 = phi i64 [ %26, %15 ], [ %75, %71 ]
  %35 = and i64 %34, 4063
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %49, label %37

37:                                               ; preds = %31
  %38 = and i64 %16, 7
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %40, label %54

40:                                               ; preds = %37
  %41 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 84, i64 %20, i64 %19
  %42 = load i64, i64* %41, align 8
  %43 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 90
  store %struct.CPUTLBEntry* %33, %struct.CPUTLBEntry** %43, align 8
  %44 = tail call i64 @io_read_chkq_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %42, i64 noundef %16, i8* noundef %3)
  %45 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %46 = load i32, i32* %45, align 4
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %52, label %48

48:                                               ; preds = %40
  tail call void @tcg_llvm_after_memory_access(i64 noundef %16, i64 noundef %44, i32 noundef 8, i32 noundef 1, i64 noundef 0)
  br label %52

49:                                               ; preds = %31
  %50 = and i64 %16, 4095
  %51 = icmp ugt i64 %50, 4088
  br i1 %51, label %54, label %61

52:                                               ; preds = %70, %61, %40, %48, %54
  %53 = phi i64 [ %60, %54 ], [ %44, %48 ], [ %44, %40 ], [ %66, %70 ], [ %66, %61 ]
  ret i64 %53

54:                                               ; preds = %49, %37
  %55 = and i64 %16, -8
  %56 = add i64 %55, 8
  %57 = tail call fastcc i64 @slow_ldq_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %55, i32 noundef %2, i8* noundef %3)
  %58 = tail call fastcc i64 @slow_ldq_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %56, i32 noundef %2, i8* noundef %3)
  %59 = shl i64 %16, 3
  %60 = tail call i64 @llvm.fshr.i64(i64 %58, i64 %57, i64 %59)
  br label %52

61:                                               ; preds = %49
  %62 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %32, i64 %19, i32 4
  %63 = load i64, i64* %62, align 8
  %64 = add i64 %63, %16
  %65 = inttoptr i64 %64 to i64*
  %66 = load i64, i64* %65, align 8
  %67 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %68 = load i32, i32* %67, align 4
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %52, label %70

70:                                               ; preds = %61
  tail call void @tcg_llvm_after_memory_access(i64 noundef %16, i64 noundef %66, i32 noundef 8, i32 noundef 0, i64 noundef 0)
  br label %52

71:                                               ; preds = %29, %71
  tail call void @tlb_fill(%struct.CPUX86State* undef, i64 noundef %16, i64 noundef %30, i32 noundef 0, i32 noundef %2, i8* noundef %3)
  %72 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %21, align 8
  %73 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %72, i64 %19
  %74 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %73, i64 0, i32 0
  %75 = load i64, i64* %74, align 8
  %76 = and i64 %75, -2048
  %77 = icmp eq i64 %22, %76
  br i1 %77, label %31, label %71
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.fshr.i64(i64, i64, i64) #11

declare i64 @io_readq_mmu(%struct.CPUX86State* noundef, i64 noundef, i64 noundef, i8* noundef) local_unnamed_addr #9

; Function Attrs: uwtable
define i32 @helper_ldl_mmu(%struct.CPUX86State* noundef %0, i64 noundef %1, i32 noundef %2, i8* noundef %3) local_unnamed_addr #3 {
  %5 = and i32 %2, 15
  %6 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %10, label %9

9:                                                ; preds = %4
  tail call void @tcg_llvm_before_memory_access(i64 noundef %1, i64 noundef 0, i32 noundef 4, i32 noundef 0)
  br label %10

10:                                               ; preds = %9, %4
  %11 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %16, label %14

14:                                               ; preds = %10
  %15 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %1, i64 noundef 0, i64 noundef -1, i64 noundef 0)
  br label %16

16:                                               ; preds = %10, %14
  %17 = phi i64 [ %15, %14 ], [ %1, %10 ]
  %18 = lshr i64 %17, 12
  %19 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %18, i64 noundef 0, i64 noundef 4503599627370495, i64 noundef 0)
  %20 = and i64 %19, 1023
  %21 = zext i32 %5 to i64
  %22 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 82, i64 %21
  %23 = and i64 %17, -4096
  %24 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %22, align 8
  %25 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %24, i64 %20
  %26 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %25, i64 0, i32 0
  %27 = load i64, i64* %26, align 8
  %28 = and i64 %27, -2048
  %29 = icmp eq i64 %23, %28
  br i1 %29, label %32, label %30, !prof !5

30:                                               ; preds = %16
  %31 = shl i64 %19, 12
  br label %67

32:                                               ; preds = %67, %16
  %33 = phi %struct.CPUTLBEntry* [ %24, %16 ], [ %68, %67 ]
  %34 = phi %struct.CPUTLBEntry* [ %25, %16 ], [ %69, %67 ]
  %35 = phi i64 [ %27, %16 ], [ %71, %67 ]
  %36 = and i64 %35, 4063
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %51, label %38, !prof !5

38:                                               ; preds = %32
  %39 = and i64 %17, 3
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %54

41:                                               ; preds = %38
  %42 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 84, i64 %21, i64 %20
  %43 = load i64, i64* %42, align 8
  %44 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 90
  store %struct.CPUTLBEntry* %34, %struct.CPUTLBEntry** %44, align 8
  %45 = tail call i32 @io_read_chkl_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %43, i64 noundef %17, i8* noundef %3)
  %46 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %47 = load i32, i32* %46, align 4
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %74, label %49

49:                                               ; preds = %41
  %50 = zext i32 %45 to i64
  tail call void @tcg_llvm_after_memory_access(i64 noundef %17, i64 noundef %50, i32 noundef 4, i32 noundef 1, i64 noundef 0)
  br label %74

51:                                               ; preds = %32
  %52 = and i64 %17, 4095
  %53 = icmp ugt i64 %52, 4092
  br i1 %53, label %54, label %56, !prof !6

54:                                               ; preds = %51, %38
  %55 = tail call fastcc i32 @slow_ldl_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %17, i32 noundef %5, i8* noundef %3)
  br label %74

56:                                               ; preds = %51
  %57 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %33, i64 %20, i32 4
  %58 = load i64, i64* %57, align 8
  %59 = add i64 %58, %17
  %60 = inttoptr i64 %59 to i32*
  %61 = load i32, i32* %60, align 4
  %62 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %63 = load i32, i32* %62, align 4
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %74, label %65

65:                                               ; preds = %56
  %66 = zext i32 %61 to i64
  tail call void @tcg_llvm_after_memory_access(i64 noundef %17, i64 noundef %66, i32 noundef 4, i32 noundef 0, i64 noundef 0)
  br label %74

67:                                               ; preds = %30, %67
  tail call void @tlb_fill(%struct.CPUX86State* undef, i64 noundef %17, i64 noundef %31, i32 noundef 0, i32 noundef %5, i8* noundef %3)
  %68 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %22, align 8
  %69 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %68, i64 %20
  %70 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %69, i64 0, i32 0
  %71 = load i64, i64* %70, align 8
  %72 = and i64 %71, -2048
  %73 = icmp eq i64 %23, %72
  br i1 %73, label %32, label %67, !prof !5

74:                                               ; preds = %49, %41, %56, %65, %54
  %75 = phi i32 [ %55, %54 ], [ %45, %49 ], [ %45, %41 ], [ %61, %65 ], [ %61, %56 ]
  ret i32 %75
}

; Function Attrs: uwtable
define i32 @io_read_chkl_mmu(%struct.CPUX86State* noundef %0, i64 noundef %1, i64 noundef %2, i8* noundef %3) local_unnamed_addr #3 {
  %5 = alloca i32, align 4
  %6 = bitcast i32* %5 to i8*
  %7 = tail call %struct.MemoryDescOps* @phys_get_ops(i64 noundef %1)
  %8 = ptrtoint i8* %3 to i64
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 76
  store i64 %8, i64* %9, align 8
  tail call void @tcg_llvm_write_mem_io_vaddr(i64 noundef %2, i32 noundef 0)
  %10 = tail call zeroext i1 @se_ismemfunc(%struct.MemoryDescOps* noundef %7, i32 noundef 0)
  br i1 %10, label %11, label %17

11:                                               ; preds = %4
  %12 = and i64 %1, -4096
  %13 = add i64 %12, %2
  %14 = tail call i64 @se_notdirty_mem_read(i64 noundef %13)
  %15 = inttoptr i64 %14 to i32*
  %16 = load i32, i32* %15, align 4
  store volatile i32 %16, i32* %5, align 4
  br label %19

17:                                               ; preds = %4
  %18 = tail call i32 @io_readl_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %1, i64 noundef %2, i8* noundef %3)
  store volatile i32 %18, i32* %5, align 4
  br label %19

19:                                               ; preds = %11, %17
  %20 = load volatile i32, i32* %5, align 4
  %21 = zext i32 %20 to i64
  %22 = tail call i64 @tcg_llvm_trace_mmio_access(i64 noundef %2, i64 noundef %21, i32 noundef 4, i32 noundef 0)
  tail call void @tcg_llvm_write_mem_io_vaddr(i64 noundef 0, i32 noundef 1)
  %23 = load volatile i32, i32* %5, align 4
  ret i32 %23
}

; Function Attrs: uwtable
define internal fastcc i32 @slow_ldl_mmu(%struct.CPUX86State* noundef %0, i64 noundef %1, i32 noundef %2, i8* noundef %3) unnamed_addr #3 {
  %5 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %9, label %8

8:                                                ; preds = %4
  tail call void @tcg_llvm_before_memory_access(i64 noundef %1, i64 noundef 0, i32 noundef 4, i32 noundef 0)
  br label %9

9:                                                ; preds = %8, %4
  %10 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %15, label %13

13:                                               ; preds = %9
  %14 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %1, i64 noundef 0, i64 noundef -1, i64 noundef 0)
  br label %15

15:                                               ; preds = %9, %13
  %16 = phi i64 [ %14, %13 ], [ %1, %9 ]
  %17 = lshr i64 %16, 12
  %18 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %17, i64 noundef 0, i64 noundef 4503599627370495, i64 noundef 0)
  %19 = and i64 %18, 1023
  %20 = zext i32 %2 to i64
  %21 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 82, i64 %20
  %22 = and i64 %16, -4096
  %23 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %21, align 8
  %24 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %23, i64 %19
  %25 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %24, i64 0, i32 0
  %26 = load i64, i64* %25, align 8
  %27 = and i64 %26, -2048
  %28 = icmp eq i64 %22, %27
  br i1 %28, label %31, label %29

29:                                               ; preds = %15
  %30 = shl i64 %18, 12
  br label %74

31:                                               ; preds = %74, %15
  %32 = phi %struct.CPUTLBEntry* [ %23, %15 ], [ %75, %74 ]
  %33 = phi %struct.CPUTLBEntry* [ %24, %15 ], [ %76, %74 ]
  %34 = phi i64 [ %26, %15 ], [ %78, %74 ]
  %35 = and i64 %34, 4063
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %50, label %37

37:                                               ; preds = %31
  %38 = and i64 %16, 3
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %40, label %55

40:                                               ; preds = %37
  %41 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 84, i64 %20, i64 %19
  %42 = load i64, i64* %41, align 8
  %43 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 90
  store %struct.CPUTLBEntry* %33, %struct.CPUTLBEntry** %43, align 8
  %44 = tail call i32 @io_read_chkl_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %42, i64 noundef %16, i8* noundef %3)
  %45 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %46 = load i32, i32* %45, align 4
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %53, label %48

48:                                               ; preds = %40
  %49 = zext i32 %44 to i64
  tail call void @tcg_llvm_after_memory_access(i64 noundef %16, i64 noundef %49, i32 noundef 4, i32 noundef 1, i64 noundef 0)
  br label %53

50:                                               ; preds = %31
  %51 = and i64 %16, 4095
  %52 = icmp ugt i64 %51, 4092
  br i1 %52, label %55, label %63

53:                                               ; preds = %72, %63, %40, %48, %55
  %54 = phi i32 [ %62, %55 ], [ %44, %48 ], [ %44, %40 ], [ %68, %72 ], [ %68, %63 ]
  ret i32 %54

55:                                               ; preds = %50, %37
  %56 = and i64 %16, -4
  %57 = add i64 %56, 4
  %58 = tail call fastcc i32 @slow_ldl_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %56, i32 noundef %2, i8* noundef %3)
  %59 = tail call fastcc i32 @slow_ldl_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %57, i32 noundef %2, i8* noundef %3)
  %60 = trunc i64 %16 to i32
  %61 = shl i32 %60, 3
  %62 = tail call i32 @llvm.fshr.i32(i32 %59, i32 %58, i32 %61)
  br label %53

63:                                               ; preds = %50
  %64 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %32, i64 %19, i32 4
  %65 = load i64, i64* %64, align 8
  %66 = add i64 %65, %16
  %67 = inttoptr i64 %66 to i32*
  %68 = load i32, i32* %67, align 4
  %69 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %70 = load i32, i32* %69, align 4
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %53, label %72

72:                                               ; preds = %63
  %73 = zext i32 %68 to i64
  tail call void @tcg_llvm_after_memory_access(i64 noundef %16, i64 noundef %73, i32 noundef 4, i32 noundef 0, i64 noundef 0)
  br label %53

74:                                               ; preds = %29, %74
  tail call void @tlb_fill(%struct.CPUX86State* undef, i64 noundef %16, i64 noundef %30, i32 noundef 0, i32 noundef %2, i8* noundef %3)
  %75 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %21, align 8
  %76 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %75, i64 %19
  %77 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %76, i64 0, i32 0
  %78 = load i64, i64* %77, align 8
  %79 = and i64 %78, -2048
  %80 = icmp eq i64 %22, %79
  br i1 %80, label %31, label %74
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.fshr.i32(i32, i32, i32) #11

declare i32 @io_readl_mmu(%struct.CPUX86State* noundef, i64 noundef, i64 noundef, i8* noundef) local_unnamed_addr #9

; Function Attrs: uwtable
define void @do_interrupt(%struct.CPUX86State* nocapture noundef %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 99
  %3 = load i32, i32* %2, align 16
  %4 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 63
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 62
  %7 = load i32, i32* %6, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 64
  %9 = load i64, i64* %8, align 16
  %10 = load void (i32, i32, i32, i64, i32)*, void (i32, i32, i32, i64, i32)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 2, i32 9), align 8
  tail call void %10(i32 noundef %3, i32 noundef %5, i32 noundef %7, i64 noundef %9, i32 noundef 0)
  %11 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 68
  store i32 -1, i32* %11, align 4
  ret void
}

; Function Attrs: uwtable
define void @do_interrupt_x86_hardirq(%struct.CPUX86State* nocapture noundef readnone %0, i32 noundef %1, i32 noundef %2) local_unnamed_addr #3 {
  %4 = load void (i32, i32, i32, i64, i32)*, void (i32, i32, i32, i64, i32)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 2, i32 9), align 8
  tail call void %4(i32 noundef %1, i32 noundef 0, i32 noundef 0, i64 noundef 0, i32 noundef %2)
  ret void
}

; Function Attrs: noreturn uwtable
define void @raise_interrupt(%struct.CPUX86State* noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4) local_unnamed_addr #4 {
  tail call fastcc void @raise_interrupt2(%struct.CPUX86State* noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i64 noundef 0) #28
  unreachable
}

; Function Attrs: noreturn uwtable
define void @raise_exception(%struct.CPUX86State* noundef %0, i32 noundef %1) local_unnamed_addr #4 {
  tail call fastcc void @raise_interrupt2(%struct.CPUX86State* noundef %0, i32 noundef %1, i32 noundef 0, i32 noundef 0, i32 noundef 0, i64 noundef 0) #28
  unreachable
}

; Function Attrs: noreturn uwtable
define void @raise_exception_ra(%struct.CPUX86State* noundef %0, i32 noundef %1, i64 noundef %2) local_unnamed_addr #4 {
  tail call fastcc void @raise_interrupt2(%struct.CPUX86State* noundef %0, i32 noundef %1, i32 noundef 0, i32 noundef 0, i32 noundef 0, i64 noundef %2) #28
  unreachable
}

; Function Attrs: noreturn uwtable
define void @do_smm_enter(%struct.CPUX86State* noundef %0) local_unnamed_addr #4 {
  store %struct.CPUX86State* %0, %struct.CPUX86State** @env, align 8
  %2 = load i32, i32* @loglevel, align 4
  %3 = and i32 %2, 16
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %14, label %5

5:                                                ; preds = %1
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @logfile, align 8
  %7 = tail call i64 @fwrite(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i64 0, i64 0), i64 11, i64 1, %struct._IO_FILE* %6)
  %8 = load i32, i32* @loglevel, align 4
  %9 = and i32 %8, 16
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %14, label %11

11:                                               ; preds = %5
  %12 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @logfile, align 8
  tail call void @cpu_dump_state(%struct.CPUX86State* noundef %12, %struct._IO_FILE* noundef %13, i32 (%struct._IO_FILE*, i8*, ...)* noundef nonnull @fprintf, i32 noundef 16)
  br label %14

14:                                               ; preds = %1, %11, %5
  %15 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 21
  %17 = load i32, i32* %16, align 16
  %18 = or i32 %17, 524288
  store i32 %18, i32* %16, align 16
  tail call void @__assert_fail(i8* noundef getelementptr inbounds ([23 x i8], [23 x i8]* @.str.19, i64 0, i64 0), i8* noundef getelementptr inbounds ([69 x i8], [69 x i8]* @.str.20, i64 0, i64 0), i32 noundef 1663, i8* noundef getelementptr inbounds ([3
  unreachable
}

declare void @cpu_dump_state(%struct.CPUX86State* noundef, %struct._IO_FILE* noundef, i32 (%struct._IO_FILE*, i8*, ...)* noundef, i32 noundef) local_unnamed_addr #9

; Function Attrs: noreturn nounwind
declare void @__assert_fail(i8* noundef, i8* noundef, i32 noundef, i8* noundef) local_unnamed_addr #7

; Function Attrs: noreturn uwtable
define void @helper_rsm() local_unnamed_addr #4 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 67
  %3 = load i32, i32* %2, align 8
  %4 = add i32 %3, 32768
  %5 = zext i32 %4 to i64
  %6 = add nuw nsw i64 %5, 32464
  %7 = tail call i64 @ldq_phys(i64 noundef %6)
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 37
  store i64 %7, i64* %8, align 8
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 21
  %10 = load i32, i32* %9, align 16
  %11 = and i32 %10, -1064961
  %12 = trunc i64 %7 to i32
  %13 = shl i32 %12, 4
  %14 = and i32 %13, 16384
  %15 = or i32 %11, %14
  %16 = shl i32 %12, 8
  %17 = and i32 %16, 1048576
  %18 = or i32 %15, %17
  store i32 %18, i32* %9, align 16
  %19 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %20 = add nuw nsw i64 %5, 32256
  %21 = tail call i32 @lduw_phys(i64 noundef %20)
  %22 = add nuw nsw i64 %5, 32264
  %23 = tail call i64 @ldq_phys(i64 noundef %22)
  %24 = add nuw nsw i64 %5, 32260
  %25 = tail call i32 @ldl_phys(i64 noundef %24)
  %26 = add nuw nsw i64 %5, 32258
  %27 = tail call i32 @lduw_phys(i64 noundef %26)
  %28 = shl i32 %27, 8
  %29 = and i32 %28, 15793920
  %30 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %19, i64 0, i32 24, i64 0, i32 0
  store i32 %21, i32* %30, align 8
  %31 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %19, i64 0, i32 24, i64 0, i32 1
  store i64 %23, i64* %31, align 8
  %32 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %19, i64 0, i32 24, i64 0, i32 2
  store i32 %25, i32* %32, align 8
  %33 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %19, i64 0, i32 24, i64 0, i32 3
  store i32 %29, i32* %33, align 4
  %34 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %19, i64 0, i32 21
  %35 = load i32, i32* %34, align 16
  %36 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %19, i64 0, i32 24, i64 2, i32 3
  %37 = load i32, i32* %36, align 4
  %38 = lshr i32 %37, 17
  %39 = and i32 %38, 32
  %40 = and i32 %35, 32768
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %67

42:                                               ; preds = %0
  %43 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %19, i64 0, i32 29, i64 0
  %44 = load i64, i64* %43, align 16
  %45 = and i64 %44, 1
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %65, label %47

47:                                               ; preds = %42
  %48 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %19, i64 0, i32 20
  %49 = load i64, i64* %48, align 8
  %50 = and i64 %49, 131072
  %51 = icmp ne i64 %50, 0
  %52 = and i32 %35, 16
  %53 = icmp eq i32 %52, 0
  %54 = select i1 %51, i1 true, i1 %53
  br i1 %54, label %65, label %55

55:                                               ; preds = %47
  %56 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %19, i64 0, i32 24, i64 3, i32 1
  %57 = load i64, i64* %56, align 8
  %58 = or i64 %23, %57
  %59 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %19, i64 0, i32 24, i64 2, i32 1
  %60 = load i64, i64* %59, align 8
  %61 = or i64 %58, %60
  %62 = icmp eq i64 %61, 0
  %63 = select i1 %62, i32 0, i32 64
  %64 = or i32 %63, %39
  br label %67

65:                                               ; preds = %47, %42
  %66 = or i32 %39, 64
  br label %67

67:                                               ; preds = %65, %55, %0
  %68 = phi i32 [ %39, %0 ], [ %66, %65 ], [ %64, %55 ]
  %69 = and i32 %35, -97
  %70 = or i32 %68, %69
  store i32 %70, i32* %34, align 16
  %71 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %72 = add nuw nsw i64 %5, 32272
  %73 = tail call i32 @lduw_phys(i64 noundef %72)
  %74 = add nuw nsw i64 %5, 32280
  %75 = tail call i64 @ldq_phys(i64 noundef %74)
  %76 = add nuw nsw i64 %5, 32276
  %77 = tail call i32 @ldl_phys(i64 noundef %76)
  %78 = add nuw nsw i64 %5, 32274
  %79 = tail call i32 @lduw_phys(i64 noundef %78)
  %80 = shl i32 %79, 8
  %81 = and i32 %80, 15793920
  %82 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %71, i64 0, i32 24, i64 1, i32 0
  store i32 %73, i32* %82, align 8
  %83 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %71, i64 0, i32 24, i64 1, i32 1
  store i64 %75, i64* %83, align 8
  %84 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %71, i64 0, i32 24, i64 1, i32 2
  store i32 %77, i32* %84, align 8
  %85 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %71, i64 0, i32 24, i64 1, i32 3
  store i32 %81, i32* %85, align 4
  %86 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %71, i64 0, i32 21
  %87 = load i32, i32* %86, align 16
  %88 = and i32 %87, 16384
  %89 = icmp eq i32 %88, 0
  %90 = and i32 %79, 8192
  %91 = icmp eq i32 %90, 0
  %92 = or i1 %91, %89
  %93 = lshr i32 %80, 18
  %94 = and i32 %93, 16
  %95 = and i32 %87, -32785
  %96 = and i32 %87, -32881
  %97 = or i32 %94, %95
  %98 = or i32 %96, 32816
  %99 = select i1 %92, i32 %97, i32 %98
  %100 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %71, i64 0, i32 24, i64 2, i32 3
  %101 = load i32, i32* %100, align 4
  %102 = lshr i32 %101, 17
  %103 = and i32 %102, 32
  %104 = and i32 %99, 32768
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %106, label %133

106:                                              ; preds = %67
  %107 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %71, i64 0, i32 29, i64 0
  %108 = load i64, i64* %107, align 16
  %109 = and i64 %108, 1
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %131, label %111

111:                                              ; preds = %106
  %112 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %71, i64 0, i32 20
  %113 = load i64, i64* %112, align 8
  %114 = and i64 %113, 131072
  %115 = icmp ne i64 %114, 0
  %116 = and i32 %99, 16
  %117 = icmp eq i32 %116, 0
  %118 = select i1 %115, i1 true, i1 %117
  br i1 %118, label %131, label %119

119:                                              ; preds = %111
  %120 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %71, i64 0, i32 24, i64 3, i32 1
  %121 = load i64, i64* %120, align 8
  %122 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %71, i64 0, i32 24, i64 0, i32 1
  %123 = load i64, i64* %122, align 8
  %124 = or i64 %123, %121
  %125 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %71, i64 0, i32 24, i64 2, i32 1
  %126 = load i64, i64* %125, align 8
  %127 = or i64 %124, %126
  %128 = icmp eq i64 %127, 0
  %129 = select i1 %128, i32 0, i32 64
  %130 = or i32 %129, %103
  br label %133

131:                                              ; preds = %111, %106
  %132 = or i32 %103, 64
  br label %133

133:                                              ; preds = %67, %119, %131
  %134 = phi i32 [ %103, %67 ], [ %132, %131 ], [ %130, %119 ]
  %135 = and i32 %99, -97
  %136 = or i32 %134, %135
  store i32 %136, i32* %86, align 16
  %137 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %138 = add nuw nsw i64 %5, 32288
  %139 = tail call i32 @lduw_phys(i64 noundef %138)
  %140 = add nuw nsw i64 %5, 32296
  %141 = tail call i64 @ldq_phys(i64 noundef %140)
  %142 = add nuw nsw i64 %5, 32292
  %143 = tail call i32 @ldl_phys(i64 noundef %142)
  %144 = add nuw nsw i64 %5, 32290
  %145 = tail call i32 @lduw_phys(i64 noundef %144)
  %146 = shl i32 %145, 8
  %147 = and i32 %146, 15793920
  %148 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %137, i64 0, i32 24, i64 2, i32 0
  store i32 %139, i32* %148, align 8
  %149 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %137, i64 0, i32 24, i64 2, i32 1
  store i64 %141, i64* %149, align 8
  %150 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %137, i64 0, i32 24, i64 2, i32 2
  store i32 %143, i32* %150, align 8
  %151 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %137, i64 0, i32 24, i64 2, i32 3
  store i32 %147, i32* %151, align 4
  %152 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %137, i64 0, i32 21
  %153 = load i32, i32* %152, align 16
  %154 = lshr i32 %146, 17
  %155 = and i32 %154, 32
  %156 = and i32 %153, 32768
  %157 = icmp eq i32 %156, 0
  br i1 %157, label %158, label %185

158:                                              ; preds = %133
  %159 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %137, i64 0, i32 29, i64 0
  %160 = load i64, i64* %159, align 16
  %161 = and i64 %160, 1
  %162 = icmp eq i64 %161, 0
  br i1 %162, label %171, label %163

163:                                              ; preds = %158
  %164 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %137, i64 0, i32 20
  %165 = load i64, i64* %164, align 8
  %166 = and i64 %165, 131072
  %167 = icmp ne i64 %166, 0
  %168 = and i32 %153, 16
  %169 = icmp eq i32 %168, 0
  %170 = select i1 %167, i1 true, i1 %169
  br i1 %170, label %171, label %173

171:                                              ; preds = %163, %158
  %172 = or i32 %155, 64
  br label %185

173:                                              ; preds = %163
  %174 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %137, i64 0, i32 24, i64 3, i32 1
  %175 = load i64, i64* %174, align 8
  %176 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %137, i64 0, i32 24, i64 0, i32 1
  %177 = load i64, i64* %176, align 8
  %178 = or i64 %177, %175
  %179 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %137, i64 0, i32 24, i64 2, i32 1
  %180 = load i64, i64* %179, align 8
  %181 = or i64 %178, %180
  %182 = icmp eq i64 %181, 0
  %183 = select i1 %182, i32 0, i32 64
  %184 = or i32 %183, %155
  br label %185

185:                                              ; preds = %133, %171, %173
  %186 = phi i32 [ %155, %133 ], [ %172, %171 ], [ %184, %173 ]
  %187 = and i32 %153, -97
  %188 = or i32 %186, %187
  store i32 %188, i32* %152, align 16
  %189 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %190 = add nuw nsw i64 %5, 32304
  %191 = tail call i32 @lduw_phys(i64 noundef %190)
  %192 = add nuw nsw i64 %5, 32312
  %193 = tail call i64 @ldq_phys(i64 noundef %192)
  %194 = add nuw nsw i64 %5, 32308
  %195 = tail call i32 @ldl_phys(i64 noundef %194)
  %196 = add nuw nsw i64 %5, 32306
  %197 = tail call i32 @lduw_phys(i64 noundef %196)
  %198 = shl i32 %197, 8
  %199 = and i32 %198, 15793920
  %200 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %189, i64 0, i32 24, i64 3, i32 0
  store i32 %191, i32* %200, align 8
  %201 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %189, i64 0, i32 24, i64 3, i32 1
  store i64 %193, i64* %201, align 8
  %202 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %189, i64 0, i32 24, i64 3, i32 2
  store i32 %195, i32* %202, align 8
  %203 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %189, i64 0, i32 24, i64 3, i32 3
  store i32 %199, i32* %203, align 4
  %204 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %189, i64 0, i32 21
  %205 = load i32, i32* %204, align 16
  %206 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %189, i64 0, i32 24, i64 2, i32 3
  %207 = load i32, i32* %206, align 4
  %208 = lshr i32 %207, 17
  %209 = and i32 %208, 32
  %210 = and i32 %205, 32768
  %211 = icmp eq i32 %210, 0
  br i1 %211, label %212, label %239

212:                                              ; preds = %185
  %213 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %189, i64 0, i32 29, i64 0
  %214 = load i64, i64* %213, align 16
  %215 = and i64 %214, 1
  %216 = icmp eq i64 %215, 0
  br i1 %216, label %237, label %217

217:                                              ; preds = %212
  %218 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %189, i64 0, i32 20
  %219 = load i64, i64* %218, align 8
  %220 = and i64 %219, 131072
  %221 = icmp ne i64 %220, 0
  %222 = and i32 %205, 16
  %223 = icmp eq i32 %222, 0
  %224 = select i1 %221, i1 true, i1 %223
  br i1 %224, label %237, label %225

225:                                              ; preds = %217
  %226 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %189, i64 0, i32 24, i64 3, i32 1
  %227 = load i64, i64* %226, align 8
  %228 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %189, i64 0, i32 24, i64 0, i32 1
  %229 = load i64, i64* %228, align 8
  %230 = or i64 %229, %227
  %231 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %189, i64 0, i32 24, i64 2, i32 1
  %232 = load i64, i64* %231, align 8
  %233 = or i64 %230, %232
  %234 = icmp eq i64 %233, 0
  %235 = select i1 %234, i32 0, i32 64
  %236 = or i32 %235, %209
  br label %239

237:                                              ; preds = %217, %212
  %238 = or i32 %209, 64
  br label %239

239:                                              ; preds = %237, %225, %185
  %240 = phi i32 [ %209, %185 ], [ %238, %237 ], [ %236, %225 ]
  %241 = and i32 %205, -97
  %242 = or i32 %240, %241
  store i32 %242, i32* %204, align 16
  %243 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %244 = add nuw nsw i64 %5, 32320
  %245 = tail call i32 @lduw_phys(i64 noundef %244)
  %246 = add nuw nsw i64 %5, 32328
  %247 = tail call i64 @ldq_phys(i64 noundef %246)
  %248 = add nuw nsw i64 %5, 32324
  %249 = tail call i32 @ldl_phys(i64 noundef %248)
  %250 = add nuw nsw i64 %5, 32322
  %251 = tail call i32 @lduw_phys(i64 noundef %250)
  %252 = shl i32 %251, 8
  %253 = and i32 %252, 15793920
  %254 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %243, i64 0, i32 24, i64 4, i32 0
  store i32 %245, i32* %254, align 8
  %255 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %243, i64 0, i32 24, i64 4, i32 1
  store i64 %247, i64* %255, align 8
  %256 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %243, i64 0, i32 24, i64 4, i32 2
  store i32 %249, i32* %256, align 8
  %257 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %243, i64 0, i32 24, i64 4, i32 3
  store i32 %253, i32* %257, align 4
  %258 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %243, i64 0, i32 21
  %259 = load i32, i32* %258, align 16
  %260 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %243, i64 0, i32 24, i64 2, i32 3
  %261 = load i32, i32* %260, align 4
  %262 = lshr i32 %261, 17
  %263 = and i32 %262, 32
  %264 = and i32 %259, 32768
  %265 = icmp eq i32 %264, 0
  br i1 %265, label %266, label %293

266:                                              ; preds = %239
  %267 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %243, i64 0, i32 29, i64 0
  %268 = load i64, i64* %267, align 16
  %269 = and i64 %268, 1
  %270 = icmp eq i64 %269, 0
  br i1 %270, label %291, label %271

271:                                              ; preds = %266
  %272 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %243, i64 0, i32 20
  %273 = load i64, i64* %272, align 8
  %274 = and i64 %273, 131072
  %275 = icmp ne i64 %274, 0
  %276 = and i32 %259, 16
  %277 = icmp eq i32 %276, 0
  %278 = select i1 %275, i1 true, i1 %277
  br i1 %278, label %291, label %279

279:                                              ; preds = %271
  %280 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %243, i64 0, i32 24, i64 3, i32 1
  %281 = load i64, i64* %280, align 8
  %282 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %243, i64 0, i32 24, i64 0, i32 1
  %283 = load i64, i64* %282, align 8
  %284 = or i64 %283, %281
  %285 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %243, i64 0, i32 24, i64 2, i32 1
  %286 = load i64, i64* %285, align 8
  %287 = or i64 %284, %286
  %288 = icmp eq i64 %287, 0
  %289 = select i1 %288, i32 0, i32 64
  %290 = or i32 %289, %263
  br label %293

291:                                              ; preds = %271, %266
  %292 = or i32 %263, 64
  br label %293

293:                                              ; preds = %291, %279, %239
  %294 = phi i32 [ %263, %239 ], [ %292, %291 ], [ %290, %279 ]
  %295 = and i32 %259, -97
  %296 = or i32 %294, %295
  store i32 %296, i32* %258, align 16
  %297 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %298 = add nuw nsw i64 %5, 32336
  %299 = tail call i32 @lduw_phys(i64 noundef %298)
  %300 = add nuw nsw i64 %5, 32344
  %301 = tail call i64 @ldq_phys(i64 noundef %300)
  %302 = add nuw nsw i64 %5, 32340
  %303 = tail call i32 @ldl_phys(i64 noundef %302)
  %304 = add nuw nsw i64 %5, 32338
  %305 = tail call i32 @lduw_phys(i64 noundef %304)
  %306 = shl i32 %305, 8
  %307 = and i32 %306, 15793920
  %308 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %297, i64 0, i32 24, i64 5, i32 0
  store i32 %299, i32* %308, align 8
  %309 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %297, i64 0, i32 24, i64 5, i32 1
  store i64 %301, i64* %309, align 8
  %310 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %297, i64 0, i32 24, i64 5, i32 2
  store i32 %303, i32* %310, align 8
  %311 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %297, i64 0, i32 24, i64 5, i32 3
  store i32 %307, i32* %311, align 4
  %312 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %297, i64 0, i32 21
  %313 = load i32, i32* %312, align 16
  %314 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %297, i64 0, i32 24, i64 2, i32 3
  %315 = load i32, i32* %314, align 4
  %316 = lshr i32 %315, 17
  %317 = and i32 %316, 32
  %318 = and i32 %313, 32768
  %319 = icmp eq i32 %318, 0
  br i1 %319, label %320, label %347

320:                                              ; preds = %293
  %321 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %297, i64 0, i32 29, i64 0
  %322 = load i64, i64* %321, align 16
  %323 = and i64 %322, 1
  %324 = icmp eq i64 %323, 0
  br i1 %324, label %345, label %325

325:                                              ; preds = %320
  %326 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %297, i64 0, i32 20
  %327 = load i64, i64* %326, align 8
  %328 = and i64 %327, 131072
  %329 = icmp ne i64 %328, 0
  %330 = and i32 %313, 16
  %331 = icmp eq i32 %330, 0
  %332 = select i1 %329, i1 true, i1 %331
  br i1 %332, label %345, label %333

333:                                              ; preds = %325
  %334 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %297, i64 0, i32 24, i64 3, i32 1
  %335 = load i64, i64* %334, align 8
  %336 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %297, i64 0, i32 24, i64 0, i32 1
  %337 = load i64, i64* %336, align 8
  %338 = or i64 %337, %335
  %339 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %297, i64 0, i32 24, i64 2, i32 1
  %340 = load i64, i64* %339, align 8
  %341 = or i64 %338, %340
  %342 = icmp eq i64 %341, 0
  %343 = select i1 %342, i32 0, i32 64
  %344 = or i32 %343, %317
  br label %347

345:                                              ; preds = %325, %320
  %346 = or i32 %317, 64
  br label %347

347:                                              ; preds = %345, %333, %293
  %348 = phi i32 [ %317, %293 ], [ %346, %345 ], [ %344, %333 ]
  %349 = and i32 %313, -97
  %350 = or i32 %348, %349
  store i32 %350, i32* %312, align 16
  %351 = add nuw nsw i64 %5, 32360
  %352 = tail call i64 @ldq_phys(i64 noundef %351)
  %353 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %354 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %353, i64 0, i32 27, i32 1
  store i64 %352, i64* %354, align 8
  %355 = add nuw nsw i64 %5, 32356
  %356 = tail call i32 @ldl_phys(i64 noundef %355)
  %357 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %358 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %357, i64 0, i32 27, i32 2
  store i32 %356, i32* %358, align 16
  %359 = add nuw nsw i64 %5, 32368
  %360 = tail call i32 @lduw_phys(i64 noundef %359)
  %361 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %362 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %361, i64 0, i32 25, i32 0
  store i32 %360, i32* %362, align 16
  %363 = add nuw nsw i64 %5, 32376
  %364 = tail call i64 @ldq_phys(i64 noundef %363)
  %365 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %366 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %365, i64 0, i32 25, i32 1
  store i64 %364, i64* %366, align 8
  %367 = add nuw nsw i64 %5, 32372
  %368 = tail call i32 @ldl_phys(i64 noundef %367)
  %369 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %370 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %369, i64 0, i32 25, i32 2
  store i32 %368, i32* %370, align 16
  %371 = add nuw nsw i64 %5, 32370
  %372 = tail call i32 @lduw_phys(i64 noundef %371)
  %373 = shl i32 %372, 8
  %374 = and i32 %373, 15793920
  %375 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %376 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %375, i64 0, i32 25, i32 3
  store i32 %374, i32* %376, align 4
  %377 = add nuw nsw i64 %5, 32392
  %378 = tail call i64 @ldq_phys(i64 noundef %377)
  %379 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %380 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %379, i64 0, i32 28, i32 1
  store i64 %378, i64* %380, align 8
  %381 = add nuw nsw i64 %5, 32388
  %382 = tail call i32 @ldl_phys(i64 noundef %381)
  %383 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %384 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %383, i64 0, i32 28, i32 2
  store i32 %382, i32* %384, align 8
  %385 = add nuw nsw i64 %5, 32400
  %386 = tail call i32 @lduw_phys(i64 noundef %385)
  %387 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %388 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %387, i64 0, i32 26, i32 0
  store i32 %386, i32* %388, align 8
  %389 = add nuw nsw i64 %5, 32408
  %390 = tail call i64 @ldq_phys(i64 noundef %389)
  %391 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %392 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %391, i64 0, i32 26, i32 1
  store i64 %390, i64* %392, align 8
  %393 = add nuw nsw i64 %5, 32404
  %394 = tail call i32 @ldl_phys(i64 noundef %393)
  %395 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %396 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %395, i64 0, i32 26, i32 2
  store i32 %394, i32* %396, align 8
  %397 = add nuw nsw i64 %5, 32402
  %398 = tail call i32 @lduw_phys(i64 noundef %397)
  %399 = shl i32 %398, 8
  %400 = and i32 %399, 15793920
  %401 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %402 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %401, i64 0, i32 26, i32 3
  store i32 %400, i32* %402, align 4
  %403 = add nuw nsw i64 %5, 32760
  %404 = tail call i64 @ldq_phys(i64 noundef %403)
  %405 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %406 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %405, i64 0, i32 0, i64 0
  store i64 %404, i64* %406, align 16
  %407 = add nuw nsw i64 %5, 32752
  %408 = tail call i64 @ldq_phys(i64 noundef %407)
  %409 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %410 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %409, i64 0, i32 0, i64 1
  store i64 %408, i64* %410, align 8
  %411 = add nuw nsw i64 %5, 32744
  %412 = tail call i64 @ldq_phys(i64 noundef %411)
  %413 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %414 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %413, i64 0, i32 0, i64 2
  store i64 %412, i64* %414, align 16
  %415 = add nuw nsw i64 %5, 32736
  %416 = tail call i64 @ldq_phys(i64 noundef %415)
  %417 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %418 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %417, i64 0, i32 0, i64 3
  store i64 %416, i64* %418, align 8
  %419 = add nuw nsw i64 %5, 32728
  %420 = tail call i64 @ldq_phys(i64 noundef %419)
  %421 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %422 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %421, i64 0, i32 0, i64 4
  store i64 %420, i64* %422, align 16
  %423 = add nuw nsw i64 %5, 32720
  %424 = tail call i64 @ldq_phys(i64 noundef %423)
  %425 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %426 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %425, i64 0, i32 0, i64 5
  store i64 %424, i64* %426, align 8
  %427 = add nuw nsw i64 %5, 32712
  %428 = tail call i64 @ldq_phys(i64 noundef %427)
  %429 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %430 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %429, i64 0, i32 0, i64 6
  store i64 %428, i64* %430, align 16
  %431 = add nuw nsw i64 %5, 32704
  %432 = tail call i64 @ldq_phys(i64 noundef %431)
  %433 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %434 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %433, i64 0, i32 0, i64 7
  store i64 %432, i64* %434, align 8
  %435 = add nuw nsw i64 %5, 32696
  %436 = tail call i64 @ldq_phys(i64 noundef %435)
  %437 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %438 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %437, i64 0, i32 0, i64 8
  store i64 %436, i64* %438, align 8
  %439 = add nuw nsw i64 %5, 32688
  %440 = tail call i64 @ldq_phys(i64 noundef %439)
  %441 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %442 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %441, i64 0, i32 0, i64 9
  store i64 %440, i64* %442, align 8
  %443 = add nuw nsw i64 %5, 32680
  %444 = tail call i64 @ldq_phys(i64 noundef %443)
  %445 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %446 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %445, i64 0, i32 0, i64 10
  store i64 %444, i64* %446, align 8
  %447 = add nuw nsw i64 %5, 32672
  %448 = tail call i64 @ldq_phys(i64 noundef %447)
  %449 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %450 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %449, i64 0, i32 0, i64 11
  store i64 %448, i64* %450, align 8
  %451 = add nuw nsw i64 %5, 32664
  %452 = tail call i64 @ldq_phys(i64 noundef %451)
  %453 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %454 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %453, i64 0, i32 0, i64 12
  store i64 %452, i64* %454, align 8
  %455 = add nuw nsw i64 %5, 32656
  %456 = tail call i64 @ldq_phys(i64 noundef %455)
  %457 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %458 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %457, i64 0, i32 0, i64 13
  store i64 %456, i64* %458, align 8
  %459 = add nuw nsw i64 %5, 32648
  %460 = tail call i64 @ldq_phys(i64 noundef %459)
  %461 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %462 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %461, i64 0, i32 0, i64 14
  store i64 %460, i64* %462, align 8
  %463 = add nuw nsw i64 %5, 32640
  %464 = tail call i64 @ldq_phys(i64 noundef %463)
  %465 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %466 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %465, i64 0, i32 0, i64 15
  store i64 %464, i64* %466, align 8
  %467 = add nuw nsw i64 %5, 32632
  %468 = tail call i64 @ldq_phys(i64 noundef %467)
  %469 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %470 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %469, i64 0, i32 18
  store i64 %468, i64* %470, align 8
  %471 = add nuw nsw i64 %5, 32624
  %472 = tail call i32 @ldl_phys(i64 noundef %471)
  %473 = and i32 %472, 2261
  %474 = zext i32 %473 to i64
  %475 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %476 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %475, i64 0, i32 2
  store i64 %474, i64* %476, align 8
  %477 = and i32 %472, 1024
  %478 = icmp eq i32 %477, 0
  %479 = select i1 %478, i32 1, i32 -1
  %480 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %475, i64 0, i32 19
  store i32 %479, i32* %480, align 16
  %481 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %475, i64 0, i32 20
  %482 = load i64, i64* %481, align 8
  %483 = and i64 %482, 3285
  %484 = and i32 %472, -3286
  %485 = sext i32 %484 to i64
  %486 = or i64 %483, %485
  store i64 %486, i64* %481, align 8
  %487 = add nuw nsw i64 %5, 32616
  %488 = tail call i32 @ldl_phys(i64 noundef %487)
  %489 = zext i32 %488 to i64
  %490 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %491 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %490, i64 0, i32 65, i64 6
  store i64 %489, i64* %491, align 8
  %492 = add nuw nsw i64 %5, 32608
  %493 = tail call i32 @ldl_phys(i64 noundef %492)
  %494 = zext i32 %493 to i64
  %495 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %496 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %495, i64 0, i32 65, i64 7
  store i64 %494, i64* %496, align 8
  %497 = add nuw nsw i64 %5, 32584
  %498 = tail call i32 @ldl_phys(i64 noundef %497)
  tail call void @cpu_x86_update_cr4(%struct.CPUX86State* noundef %495, i32 noundef %498)
  %499 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %500 = add nuw nsw i64 %5, 32592
  %501 = tail call i32 @ldl_phys(i64 noundef %500)
  %502 = zext i32 %501 to i64
  tail call void @cpu_x86_update_cr3(%struct.CPUX86State* noundef %499, i64 noundef %502)
  %503 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %504 = add nuw nsw i64 %5, 32600
  %505 = tail call i32 @ldl_phys(i64 noundef %504)
  tail call void @cpu_x86_update_cr0(%struct.CPUX86State* noundef %503, i32 noundef %505)
  %506 = add nuw nsw i64 %5, 32508
  %507 = tail call i32 @ldl_phys(i64 noundef %506)
  %508 = and i32 %507, 131072
  %509 = icmp eq i32 %508, 0
  br i1 %509, label %510, label %512

510:                                              ; preds = %347
  %511 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br label %518

512:                                              ; preds = %347
  %513 = add nuw nsw i64 %5, 32512
  %514 = tail call i32 @ldl_phys(i64 noundef %513)
  %515 = and i32 %514, -32768
  %516 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %517 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %516, i64 0, i32 67
  store i32 %515, i32* %517, align 8
  br label %518

518:                                              ; preds = %510, %512
  %519 = phi %struct.CPUX86State* [ %511, %510 ], [ %516, %512 ]
  %520 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %519, i64 0, i32 1
  store i64 1, i64* %520, align 16
  %521 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %519, i64 0, i32 21
  %522 = load i32, i32* %521, align 16
  %523 = and i32 %522, -524289
  store i32 %523, i32* %521, align 16
  tail call void @__assert_fail(i8* noundef getelementptr inbounds ([23 x i8], [23 x i8]* @.str.19, i64 0, i64 0), i8* noundef getelementptr inbounds ([69 x i8], [69 x i8]* @.str.20, i64 0, i64 0), i32 noundef 1663, i8* noundef getelementptr inbounds ([3
  unreachable
}

; Function Attrs: uwtable
define void @helper_divb_AL(i64 noundef %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 16
  %5 = trunc i64 %0 to i32
  %6 = and i32 %5, 255
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %9

8:                                                ; preds = %1
  tail call void @raise_exception_ra(%struct.CPUX86State* noundef nonnull %2, i32 noundef 0, i64 noundef 0) #28
  unreachable

9:                                                ; preds = %1
  %10 = trunc i64 %4 to i16
  %11 = trunc i32 %6 to i16
  %12 = udiv i16 %10, %11
  %13 = urem i16 %10, %11
  %14 = icmp ugt i16 %12, 255
  br i1 %14, label %15, label %16

15:                                               ; preds = %9
  tail call void @raise_exception_ra(%struct.CPUX86State* noundef nonnull %2, i32 noundef 0, i64 noundef 0) #28
  unreachable

16:                                               ; preds = %9
  %17 = and i64 %4, -65536
  %18 = shl nuw i16 %13, 8
  %19 = zext i16 %18 to i64
  %20 = zext i16 %12 to i64
  %21 = or i64 %17, %20
  %22 = or i64 %21, %19
  store i64 %22, i64* %3, align 16
  ret void
}

; Function Attrs: uwtable
define void @helper_idivb_AL(i64 noundef %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 16
  %5 = trunc i64 %4 to i32
  %6 = shl i32 %5, 16
  %7 = ashr exact i32 %6, 16
  %8 = trunc i64 %0 to i32
  %9 = shl i32 %8, 24
  %10 = ashr exact i32 %9, 24
  %11 = icmp eq i32 %9, 0
  br i1 %11, label %12, label %13

12:                                               ; preds = %1
  tail call void @raise_exception_ra(%struct.CPUX86State* noundef nonnull %2, i32 noundef 0, i64 noundef 0) #28
  unreachable

13:                                               ; preds = %1
  %14 = sdiv i32 %7, %10
  %15 = srem i32 %7, %10
  %16 = add nsw i32 %14, 128
  %17 = icmp ult i32 %16, 256
  br i1 %17, label %19, label %18

18:                                               ; preds = %13
  tail call void @raise_exception_ra(%struct.CPUX86State* noundef nonnull %2, i32 noundef 0, i64 noundef 0) #28
  unreachable

19:                                               ; preds = %13
  %20 = and i32 %14, 255
  %21 = and i64 %4, -65536
  %22 = shl nsw i32 %15, 8
  %23 = and i32 %22, 65280
  %24 = zext i32 %23 to i64
  %25 = zext i32 %20 to i64
  %26 = or i64 %21, %25
  %27 = or i64 %26, %24
  store i64 %27, i64* %3, align 16
  ret void
}

; Function Attrs: uwtable
define void @helper_divw_AX(i64 noundef %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 16
  %5 = and i64 %4, 65535
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 0, i64 2
  %7 = load i64, i64* %6, align 16
  %8 = shl i64 %7, 16
  %9 = or i64 %8, %5
  %10 = trunc i64 %9 to i32
  %11 = trunc i64 %0 to i32
  %12 = and i32 %11, 65535
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %15

14:                                               ; preds = %1
  tail call void @raise_exception_ra(%struct.CPUX86State* noundef nonnull %2, i32 noundef 0, i64 noundef 0) #28
  unreachable

15:                                               ; preds = %1
  %16 = udiv i32 %10, %12
  %17 = urem i32 %10, %12
  %18 = icmp ugt i32 %16, 65535
  br i1 %18, label %19, label %20

19:                                               ; preds = %15
  tail call void @raise_exception_ra(%struct.CPUX86State* noundef nonnull %2, i32 noundef 0, i64 noundef 0) #28
  unreachable

20:                                               ; preds = %15
  %21 = and i64 %4, -65536
  %22 = zext i32 %16 to i64
  %23 = or i64 %21, %22
  store i64 %23, i64* %3, align 16
  %24 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %25 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %24, i64 0, i32 0, i64 2
  %26 = load i64, i64* %25, align 16
  %27 = and i64 %26, -65536
  %28 = zext i32 %17 to i64
  %29 = or i64 %27, %28
  store i64 %29, i64* %25, align 16
  ret void
}

; Function Attrs: uwtable
define void @helper_idivw_AX(i64 noundef %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 16
  %5 = and i64 %4, 65535
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 0, i64 2
  %7 = load i64, i64* %6, align 16
  %8 = shl i64 %7, 16
  %9 = or i64 %8, %5
  %10 = trunc i64 %9 to i32
  %11 = trunc i64 %0 to i32
  %12 = shl i32 %11, 16
  %13 = ashr exact i32 %12, 16
  %14 = icmp eq i32 %12, 0
  br i1 %14, label %15, label %16

15:                                               ; preds = %1
  tail call void @raise_exception_ra(%struct.CPUX86State* noundef nonnull %2, i32 noundef 0, i64 noundef 0) #28
  unreachable

16:                                               ; preds = %1
  %17 = sdiv i32 %10, %13
  %18 = srem i32 %10, %13
  %19 = add i32 %17, 32768
  %20 = icmp ult i32 %19, 65536
  br i1 %20, label %22, label %21

21:                                               ; preds = %16
  tail call void @raise_exception_ra(%struct.CPUX86State* noundef nonnull %2, i32 noundef 0, i64 noundef 0) #28
  unreachable

22:                                               ; preds = %16
  %23 = and i32 %17, 65535
  %24 = and i32 %18, 65535
  %25 = and i64 %4, -65536
  %26 = zext i32 %23 to i64
  %27 = or i64 %25, %26
  store i64 %27, i64* %3, align 16
  %28 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %29 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %28, i64 0, i32 0, i64 2
  %30 = load i64, i64* %29, align 16
  %31 = and i64 %30, -65536
  %32 = zext i32 %24 to i64
  %33 = or i64 %31, %32
  store i64 %33, i64* %29, align 16
  ret void
}

; Function Attrs: uwtable
define void @helper_divl_EAX(i64 noundef %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 16
  %5 = and i64 %4, 4294967295
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 0, i64 2
  %7 = load i64, i64* %6, align 16
  %8 = shl i64 %7, 32
  %9 = or i64 %8, %5
  %10 = trunc i64 %0 to i32
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %13

12:                                               ; preds = %1
  tail call void @raise_exception_ra(%struct.CPUX86State* noundef nonnull %2, i32 noundef 0, i64 noundef 0) #28
  unreachable

13:                                               ; preds = %1
  %14 = and i64 %0, 4294967295
  %15 = udiv i64 %9, %14
  %16 = urem i64 %9, %14
  %17 = icmp ugt i64 %15, 4294967295
  br i1 %17, label %18, label %19

18:                                               ; preds = %13
  tail call void @raise_exception_ra(%struct.CPUX86State* noundef nonnull %2, i32 noundef 0, i64 noundef 0) #28
  unreachable

19:                                               ; preds = %13
  store i64 %15, i64* %3, align 16
  %20 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %21 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %20, i64 0, i32 0, i64 2
  store i64 %16, i64* %21, align 16
  ret void
}

; Function Attrs: uwtable
define void @helper_idivl_EAX(i64 noundef %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 16
  %5 = and i64 %4, 4294967295
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 0, i64 2
  %7 = load i64, i64* %6, align 16
  %8 = shl i64 %7, 32
  %9 = or i64 %8, %5
  %10 = trunc i64 %0 to i32
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %13

12:                                               ; preds = %1
  tail call void @raise_exception_ra(%struct.CPUX86State* noundef nonnull %2, i32 noundef 0, i64 noundef 0) #28
  unreachable

13:                                               ; preds = %1
  %14 = shl i64 %0, 32
  %15 = ashr exact i64 %14, 32
  %16 = sdiv i64 %9, %15
  %17 = srem i64 %9, %15
  %18 = add i64 %16, 2147483648
  %19 = icmp ult i64 %18, 4294967296
  br i1 %19, label %21, label %20

20:                                               ; preds = %13
  tail call void @raise_exception_ra(%struct.CPUX86State* noundef nonnull %2, i32 noundef 0, i64 noundef 0) #28
  unreachable

21:                                               ; preds = %13
  %22 = and i64 %16, 4294967295
  store i64 %22, i64* %3, align 16
  %23 = and i64 %17, 4294967295
  %24 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %25 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %24, i64 0, i32 0, i64 2
  store i64 %23, i64* %25, align 16
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_aam(i32 noundef %0) local_unnamed_addr #2 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 16
  %5 = trunc i64 %4 to i32
  %6 = and i32 %5, 255
  %7 = sdiv i32 %6, %0
  %8 = srem i32 %6, %0
  %9 = and i64 %4, -65536
  %10 = zext i32 %8 to i64
  %11 = or i64 %9, %10
  %12 = shl nsw i32 %7, 8
  %13 = sext i32 %12 to i64
  %14 = or i64 %11, %13
  store i64 %14, i64* %3, align 16
  %15 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 3
  store i64 %10, i64* %16, align 16
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_aad(i32 noundef %0) local_unnamed_addr #2 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 16
  %5 = trunc i64 %4 to i32
  %6 = lshr i32 %5, 8
  %7 = and i32 %6, 255
  %8 = mul nsw i32 %7, %0
  %9 = add i32 %8, %5
  %10 = and i32 %9, 255
  %11 = and i64 %4, -65536
  %12 = zext i32 %10 to i64
  %13 = or i64 %11, %12
  store i64 %13, i64* %3, align 16
  %14 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 3
  store i64 %12, i64* %15, align 16
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_aaa() local_unnamed_addr #2 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 1
  %3 = load i64, i64* %2, align 16
  %4 = trunc i64 %3 to i32
  %5 = tail call i32 @helper_cc_compute_all(i32 noundef %4)
  %6 = and i32 %5, 16
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 0, i64 0
  %8 = load i64, i64* %7, align 16
  %9 = trunc i64 %8 to i32
  %10 = lshr i32 %9, 8
  %11 = and i32 %9, 15
  %12 = icmp ugt i32 %11, 9
  %13 = icmp ne i32 %6, 0
  %14 = select i1 %12, i1 true, i1 %13
  br i1 %14, label %15, label %24

15:                                               ; preds = %0
  %16 = and i32 %9, 254
  %17 = icmp ugt i32 %16, 249
  %18 = zext i1 %17 to i32
  %19 = add i32 %9, 6
  %20 = and i32 %19, 15
  %21 = add nuw nsw i32 %10, 1
  %22 = add nuw nsw i32 %21, %18
  %23 = or i32 %5, 17
  br label %26

24:                                               ; preds = %0
  %25 = and i32 %5, -18
  br label %26

26:                                               ; preds = %24, %15
  %27 = phi i32 [ %22, %15 ], [ %10, %24 ]
  %28 = phi i32 [ %20, %15 ], [ %11, %24 ]
  %29 = phi i32 [ %23, %15 ], [ %25, %24 ]
  %30 = and i64 %8, -65536
  %31 = zext i32 %28 to i64
  %32 = or i64 %30, %31
  %33 = shl i32 %27, 8
  %34 = and i32 %33, 65280
  %35 = zext i32 %34 to i64
  %36 = or i64 %32, %35
  store i64 %36, i64* %7, align 16
  %37 = sext i32 %29 to i64
  %38 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %39 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %38, i64 0, i32 2
  store i64 %37, i64* %39, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_aas() local_unnamed_addr #2 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 1
  %3 = load i64, i64* %2, align 16
  %4 = trunc i64 %3 to i32
  %5 = tail call i32 @helper_cc_compute_all(i32 noundef %4)
  %6 = and i32 %5, 16
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 0, i64 0
  %8 = load i64, i64* %7, align 16
  %9 = trunc i64 %8 to i32
  %10 = lshr i32 %9, 8
  %11 = and i32 %9, 15
  %12 = icmp ugt i32 %11, 9
  %13 = icmp ne i32 %6, 0
  %14 = select i1 %12, i1 true, i1 %13
  br i1 %14, label %15, label %24

15:                                               ; preds = %0
  %16 = and i32 %9, 254
  %17 = icmp ult i32 %16, 6
  %18 = sext i1 %17 to i32
  %19 = add i32 %9, 10
  %20 = and i32 %19, 15
  %21 = add nuw nsw i32 %10, 255
  %22 = add nsw i32 %21, %18
  %23 = or i32 %5, 17
  br label %26

24:                                               ; preds = %0
  %25 = and i32 %5, -18
  br label %26

26:                                               ; preds = %24, %15
  %27 = phi i32 [ %22, %15 ], [ %10, %24 ]
  %28 = phi i32 [ %20, %15 ], [ %11, %24 ]
  %29 = phi i32 [ %23, %15 ], [ %25, %24 ]
  %30 = and i64 %8, -65536
  %31 = zext i32 %28 to i64
  %32 = or i64 %30, %31
  %33 = shl i32 %27, 8
  %34 = and i32 %33, 65280
  %35 = zext i32 %34 to i64
  %36 = or i64 %32, %35
  store i64 %36, i64* %7, align 16
  %37 = sext i32 %29 to i64
  %38 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %39 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %38, i64 0, i32 2
  store i64 %37, i64* %39, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_daa() local_unnamed_addr #2 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 1
  %3 = load i64, i64* %2, align 16
  %4 = trunc i64 %3 to i32
  %5 = tail call i32 @helper_cc_compute_all(i32 noundef %4)
  %6 = and i32 %5, 1
  %7 = and i32 %5, 16
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 0, i64 0
  %9 = load i64, i64* %8, align 16
  %10 = trunc i64 %9 to i32
  %11 = and i32 %10, 255
  %12 = and i32 %10, 14
  %13 = icmp ugt i32 %12, 9
  %14 = icmp ne i32 %7, 0
  %15 = select i1 %13, i1 true, i1 %14
  %16 = add i32 %10, 6
  %17 = and i32 %16, 255
  %18 = select i1 %15, i32 %17, i32 %11
  %19 = select i1 %15, i32 16, i32 0
  %20 = icmp ugt i32 %11, 153
  %21 = icmp ne i32 %6, 0
  %22 = select i1 %20, i1 true, i1 %21
  %23 = add nuw nsw i32 %18, 96
  %24 = and i32 %23, 255
  %25 = select i1 %22, i32 %24, i32 %18
  %26 = zext i1 %22 to i32
  %27 = and i64 %9, -256
  %28 = zext i32 %25 to i64
  %29 = or i64 %27, %28
  store i64 %29, i64* %8, align 16
  %30 = icmp eq i32 %25, 0
  %31 = select i1 %30, i32 64, i32 0
  %32 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %28
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = and i32 %25, 128
  %36 = or i32 %26, %34
  %37 = or i32 %36, %19
  %38 = or i32 %37, %35
  %39 = or i32 %38, %31
  %40 = zext i32 %39 to i64
  %41 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %42 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %41, i64 0, i32 2
  store i64 %40, i64* %42, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_das() local_unnamed_addr #2 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 1
  %3 = load i64, i64* %2, align 16
  %4 = trunc i64 %3 to i32
  %5 = tail call i32 @helper_cc_compute_all(i32 noundef %4)
  %6 = and i32 %5, 1
  %7 = and i32 %5, 16
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 0, i64 0
  %9 = load i64, i64* %8, align 16
  %10 = trunc i64 %9 to i32
  %11 = and i32 %10, 255
  %12 = and i32 %10, 14
  %13 = icmp ugt i32 %12, 9
  %14 = icmp ne i32 %7, 0
  %15 = select i1 %13, i1 true, i1 %14
  br i1 %15, label %16, label %23

16:                                               ; preds = %0
  %17 = icmp ult i32 %11, 6
  %18 = icmp ne i32 %6, 0
  %19 = select i1 %17, i1 true, i1 %18
  %20 = select i1 %19, i32 17, i32 16
  %21 = add i32 %10, 250
  %22 = and i32 %21, 255
  br label %23

23:                                               ; preds = %0, %16
  %24 = phi i32 [ %22, %16 ], [ %11, %0 ]
  %25 = phi i32 [ %20, %16 ], [ 0, %0 ]
  %26 = icmp ugt i32 %11, 153
  %27 = icmp ne i32 %6, 0
  %28 = select i1 %26, i1 true, i1 %27
  %29 = add nuw nsw i32 %24, 160
  %30 = and i32 %29, 255
  %31 = select i1 %28, i32 %30, i32 %24
  %32 = zext i1 %28 to i32
  %33 = or i32 %25, %32
  %34 = and i64 %9, -256
  %35 = zext i32 %31 to i64
  %36 = or i64 %34, %35
  store i64 %36, i64* %8, align 16
  %37 = icmp eq i32 %31, 0
  %38 = select i1 %37, i32 64, i32 0
  %39 = getelementptr inbounds [256 x i8], [256 x i8]* @parity_table, i64 0, i64 %35
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i32
  %42 = and i32 %31, 128
  %43 = or i32 %33, %41
  %44 = or i32 %43, %42
  %45 = or i32 %44, %38
  %46 = zext i32 %45 to i64
  %47 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %48 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %47, i64 0, i32 2
  store i64 %46, i64* %48, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_into(i32 noundef %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 1
  %4 = load i64, i64* %3, align 16
  %5 = trunc i64 %4 to i32
  %6 = tail call i32 @helper_cc_compute_all(i32 noundef %5)
  %7 = and i32 %6, 2048
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  tail call void @raise_interrupt(%struct.CPUX86State* noundef nonnull %2, i32 noundef 4, i32 noundef 1, i32 noundef 0, i32 noundef %0) #28
  unreachable

10:                                               ; preds = %1
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpxchg8b(i64 noundef %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 1
  %4 = load i64, i64* %3, align 16
  %5 = trunc i64 %4 to i32
  %6 = tail call i32 @helper_cc_compute_all(i32 noundef %5)
  %7 = tail call fastcc i64 @cpu_ldq_data(%struct.CPUX86State* noundef %2, i64 noundef %0)
  %8 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %8, i64 0, i32 0, i64 2
  %10 = load i64, i64* %9, align 16
  %11 = shl i64 %10, 32
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %8, i64 0, i32 0, i64 0
  %13 = load i64, i64* %12, align 16
  %14 = and i64 %13, 4294967295
  %15 = or i64 %14, %11
  %16 = icmp eq i64 %7, %15
  br i1 %16, label %17, label %26

17:                                               ; preds = %1
  %18 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %8, i64 0, i32 0, i64 1
  %19 = load i64, i64* %18, align 8
  %20 = shl i64 %19, 32
  %21 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %8, i64 0, i32 0, i64 3
  %22 = load i64, i64* %21, align 8
  %23 = and i64 %22, 4294967295
  %24 = or i64 %23, %20
  tail call fastcc void @cpu_stq_data(%struct.CPUX86State* noundef nonnull %8, i64 noundef %0, i64 noundef %24)
  %25 = or i32 %6, 64
  br label %33

26:                                               ; preds = %1
  tail call fastcc void @cpu_stq_data(%struct.CPUX86State* noundef nonnull %8, i64 noundef %0, i64 noundef %7)
  %27 = lshr i64 %7, 32
  %28 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %29 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %28, i64 0, i32 0, i64 2
  store i64 %27, i64* %29, align 16
  %30 = and i64 %7, 4294967295
  %31 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %28, i64 0, i32 0, i64 0
  store i64 %30, i64* %31, align 16
  %32 = and i32 %6, -65
  br label %33

33:                                               ; preds = %26, %17
  %34 = phi i32 [ %25, %17 ], [ %32, %26 ]
  %35 = sext i32 %34 to i64
  %36 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %37 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %36, i64 0, i32 2
  store i64 %35, i64* %37, align 8
  ret void
}

; Function Attrs: uwtable
define internal fastcc i64 @cpu_ldq_data(%struct.CPUX86State* noundef %0, i64 noundef %1) unnamed_addr #3 {
  %3 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %7, label %6

6:                                                ; preds = %2
  tail call void @tcg_llvm_before_memory_access(i64 noundef %1, i64 noundef 0, i32 noundef 8, i32 noundef 0)
  br label %7

7:                                                ; preds = %6, %2
  %8 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %13, label %11

11:                                               ; preds = %7
  %12 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %1, i64 noundef 0, i64 noundef -1, i64 noundef 0)
  br label %13

13:                                               ; preds = %7, %11
  %14 = phi i64 [ %12, %11 ], [ %1, %7 ]
  %15 = lshr i64 %14, 12
  %16 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %15, i64 noundef 0, i64 noundef 4503599627370495, i64 noundef 0)
  %17 = and i64 %16, 1023
  %18 = getelementptr %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 21
  %19 = load i32, i32* %18, align 16
  %20 = and i32 %19, 3
  %21 = icmp eq i32 %20, 3
  %22 = zext i1 %21 to i64
  %23 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 82, i64 %22
  %24 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %23, align 8
  %25 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %24, i64 %17, i32 0
  %26 = load i64, i64* %25, align 8
  %27 = and i64 %26, -33
  %28 = and i64 %14, -4089
  %29 = icmp eq i64 %27, %28
  br i1 %29, label %33, label %30, !prof !5

30:                                               ; preds = %13
  %31 = zext i1 %21 to i32
  %32 = tail call i64 @helper_ldq_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %14, i32 noundef %31, i8* noundef null)
  br label %43

33:                                               ; preds = %13
  %34 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %24, i64 %17, i32 4
  %35 = load i64, i64* %34, align 8
  %36 = add i64 %35, %14
  %37 = inttoptr i64 %36 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %40 = load i32, i32* %39, align 4
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %43, label %42

42:                                               ; preds = %33
  tail call void @tcg_llvm_after_memory_access(i64 noundef %14, i64 noundef %38, i32 noundef 8, i32 noundef 0, i64 noundef 0)
  br label %43

43:                                               ; preds = %33, %42, %30
  %44 = phi i64 [ %32, %30 ], [ %38, %42 ], [ %38, %33 ]
  ret i64 %44
}

; Function Attrs: uwtable
define internal fastcc void @cpu_stq_data(%struct.CPUX86State* noundef %0, i64 noundef %1, i64 noundef %2) unnamed_addr #3 {
  %4 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %8, label %7

7:                                                ; preds = %3
  tail call void @tcg_llvm_before_memory_access(i64 noundef %1, i64 noundef %2, i32 noundef 8, i32 noundef 1)
  br label %8

8:                                                ; preds = %7, %3
  %9 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %14, label %12

12:                                               ; preds = %8
  %13 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %1, i64 noundef 0, i64 noundef -1, i64 noundef 0)
  br label %14

14:                                               ; preds = %8, %12
  %15 = phi i64 [ %13, %12 ], [ %1, %8 ]
  %16 = lshr i64 %15, 12
  %17 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %16, i64 noundef 0, i64 noundef 4503599627370495, i64 noundef 0)
  %18 = and i64 %17, 1023
  %19 = getelementptr %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 21
  %20 = load i32, i32* %19, align 16
  %21 = and i32 %20, 3
  %22 = icmp eq i32 %21, 3
  %23 = zext i1 %22 to i64
  %24 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 82, i64 %23
  %25 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %24, align 8
  %26 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %25, i64 %18, i32 1
  %27 = load i64, i64* %26, align 8
  %28 = and i64 %27, -33
  %29 = and i64 %15, -4089
  %30 = icmp eq i64 %28, %29
  br i1 %30, label %33, label %31, !prof !5

31:                                               ; preds = %14
  %32 = zext i1 %22 to i32
  tail call void @helper_stq_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %15, i64 noundef %2, i32 noundef %32, i8* noundef null)
  br label %42

33:                                               ; preds = %14
  %34 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %25, i64 %18, i32 4
  %35 = load i64, i64* %34, align 8
  %36 = add i64 %35, %15
  %37 = inttoptr i64 %36 to i64*
  store i64 %2, i64* %37, align 8
  %38 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %39 = load i32, i32* %38, align 4
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %42, label %41

41:                                               ; preds = %33
  tail call void @tcg_llvm_after_memory_access(i64 noundef %15, i64 noundef %2, i32 noundef 8, i32 noundef 2, i64 noundef 0)
  br label %42

42:                                               ; preds = %33, %41, %31
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpxchg16b(i64 noundef %0) local_unnamed_addr #3 {
  %2 = and i64 %0, 15
  %3 = icmp eq i64 %2, 0
  %4 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %3, label %6, label %5

5:                                                ; preds = %1
  tail call void @raise_exception_ra(%struct.CPUX86State* noundef %4, i32 noundef 13, i64 noundef 0) #28
  unreachable

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 1
  %8 = load i64, i64* %7, align 16
  %9 = trunc i64 %8 to i32
  %10 = tail call i32 @helper_cc_compute_all(i32 noundef %9)
  %11 = tail call fastcc i64 @cpu_ldq_data(%struct.CPUX86State* noundef %4, i64 noundef %0)
  %12 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %13 = add nuw i64 %0, 8
  %14 = tail call fastcc i64 @cpu_ldq_data(%struct.CPUX86State* noundef %12, i64 noundef %13)
  %15 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 0, i64 0
  %17 = load i64, i64* %16, align 16
  %18 = icmp eq i64 %11, %17
  br i1 %18, label %19, label %30

19:                                               ; preds = %6
  %20 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 0, i64 2
  %21 = load i64, i64* %20, align 16
  %22 = icmp eq i64 %14, %21
  br i1 %22, label %23, label %30

23:                                               ; preds = %19
  %24 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 0, i64 3
  %25 = load i64, i64* %24, align 8
  tail call fastcc void @cpu_stq_data(%struct.CPUX86State* noundef nonnull %15, i64 noundef %0, i64 noundef %25)
  %26 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %27 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %26, i64 0, i32 0, i64 1
  %28 = load i64, i64* %27, align 8
  tail call fastcc void @cpu_stq_data(%struct.CPUX86State* noundef %26, i64 noundef %13, i64 noundef %28)
  %29 = or i32 %10, 64
  br label %36

30:                                               ; preds = %19, %6
  tail call fastcc void @cpu_stq_data(%struct.CPUX86State* noundef nonnull %15, i64 noundef %0, i64 noundef %11)
  %31 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call fastcc void @cpu_stq_data(%struct.CPUX86State* noundef %31, i64 noundef %13, i64 noundef %14)
  %32 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %33 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %32, i64 0, i32 0, i64 2
  store i64 %14, i64* %33, align 16
  %34 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %32, i64 0, i32 0, i64 0
  store i64 %11, i64* %34, align 16
  %35 = and i32 %10, -65
  br label %36

36:                                               ; preds = %30, %23
  %37 = phi i32 [ %29, %23 ], [ %35, %30 ]
  %38 = sext i32 %37 to i64
  %39 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %40 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %39, i64 0, i32 2
  store i64 %38, i64* %40, align 8
  ret void
}

; Function Attrs: noreturn uwtable
define void @helper_single_step() local_unnamed_addr #4 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = tail call i32 @check_hw_breakpoints(%struct.CPUX86State* noundef %1, i32 noundef 1)
  %3 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %4 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 65, i64 6
  %5 = load i64, i64* %4, align 8
  %6 = or i64 %5, 16384
  store i64 %6, i64* %4, align 8
  tail call void @raise_exception(%struct.CPUX86State* noundef %3, i32 noundef 1) #28
  unreachable
}

declare i32 @check_hw_breakpoints(%struct.CPUX86State* noundef, i32 noundef) local_unnamed_addr #9

; Function Attrs: uwtable
define void @helper_cpuid() local_unnamed_addr #3 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = bitcast i32* %1 to i8*
  %6 = bitcast i32* %2 to i8*
  %7 = bitcast i32* %3 to i8*
  %8 = bitcast i32* %4 to i8*
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 21
  %11 = load i32, i32* %10, align 16
  %12 = and i32 %11, 2097152
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %20, label %14, !prof !5

14:                                               ; preds = %0
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 42
  %16 = load i64, i64* %15, align 16
  %17 = and i64 %16, 262144
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %20, label %19

19:                                               ; preds = %14
  tail call void @helper_vmexit(i32 noundef 114, i64 noundef 0)
  unreachable

20:                                               ; preds = %0, %14
  %21 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 0, i64 0
  %22 = load i64, i64* %21, align 16
  %23 = trunc i64 %22 to i32
  %24 = icmp eq i32 %23, 4
  %25 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 111
  br i1 %24, label %26, label %30

26:                                               ; preds = %20
  %27 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 0, i64 1
  %28 = load i64, i64* %27, align 8
  %29 = trunc i64 %28 to i32
  call void @cpu_x86_cpuid(%struct.cpuid_t* noundef nonnull %25, i32 noundef 4, i32 noundef %29, i32* noundef nonnull %1, i32* noundef nonnull %2, i32* noundef nonnull %3, i32* noundef nonnull %4)
  br label %31

30:                                               ; preds = %20
  call void @cpu_x86_cpuid(%struct.cpuid_t* noundef nonnull %25, i32 noundef %23, i32 noundef 0, i32* noundef nonnull %1, i32* noundef nonnull %2, i32* noundef nonnull %3, i32* noundef nonnull %4)
  br label %31

31:                                               ; preds = %30, %26
  %32 = load i32, i32* %1, align 4
  %33 = zext i32 %32 to i64
  %34 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %35 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %34, i64 0, i32 0, i64 0
  store i64 %33, i64* %35, align 16
  %36 = load i32, i32* %2, align 4
  %37 = zext i32 %36 to i64
  %38 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %39 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %38, i64 0, i32 0, i64 3
  store i64 %37, i64* %39, align 8
  %40 = load i32, i32* %3, align 4
  %41 = zext i32 %40 to i64
  %42 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %38, i64 0, i32 0, i64 1
  store i64 %41, i64* %42, align 8
  %43 = load i32, i32* %4, align 4
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %38, i64 0, i32 0, i64 2
  store i64 %44, i64* %45, align 16
  ret void
}

declare void @cpu_x86_cpuid(%struct.cpuid_t* noundef, i32 noundef, i32 noundef, i32* noundef, i32* noundef, i32* noundef, i32* noundef) local_unnamed_addr #9

; Function Attrs: uwtable
define void @helper_enter_level(i32 noundef %0, i32 noundef %1, i64 noundef %2) local_unnamed_addr #3 {
  %4 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 24, i64 2, i32 3
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 4194304
  %8 = icmp eq i32 %7, 0
  %9 = select i1 %8, i32 65535, i32 -1
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 24, i64 2, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 0, i64 5
  %13 = load i64, i64* %12, align 8
  %14 = trunc i64 %13 to i32
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 0, i64 4
  %16 = load i64, i64* %15, align 16
  %17 = trunc i64 %16 to i32
  %18 = icmp eq i32 %1, 0
  br i1 %18, label %61, label %19

19:                                               ; preds = %3
  %20 = add i32 %17, -4
  %21 = icmp eq i32 %0, 1
  br i1 %21, label %53, label %22

22:                                               ; preds = %19
  %23 = add i32 %17, -8
  %24 = add i32 %14, -4
  %25 = and i32 %23, %9
  %26 = zext i32 %25 to i64
  %27 = add i64 %11, %26
  %28 = and i32 %24, %9
  %29 = zext i32 %28 to i64
  %30 = add i64 %11, %29
  %31 = tail call fastcc i32 @cpu_ldl_data(%struct.CPUX86State* noundef %4, i64 noundef %30)
  tail call fastcc void @cpu_stl_data(%struct.CPUX86State* noundef %4, i64 noundef %27, i32 noundef %31)
  %32 = add nsw i32 %0, -2
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %50, label %34, !llvm.loop !7

34:                                               ; preds = %22, %34
  %35 = phi i32 [ %48, %34 ], [ %32, %22 ]
  %36 = phi i32 [ %40, %34 ], [ %24, %22 ]
  %37 = phi i32 [ %39, %34 ], [ %23, %22 ]
  %38 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %39 = add i32 %37, -4
  %40 = add i32 %36, -4
  %41 = and i32 %39, %9
  %42 = zext i32 %41 to i64
  %43 = add i64 %11, %42
  %44 = and i32 %40, %9
  %45 = zext i32 %44 to i64
  %46 = add i64 %11, %45
  %47 = tail call fastcc i32 @cpu_ldl_data(%struct.CPUX86State* noundef %38, i64 noundef %46)
  tail call fastcc void @cpu_stl_data(%struct.CPUX86State* noundef %38, i64 noundef %43, i32 noundef %47)
  %48 = add nsw i32 %35, -1
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %34, !llvm.loop !7

50:                                               ; preds = %34, %22
  %51 = phi i32 [ %23, %22 ], [ %39, %34 ]
  %52 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br label %53

53:                                               ; preds = %50, %19
  %54 = phi %struct.CPUX86State* [ %4, %19 ], [ %52, %50 ]
  %55 = phi i32 [ %20, %19 ], [ %51, %50 ]
  %56 = add i32 %55, -4
  %57 = and i32 %56, %9
  %58 = zext i32 %57 to i64
  %59 = add i64 %11, %58
  %60 = trunc i64 %2 to i32
  tail call fastcc void @cpu_stl_data(%struct.CPUX86State* noundef %54, i64 noundef %59, i32 noundef %60)
  br label %103

61:                                               ; preds = %3
  %62 = add i32 %17, -2
  %63 = icmp eq i32 %0, 1
  br i1 %63, label %95, label %64

64:                                               ; preds = %61
  %65 = add i32 %17, -4
  %66 = add i32 %14, -2
  %67 = and i32 %65, %9
  %68 = zext i32 %67 to i64
  %69 = add i64 %11, %68
  %70 = and i32 %66, %9
  %71 = zext i32 %70 to i64
  %72 = add i64 %11, %71
  %73 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* noundef %4, i64 noundef %72), !range !9
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* noundef %4, i64 noundef %69, i32 noundef %73)
  %74 = add nsw i32 %0, -2
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %92, label %76, !llvm.loop !10

76:                                               ; preds = %64, %76
  %77 = phi i32 [ %90, %76 ], [ %74, %64 ]
  %78 = phi i32 [ %82, %76 ], [ %66, %64 ]
  %79 = phi i32 [ %81, %76 ], [ %65, %64 ]
  %80 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %81 = add i32 %79, -2
  %82 = add i32 %78, -2
  %83 = and i32 %81, %9
  %84 = zext i32 %83 to i64
  %85 = add i64 %11, %84
  %86 = and i32 %82, %9
  %87 = zext i32 %86 to i64
  %88 = add i64 %11, %87
  %89 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* noundef %80, i64 noundef %88), !range !9
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* noundef %80, i64 noundef %85, i32 noundef %89)
  %90 = add nsw i32 %77, -1
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %76, !llvm.loop !10

92:                                               ; preds = %76, %64
  %93 = phi i32 [ %65, %64 ], [ %81, %76 ]
  %94 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br label %95

95:                                               ; preds = %92, %61
  %96 = phi %struct.CPUX86State* [ %4, %61 ], [ %94, %92 ]
  %97 = phi i32 [ %62, %61 ], [ %93, %92 ]
  %98 = add i32 %97, -2
  %99 = and i32 %98, %9
  %100 = zext i32 %99 to i64
  %101 = add i64 %11, %100
  %102 = trunc i64 %2 to i32
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* noundef %96, i64 noundef %101, i32 noundef %102)
  br label %103

103:                                              ; preds = %95, %53
  ret void
}

; Function Attrs: uwtable
define internal fastcc i32 @cpu_ldl_data(%struct.CPUX86State* noundef %0, i64 noundef %1) unnamed_addr #3 {
  %3 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %7, label %6

6:                                                ; preds = %2
  tail call void @tcg_llvm_before_memory_access(i64 noundef %1, i64 noundef 0, i32 noundef 4, i32 noundef 0)
  br label %7

7:                                                ; preds = %6, %2
  %8 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %13, label %11

11:                                               ; preds = %7
  %12 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %1, i64 noundef 0, i64 noundef -1, i64 noundef 0)
  br label %13

13:                                               ; preds = %7, %11
  %14 = phi i64 [ %12, %11 ], [ %1, %7 ]
  %15 = lshr i64 %14, 12
  %16 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %15, i64 noundef 0, i64 noundef 4503599627370495, i64 noundef 0)
  %17 = and i64 %16, 1023
  %18 = getelementptr %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 21
  %19 = load i32, i32* %18, align 16
  %20 = and i32 %19, 3
  %21 = icmp eq i32 %20, 3
  %22 = zext i1 %21 to i64
  %23 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 82, i64 %22
  %24 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %23, align 8
  %25 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %24, i64 %17, i32 0
  %26 = load i64, i64* %25, align 8
  %27 = and i64 %26, -33
  %28 = and i64 %14, -4093
  %29 = icmp eq i64 %27, %28
  br i1 %29, label %33, label %30, !prof !5

30:                                               ; preds = %13
  %31 = zext i1 %21 to i32
  %32 = tail call i32 @helper_ldl_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %14, i32 noundef %31, i8* noundef null)
  br label %44

33:                                               ; preds = %13
  %34 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %24, i64 %17, i32 4
  %35 = load i64, i64* %34, align 8
  %36 = add i64 %35, %14
  %37 = inttoptr i64 %36 to i32*
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %40 = load i32, i32* %39, align 4
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %44, label %42

42:                                               ; preds = %33
  %43 = zext i32 %38 to i64
  tail call void @tcg_llvm_after_memory_access(i64 noundef %14, i64 noundef %43, i32 noundef 4, i32 noundef 0, i64 noundef 0)
  br label %44

44:                                               ; preds = %33, %42, %30
  %45 = phi i32 [ %32, %30 ], [ %38, %42 ], [ %38, %33 ]
  ret i32 %45
}

; Function Attrs: uwtable
define internal fastcc void @cpu_stl_data(%struct.CPUX86State* noundef %0, i64 noundef %1, i32 noundef %2) unnamed_addr #3 {
  %4 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = zext i32 %2 to i64
  tail call void @tcg_llvm_before_memory_access(i64 noundef %1, i64 noundef %8, i32 noundef 4, i32 noundef 1)
  br label %9

9:                                                ; preds = %7, %3
  %10 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %15, label %13

13:                                               ; preds = %9
  %14 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %1, i64 noundef 0, i64 noundef -1, i64 noundef 0)
  br label %15

15:                                               ; preds = %9, %13
  %16 = phi i64 [ %14, %13 ], [ %1, %9 ]
  %17 = lshr i64 %16, 12
  %18 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %17, i64 noundef 0, i64 noundef 4503599627370495, i64 noundef 0)
  %19 = and i64 %18, 1023
  %20 = getelementptr %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 21
  %21 = load i32, i32* %20, align 16
  %22 = and i32 %21, 3
  %23 = icmp eq i32 %22, 3
  %24 = zext i1 %23 to i64
  %25 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 82, i64 %24
  %26 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %25, align 8
  %27 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %26, i64 %19, i32 1
  %28 = load i64, i64* %27, align 8
  %29 = and i64 %28, -33
  %30 = and i64 %16, -4093
  %31 = icmp eq i64 %29, %30
  br i1 %31, label %34, label %32, !prof !5

32:                                               ; preds = %15
  %33 = zext i1 %23 to i32
  tail call void @helper_stl_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %16, i32 noundef %2, i32 noundef %33, i8* noundef null)
  br label %44

34:                                               ; preds = %15
  %35 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %26, i64 %19, i32 4
  %36 = load i64, i64* %35, align 8
  %37 = add i64 %36, %16
  %38 = inttoptr i64 %37 to i32*
  store i32 %2, i32* %38, align 4
  %39 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %40 = load i32, i32* %39, align 4
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %44, label %42

42:                                               ; preds = %34
  %43 = zext i32 %2 to i64
  tail call void @tcg_llvm_after_memory_access(i64 noundef %16, i64 noundef %43, i32 noundef 4, i32 noundef 2, i64 noundef 0)
  br label %44

44:                                               ; preds = %34, %42, %32
  ret void
}

; Function Attrs: uwtable
define internal fastcc i32 @cpu_lduw_data(%struct.CPUX86State* noundef %0, i64 noundef %1) unnamed_addr #3 {
  %3 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %7, label %6

6:                                                ; preds = %2
  tail call void @tcg_llvm_before_memory_access(i64 noundef %1, i64 noundef 0, i32 noundef 2, i32 noundef 0)
  br label %7

7:                                                ; preds = %6, %2
  %8 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %13, label %11

11:                                               ; preds = %7
  %12 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %1, i64 noundef 0, i64 noundef -1, i64 noundef 0)
  br label %13

13:                                               ; preds = %7, %11
  %14 = phi i64 [ %12, %11 ], [ %1, %7 ]
  %15 = lshr i64 %14, 12
  %16 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %15, i64 noundef 0, i64 noundef 4503599627370495, i64 noundef 0)
  %17 = and i64 %16, 1023
  %18 = getelementptr %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 21
  %19 = load i32, i32* %18, align 16
  %20 = and i32 %19, 3
  %21 = icmp eq i32 %20, 3
  %22 = zext i1 %21 to i64
  %23 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 82, i64 %22
  %24 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %23, align 8
  %25 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %24, i64 %17, i32 0
  %26 = load i64, i64* %25, align 8
  %27 = and i64 %26, -33
  %28 = and i64 %14, -4095
  %29 = icmp eq i64 %27, %28
  br i1 %29, label %33, label %30, !prof !5

30:                                               ; preds = %13
  %31 = zext i1 %21 to i32
  %32 = tail call zeroext i16 @helper_ldw_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %14, i32 noundef %31, i8* noundef null)
  br label %44

33:                                               ; preds = %13
  %34 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %24, i64 %17, i32 4
  %35 = load i64, i64* %34, align 8
  %36 = add i64 %35, %14
  %37 = inttoptr i64 %36 to i16*
  %38 = load i16, i16* %37, align 2
  %39 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %40 = load i32, i32* %39, align 4
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %44, label %42

42:                                               ; preds = %33
  %43 = zext i16 %38 to i64
  tail call void @tcg_llvm_after_memory_access(i64 noundef %14, i64 noundef %43, i32 noundef 2, i32 noundef 0, i64 noundef 0)
  br label %44

44:                                               ; preds = %33, %42, %30
  %45 = phi i16 [ %32, %30 ], [ %38, %42 ], [ %38, %33 ]
  %46 = zext i16 %45 to i32
  ret i32 %46
}

; Function Attrs: uwtable
define internal fastcc void @cpu_stw_data(%struct.CPUX86State* noundef %0, i64 noundef %1, i32 noundef %2) unnamed_addr #3 {
  %4 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = zext i32 %2 to i64
  tail call void @tcg_llvm_before_memory_access(i64 noundef %1, i64 noundef %8, i32 noundef 2, i32 noundef 1)
  br label %9

9:                                                ; preds = %7, %3
  %10 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %15, label %13

13:                                               ; preds = %9
  %14 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %1, i64 noundef 0, i64 noundef -1, i64 noundef 0)
  br label %15

15:                                               ; preds = %9, %13
  %16 = phi i64 [ %14, %13 ], [ %1, %9 ]
  %17 = lshr i64 %16, 12
  %18 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %17, i64 noundef 0, i64 noundef 4503599627370495, i64 noundef 0)
  %19 = and i64 %18, 1023
  %20 = getelementptr %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 21
  %21 = load i32, i32* %20, align 16
  %22 = and i32 %21, 3
  %23 = icmp eq i32 %22, 3
  %24 = zext i1 %23 to i64
  %25 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 82, i64 %24
  %26 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %25, align 8
  %27 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %26, i64 %19, i32 1
  %28 = load i64, i64* %27, align 8
  %29 = and i64 %28, -33
  %30 = and i64 %16, -4095
  %31 = icmp eq i64 %29, %30
  br i1 %31, label %35, label %32, !prof !5

32:                                               ; preds = %15
  %33 = zext i1 %23 to i32
  %34 = trunc i32 %2 to i16
  tail call void @helper_stw_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %16, i16 noundef zeroext %34, i32 noundef %33, i8* noundef null)
  br label %46

35:                                               ; preds = %15
  %36 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %26, i64 %19, i32 4
  %37 = load i64, i64* %36, align 8
  %38 = add i64 %37, %16
  %39 = trunc i32 %2 to i16
  %40 = inttoptr i64 %38 to i16*
  store i16 %39, i16* %40, align 2
  %41 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %42 = load i32, i32* %41, align 4
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %46, label %44

44:                                               ; preds = %35
  %45 = zext i32 %2 to i64
  tail call void @tcg_llvm_after_memory_access(i64 noundef %16, i64 noundef %45, i32 noundef 2, i32 noundef 2, i64 noundef 0)
  br label %46

46:                                               ; preds = %35, %44, %32
  ret void
}

; Function Attrs: uwtable
define void @helper_enter64_level(i32 noundef %0, i32 noundef %1, i64 noundef %2) local_unnamed_addr #3 {
  %4 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 0, i64 5
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 0, i64 4
  %8 = load i64, i64* %7, align 16
  %9 = icmp eq i32 %1, 0
  br i1 %9, label %36, label %10

10:                                               ; preds = %3
  %11 = add i64 %8, -8
  %12 = icmp eq i32 %0, 1
  br i1 %12, label %32, label %13

13:                                               ; preds = %10
  %14 = add i64 %8, -16
  %15 = add i64 %6, -8
  %16 = tail call fastcc i64 @cpu_ldq_data(%struct.CPUX86State* noundef %4, i64 noundef %15)
  tail call fastcc void @cpu_stq_data(%struct.CPUX86State* noundef %4, i64 noundef %14, i64 noundef %16)
  %17 = add nsw i32 %0, -2
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %29, label %19, !llvm.loop !11

19:                                               ; preds = %13, %19
  %20 = phi i32 [ %27, %19 ], [ %17, %13 ]
  %21 = phi i64 [ %25, %19 ], [ %15, %13 ]
  %22 = phi i64 [ %24, %19 ], [ %14, %13 ]
  %23 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %24 = add i64 %22, -8
  %25 = add i64 %21, -8
  %26 = tail call fastcc i64 @cpu_ldq_data(%struct.CPUX86State* noundef %23, i64 noundef %25)
  tail call fastcc void @cpu_stq_data(%struct.CPUX86State* noundef %23, i64 noundef %24, i64 noundef %26)
  %27 = add nsw i32 %20, -1
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %19, !llvm.loop !11

29:                                               ; preds = %19, %13
  %30 = phi i64 [ %14, %13 ], [ %24, %19 ]
  %31 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br label %32

32:                                               ; preds = %29, %10
  %33 = phi %struct.CPUX86State* [ %4, %10 ], [ %31, %29 ]
  %34 = phi i64 [ %11, %10 ], [ %30, %29 ]
  %35 = add i64 %34, -8
  tail call fastcc void @cpu_stq_data(%struct.CPUX86State* noundef %33, i64 noundef %35, i64 noundef %2)
  br label %63

36:                                               ; preds = %3
  %37 = add i64 %8, -2
  %38 = icmp eq i32 %0, 1
  br i1 %38, label %58, label %39

39:                                               ; preds = %36
  %40 = add i64 %8, -4
  %41 = add i64 %6, -2
  %42 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* noundef %4, i64 noundef %41), !range !9
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* noundef %4, i64 noundef %40, i32 noundef %42)
  %43 = add nsw i32 %0, -2
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %55, label %45, !llvm.loop !12

45:                                               ; preds = %39, %45
  %46 = phi i32 [ %53, %45 ], [ %43, %39 ]
  %47 = phi i64 [ %51, %45 ], [ %41, %39 ]
  %48 = phi i64 [ %50, %45 ], [ %40, %39 ]
  %49 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %50 = add i64 %48, -2
  %51 = add i64 %47, -2
  %52 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* noundef %49, i64 noundef %51), !range !9
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* noundef %49, i64 noundef %50, i32 noundef %52)
  %53 = add nsw i32 %46, -1
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %45, !llvm.loop !12

55:                                               ; preds = %45, %39
  %56 = phi i64 [ %40, %39 ], [ %50, %45 ]
  %57 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br label %58

58:                                               ; preds = %55, %36
  %59 = phi %struct.CPUX86State* [ %4, %36 ], [ %57, %55 ]
  %60 = phi i64 [ %37, %36 ], [ %56, %55 ]
  %61 = add i64 %60, -2
  %62 = trunc i64 %2 to i32
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* noundef %59, i64 noundef %61, i32 noundef %62)
  br label %63

63:                                               ; preds = %58, %32
  ret void
}

; Function Attrs: uwtable
define void @helper_lldt(i32 noundef %0) local_unnamed_addr #3 {
  %2 = and i32 %0, 65532
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %8

4:                                                ; preds = %1
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 25, i32 1
  store i64 0, i64* %6, align 8
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 25, i32 2
  store i32 0, i32* %7, align 16
  br label %92

8:                                                ; preds = %1
  %9 = and i32 %0, 4
  %10 = icmp eq i32 %9, 0
  %11 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %10, label %13, label %12

12:                                               ; preds = %8
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef %11, i32 noundef 13, i32 noundef %2, i64 noundef 0) #28
  unreachable

13:                                               ; preds = %8
  %14 = and i32 %0, 65528
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %11, i64 0, i32 21
  %16 = load i32, i32* %15, align 16
  %17 = and i32 %16, 16384
  %18 = icmp eq i32 %17, 0
  %19 = select i1 %18, i32 7, i32 15
  %20 = add nuw nsw i32 %19, %14
  %21 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %11, i64 0, i32 27, i32 2
  %22 = load i32, i32* %21, align 8
  %23 = icmp ugt i32 %20, %22
  br i1 %23, label %24, label %25

24:                                               ; preds = %13
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %11, i32 noundef 13, i32 noundef %2, i64 noundef 0) #28
  unreachable

25:                                               ; preds = %13
  %26 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %11, i64 0, i32 27, i32 1
  %27 = load i64, i64* %26, align 8
  %28 = zext i32 %14 to i64
  %29 = add i64 %27, %28
  %30 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef nonnull %11, i64 noundef %29)
  %31 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %32 = add i64 %29, 4
  %33 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef %31, i64 noundef %32)
  %34 = and i32 %33, 7936
  %35 = icmp eq i32 %34, 512
  br i1 %35, label %38, label %36

36:                                               ; preds = %25
  %37 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef %37, i32 noundef 13, i32 noundef %2, i64 noundef 0) #28
  unreachable

38:                                               ; preds = %25
  %39 = and i32 %33, 32768
  %40 = icmp eq i32 %39, 0
  %41 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %40, label %42, label %43

42:                                               ; preds = %38
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef %41, i32 noundef 11, i32 noundef %2, i64 noundef 0) #28
  unreachable

43:                                               ; preds = %38
  %44 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %41, i64 0, i32 21
  %45 = load i32, i32* %44, align 16
  %46 = and i32 %45, 16384
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %73, label %48

48:                                               ; preds = %43
  %49 = add i64 %29, 8
  %50 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef nonnull %41, i64 noundef %49)
  %51 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %52 = lshr i32 %30, 16
  %53 = shl i32 %33, 16
  %54 = and i32 %53, 16711680
  %55 = and i32 %33, -16777216
  %56 = or i32 %55, %52
  %57 = or i32 %56, %54
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %51, i64 0, i32 25, i32 1
  %60 = and i32 %30, 65535
  %61 = and i32 %33, 983040
  %62 = or i32 %61, %60
  %63 = and i32 %33, 8388608
  %64 = icmp eq i32 %63, 0
  %65 = shl nuw i32 %62, 12
  %66 = or i32 %65, 4095
  %67 = select i1 %64, i32 %62, i32 %66
  %68 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %51, i64 0, i32 25, i32 2
  store i32 %67, i32* %68, align 8
  %69 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %51, i64 0, i32 25, i32 3
  store i32 %33, i32* %69, align 4
  %70 = zext i32 %50 to i64
  %71 = shl nuw i64 %70, 32
  %72 = or i64 %71, %58
  store i64 %72, i64* %59, align 8
  br label %92

73:                                               ; preds = %43
  %74 = lshr i32 %30, 16
  %75 = shl i32 %33, 16
  %76 = and i32 %75, 16711680
  %77 = and i32 %33, -16777216
  %78 = or i32 %77, %74
  %79 = or i32 %78, %76
  %80 = zext i32 %79 to i64
  %81 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %41, i64 0, i32 25, i32 1
  store i64 %80, i64* %81, align 8
  %82 = and i32 %30, 65535
  %83 = and i32 %33, 983040
  %84 = or i32 %83, %82
  %85 = and i32 %33, 8388608
  %86 = icmp eq i32 %85, 0
  %87 = shl nuw i32 %84, 12
  %88 = or i32 %87, 4095
  %89 = select i1 %86, i32 %84, i32 %88
  %90 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %41, i64 0, i32 25, i32 2
  store i32 %89, i32* %90, align 8
  %91 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %41, i64 0, i32 25, i32 3
  store i32 %33, i32* %91, align 4
  br label %92

92:                                               ; preds = %48, %73, %4
  %93 = phi %struct.CPUX86State* [ %51, %48 ], [ %41, %73 ], [ %5, %4 ]
  %94 = and i32 %0, 65535
  %95 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %93, i64 0, i32 25, i32 0
  store i32 %94, i32* %95, align 16
  ret void
}

; Function Attrs: uwtable
define void @helper_ltr(i32 noundef %0) local_unnamed_addr #3 {
  %2 = and i32 %0, 65532
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %9

4:                                                ; preds = %1
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 26, i32 1
  %7 = bitcast i64* %6 to i8*
  %8 = call i8* @memset(i8* %7, i32 0, i64 16)
  br label %104

9:                                                ; preds = %1
  %10 = and i32 %0, 4
  %11 = icmp eq i32 %10, 0
  %12 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %11, label %14, label %13

13:                                               ; preds = %9
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef %12, i32 noundef 13, i32 noundef %2, i64 noundef 0) #28
  unreachable

14:                                               ; preds = %9
  %15 = and i32 %0, 65528
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %12, i64 0, i32 21
  %17 = load i32, i32* %16, align 16
  %18 = and i32 %17, 16384
  %19 = icmp eq i32 %18, 0
  %20 = select i1 %19, i32 7, i32 15
  %21 = add nuw nsw i32 %20, %15
  %22 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %12, i64 0, i32 27, i32 2
  %23 = load i32, i32* %22, align 8
  %24 = icmp ugt i32 %21, %23
  br i1 %24, label %25, label %26

25:                                               ; preds = %14
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %12, i32 noundef 13, i32 noundef %2, i64 noundef 0) #28
  unreachable

26:                                               ; preds = %14
  %27 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %12, i64 0, i32 27, i32 1
  %28 = load i64, i64* %27, align 8
  %29 = zext i32 %15 to i64
  %30 = add i64 %28, %29
  %31 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef nonnull %12, i64 noundef %30)
  %32 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %33 = add i64 %30, 4
  %34 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef %32, i64 noundef %33)
  %35 = and i32 %34, 5888
  %36 = icmp eq i32 %35, 256
  br i1 %36, label %39, label %37

37:                                               ; preds = %26
  %38 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef %38, i32 noundef 13, i32 noundef %2, i64 noundef 0) #28
  unreachable

39:                                               ; preds = %26
  %40 = and i32 %34, 32768
  %41 = icmp eq i32 %40, 0
  %42 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %41, label %43, label %44

43:                                               ; preds = %39
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef %42, i32 noundef 11, i32 noundef %2, i64 noundef 0) #28
  unreachable

44:                                               ; preds = %39
  %45 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %42, i64 0, i32 21
  %46 = load i32, i32* %45, align 16
  %47 = and i32 %46, 16384
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %81, label %49

49:                                               ; preds = %44
  %50 = add i64 %30, 8
  %51 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef nonnull %42, i64 noundef %50)
  %52 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %53 = add i64 %30, 12
  %54 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef %52, i64 noundef %53)
  %55 = and i32 %54, 3840
  %56 = icmp eq i32 %55, 0
  %57 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %56, label %59, label %58

58:                                               ; preds = %49
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef %57, i32 noundef 13, i32 noundef %2, i64 noundef 0) #28
  unreachable

59:                                               ; preds = %49
  %60 = lshr i32 %31, 16
  %61 = shl i32 %34, 16
  %62 = and i32 %61, 16711680
  %63 = and i32 %34, -16777216
  %64 = or i32 %63, %60
  %65 = or i32 %64, %62
  %66 = zext i32 %65 to i64
  %67 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %57, i64 0, i32 26, i32 1
  %68 = and i32 %31, 65535
  %69 = and i32 %34, 983040
  %70 = or i32 %69, %68
  %71 = and i32 %34, 8388608
  %72 = icmp eq i32 %71, 0
  %73 = shl nuw i32 %70, 12
  %74 = or i32 %73, 4095
  %75 = select i1 %72, i32 %70, i32 %74
  %76 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %57, i64 0, i32 26, i32 2
  store i32 %75, i32* %76, align 8
  %77 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %57, i64 0, i32 26, i32 3
  store i32 %34, i32* %77, align 4
  %78 = zext i32 %51 to i64
  %79 = shl nuw i64 %78, 32
  %80 = or i64 %79, %66
  store i64 %80, i64* %67, align 8
  br label %100

81:                                               ; preds = %44
  %82 = lshr i32 %31, 16
  %83 = shl i32 %34, 16
  %84 = and i32 %83, 16711680
  %85 = and i32 %34, -16777216
  %86 = or i32 %85, %82
  %87 = or i32 %86, %84
  %88 = zext i32 %87 to i64
  %89 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %42, i64 0, i32 26, i32 1
  store i64 %88, i64* %89, align 8
  %90 = and i32 %31, 65535
  %91 = and i32 %34, 983040
  %92 = or i32 %91, %90
  %93 = and i32 %34, 8388608
  %94 = icmp eq i32 %93, 0
  %95 = shl nuw i32 %92, 12
  %96 = or i32 %95, 4095
  %97 = select i1 %94, i32 %92, i32 %96
  %98 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %42, i64 0, i32 26, i32 2
  store i32 %97, i32* %98, align 8
  %99 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %42, i64 0, i32 26, i32 3
  store i32 %34, i32* %99, align 4
  br label %100

100:                                              ; preds = %81, %59
  %101 = phi %struct.CPUX86State* [ %42, %81 ], [ %57, %59 ]
  %102 = or i32 %34, 512
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* noundef nonnull %101, i64 noundef %33, i32 noundef %102)
  %103 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br label %104

104:                                              ; preds = %100, %4
  %105 = phi %struct.CPUX86State* [ %103, %100 ], [ %5, %4 ]
  %106 = and i32 %0, 65535
  %107 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %105, i64 0, i32 26, i32 0
  store i32 %106, i32* %107, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_load_seg(i32 noundef %0, i32 noundef %1) local_unnamed_addr #3 {
  %3 = and i32 %1, 65535
  %4 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 21
  %6 = load i32, i32* %5, align 16
  %7 = and i32 %6, 3
  %8 = and i32 %1, 65532
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %78

10:                                               ; preds = %2
  %11 = icmp eq i32 %0, 2
  br i1 %11, label %66, label %12

12:                                               ; preds = %10
  %13 = sext i32 %0 to i64
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 24, i64 %13, i32 0
  store i32 %3, i32* %14, align 8
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 24, i64 %13, i32 1
  %16 = icmp eq i32 %0, 1
  %17 = bitcast i64* %15 to i8*
  %18 = call i8* @memset(i8* %17, i32 0, i64 16)
  %19 = load i32, i32* %5, align 16
  br i1 %16, label %20, label %27

20:                                               ; preds = %12
  %21 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 24, i64 1, i32 3
  %22 = load i32, i32* %21, align 4
  %23 = lshr i32 %22, 18
  %24 = and i32 %23, 16
  %25 = and i32 %19, -32785
  %26 = or i32 %24, %25
  br label %27

27:                                               ; preds = %20, %12
  %28 = phi i32 [ %26, %20 ], [ %19, %12 ]
  %29 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 24, i64 2, i32 3
  %30 = load i32, i32* %29, align 4
  %31 = lshr i32 %30, 17
  %32 = and i32 %31, 32
  %33 = and i32 %28, 32768
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %62

35:                                               ; preds = %27
  %36 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 29, i64 0
  %37 = load i64, i64* %36, align 16
  %38 = and i64 %37, 1
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %48, label %40

40:                                               ; preds = %35
  %41 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 20
  %42 = load i64, i64* %41, align 8
  %43 = and i64 %42, 131072
  %44 = icmp ne i64 %43, 0
  %45 = and i32 %28, 16
  %46 = icmp eq i32 %45, 0
  %47 = select i1 %44, i1 true, i1 %46
  br i1 %47, label %48, label %50

48:                                               ; preds = %40, %35
  %49 = or i32 %32, 64
  br label %62

50:                                               ; preds = %40
  %51 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 24, i64 3, i32 1
  %52 = load i64, i64* %51, align 8
  %53 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 24, i64 0, i32 1
  %54 = load i64, i64* %53, align 8
  %55 = or i64 %54, %52
  %56 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 24, i64 2, i32 1
  %57 = load i64, i64* %56, align 8
  %58 = or i64 %55, %57
  %59 = icmp eq i64 %58, 0
  %60 = select i1 %59, i32 0, i32 64
  %61 = or i32 %60, %32
  br label %62

62:                                               ; preds = %27, %48, %50
  %63 = phi i32 [ %32, %27 ], [ %49, %48 ], [ %61, %50 ]
  %64 = and i32 %28, -97
  %65 = or i32 %63, %64
  store i32 %65, i32* %5, align 16
  br label %229

66:                                               ; preds = %10
  %67 = and i32 %6, 32768
  %68 = icmp eq i32 %67, 0
  %69 = icmp eq i32 %7, 3
  %70 = or i1 %68, %69
  br i1 %70, label %77, label %71

71:                                               ; preds = %66
  %72 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 24, i64 2, i32 0
  store i32 %3, i32* %72, align 8
  %73 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 24, i64 2, i32 1
  %74 = and i32 %6, -97
  %75 = bitcast i64* %73 to i8*
  %76 = call i8* @memset(i8* %75, i32 0, i64 16)
  store i32 %74, i32* %5, align 16
  br label %229

77:                                               ; preds = %66
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %4, i32 noundef 13, i32 noundef 0, i64 noundef 0) #28
  unreachable

78:                                               ; preds = %2
  %79 = and i32 %1, 4
  %80 = icmp eq i32 %79, 0
  %81 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 25
  %82 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 27
  %83 = select i1 %80, %struct.SegmentCache* %82, %struct.SegmentCache* %81
  %84 = and i32 %1, 65528
  %85 = or i32 %84, 7
  %86 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %83, i64 0, i32 2
  %87 = load i32, i32* %86, align 8
  %88 = icmp ugt i32 %85, %87
  br i1 %88, label %89, label %90

89:                                               ; preds = %78
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %4, i32 noundef 13, i32 noundef %8, i64 noundef 0) #28
  unreachable

90:                                               ; preds = %78
  %91 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %83, i64 0, i32 1
  %92 = load i64, i64* %91, align 8
  %93 = zext i32 %84 to i64
  %94 = add i64 %92, %93
  %95 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef nonnull %4, i64 noundef %94)
  %96 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %97 = add i64 %94, 4
  %98 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef %96, i64 noundef %97)
  %99 = and i32 %98, 4096
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %101, label %103

101:                                              ; preds = %90
  %102 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef %102, i32 noundef 13, i32 noundef %8, i64 noundef 0) #28
  unreachable

103:                                              ; preds = %90
  %104 = and i32 %1, 3
  %105 = lshr i32 %98, 13
  %106 = and i32 %105, 3
  %107 = icmp eq i32 %0, 2
  %108 = and i32 %98, 2560
  br i1 %107, label %109, label %119

109:                                              ; preds = %103
  %110 = icmp eq i32 %108, 512
  br i1 %110, label %113, label %111

111:                                              ; preds = %109
  %112 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef %112, i32 noundef 13, i32 noundef %8, i64 noundef 0) #28
  unreachable

113:                                              ; preds = %109
  %114 = icmp eq i32 %104, %7
  %115 = icmp eq i32 %106, %7
  %116 = select i1 %114, i1 %115, i1 false
  br i1 %116, label %135, label %117

117:                                              ; preds = %113
  %118 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef %118, i32 noundef 13, i32 noundef %8, i64 noundef 0) #28
  unreachable

119:                                              ; preds = %103
  %120 = icmp eq i32 %108, 2048
  br i1 %120, label %121, label %123

121:                                              ; preds = %119
  %122 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef %122, i32 noundef 13, i32 noundef %8, i64 noundef 0) #28
  unreachable

123:                                              ; preds = %119
  %124 = and i32 %98, 3072
  %125 = icmp eq i32 %124, 3072
  br i1 %125, label %132, label %126

126:                                              ; preds = %123
  %127 = icmp ult i32 %106, %7
  %128 = icmp ult i32 %106, %104
  %129 = or i1 %127, %128
  br i1 %129, label %130, label %132

130:                                              ; preds = %126
  %131 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef %131, i32 noundef 13, i32 noundef %8, i64 noundef 0) #28
  unreachable

132:                                              ; preds = %126, %123
  %133 = and i32 %98, 32768
  %134 = icmp eq i32 %133, 0
  br i1 %134, label %140, label %142

135:                                              ; preds = %113
  %136 = and i32 %98, 32768
  %137 = icmp eq i32 %136, 0
  br i1 %137, label %138, label %142

138:                                              ; preds = %135
  %139 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef %139, i32 noundef 12, i32 noundef %8, i64 noundef 0) #28
  unreachable

140:                                              ; preds = %132
  %141 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef %141, i32 noundef 11, i32 noundef %8, i64 noundef 0) #28
  unreachable

142:                                              ; preds = %135, %132
  %143 = and i32 %98, 256
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %145, label %148

145:                                              ; preds = %142
  %146 = or i32 %98, 256
  %147 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* noundef %147, i64 noundef %97, i32 noundef %146)
  br label %148

148:                                              ; preds = %145, %142
  %149 = phi i32 [ %98, %142 ], [ %146, %145 ]
  %150 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %151 = lshr i32 %95, 16
  %152 = shl i32 %149, 16
  %153 = and i32 %152, 16711680
  %154 = and i32 %149, -16777216
  %155 = or i32 %154, %151
  %156 = or i32 %155, %153
  %157 = zext i32 %156 to i64
  %158 = and i32 %95, 65535
  %159 = and i32 %149, 983040
  %160 = or i32 %159, %158
  %161 = and i32 %149, 8388608
  %162 = icmp eq i32 %161, 0
  %163 = shl nuw i32 %160, 12
  %164 = or i32 %163, 4095
  %165 = select i1 %162, i32 %160, i32 %164
  %166 = sext i32 %0 to i64
  %167 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %150, i64 0, i32 24, i64 %166, i32 0
  store i32 %3, i32* %167, align 8
  %168 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %150, i64 0, i32 24, i64 %166, i32 1
  store i64 %157, i64* %168, align 8
  %169 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %150, i64 0, i32 24, i64 %166, i32 2
  store i32 %165, i32* %169, align 8
  %170 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %150, i64 0, i32 24, i64 %166, i32 3
  store i32 %149, i32* %170, align 4
  %171 = icmp eq i32 %0, 1
  %172 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %150, i64 0, i32 21
  %173 = load i32, i32* %172, align 16
  br i1 %171, label %174, label %190

174:                                              ; preds = %148
  %175 = and i32 %173, 16384
  %176 = icmp eq i32 %175, 0
  %177 = and i32 %149, 2097152
  %178 = icmp eq i32 %177, 0
  %179 = or i1 %178, %176
  br i1 %179, label %183, label %180

180:                                              ; preds = %174
  %181 = and i32 %173, -32881
  %182 = or i32 %181, 32816
  br label %190

183:                                              ; preds = %174
  %184 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %150, i64 0, i32 24, i64 1, i32 3
  %185 = load i32, i32* %184, align 4
  %186 = lshr i32 %185, 18
  %187 = and i32 %186, 16
  %188 = and i32 %173, -32785
  %189 = or i32 %187, %188
  br label %190

190:                                              ; preds = %183, %180, %148
  %191 = phi i32 [ %182, %180 ], [ %189, %183 ], [ %173, %148 ]
  %192 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %150, i64 0, i32 24, i64 2, i32 3
  %193 = load i32, i32* %192, align 4
  %194 = lshr i32 %193, 17
  %195 = and i32 %194, 32
  %196 = and i32 %191, 32768
  %197 = icmp eq i32 %196, 0
  br i1 %197, label %198, label %225

198:                                              ; preds = %190
  %199 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %150, i64 0, i32 29, i64 0
  %200 = load i64, i64* %199, align 16
  %201 = and i64 %200, 1
  %202 = icmp eq i64 %201, 0
  br i1 %202, label %211, label %203

203:                                              ; preds = %198
  %204 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %150, i64 0, i32 20
  %205 = load i64, i64* %204, align 8
  %206 = and i64 %205, 131072
  %207 = icmp ne i64 %206, 0
  %208 = and i32 %191, 16
  %209 = icmp eq i32 %208, 0
  %210 = select i1 %207, i1 true, i1 %209
  br i1 %210, label %211, label %213

211:                                              ; preds = %203, %198
  %212 = or i32 %195, 64
  br label %225

213:                                              ; preds = %203
  %214 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %150, i64 0, i32 24, i64 3, i32 1
  %215 = load i64, i64* %214, align 8
  %216 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %150, i64 0, i32 24, i64 0, i32 1
  %217 = load i64, i64* %216, align 8
  %218 = or i64 %217, %215
  %219 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %150, i64 0, i32 24, i64 2, i32 1
  %220 = load i64, i64* %219, align 8
  %221 = or i64 %218, %220
  %222 = icmp eq i64 %221, 0
  %223 = select i1 %222, i32 0, i32 64
  %224 = or i32 %223, %195
  br label %225

225:                                              ; preds = %190, %211, %213
  %226 = phi i32 [ %195, %190 ], [ %212, %211 ], [ %224, %213 ]
  %227 = and i32 %191, -97
  %228 = or i32 %226, %227
  store i32 %228, i32* %172, align 16
  br label %229

229:                                              ; preds = %62, %71, %225
  ret void
}

; Function Attrs: uwtable
define void @helper_ljmp_protected(i32 noundef %0, i64 noundef %1, i32 noundef %2) local_unnamed_addr #3 {
  %4 = and i32 %0, 65532
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %8

6:                                                ; preds = %3
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef %7, i32 noundef 13, i32 noundef 0, i64 noundef 0) #28
  unreachable

8:                                                ; preds = %3
  %9 = and i32 %0, 4
  %10 = icmp eq i32 %9, 0
  %11 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %11, i64 0, i32 25
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %11, i64 0, i32 27
  %14 = select i1 %10, %struct.SegmentCache* %13, %struct.SegmentCache* %12
  %15 = or i32 %0, 7
  %16 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %14, i64 0, i32 2
  %17 = load i32, i32* %16, align 8
  %18 = icmp ugt i32 %15, %17
  br i1 %18, label %19, label %20

19:                                               ; preds = %8
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef %11, i32 noundef 13, i32 noundef %4, i64 noundef 0) #28
  unreachable

20:                                               ; preds = %8
  %21 = and i32 %0, -8
  %22 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %14, i64 0, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = sext i32 %21 to i64
  %25 = add i64 %23, %24
  %26 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef %11, i64 noundef %25)
  %27 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %28 = add i64 %25, 4
  %29 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef %27, i64 noundef %28)
  %30 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %31 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %30, i64 0, i32 21
  %32 = load i32, i32* %31, align 16
  %33 = and i32 %32, 3
  %34 = and i32 %29, 4096
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %134, label %36

36:                                               ; preds = %20
  %37 = and i32 %29, 2048
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %40

39:                                               ; preds = %36
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %30, i32 noundef 13, i32 noundef %4, i64 noundef 0) #28
  unreachable

40:                                               ; preds = %36
  %41 = lshr i32 %29, 13
  %42 = and i32 %41, 3
  %43 = and i32 %29, 1024
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %48, label %45

45:                                               ; preds = %40
  %46 = icmp ugt i32 %42, %33
  br i1 %46, label %47, label %55

47:                                               ; preds = %45
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %30, i32 noundef 13, i32 noundef %4, i64 noundef 0) #28
  unreachable

48:                                               ; preds = %40
  %49 = and i32 %0, 3
  %50 = icmp ugt i32 %49, %33
  br i1 %50, label %51, label %52

51:                                               ; preds = %48
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %30, i32 noundef 13, i32 noundef %4, i64 noundef 0) #28
  unreachable

52:                                               ; preds = %48
  %53 = icmp eq i32 %42, %33
  br i1 %53, label %55, label %54

54:                                               ; preds = %52
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %30, i32 noundef 13, i32 noundef %4, i64 noundef 0) #28
  unreachable

55:                                               ; preds = %52, %45
  %56 = and i32 %29, 32768
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %59

58:                                               ; preds = %55
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %30, i32 noundef 11, i32 noundef %4, i64 noundef 0) #28
  unreachable

59:                                               ; preds = %55
  %60 = and i32 %26, 65535
  %61 = and i32 %29, 983040
  %62 = or i32 %61, %60
  %63 = and i32 %29, 8388608
  %64 = icmp eq i32 %63, 0
  %65 = shl nuw i32 %62, 12
  %66 = or i32 %65, 4095
  %67 = select i1 %64, i32 %62, i32 %66
  %68 = zext i32 %67 to i64
  %69 = icmp ult i64 %68, %1
  %70 = and i32 %32, 16384
  %71 = icmp eq i32 %70, 0
  %72 = select i1 %69, i1 %71, i1 false
  %73 = and i32 %29, 2097152
  %74 = icmp eq i32 %73, 0
  %75 = select i1 %72, i1 %74, i1 false
  br i1 %75, label %76, label %77

76:                                               ; preds = %59
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %30, i32 noundef 13, i32 noundef %4, i64 noundef 0) #28
  unreachable

77:                                               ; preds = %59
  %78 = or i32 %33, %4
  %79 = lshr i32 %26, 16
  %80 = shl i32 %29, 16
  %81 = and i32 %80, 16711680
  %82 = and i32 %29, -16777216
  %83 = or i32 %82, %79
  %84 = or i32 %83, %81
  %85 = zext i32 %84 to i64
  %86 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %30, i64 0, i32 24, i64 1, i32 0
  store i32 %78, i32* %86, align 8
  %87 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %30, i64 0, i32 24, i64 1, i32 1
  store i64 %85, i64* %87, align 8
  %88 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %30, i64 0, i32 24, i64 1, i32 2
  store i32 %67, i32* %88, align 8
  %89 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %30, i64 0, i32 24, i64 1, i32 3
  store i32 %29, i32* %89, align 4
  %90 = or i1 %74, %71
  %91 = lshr i32 %29, 18
  %92 = and i32 %91, 16
  %93 = select i1 %90, i32 %92, i32 32816
  %94 = and i32 %32, -32881
  %95 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %30, i64 0, i32 24, i64 2, i32 3
  %96 = load i32, i32* %95, align 4
  %97 = lshr i32 %96, 17
  %98 = and i32 %97, 32
  %99 = and i32 %93, 32768
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %101, label %128

101:                                              ; preds = %77
  %102 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %30, i64 0, i32 29, i64 0
  %103 = load i64, i64* %102, align 16
  %104 = and i64 %103, 1
  %105 = icmp eq i64 %104, 0
  br i1 %105, label %114, label %106

106:                                              ; preds = %101
  %107 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %30, i64 0, i32 20
  %108 = load i64, i64* %107, align 8
  %109 = and i64 %108, 131072
  %110 = icmp ne i64 %109, 0
  %111 = and i32 %93, 16
  %112 = icmp eq i32 %111, 0
  %113 = select i1 %110, i1 true, i1 %112
  br i1 %113, label %114, label %116

114:                                              ; preds = %106, %101
  %115 = or i32 %98, 64
  br label %128

116:                                              ; preds = %106
  %117 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %30, i64 0, i32 24, i64 3, i32 1
  %118 = load i64, i64* %117, align 8
  %119 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %30, i64 0, i32 24, i64 0, i32 1
  %120 = load i64, i64* %119, align 8
  %121 = or i64 %120, %118
  %122 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %30, i64 0, i32 24, i64 2, i32 1
  %123 = load i64, i64* %122, align 8
  %124 = or i64 %121, %123
  %125 = icmp eq i64 %124, 0
  %126 = select i1 %125, i32 0, i32 64
  %127 = or i32 %126, %98
  br label %128

128:                                              ; preds = %77, %114, %116
  %129 = phi i32 [ %98, %77 ], [ %115, %114 ], [ %127, %116 ]
  %130 = and i32 %93, 32784
  %131 = or i32 %94, %130
  %132 = or i32 %129, %131
  store i32 %132, i32* %31, align 16
  %133 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %30, i64 0, i32 18
  store i64 %1, i64* %133, align 8
  br label %291

134:                                              ; preds = %20
  %135 = lshr i32 %29, 13
  %136 = and i32 %135, 3
  %137 = and i32 %0, 3
  %138 = lshr i32 %29, 8
  %139 = and i32 %138, 15
  switch i32 %139, label %290 [
    i32 1, label %140
    i32 9, label %140
    i32 5, label %140
    i32 4, label %152
    i32 12, label %152
  ]

140:                                              ; preds = %134, %134, %134
  %141 = icmp ult i32 %136, %33
  %142 = icmp ult i32 %136, %137
  %143 = or i1 %142, %141
  br i1 %143, label %144, label %145

144:                                              ; preds = %140
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %30, i32 noundef 13, i32 noundef %4, i64 noundef 0) #28
  unreachable

145:                                              ; preds = %140
  %146 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %30, i64 0, i32 18
  %147 = load i64, i64* %146, align 8
  %148 = trunc i64 %147 to i32
  %149 = add i32 %148, %2
  tail call fastcc void @switch_tss(%struct.CPUX86State* noundef nonnull %30, i32 noundef %0, i32 noundef %26, i32 noundef %29, i32 noundef 0, i32 noundef %149)
  %150 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %151 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %150, i64 0, i32 1
  store i64 1, i64* %151, align 16
  br label %291

152:                                              ; preds = %134, %134
  %153 = icmp ult i32 %136, %33
  %154 = icmp ult i32 %136, %137
  %155 = or i1 %154, %153
  br i1 %155, label %156, label %157

156:                                              ; preds = %152
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %30, i32 noundef 13, i32 noundef %4, i64 noundef 0) #28
  unreachable

157:                                              ; preds = %152
  %158 = and i32 %29, 32768
  %159 = icmp eq i32 %158, 0
  br i1 %159, label %160, label %161

160:                                              ; preds = %157
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %30, i32 noundef 11, i32 noundef %4, i64 noundef 0) #28
  unreachable

161:                                              ; preds = %157
  %162 = lshr i32 %26, 16
  %163 = and i32 %26, 65535
  %164 = icmp eq i32 %139, 12
  %165 = and i32 %29, -65536
  %166 = select i1 %164, i32 %165, i32 0
  %167 = or i32 %166, %163
  %168 = zext i32 %167 to i64
  %169 = and i32 %26, 262144
  %170 = icmp eq i32 %169, 0
  %171 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %30, i64 0, i32 25
  %172 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %30, i64 0, i32 27
  %173 = select i1 %170, %struct.SegmentCache* %172, %struct.SegmentCache* %171
  %174 = or i32 %162, 7
  %175 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %173, i64 0, i32 2
  %176 = load i32, i32* %175, align 8
  %177 = icmp ugt i32 %174, %176
  br i1 %177, label %178, label %180

178:                                              ; preds = %161
  %179 = and i32 %162, 65532
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %30, i32 noundef 13, i32 noundef %179, i64 noundef 0) #28
  unreachable

180:                                              ; preds = %161
  %181 = and i32 %162, 65528
  %182 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %173, i64 0, i32 1
  %183 = load i64, i64* %182, align 8
  %184 = zext i32 %181 to i64
  %185 = add i64 %183, %184
  %186 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef nonnull %30, i64 noundef %185)
  %187 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %188 = add i64 %185, 4
  %189 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef %187, i64 noundef %188)
  %190 = lshr i32 %189, 13
  %191 = and i32 %190, 3
  %192 = and i32 %189, 6144
  %193 = icmp eq i32 %192, 6144
  br i1 %193, label %197, label %194

194:                                              ; preds = %180
  %195 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %196 = and i32 %162, 65532
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef %195, i32 noundef 13, i32 noundef %196, i64 noundef 0) #28
  unreachable

197:                                              ; preds = %180
  %198 = and i32 %189, 1024
  %199 = icmp ne i32 %198, 0
  %200 = icmp ugt i32 %191, %33
  %201 = select i1 %199, i1 %200, i1 false
  br i1 %201, label %205, label %202

202:                                              ; preds = %197
  %203 = icmp eq i32 %191, %33
  %204 = select i1 %199, i1 true, i1 %203
  br i1 %204, label %208, label %205

205:                                              ; preds = %202, %197
  %206 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %207 = and i32 %162, 65532
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef %206, i32 noundef 13, i32 noundef %207, i64 noundef 0) #28
  unreachable

208:                                              ; preds = %202
  %209 = and i32 %189, 32768
  %210 = icmp eq i32 %209, 0
  br i1 %210, label %211, label %214

211:                                              ; preds = %208
  %212 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %213 = and i32 %162, 65532
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef %212, i32 noundef 13, i32 noundef %213, i64 noundef 0) #28
  unreachable

214:                                              ; preds = %208
  %215 = and i32 %186, 65535
  %216 = and i32 %189, 983040
  %217 = or i32 %216, %215
  %218 = and i32 %189, 8388608
  %219 = icmp eq i32 %218, 0
  %220 = shl nuw i32 %217, 12
  %221 = or i32 %220, 4095
  %222 = select i1 %219, i32 %217, i32 %221
  %223 = icmp ugt i32 %167, %222
  %224 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %223, label %225, label %226

225:                                              ; preds = %214
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef %224, i32 noundef 13, i32 noundef 0, i64 noundef 0) #28
  unreachable

226:                                              ; preds = %214
  %227 = and i32 %162, 65532
  %228 = or i32 %33, %227
  %229 = lshr i32 %186, 16
  %230 = shl i32 %189, 16
  %231 = and i32 %230, 16711680
  %232 = and i32 %189, -16777216
  %233 = or i32 %232, %229
  %234 = or i32 %233, %231
  %235 = zext i32 %234 to i64
  %236 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %224, i64 0, i32 24, i64 1, i32 0
  store i32 %228, i32* %236, align 8
  %237 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %224, i64 0, i32 24, i64 1, i32 1
  store i64 %235, i64* %237, align 8
  %238 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %224, i64 0, i32 24, i64 1, i32 2
  store i32 %222, i32* %238, align 8
  %239 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %224, i64 0, i32 24, i64 1, i32 3
  store i32 %189, i32* %239, align 4
  %240 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %224, i64 0, i32 21
  %241 = load i32, i32* %240, align 16
  %242 = and i32 %241, 16384
  %243 = icmp eq i32 %242, 0
  %244 = and i32 %189, 2097152
  %245 = icmp eq i32 %244, 0
  %246 = or i1 %245, %243
  %247 = lshr i32 %189, 18
  %248 = and i32 %247, 16
  %249 = select i1 %246, i32 %248, i32 32816
  %250 = and i32 %241, -32881
  %251 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %224, i64 0, i32 24, i64 2, i32 3
  %252 = load i32, i32* %251, align 4
  %253 = lshr i32 %252, 17
  %254 = and i32 %253, 32
  %255 = and i32 %249, 32768
  %256 = icmp eq i32 %255, 0
  br i1 %256, label %257, label %284

257:                                              ; preds = %226
  %258 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %224, i64 0, i32 29, i64 0
  %259 = load i64, i64* %258, align 16
  %260 = and i64 %259, 1
  %261 = icmp eq i64 %260, 0
  br i1 %261, label %270, label %262

262:                                              ; preds = %257
  %263 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %224, i64 0, i32 20
  %264 = load i64, i64* %263, align 8
  %265 = and i64 %264, 131072
  %266 = icmp ne i64 %265, 0
  %267 = and i32 %249, 16
  %268 = icmp eq i32 %267, 0
  %269 = select i1 %266, i1 true, i1 %268
  br i1 %269, label %270, label %272

270:                                              ; preds = %262, %257
  %271 = or i32 %254, 64
  br label %284

272:                                              ; preds = %262
  %273 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %224, i64 0, i32 24, i64 3, i32 1
  %274 = load i64, i64* %273, align 8
  %275 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %224, i64 0, i32 24, i64 0, i32 1
  %276 = load i64, i64* %275, align 8
  %277 = or i64 %276, %274
  %278 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %224, i64 0, i32 24, i64 2, i32 1
  %279 = load i64, i64* %278, align 8
  %280 = or i64 %277, %279
  %281 = icmp eq i64 %280, 0
  %282 = select i1 %281, i32 0, i32 64
  %283 = or i32 %282, %254
  br label %284

284:                                              ; preds = %226, %270, %272
  %285 = phi i32 [ %254, %226 ], [ %271, %270 ], [ %283, %272 ]
  %286 = and i32 %249, 32784
  %287 = or i32 %250, %286
  %288 = or i32 %285, %287
  store i32 %288, i32* %240, align 16
  %289 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %224, i64 0, i32 18
  store i64 %168, i64* %289, align 8
  br label %291

290:                                              ; preds = %134
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %30, i32 noundef 13, i32 noundef %4, i64 noundef 0) #28
  unreachable

291:                                              ; preds = %145, %284, %128
  ret void
}

; Function Attrs: uwtable
define void @helper_lcall_real(i32 noundef %0, i64 noundef %1, i32 noundef %2, i32 noundef %3) local_unnamed_addr #3 {
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 0, i64 4
  %7 = load i64, i64* %6, align 16
  %8 = trunc i64 %7 to i32
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 24, i64 2, i32 3
  %10 = load i32, i32* %9, align 4
  %11 = and i32 %10, 4194304
  %12 = icmp eq i32 %11, 0
  %13 = select i1 %12, i32 65535, i32 -1
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 24, i64 2, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = icmp eq i32 %2, 0
  br i1 %16, label %30, label %17

17:                                               ; preds = %4
  %18 = add i32 %8, -4
  %19 = and i32 %13, %18
  %20 = trunc i64 %15 to i32
  %21 = add i32 %19, %20
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 24, i64 1, i32 0
  %24 = load i32, i32* %23, align 8
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* noundef nonnull %5, i64 noundef %22, i32 noundef %24)
  %25 = add i32 %8, -8
  %26 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %27 = and i32 %13, %25
  %28 = add i32 %27, %20
  %29 = zext i32 %28 to i64
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* noundef %26, i64 noundef %29, i32 noundef %3)
  br label %42

30:                                               ; preds = %4
  %31 = add i32 %8, -2
  %32 = and i32 %13, %31
  %33 = zext i32 %32 to i64
  %34 = add i64 %15, %33
  %35 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 24, i64 1, i32 0
  %36 = load i32, i32* %35, align 8
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* noundef nonnull %5, i64 noundef %34, i32 noundef %36)
  %37 = add i32 %8, -4
  %38 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %39 = and i32 %13, %37
  %40 = zext i32 %39 to i64
  %41 = add i64 %15, %40
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* noundef %38, i64 noundef %41, i32 noundef %3)
  br label %42

42:                                               ; preds = %17, %30
  %43 = phi i32 [ %25, %17 ], [ %37, %30 ]
  br i1 %12, label %44, label %52

44:                                               ; preds = %42
  %45 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %46 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %45, i64 0, i32 0, i64 4
  %47 = load i64, i64* %46, align 16
  %48 = and i64 %47, -65536
  %49 = and i32 %43, 65535
  %50 = zext i32 %49 to i64
  %51 = or i64 %48, %50
  store i64 %51, i64* %46, align 16
  br label %56

52:                                               ; preds = %42
  %53 = zext i32 %43 to i64
  %54 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %55 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %54, i64 0, i32 0, i64 4
  store i64 %53, i64* %55, align 16
  br label %56

56:                                               ; preds = %52, %44
  %57 = phi %struct.CPUX86State* [ %54, %52 ], [ %45, %44 ]
  %58 = shl i64 %1, 32
  %59 = ashr exact i64 %58, 32
  %60 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %57, i64 0, i32 18
  store i64 %59, i64* %60, align 8
  %61 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %57, i64 0, i32 24, i64 1, i32 0
  store i32 %0, i32* %61, align 8
  %62 = shl i32 %0, 4
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %57, i64 0, i32 24, i64 1, i32 1
  store i64 %63, i64* %64, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_lcall_protected(i32 noundef %0, i64 noundef %1, i32 noundef %2, i32 noundef %3) local_unnamed_addr #3 {
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 18
  %7 = load i64, i64* %6, align 8
  %8 = sext i32 %3 to i64
  %9 = add i64 %7, %8
  %10 = and i32 %0, 65532
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %13

12:                                               ; preds = %4
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %5, i32 noundef 13, i32 noundef 0, i64 noundef 0) #28
  unreachable

13:                                               ; preds = %4
  %14 = and i32 %0, 4
  %15 = icmp eq i32 %14, 0
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 25
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 27
  %18 = select i1 %15, %struct.SegmentCache* %17, %struct.SegmentCache* %16
  %19 = or i32 %0, 7
  %20 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %18, i64 0, i32 2
  %21 = load i32, i32* %20, align 8
  %22 = icmp ugt i32 %19, %21
  br i1 %22, label %23, label %24

23:                                               ; preds = %13
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %5, i32 noundef 13, i32 noundef %10, i64 noundef 0) #28
  unreachable

24:                                               ; preds = %13
  %25 = and i32 %0, -8
  %26 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %18, i64 0, i32 1
  %27 = load i64, i64* %26, align 8
  %28 = sext i32 %25 to i64
  %29 = add i64 %27, %28
  %30 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef nonnull %5, i64 noundef %29)
  %31 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %32 = add i64 %29, 4
  %33 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef %31, i64 noundef %32)
  %34 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %35 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %34, i64 0, i32 21
  %36 = load i32, i32* %35, align 16
  %37 = and i32 %36, 3
  %38 = and i32 %33, 4096
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %274, label %40

40:                                               ; preds = %24
  %41 = and i32 %33, 2048
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %44

43:                                               ; preds = %40
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %34, i32 noundef 13, i32 noundef %10, i64 noundef 0) #28
  unreachable

44:                                               ; preds = %40
  %45 = lshr i32 %33, 13
  %46 = and i32 %45, 3
  %47 = and i32 %33, 1024
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %52, label %49

49:                                               ; preds = %44
  %50 = icmp ugt i32 %46, %37
  br i1 %50, label %51, label %59

51:                                               ; preds = %49
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %34, i32 noundef 13, i32 noundef %10, i64 noundef 0) #28
  unreachable

52:                                               ; preds = %44
  %53 = and i32 %0, 3
  %54 = icmp ugt i32 %53, %37
  br i1 %54, label %55, label %56

55:                                               ; preds = %52
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %34, i32 noundef 13, i32 noundef %10, i64 noundef 0) #28
  unreachable

56:                                               ; preds = %52
  %57 = icmp eq i32 %46, %37
  br i1 %57, label %59, label %58

58:                                               ; preds = %56
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %34, i32 noundef 13, i32 noundef %10, i64 noundef 0) #28
  unreachable

59:                                               ; preds = %56, %49
  %60 = and i32 %33, 32768
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %63

62:                                               ; preds = %59
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %34, i32 noundef 11, i32 noundef %10, i64 noundef 0) #28
  unreachable

63:                                               ; preds = %59
  %64 = icmp eq i32 %2, 2
  %65 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %34, i64 0, i32 0, i64 4
  %66 = load i64, i64* %65, align 16
  br i1 %64, label %67, label %146

67:                                               ; preds = %63
  %68 = add i64 %66, -8
  %69 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %34, i64 0, i32 24, i64 1, i32 0
  %70 = load i32, i32* %69, align 8
  %71 = zext i32 %70 to i64
  tail call fastcc void @cpu_stq_kernel(%struct.CPUX86State* noundef nonnull %34, i64 noundef %68, i64 noundef %71)
  %72 = add i64 %66, -16
  %73 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call fastcc void @cpu_stq_kernel(%struct.CPUX86State* noundef %73, i64 noundef %72, i64 noundef %9)
  %74 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %75 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %74, i64 0, i32 0, i64 4
  store i64 %72, i64* %75, align 16
  %76 = or i32 %37, %10
  %77 = lshr i32 %30, 16
  %78 = shl i32 %33, 16
  %79 = and i32 %78, 16711680
  %80 = and i32 %33, -16777216
  %81 = or i32 %80, %77
  %82 = or i32 %81, %79
  %83 = zext i32 %82 to i64
  %84 = and i32 %30, 65535
  %85 = and i32 %33, 983040
  %86 = or i32 %85, %84
  %87 = and i32 %33, 8388608
  %88 = icmp eq i32 %87, 0
  %89 = shl nuw i32 %86, 12
  %90 = or i32 %89, 4095
  %91 = select i1 %88, i32 %86, i32 %90
  %92 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %74, i64 0, i32 24, i64 1, i32 0
  store i32 %76, i32* %92, align 8
  %93 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %74, i64 0, i32 24, i64 1, i32 1
  store i64 %83, i64* %93, align 8
  %94 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %74, i64 0, i32 24, i64 1, i32 2
  store i32 %91, i32* %94, align 8
  %95 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %74, i64 0, i32 24, i64 1, i32 3
  store i32 %33, i32* %95, align 4
  %96 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %74, i64 0, i32 21
  %97 = load i32, i32* %96, align 16
  %98 = and i32 %97, 16384
  %99 = icmp eq i32 %98, 0
  %100 = and i32 %33, 2097152
  %101 = icmp eq i32 %100, 0
  %102 = or i1 %101, %99
  %103 = lshr i32 %33, 18
  %104 = and i32 %103, 16
  %105 = select i1 %102, i32 %104, i32 32816
  %106 = and i32 %97, -32881
  %107 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %74, i64 0, i32 24, i64 2, i32 3
  %108 = load i32, i32* %107, align 4
  %109 = lshr i32 %108, 17
  %110 = and i32 %109, 32
  %111 = and i32 %105, 32768
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %113, label %140

113:                                              ; preds = %67
  %114 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %74, i64 0, i32 29, i64 0
  %115 = load i64, i64* %114, align 16
  %116 = and i64 %115, 1
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %126, label %118

118:                                              ; preds = %113
  %119 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %74, i64 0, i32 20
  %120 = load i64, i64* %119, align 8
  %121 = and i64 %120, 131072
  %122 = icmp ne i64 %121, 0
  %123 = and i32 %105, 16
  %124 = icmp eq i32 %123, 0
  %125 = select i1 %122, i1 true, i1 %124
  br i1 %125, label %126, label %128

126:                                              ; preds = %118, %113
  %127 = or i32 %110, 64
  br label %140

128:                                              ; preds = %118
  %129 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %74, i64 0, i32 24, i64 3, i32 1
  %130 = load i64, i64* %129, align 8
  %131 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %74, i64 0, i32 24, i64 0, i32 1
  %132 = load i64, i64* %131, align 8
  %133 = or i64 %132, %130
  %134 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %74, i64 0, i32 24, i64 2, i32 1
  %135 = load i64, i64* %134, align 8
  %136 = or i64 %133, %135
  %137 = icmp eq i64 %136, 0
  %138 = select i1 %137, i32 0, i32 64
  %139 = or i32 %138, %110
  br label %140

140:                                              ; preds = %67, %126, %128
  %141 = phi i32 [ %110, %67 ], [ %127, %126 ], [ %139, %128 ]
  %142 = and i32 %105, 32784
  %143 = or i32 %106, %142
  %144 = or i32 %141, %143
  store i32 %144, i32* %96, align 16
  %145 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %74, i64 0, i32 18
  store i64 %1, i64* %145, align 8
  br label %765

146:                                              ; preds = %63
  %147 = trunc i64 %66 to i32
  %148 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %34, i64 0, i32 24, i64 2, i32 3
  %149 = load i32, i32* %148, align 4
  %150 = and i32 %149, 4194304
  %151 = icmp eq i32 %150, 0
  %152 = select i1 %151, i32 65535, i32 -1
  %153 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %34, i64 0, i32 24, i64 2, i32 1
  %154 = load i64, i64* %153, align 8
  %155 = icmp eq i32 %2, 0
  br i1 %155, label %170, label %156

156:                                              ; preds = %146
  %157 = add i32 %147, -4
  %158 = and i32 %152, %157
  %159 = trunc i64 %154 to i32
  %160 = add i32 %158, %159
  %161 = zext i32 %160 to i64
  %162 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %34, i64 0, i32 24, i64 1, i32 0
  %163 = load i32, i32* %162, align 8
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* noundef nonnull %34, i64 noundef %161, i32 noundef %163)
  %164 = add i32 %147, -8
  %165 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %166 = and i32 %152, %164
  %167 = add i32 %166, %159
  %168 = zext i32 %167 to i64
  %169 = trunc i64 %9 to i32
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* noundef %165, i64 noundef %168, i32 noundef %169)
  br label %183

170:                                              ; preds = %146
  %171 = add i32 %147, -2
  %172 = and i32 %152, %171
  %173 = zext i32 %172 to i64
  %174 = add i64 %154, %173
  %175 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %34, i64 0, i32 24, i64 1, i32 0
  %176 = load i32, i32* %175, align 8
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* noundef nonnull %34, i64 noundef %174, i32 noundef %176)
  %177 = add i32 %147, -4
  %178 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %179 = and i32 %152, %177
  %180 = zext i32 %179 to i64
  %181 = add i64 %154, %180
  %182 = trunc i64 %9 to i32
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* noundef %178, i64 noundef %181, i32 noundef %182)
  br label %183

183:                                              ; preds = %170, %156
  %184 = phi i32 [ %177, %170 ], [ %164, %156 ]
  %185 = and i32 %30, 65535
  %186 = and i32 %33, 983040
  %187 = or i32 %186, %185
  %188 = and i32 %33, 8388608
  %189 = icmp eq i32 %188, 0
  %190 = shl nuw i32 %187, 12
  %191 = or i32 %190, 4095
  %192 = select i1 %189, i32 %187, i32 %191
  %193 = zext i32 %192 to i64
  %194 = icmp ult i64 %193, %1
  br i1 %194, label %195, label %197

195:                                              ; preds = %183
  %196 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef %196, i32 noundef 13, i32 noundef %10, i64 noundef 0) #28
  unreachable

197:                                              ; preds = %183
  br i1 %151, label %198, label %206

198:                                              ; preds = %197
  %199 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %200 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %199, i64 0, i32 0, i64 4
  %201 = load i64, i64* %200, align 16
  %202 = and i64 %201, -65536
  %203 = and i32 %184, 65535
  %204 = zext i32 %203 to i64
  %205 = or i64 %202, %204
  store i64 %205, i64* %200, align 16
  br label %210

206:                                              ; preds = %197
  %207 = zext i32 %184 to i64
  %208 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %209 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %208, i64 0, i32 0, i64 4
  store i64 %207, i64* %209, align 16
  br label %210

210:                                              ; preds = %206, %198
  %211 = phi %struct.CPUX86State* [ %208, %206 ], [ %199, %198 ]
  %212 = or i32 %37, %10
  %213 = lshr i32 %30, 16
  %214 = shl i32 %33, 16
  %215 = and i32 %214, 16711680
  %216 = and i32 %33, -16777216
  %217 = or i32 %216, %213
  %218 = or i32 %217, %215
  %219 = zext i32 %218 to i64
  %220 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %211, i64 0, i32 24, i64 1, i32 0
  store i32 %212, i32* %220, align 8
  %221 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %211, i64 0, i32 24, i64 1, i32 1
  store i64 %219, i64* %221, align 8
  %222 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %211, i64 0, i32 24, i64 1, i32 2
  store i32 %192, i32* %222, align 8
  %223 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %211, i64 0, i32 24, i64 1, i32 3
  store i32 %33, i32* %223, align 4
  %224 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %211, i64 0, i32 21
  %225 = load i32, i32* %224, align 16
  %226 = and i32 %225, 16384
  %227 = icmp eq i32 %226, 0
  %228 = and i32 %33, 2097152
  %229 = icmp eq i32 %228, 0
  %230 = or i1 %229, %227
  %231 = lshr i32 %33, 18
  %232 = and i32 %231, 16
  %233 = select i1 %230, i32 %232, i32 32816
  %234 = and i32 %225, -32881
  %235 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %211, i64 0, i32 24, i64 2, i32 3
  %236 = load i32, i32* %235, align 4
  %237 = lshr i32 %236, 17
  %238 = and i32 %237, 32
  %239 = and i32 %233, 32768
  %240 = icmp eq i32 %239, 0
  br i1 %240, label %241, label %268

241:                                              ; preds = %210
  %242 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %211, i64 0, i32 29, i64 0
  %243 = load i64, i64* %242, align 16
  %244 = and i64 %243, 1
  %245 = icmp eq i64 %244, 0
  br i1 %245, label %254, label %246

246:                                              ; preds = %241
  %247 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %211, i64 0, i32 20
  %248 = load i64, i64* %247, align 8
  %249 = and i64 %248, 131072
  %250 = icmp ne i64 %249, 0
  %251 = and i32 %233, 16
  %252 = icmp eq i32 %251, 0
  %253 = select i1 %250, i1 true, i1 %252
  br i1 %253, label %254, label %256

254:                                              ; preds = %246, %241
  %255 = or i32 %238, 64
  br label %268

256:                                              ; preds = %246
  %257 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %211, i64 0, i32 24, i64 3, i32 1
  %258 = load i64, i64* %257, align 8
  %259 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %211, i64 0, i32 24, i64 0, i32 1
  %260 = load i64, i64* %259, align 8
  %261 = or i64 %260, %258
  %262 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %211, i64 0, i32 24, i64 2, i32 1
  %263 = load i64, i64* %262, align 8
  %264 = or i64 %261, %263
  %265 = icmp eq i64 %264, 0
  %266 = select i1 %265, i32 0, i32 64
  %267 = or i32 %266, %238
  br label %268

268:                                              ; preds = %210, %254, %256
  %269 = phi i32 [ %238, %210 ], [ %255, %254 ], [ %267, %256 ]
  %270 = and i32 %233, 32784
  %271 = or i32 %234, %270
  %272 = or i32 %269, %271
  store i32 %272, i32* %224, align 16
  %273 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %211, i64 0, i32 18
  store i64 %1, i64* %273, align 8
  br label %765

274:                                              ; preds = %24
  %275 = lshr i32 %33, 8
  %276 = and i32 %275, 31
  %277 = lshr i32 %33, 13
  %278 = and i32 %277, 3
  %279 = and i32 %0, 3
  switch i32 %276, label %289 [
    i32 1, label %280
    i32 9, label %280
    i32 5, label %280
    i32 4, label %290
    i32 12, label %290
  ]

280:                                              ; preds = %274, %274, %274
  %281 = icmp ult i32 %278, %37
  %282 = icmp ult i32 %278, %279
  %283 = or i1 %282, %281
  br i1 %283, label %284, label %285

284:                                              ; preds = %280
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %34, i32 noundef 13, i32 noundef %10, i64 noundef 0) #28
  unreachable

285:                                              ; preds = %280
  %286 = trunc i64 %9 to i32
  tail call fastcc void @switch_tss(%struct.CPUX86State* noundef nonnull %34, i32 noundef %0, i32 noundef %30, i32 noundef %33, i32 noundef 2, i32 noundef %286)
  %287 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %288 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %287, i64 0, i32 1
  store i64 1, i64* %288, align 16
  br label %765

289:                                              ; preds = %274
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %34, i32 noundef 13, i32 noundef %10, i64 noundef 0) #28
  unreachable

290:                                              ; preds = %274, %274
  %291 = icmp ult i32 %278, %37
  %292 = icmp ult i32 %278, %279
  %293 = or i1 %292, %291
  br i1 %293, label %294, label %295

294:                                              ; preds = %290
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %34, i32 noundef 13, i32 noundef %10, i64 noundef 0) #28
  unreachable

295:                                              ; preds = %290
  %296 = and i32 %33, 32768
  %297 = icmp eq i32 %296, 0
  br i1 %297, label %298, label %299

298:                                              ; preds = %295
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %34, i32 noundef 11, i32 noundef %10, i64 noundef 0) #28
  unreachable

299:                                              ; preds = %295
  %300 = lshr i32 %30, 16
  %301 = and i32 %33, -65536
  %302 = and i32 %30, 65535
  %303 = or i32 %301, %302
  %304 = and i32 %33, 31
  %305 = and i32 %300, 65532
  %306 = icmp eq i32 %305, 0
  br i1 %306, label %307, label %308

307:                                              ; preds = %299
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %34, i32 noundef 13, i32 noundef 0, i64 noundef 0) #28
  unreachable

308:                                              ; preds = %299
  %309 = and i32 %30, 262144
  %310 = icmp eq i32 %309, 0
  %311 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %34, i64 0, i32 25
  %312 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %34, i64 0, i32 27
  %313 = select i1 %310, %struct.SegmentCache* %312, %struct.SegmentCache* %311
  %314 = or i32 %300, 7
  %315 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %313, i64 0, i32 2
  %316 = load i32, i32* %315, align 8
  %317 = icmp ugt i32 %314, %316
  br i1 %317, label %318, label %319

318:                                              ; preds = %308
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %34, i32 noundef 13, i32 noundef %305, i64 noundef 0) #28
  unreachable

319:                                              ; preds = %308
  %320 = and i32 %300, 65528
  %321 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %313, i64 0, i32 1
  %322 = load i64, i64* %321, align 8
  %323 = zext i32 %320 to i64
  %324 = add i64 %322, %323
  %325 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef nonnull %34, i64 noundef %324)
  %326 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %327 = add i64 %324, 4
  %328 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef %326, i64 noundef %327)
  %329 = and i32 %328, 6144
  %330 = icmp eq i32 %329, 6144
  br i1 %330, label %333, label %331

331:                                              ; preds = %319
  %332 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef %332, i32 noundef 13, i32 noundef %305, i64 noundef 0) #28
  unreachable

333:                                              ; preds = %319
  %334 = lshr i32 %328, 13
  %335 = and i32 %334, 3
  %336 = icmp ugt i32 %335, %37
  br i1 %336, label %337, label %339

337:                                              ; preds = %333
  %338 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef %338, i32 noundef 13, i32 noundef %305, i64 noundef 0) #28
  unreachable

339:                                              ; preds = %333
  %340 = and i32 %328, 32768
  %341 = icmp eq i32 %340, 0
  br i1 %341, label %342, label %344

342:                                              ; preds = %339
  %343 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef %343, i32 noundef 11, i32 noundef %305, i64 noundef 0) #28
  unreachable

344:                                              ; preds = %339
  %345 = and i32 %328, 1024
  %346 = icmp eq i32 %345, 0
  %347 = icmp ult i32 %335, %37
  %348 = select i1 %346, i1 %347, i1 false
  %349 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %348, label %350, label %530

350:                                              ; preds = %344
  %351 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %349, i64 0, i32 26, i32 3
  %352 = load i32, i32* %351, align 4
  %353 = and i32 %352, 32768
  %354 = icmp eq i32 %353, 0
  br i1 %354, label %355, label %356

355:                                              ; preds = %350
  tail call void (%struct.CPUX86State*, i8*, ...) @cpu_abort(%struct.CPUX86State* noundef nonnull %349, i8* noundef getelementptr inbounds ([12 x i8], [12 x i8]* @.str.16, i64 0, i64 0)) #28
  unreachable

356:                                              ; preds = %350
  %357 = lshr i32 %352, 11
  %358 = and i32 %357, 1
  %359 = shl nuw nsw i32 %335, 2
  %360 = add nuw nsw i32 %359, 6
  %361 = shl nuw nsw i32 %360, %358
  %362 = add nsw i32 %361, -1
  %363 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %349, i64 0, i32 26, i32 2
  %364 = load i32, i32* %363, align 8
  %365 = icmp ugt i32 %362, %364
  br i1 %365, label %366, label %370

366:                                              ; preds = %356
  %367 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %349, i64 0, i32 26, i32 0
  %368 = load i32, i32* %367, align 8
  %369 = and i32 %368, 65532
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %349, i32 noundef 10, i32 noundef %369, i64 noundef 0)
  unreachable

370:                                              ; preds = %356
  %371 = or i32 %359, 2
  %372 = shl i32 %371, %358
  %373 = icmp eq i32 %358, 0
  %374 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %349, i64 0, i32 26, i32 1
  %375 = load i64, i64* %374, align 8
  %376 = zext i32 %372 to i64
  %377 = add i64 %375, %376
  br i1 %373, label %378, label %380

378:                                              ; preds = %370
  %379 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* noundef nonnull %349, i64 noundef %377)
  br label %382

380:                                              ; preds = %370
  %381 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef nonnull %349, i64 noundef %377)
  br label %382

382:                                              ; preds = %378, %380
  %383 = phi i32 [ %381, %380 ], [ %379, %378 ]
  %384 = phi i64 [ 4, %380 ], [ 2, %378 ]
  %385 = load i64, i64* %374, align 8
  %386 = add nuw nsw i64 %384, %376
  %387 = add i64 %386, %385
  %388 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* noundef nonnull %349, i64 noundef %387)
  %389 = and i32 %388, 65532
  %390 = icmp eq i32 %389, 0
  br i1 %390, label %391, label %393

391:                                              ; preds = %382
  %392 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef %392, i32 noundef 10, i32 noundef 0, i64 noundef 0) #28
  unreachable

393:                                              ; preds = %382
  %394 = and i32 %388, 3
  %395 = icmp eq i32 %394, %335
  br i1 %395, label %398, label %396

396:                                              ; preds = %393
  %397 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef %397, i32 noundef 10, i32 noundef %389, i64 noundef 0) #28
  unreachable

398:                                              ; preds = %393
  %399 = and i32 %388, 4
  %400 = icmp eq i32 %399, 0
  %401 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %402 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %401, i64 0, i32 25
  %403 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %401, i64 0, i32 27
  %404 = select i1 %400, %struct.SegmentCache* %403, %struct.SegmentCache* %402
  %405 = or i32 %388, 7
  %406 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %404, i64 0, i32 2
  %407 = load i32, i32* %406, align 8
  %408 = icmp ugt i32 %405, %407
  br i1 %408, label %409, label %410

409:                                              ; preds = %398
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef %401, i32 noundef 10, i32 noundef %389, i64 noundef 0) #28
  unreachable

410:                                              ; preds = %398
  %411 = and i32 %388, -8
  %412 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %404, i64 0, i32 1
  %413 = load i64, i64* %412, align 8
  %414 = sext i32 %411 to i64
  %415 = add i64 %413, %414
  %416 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef %401, i64 noundef %415)
  %417 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %418 = add i64 %415, 4
  %419 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef %417, i64 noundef %418)
  %420 = lshr i32 %419, 13
  %421 = and i32 %420, 3
  %422 = icmp eq i32 %421, %335
  br i1 %422, label %425, label %423

423:                                              ; preds = %410
  %424 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef %424, i32 noundef 10, i32 noundef %389, i64 noundef 0) #28
  unreachable

425:                                              ; preds = %410
  %426 = and i32 %419, 6656
  %427 = icmp eq i32 %426, 4608
  br i1 %427, label %430, label %428

428:                                              ; preds = %425
  %429 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef %429, i32 noundef 10, i32 noundef %389, i64 noundef 0) #28
  unreachable

430:                                              ; preds = %425
  %431 = and i32 %419, 32768
  %432 = icmp eq i32 %431, 0
  %433 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %432, label %434, label %435

434:                                              ; preds = %430
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef %433, i32 noundef 10, i32 noundef %389, i64 noundef 0) #28
  unreachable

435:                                              ; preds = %430
  %436 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %433, i64 0, i32 24, i64 2, i32 3
  %437 = load i32, i32* %436, align 4
  %438 = and i32 %437, 4194304
  %439 = icmp eq i32 %438, 0
  %440 = select i1 %439, i32 65535, i32 -1
  %441 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %433, i64 0, i32 24, i64 2, i32 1
  %442 = load i64, i64* %441, align 8
  %443 = and i32 %419, 4194304
  %444 = icmp eq i32 %443, 0
  %445 = select i1 %444, i32 65535, i32 -1
  %446 = lshr i32 %416, 16
  %447 = shl i32 %419, 16
  %448 = and i32 %447, 16711680
  %449 = and i32 %419, -16777216
  %450 = or i32 %449, %446
  %451 = or i32 %450, %448
  %452 = zext i32 %451 to i64
  %453 = icmp ult i32 %276, 8
  br i1 %453, label %492, label %454

454:                                              ; preds = %435
  %455 = add i32 %383, -4
  %456 = and i32 %445, %455
  %457 = add i32 %456, %451
  %458 = zext i32 %457 to i64
  %459 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %433, i64 0, i32 24, i64 2, i32 0
  %460 = load i32, i32* %459, align 16
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* noundef nonnull %433, i64 noundef %458, i32 noundef %460)
  %461 = add i32 %383, -8
  %462 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %463 = and i32 %445, %461
  %464 = add i32 %463, %451
  %465 = zext i32 %464 to i64
  %466 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %462, i64 0, i32 0, i64 4
  %467 = load i64, i64* %466, align 16
  %468 = trunc i64 %467 to i32
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* noundef %462, i64 noundef %465, i32 noundef %468)
  %469 = icmp eq i32 %304, 0
  br i1 %469, label %571, label %470

470:                                              ; preds = %454
  %471 = zext i32 %440 to i64
  %472 = and i32 %33, 31
  %473 = zext i32 %472 to i64
  br label %474

474:                                              ; preds = %470, %474
  %475 = phi i64 [ %473, %470 ], [ %477, %474 ]
  %476 = phi i32 [ %461, %470 ], [ %486, %474 ]
  %477 = add nsw i64 %475, -1
  %478 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %479 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %478, i64 0, i32 0, i64 4
  %480 = load i64, i64* %479, align 16
  %481 = shl i64 %477, 2
  %482 = add i64 %480, %481
  %483 = and i64 %482, %471
  %484 = add i64 %483, %442
  %485 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef %478, i64 noundef %484)
  %486 = add i32 %476, -4
  %487 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %488 = and i32 %486, %445
  %489 = add i32 %488, %451
  %490 = zext i32 %489 to i64
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* noundef %487, i64 noundef %490, i32 noundef %485)
  %491 = icmp ugt i64 %475, 1
  br i1 %491, label %474, label %541, !llvm.loop !13

492:                                              ; preds = %435
  %493 = add i32 %383, -2
  %494 = and i32 %445, %493
  %495 = zext i32 %494 to i64
  %496 = add nuw nsw i64 %495, %452
  %497 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %433, i64 0, i32 24, i64 2, i32 0
  %498 = load i32, i32* %497, align 16
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* noundef nonnull %433, i64 noundef %496, i32 noundef %498)
  %499 = add i32 %383, -4
  %500 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %501 = and i32 %445, %499
  %502 = zext i32 %501 to i64
  %503 = add nuw nsw i64 %502, %452
  %504 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %500, i64 0, i32 0, i64 4
  %505 = load i64, i64* %504, align 16
  %506 = trunc i64 %505 to i32
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* noundef %500, i64 noundef %503, i32 noundef %506)
  %507 = icmp eq i32 %304, 0
  br i1 %507, label %550, label %508

508:                                              ; preds = %492
  %509 = zext i32 %440 to i64
  %510 = and i32 %33, 31
  %511 = zext i32 %510 to i64
  br label %512

512:                                              ; preds = %508, %512
  %513 = phi i64 [ %511, %508 ], [ %515, %512 ]
  %514 = phi i32 [ %499, %508 ], [ %524, %512 ]
  %515 = add nsw i64 %513, -1
  %516 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %517 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %516, i64 0, i32 0, i64 4
  %518 = load i64, i64* %517, align 16
  %519 = shl i64 %515, 1
  %520 = add i64 %518, %519
  %521 = and i64 %520, %509
  %522 = add i64 %521, %442
  %523 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* noundef %516, i64 noundef %522), !range !9
  %524 = add i32 %514, -2
  %525 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %526 = and i32 %524, %445
  %527 = zext i32 %526 to i64
  %528 = add nuw nsw i64 %527, %452
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* noundef %525, i64 noundef %528, i32 noundef %523)
  %529 = icmp ugt i64 %513, 1
  br i1 %529, label %512, label %541, !llvm.loop !14

530:                                              ; preds = %344
  %531 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %349, i64 0, i32 0, i64 4
  %532 = load i64, i64* %531, align 16
  %533 = trunc i64 %532 to i32
  %534 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %349, i64 0, i32 24, i64 2, i32 3
  %535 = load i32, i32* %534, align 4
  %536 = and i32 %535, 4194304
  %537 = icmp eq i32 %536, 0
  %538 = select i1 %537, i32 65535, i32 -1
  %539 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %349, i64 0, i32 24, i64 2, i32 1
  %540 = load i64, i64* %539, align 8
  br label %541

541:                                              ; preds = %474, %512, %530
  %542 = phi i32 [ 0, %530 ], [ %388, %512 ], [ %388, %474 ]
  %543 = phi i32 [ 0, %530 ], [ %416, %512 ], [ %416, %474 ]
  %544 = phi i32 [ 0, %530 ], [ %419, %512 ], [ %419, %474 ]
  %545 = phi i32 [ %533, %530 ], [ %524, %512 ], [ %486, %474 ]
  %546 = phi i32 [ %538, %530 ], [ %445, %512 ], [ %445, %474 ]
  %547 = phi i64 [ %540, %530 ], [ %452, %512 ], [ %452, %474 ]
  %548 = phi i1 [ true, %530 ], [ false, %512 ], [ false, %474 ]
  %549 = icmp ult i32 %276, 8
  br i1 %549, label %550, label %571

550:                                              ; preds = %492, %541
  %551 = phi i1 [ %548, %541 ], [ false, %492 ]
  %552 = phi i64 [ %547, %541 ], [ %452, %492 ]
  %553 = phi i32 [ %546, %541 ], [ %445, %492 ]
  %554 = phi i32 [ %545, %541 ], [ %499, %492 ]
  %555 = phi i32 [ %544, %541 ], [ %419, %492 ]
  %556 = phi i32 [ %543, %541 ], [ %416, %492 ]
  %557 = phi i32 [ %542, %541 ], [ %388, %492 ]
  %558 = add i32 %554, -2
  %559 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %560 = and i32 %558, %553
  %561 = zext i32 %560 to i64
  %562 = add i64 %552, %561
  %563 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %559, i64 0, i32 24, i64 1, i32 0
  %564 = load i32, i32* %563, align 8
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* noundef %559, i64 noundef %562, i32 noundef %564)
  %565 = add i32 %554, -4
  %566 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %567 = and i32 %565, %553
  %568 = zext i32 %567 to i64
  %569 = add i64 %552, %568
  %570 = trunc i64 %9 to i32
  tail call fastcc void @cpu_stw_kernel(%struct.CPUX86State* noundef %566, i64 noundef %569, i32 noundef %570)
  br i1 %551, label %593, label %599

571:                                              ; preds = %454, %541
  %572 = phi i1 [ %548, %541 ], [ false, %454 ]
  %573 = phi i64 [ %547, %541 ], [ %452, %454 ]
  %574 = phi i32 [ %546, %541 ], [ %445, %454 ]
  %575 = phi i32 [ %545, %541 ], [ %461, %454 ]
  %576 = phi i32 [ %544, %541 ], [ %419, %454 ]
  %577 = phi i32 [ %543, %541 ], [ %416, %454 ]
  %578 = phi i32 [ %542, %541 ], [ %388, %454 ]
  %579 = add i32 %575, -4
  %580 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %581 = and i32 %579, %574
  %582 = trunc i64 %573 to i32
  %583 = add i32 %581, %582
  %584 = zext i32 %583 to i64
  %585 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %580, i64 0, i32 24, i64 1, i32 0
  %586 = load i32, i32* %585, align 8
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* noundef %580, i64 noundef %584, i32 noundef %586)
  %587 = add i32 %575, -8
  %588 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %589 = and i32 %587, %574
  %590 = add i32 %589, %582
  %591 = zext i32 %590 to i64
  %592 = trunc i64 %9 to i32
  tail call fastcc void @cpu_stl_kernel(%struct.CPUX86State* noundef %588, i64 noundef %591, i32 noundef %592)
  br i1 %572, label %593, label %599

593:                                              ; preds = %550, %571
  %594 = phi i32 [ %565, %550 ], [ %587, %571 ]
  %595 = phi i32 [ %553, %550 ], [ %574, %571 ]
  %596 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %597 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %596, i64 0, i32 21
  %598 = load i32, i32* %597, align 16
  br label %656

599:                                              ; preds = %550, %571
  %600 = phi i32 [ %565, %550 ], [ %587, %571 ]
  %601 = phi i32 [ %557, %550 ], [ %578, %571 ]
  %602 = phi i32 [ %556, %550 ], [ %577, %571 ]
  %603 = phi i32 [ %555, %550 ], [ %576, %571 ]
  %604 = phi i32 [ %553, %550 ], [ %574, %571 ]
  %605 = phi i64 [ %552, %550 ], [ %573, %571 ]
  %606 = and i32 %601, -4
  %607 = or i32 %606, %335
  %608 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %609 = and i32 %602, 65535
  %610 = and i32 %603, 983040
  %611 = or i32 %610, %609
  %612 = and i32 %603, 8388608
  %613 = icmp eq i32 %612, 0
  %614 = shl nuw i32 %611, 12
  %615 = or i32 %614, 4095
  %616 = select i1 %613, i32 %611, i32 %615
  %617 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %608, i64 0, i32 24, i64 2, i32 0
  store i32 %607, i32* %617, align 8
  %618 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %608, i64 0, i32 24, i64 2, i32 1
  store i64 %605, i64* %618, align 8
  %619 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %608, i64 0, i32 24, i64 2, i32 2
  store i32 %616, i32* %619, align 8
  %620 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %608, i64 0, i32 24, i64 2, i32 3
  store i32 %603, i32* %620, align 4
  %621 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %608, i64 0, i32 21
  %622 = load i32, i32* %621, align 16
  %623 = lshr i32 %603, 17
  %624 = and i32 %623, 32
  %625 = and i32 %622, 32768
  %626 = icmp eq i32 %625, 0
  br i1 %626, label %627, label %652

627:                                              ; preds = %599
  %628 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %608, i64 0, i32 29, i64 0
  %629 = load i64, i64* %628, align 16
  %630 = and i64 %629, 1
  %631 = icmp eq i64 %630, 0
  br i1 %631, label %640, label %632

632:                                              ; preds = %627
  %633 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %608, i64 0, i32 20
  %634 = load i64, i64* %633, align 8
  %635 = and i64 %634, 131072
  %636 = icmp ne i64 %635, 0
  %637 = and i32 %622, 16
  %638 = icmp eq i32 %637, 0
  %639 = select i1 %636, i1 true, i1 %638
  br i1 %639, label %640, label %642

640:                                              ; preds = %632, %627
  %641 = or i32 %624, 64
  br label %652

642:                                              ; preds = %632
  %643 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %608, i64 0, i32 24, i64 3, i32 1
  %644 = load i64, i64* %643, align 8
  %645 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %608, i64 0, i32 24, i64 0, i32 1
  %646 = load i64, i64* %645, align 8
  %647 = or i64 %644, %605
  %648 = or i64 %647, %646
  %649 = icmp eq i64 %648, 0
  %650 = select i1 %649, i32 0, i32 64
  %651 = or i32 %650, %624
  br label %652

652:                                              ; preds = %599, %640, %642
  %653 = phi i32 [ %624, %599 ], [ %641, %640 ], [ %651, %642 ]
  %654 = and i32 %622, -97
  %655 = or i32 %653, %654
  store i32 %655, i32* %621, align 16
  br label %656

656:                                              ; preds = %593, %652
  %657 = phi i32 [ %594, %593 ], [ %600, %652 ]
  %658 = phi i32 [ %595, %593 ], [ %604, %652 ]
  %659 = phi i32 [ %598, %593 ], [ %655, %652 ]
  %660 = phi %struct.CPUX86State* [ %596, %593 ], [ %608, %652 ]
  %661 = or i32 %335, %305
  %662 = lshr i32 %325, 16
  %663 = shl i32 %328, 16
  %664 = and i32 %663, 16711680
  %665 = and i32 %328, -16777216
  %666 = or i32 %665, %662
  %667 = or i32 %666, %664
  %668 = zext i32 %667 to i64
  %669 = and i32 %325, 65535
  %670 = and i32 %328, 983040
  %671 = or i32 %670, %669
  %672 = and i32 %328, 8388608
  %673 = icmp eq i32 %672, 0
  %674 = shl nuw i32 %671, 12
  %675 = or i32 %674, 4095
  %676 = select i1 %673, i32 %671, i32 %675
  %677 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %660, i64 0, i32 24, i64 1, i32 0
  store i32 %661, i32* %677, align 8
  %678 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %660, i64 0, i32 24, i64 1, i32 1
  store i64 %668, i64* %678, align 8
  %679 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %660, i64 0, i32 24, i64 1, i32 2
  store i32 %676, i32* %679, align 8
  %680 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %660, i64 0, i32 24, i64 1, i32 3
  store i32 %328, i32* %680, align 4
  %681 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %660, i64 0, i32 21
  %682 = and i32 %659, 16384
  %683 = icmp eq i32 %682, 0
  %684 = and i32 %328, 2097152
  %685 = icmp eq i32 %684, 0
  %686 = or i1 %685, %683
  %687 = lshr i32 %328, 18
  %688 = and i32 %687, 16
  %689 = select i1 %686, i32 %688, i32 32816
  %690 = and i32 %659, -32881
  %691 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %660, i64 0, i32 24, i64 2, i32 3
  %692 = load i32, i32* %691, align 4
  %693 = lshr i32 %692, 17
  %694 = and i32 %693, 32
  %695 = and i32 %689, 32768
  %696 = icmp eq i32 %695, 0
  br i1 %696, label %697, label %724

697:                                              ; preds = %656
  %698 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %660, i64 0, i32 29, i64 0
  %699 = load i64, i64* %698, align 16
  %700 = and i64 %699, 1
  %701 = icmp eq i64 %700, 0
  br i1 %701, label %710, label %702

702:                                              ; preds = %697
  %703 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %660, i64 0, i32 20
  %704 = load i64, i64* %703, align 8
  %705 = and i64 %704, 131072
  %706 = icmp ne i64 %705, 0
  %707 = and i32 %689, 16
  %708 = icmp eq i32 %707, 0
  %709 = select i1 %706, i1 true, i1 %708
  br i1 %709, label %710, label %712

710:                                              ; preds = %702, %697
  %711 = or i32 %694, 64
  br label %724

712:                                              ; preds = %702
  %713 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %660, i64 0, i32 24, i64 3, i32 1
  %714 = load i64, i64* %713, align 8
  %715 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %660, i64 0, i32 24, i64 0, i32 1
  %716 = load i64, i64* %715, align 8
  %717 = or i64 %716, %714
  %718 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %660, i64 0, i32 24, i64 2, i32 1
  %719 = load i64, i64* %718, align 8
  %720 = or i64 %717, %719
  %721 = icmp eq i64 %720, 0
  %722 = select i1 %721, i32 0, i32 64
  %723 = or i32 %722, %694
  br label %724

724:                                              ; preds = %656, %710, %712
  %725 = phi i32 [ %694, %656 ], [ %711, %710 ], [ %723, %712 ]
  %726 = and i32 %689, 32784
  %727 = or i32 %690, %726
  %728 = or i32 %725, %727
  store i32 %728, i32* %681, align 16
  %729 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 16), align 8
  %730 = load i32, i32* %729, align 4
  %731 = icmp eq i32 %730, 0
  br i1 %731, label %736, label %732, !prof !5

732:                                              ; preds = %724
  %733 = load void (i32, i32)*, void (i32, i32)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 19), align 8
  %734 = and i32 %659, 3
  tail call void %733(i32 noundef %734, i32 noundef %335)
  %735 = load i32, i32* %681, align 16
  br label %736

736:                                              ; preds = %724, %732
  %737 = phi i32 [ %728, %724 ], [ %735, %732 ]
  %738 = and i32 %737, -4
  %739 = or i32 %738, %335
  store i32 %739, i32* %681, align 16
  switch i32 %658, label %752 [
    i32 65535, label %740
    i32 -1, label %748
  ]

740:                                              ; preds = %736
  %741 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %742 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %741, i64 0, i32 0, i64 4
  %743 = load i64, i64* %742, align 16
  %744 = and i64 %743, -65536
  %745 = and i32 %657, 65535
  %746 = zext i32 %745 to i64
  %747 = or i64 %744, %746
  store i64 %747, i64* %742, align 16
  br label %756

748:                                              ; preds = %736
  %749 = zext i32 %657 to i64
  %750 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %751 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %750, i64 0, i32 0, i64 4
  store i64 %749, i64* %751, align 16
  br label %756

752:                                              ; preds = %736
  %753 = zext i32 %657 to i64
  %754 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %755 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %754, i64 0, i32 0, i64 4
  store i64 %753, i64* %755, align 16
  br label %756

756:                                              ; preds = %748, %752, %740
  %757 = phi %struct.CPUX86State* [ %750, %748 ], [ %754, %752 ], [ %741, %740 ]
  %758 = zext i32 %303 to i64
  %759 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %757, i64 0, i32 18
  store i64 %758, i64* %759, align 8
  %760 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 16), align 8
  %761 = load i32, i32* %760, align 4
  %762 = icmp eq i32 %761, 0
  br i1 %762, label %765, label %763, !prof !5

763:                                              ; preds = %756
  %764 = load void (i32, i32)*, void (i32, i32)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 19), align 8
  tail call void %764(i32 noundef %37, i32 noundef %335)
  br label %765

765:                                              ; preds = %268, %140, %763, %756, %285
  ret void
}

; Function Attrs: uwtable
define void @helper_iret_real(i32 noundef %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 0, i64 4
  %4 = load i64, i64* %3, align 16
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 24, i64 2, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = icmp eq i32 %0, 1
  %8 = and i64 %4, 65535
  %9 = add i64 %6, %8
  br i1 %7, label %10, label %26

10:                                               ; preds = %1
  %11 = and i64 %9, 4294967295
  %12 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef nonnull %2, i64 noundef %11)
  %13 = add i64 %4, 4
  %14 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %15 = and i64 %13, 65535
  %16 = add i64 %15, %6
  %17 = and i64 %16, 4294967295
  %18 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef %14, i64 noundef %17)
  %19 = add i64 %4, 8
  %20 = and i32 %18, 65535
  %21 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %22 = and i64 %19, 65535
  %23 = add i64 %22, %6
  %24 = and i64 %23, 4294967295
  %25 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef %21, i64 noundef %24)
  br label %38

26:                                               ; preds = %1
  %27 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* noundef nonnull %2, i64 noundef %9)
  %28 = add i64 %4, 2
  %29 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %30 = and i64 %28, 65535
  %31 = add i64 %30, %6
  %32 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* noundef %29, i64 noundef %31)
  %33 = add i64 %4, 4
  %34 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %35 = and i64 %33, 65535
  %36 = add i64 %35, %6
  %37 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* noundef %34, i64 noundef %36)
  br label %38

38:                                               ; preds = %26, %10
  %39 = phi i64 [ 6, %26 ], [ 12, %10 ]
  %40 = phi i32 [ %27, %26 ], [ %12, %10 ]
  %41 = phi i32 [ %37, %26 ], [ %25, %10 ]
  %42 = phi i32 [ %32, %26 ], [ %20, %10 ]
  %43 = add i64 %4, %39
  %44 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %45 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %44, i64 0, i32 0, i64 4
  %46 = load i64, i64* %45, align 16
  %47 = and i64 %46, 4294901760
  %48 = and i64 %43, 65535
  %49 = or i64 %47, %48
  store i64 %49, i64* %45, align 16
  %50 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %44, i64 0, i32 24, i64 1, i32 0
  store i32 %42, i32* %50, align 8
  %51 = shl i32 %42, 4
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %44, i64 0, i32 24, i64 1, i32 1
  store i64 %52, i64* %53, align 8
  %54 = zext i32 %40 to i64
  %55 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %44, i64 0, i32 18
  store i64 %54, i64* %55, align 8
  %56 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %44, i64 0, i32 20
  %57 = load i64, i64* %56, align 8
  %58 = and i64 %57, 131072
  %59 = icmp eq i64 %58, 0
  %60 = select i1 %59, i32 2454272, i32 2441984
  %61 = icmp eq i32 %0, 0
  %62 = and i32 %60, 29440
  %63 = select i1 %61, i32 %62, i32 %60
  %64 = and i32 %41, 2261
  %65 = zext i32 %64 to i64
  %66 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %44, i64 0, i32 2
  store i64 %65, i64* %66, align 8
  %67 = and i32 %41, 1024
  %68 = icmp eq i32 %67, 0
  %69 = select i1 %68, i32 1, i32 -1
  %70 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %44, i64 0, i32 19
  store i32 %69, i32* %70, align 16
  %71 = xor i32 %63, -1
  %72 = sext i32 %71 to i64
  %73 = and i64 %57, %72
  %74 = and i32 %63, %41
  %75 = zext i32 %74 to i64
  %76 = or i64 %73, %75
  store i64 %76, i64* %56, align 8
  %77 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %44, i64 0, i32 22
  %78 = load i32, i32* %77, align 4
  %79 = and i32 %78, -5
  store i32 %79, i32* %77, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_iret_protected(i32 noundef %0, i32 noundef %1) local_unnamed_addr #3 {
  %3 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %4 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 20
  %5 = load i64, i64* %4, align 8
  %6 = and i64 %5, 16384
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %46, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 21
  %10 = load i32, i32* %9, align 16
  %11 = and i32 %10, 16384
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %14, label %13

13:                                               ; preds = %8
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %3, i32 noundef 13, i32 noundef 0, i64 noundef 0) #28
  unreachable

14:                                               ; preds = %8
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 26, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* noundef nonnull %3, i64 noundef %16)
  %18 = and i32 %17, 4
  %19 = icmp eq i32 %18, 0
  %20 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %19, label %23, label %21

21:                                               ; preds = %14
  %22 = and i32 %17, 65532
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef %20, i32 noundef 10, i32 noundef %22, i64 noundef 0) #28
  unreachable

23:                                               ; preds = %14
  %24 = or i32 %17, 7
  %25 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %20, i64 0, i32 27, i32 2
  %26 = load i32, i32* %25, align 8
  %27 = icmp ugt i32 %24, %26
  br i1 %27, label %28, label %30

28:                                               ; preds = %23
  %29 = and i32 %17, 65532
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %20, i32 noundef 10, i32 noundef %29, i64 noundef 0) #28
  unreachable

30:                                               ; preds = %23
  %31 = and i32 %17, -8
  %32 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %20, i64 0, i32 27, i32 1
  %33 = load i64, i64* %32, align 8
  %34 = sext i32 %31 to i64
  %35 = add i64 %33, %34
  %36 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef nonnull %20, i64 noundef %35)
  %37 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %38 = add i64 %35, 4
  %39 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef %37, i64 noundef %38)
  %40 = and i32 %39, 5888
  %41 = icmp eq i32 %40, 768
  %42 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %41, label %45, label %43

43:                                               ; preds = %30
  %44 = and i32 %17, 65532
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef %42, i32 noundef 10, i32 noundef %44, i64 noundef 0) #28
  unreachable

45:                                               ; preds = %30
  tail call fastcc void @switch_tss(%struct.CPUX86State* noundef %42, i32 noundef %17, i32 noundef %36, i32 noundef %39, i32 noundef 1, i32 noundef %1)
  br label %47

46:                                               ; preds = %2
  tail call fastcc void @helper_ret_protected(%struct.CPUX86State* noundef nonnull %3, i32 noundef %0, i32 noundef 1, i32 noundef 0)
  br label %47

47:                                               ; preds = %46, %45
  %48 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %49 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %48, i64 0, i32 22
  %50 = load i32, i32* %49, align 4
  %51 = and i32 %50, -5
  store i32 %51, i32* %49, align 4
  ret void
}

; Function Attrs: inlinehint uwtable
define internal fastcc void @helper_ret_protected(%struct.CPUX86State* noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3) unnamed_addr #10 {
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 21
  %6 = load i32, i32* %5, align 16
  %7 = and i32 %6, 3
  %8 = icmp eq i32 %1, 2
  br i1 %8, label %9, label %25

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 0, i64 4
  %11 = load i64, i64* %10, align 16
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 2, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = tail call fastcc i64 @cpu_ldq_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %11)
  %15 = add i64 %11, 8
  %16 = tail call fastcc i64 @cpu_ldq_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %15)
  %17 = trunc i64 %16 to i32
  %18 = add i64 %11, 16
  %19 = and i32 %17, 65535
  %20 = icmp eq i32 %2, 0
  br i1 %20, label %72, label %21

21:                                               ; preds = %9
  %22 = tail call fastcc i64 @cpu_ldq_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %18)
  %23 = trunc i64 %22 to i32
  %24 = add i64 %11, 24
  br label %72

25:                                               ; preds = %4
  %26 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 2, i32 3
  %27 = load i32, i32* %26, align 4
  %28 = and i32 %27, 4194304
  %29 = icmp eq i32 %28, 0
  %30 = select i1 %29, i64 65535, i64 4294967295
  %31 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 0, i64 4
  %32 = load i64, i64* %31, align 16
  %33 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 2, i32 1
  %34 = load i64, i64* %33, align 8
  %35 = icmp eq i32 %1, 1
  %36 = and i64 %30, %32
  %37 = add i64 %36, %34
  br i1 %35, label %38, label %58

38:                                               ; preds = %25
  %39 = and i64 %37, 4294967295
  %40 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %39)
  %41 = zext i32 %40 to i64
  %42 = add i64 %32, 4
  %43 = and i64 %30, %42
  %44 = add i64 %43, %34
  %45 = and i64 %44, 4294967295
  %46 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %45)
  %47 = add i64 %32, 8
  %48 = and i32 %46, 65535
  %49 = icmp eq i32 %2, 0
  br i1 %49, label %72, label %50

50:                                               ; preds = %38
  %51 = and i64 %30, %47
  %52 = add i64 %51, %34
  %53 = and i64 %52, 4294967295
  %54 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %53)
  %55 = add i64 %32, 12
  %56 = and i32 %54, 131072
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %72, label %657

58:                                               ; preds = %25
  %59 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %37)
  %60 = zext i32 %59 to i64
  %61 = add i64 %32, 2
  %62 = and i64 %30, %61
  %63 = add i64 %62, %34
  %64 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %63)
  %65 = add i64 %32, 4
  %66 = icmp eq i32 %2, 0
  br i1 %66, label %72, label %67

67:                                               ; preds = %58
  %68 = and i64 %30, %65
  %69 = add i64 %68, %34
  %70 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %69)
  %71 = add i64 %32, 6
  br label %72

72:                                               ; preds = %21, %9, %58, %67, %38, %50
  %73 = phi i64 [ %13, %21 ], [ %13, %9 ], [ %34, %50 ], [ %34, %38 ], [ %34, %67 ], [ %34, %58 ]
  %74 = phi i64* [ %12, %21 ], [ %12, %9 ], [ %33, %50 ], [ %33, %38 ], [ %33, %67 ], [ %33, %58 ]
  %75 = phi i64* [ %10, %21 ], [ %10, %9 ], [ %31, %50 ], [ %31, %38 ], [ %31, %67 ], [ %31, %58 ]
  %76 = phi i64 [ -1, %21 ], [ -1, %9 ], [ %30, %50 ], [ %30, %38 ], [ %30, %67 ], [ %30, %58 ]
  %77 = phi i32 [ %23, %21 ], [ 0, %9 ], [ %54, %50 ], [ 0, %38 ], [ %70, %67 ], [ 0, %58 ]
  %78 = phi i32 [ %19, %21 ], [ %19, %9 ], [ %48, %50 ], [ %48, %38 ], [ %64, %67 ], [ %64, %58 ]
  %79 = phi i64 [ %24, %21 ], [ %18, %9 ], [ %55, %50 ], [ %47, %38 ], [ %71, %67 ], [ %65, %58 ]
  %80 = phi i64 [ %14, %21 ], [ %14, %9 ], [ %41, %50 ], [ %41, %38 ], [ %60, %67 ], [ %60, %58 ]
  %81 = and i32 %78, 65532
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %84

83:                                               ; preds = %72
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %0, i32 noundef 13, i32 noundef 0, i64 noundef 0) #28
  unreachable

84:                                               ; preds = %72
  %85 = and i32 %78, 4
  %86 = icmp eq i32 %85, 0
  %87 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %88 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %87, i64 0, i32 25
  %89 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %87, i64 0, i32 27
  %90 = select i1 %86, %struct.SegmentCache* %89, %struct.SegmentCache* %88
  %91 = or i32 %78, 7
  %92 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %90, i64 0, i32 2
  %93 = load i32, i32* %92, align 8
  %94 = icmp ugt i32 %91, %93
  br i1 %94, label %95, label %96

95:                                               ; preds = %84
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %0, i32 noundef 13, i32 noundef %81, i64 noundef 0) #28
  unreachable

96:                                               ; preds = %84
  %97 = and i32 %78, -8
  %98 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %90, i64 0, i32 1
  %99 = load i64, i64* %98, align 8
  %100 = sext i32 %97 to i64
  %101 = add i64 %99, %100
  %102 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef %87, i64 noundef %101)
  %103 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %104 = add i64 %101, 4
  %105 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef %103, i64 noundef %104)
  %106 = and i32 %105, 6144
  %107 = icmp eq i32 %106, 6144
  br i1 %107, label %109, label %108

108:                                              ; preds = %96
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %0, i32 noundef 13, i32 noundef %81, i64 noundef 0) #28
  unreachable

109:                                              ; preds = %96
  %110 = and i32 %78, 3
  %111 = icmp ult i32 %110, %7
  br i1 %111, label %112, label %113

112:                                              ; preds = %109
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %0, i32 noundef 13, i32 noundef %81, i64 noundef 0) #28
  unreachable

113:                                              ; preds = %109
  %114 = lshr i32 %105, 13
  %115 = and i32 %114, 3
  %116 = and i32 %105, 1024
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %121, label %118

118:                                              ; preds = %113
  %119 = icmp ugt i32 %115, %110
  br i1 %119, label %120, label %124

120:                                              ; preds = %118
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %0, i32 noundef 13, i32 noundef %81, i64 noundef 0) #28
  unreachable

121:                                              ; preds = %113
  %122 = icmp eq i32 %115, %110
  br i1 %122, label %124, label %123

123:                                              ; preds = %121
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %0, i32 noundef 13, i32 noundef %81, i64 noundef 0) #28
  unreachable

124:                                              ; preds = %121, %118
  %125 = and i32 %105, 32768
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %127, label %128

127:                                              ; preds = %124
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %0, i32 noundef 11, i32 noundef %81, i64 noundef 0) #28
  unreachable

128:                                              ; preds = %124
  %129 = sext i32 %3 to i64
  %130 = add i64 %79, %129
  %131 = icmp eq i32 %110, %7
  br i1 %131, label %132, label %204

132:                                              ; preds = %128
  %133 = load i32, i32* %5, align 16
  %134 = and i32 %133, 32768
  %135 = icmp eq i32 %134, 0
  %136 = icmp eq i32 %2, 0
  %137 = or i1 %136, %135
  br i1 %137, label %138, label %204

138:                                              ; preds = %132
  %139 = lshr i32 %102, 16
  %140 = shl i32 %105, 16
  %141 = and i32 %140, 16711680
  %142 = and i32 %105, -16777216
  %143 = or i32 %142, %139
  %144 = or i32 %143, %141
  %145 = zext i32 %144 to i64
  %146 = and i32 %102, 65535
  %147 = and i32 %105, 983040
  %148 = or i32 %147, %146
  %149 = and i32 %105, 8388608
  %150 = icmp eq i32 %149, 0
  %151 = shl nuw i32 %148, 12
  %152 = or i32 %151, 4095
  %153 = select i1 %150, i32 %148, i32 %152
  %154 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 1, i32 0
  store i32 %78, i32* %154, align 8
  %155 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 1, i32 1
  store i64 %145, i64* %155, align 8
  %156 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 1, i32 2
  store i32 %153, i32* %156, align 8
  %157 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 1, i32 3
  store i32 %105, i32* %157, align 4
  %158 = and i32 %133, 16384
  %159 = icmp eq i32 %158, 0
  %160 = and i32 %105, 2097152
  %161 = icmp eq i32 %160, 0
  %162 = or i1 %161, %159
  %163 = lshr i32 %105, 18
  %164 = and i32 %163, 16
  %165 = select i1 %162, i32 %164, i32 32816
  %166 = and i32 %133, -32881
  %167 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 2, i32 3
  %168 = load i32, i32* %167, align 4
  %169 = lshr i32 %168, 17
  %170 = and i32 %169, 32
  %171 = and i32 %165, 32768
  %172 = icmp eq i32 %171, 0
  br i1 %172, label %173, label %199

173:                                              ; preds = %138
  %174 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 29, i64 0
  %175 = load i64, i64* %174, align 16
  %176 = and i64 %175, 1
  %177 = icmp eq i64 %176, 0
  br i1 %177, label %186, label %178

178:                                              ; preds = %173
  %179 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 20
  %180 = load i64, i64* %179, align 8
  %181 = and i64 %180, 131072
  %182 = icmp ne i64 %181, 0
  %183 = and i32 %165, 16
  %184 = icmp eq i32 %183, 0
  %185 = select i1 %182, i1 true, i1 %184
  br i1 %185, label %186, label %188

186:                                              ; preds = %178, %173
  %187 = or i32 %170, 64
  br label %199

188:                                              ; preds = %178
  %189 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 3, i32 1
  %190 = load i64, i64* %189, align 8
  %191 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 0, i32 1
  %192 = load i64, i64* %191, align 8
  %193 = or i64 %192, %190
  %194 = load i64, i64* %74, align 8
  %195 = or i64 %193, %194
  %196 = icmp eq i64 %195, 0
  %197 = select i1 %196, i32 0, i32 64
  %198 = or i32 %197, %170
  br label %199

199:                                              ; preds = %138, %186, %188
  %200 = phi i32 [ %170, %138 ], [ %187, %186 ], [ %198, %188 ]
  %201 = and i32 %165, 32784
  %202 = or i32 %166, %201
  %203 = or i32 %200, %202
  store i32 %203, i32* %5, align 16
  br label %608

204:                                              ; preds = %132, %128
  br i1 %8, label %205, label %211

205:                                              ; preds = %204
  %206 = tail call fastcc i64 @cpu_ldq_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %130)
  %207 = add i64 %130, 8
  %208 = tail call fastcc i64 @cpu_ldq_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %207)
  %209 = trunc i64 %208 to i32
  %210 = and i32 %209, 65535
  br label %232

211:                                              ; preds = %204
  %212 = icmp eq i32 %1, 1
  %213 = and i64 %130, %76
  %214 = add i64 %213, %73
  br i1 %212, label %215, label %225

215:                                              ; preds = %211
  %216 = and i64 %214, 4294967295
  %217 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %216)
  %218 = zext i32 %217 to i64
  %219 = add i64 %130, 4
  %220 = and i64 %219, %76
  %221 = add i64 %220, %73
  %222 = and i64 %221, 4294967295
  %223 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %222)
  %224 = and i32 %223, 65535
  br label %232

225:                                              ; preds = %211
  %226 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %214)
  %227 = zext i32 %226 to i64
  %228 = add i64 %130, 2
  %229 = and i64 %228, %76
  %230 = add i64 %229, %73
  %231 = tail call fastcc i32 @cpu_lduw_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %230)
  br label %232

232:                                              ; preds = %205, %225, %215
  %233 = phi i32 [ %210, %205 ], [ %224, %215 ], [ %231, %225 ]
  %234 = phi i64 [ %206, %205 ], [ %218, %215 ], [ %227, %225 ]
  %235 = and i32 %233, 65532
  %236 = icmp eq i32 %235, 0
  br i1 %236, label %237, label %250

237:                                              ; preds = %232
  %238 = load i32, i32* %5, align 16
  %239 = and i32 %238, 16384
  %240 = icmp ne i32 %239, 0
  %241 = icmp ne i32 %110, 3
  %242 = select i1 %240, i1 %241, i1 false
  br i1 %242, label %243, label %249

243:                                              ; preds = %237
  %244 = shl nuw nsw i32 %110, 13
  %245 = or i32 %244, 12620544
  %246 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 2, i32 0
  store i32 %233, i32* %246, align 8
  store i64 0, i64* %74, align 8
  %247 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 2, i32 2
  store i32 -1, i32* %247, align 8
  %248 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 2, i32 3
  store i32 %245, i32* %248, align 4
  br label %308

249:                                              ; preds = %237
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %0, i32 noundef 13, i32 noundef 0, i64 noundef 0) #28
  unreachable

250:                                              ; preds = %232
  %251 = and i32 %233, 3
  %252 = icmp eq i32 %251, %110
  br i1 %252, label %254, label %253

253:                                              ; preds = %250
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %0, i32 noundef 13, i32 noundef %235, i64 noundef 0) #28
  unreachable

254:                                              ; preds = %250
  %255 = and i32 %233, 4
  %256 = icmp eq i32 %255, 0
  %257 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %258 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %257, i64 0, i32 25
  %259 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %257, i64 0, i32 27
  %260 = select i1 %256, %struct.SegmentCache* %259, %struct.SegmentCache* %258
  %261 = or i32 %233, 7
  %262 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %260, i64 0, i32 2
  %263 = load i32, i32* %262, align 8
  %264 = icmp ugt i32 %261, %263
  br i1 %264, label %265, label %266

265:                                              ; preds = %254
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %0, i32 noundef 13, i32 noundef %235, i64 noundef 0) #28
  unreachable

266:                                              ; preds = %254
  %267 = and i32 %233, -8
  %268 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %260, i64 0, i32 1
  %269 = load i64, i64* %268, align 8
  %270 = sext i32 %267 to i64
  %271 = add i64 %269, %270
  %272 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef %257, i64 noundef %271)
  %273 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %274 = add i64 %271, 4
  %275 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef %273, i64 noundef %274)
  %276 = and i32 %275, 6656
  %277 = icmp eq i32 %276, 4608
  br i1 %277, label %279, label %278

278:                                              ; preds = %266
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %0, i32 noundef 13, i32 noundef %235, i64 noundef 0) #28
  unreachable

279:                                              ; preds = %266
  %280 = lshr i32 %275, 13
  %281 = and i32 %280, 3
  %282 = icmp eq i32 %281, %110
  br i1 %282, label %284, label %283

283:                                              ; preds = %279
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %0, i32 noundef 13, i32 noundef %235, i64 noundef 0) #28
  unreachable

284:                                              ; preds = %279
  %285 = and i32 %275, 32768
  %286 = icmp eq i32 %285, 0
  br i1 %286, label %287, label %288

287:                                              ; preds = %284
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %0, i32 noundef 11, i32 noundef %235, i64 noundef 0) #28
  unreachable

288:                                              ; preds = %284
  %289 = lshr i32 %272, 16
  %290 = shl i32 %275, 16
  %291 = and i32 %290, 16711680
  %292 = and i32 %275, -16777216
  %293 = or i32 %292, %289
  %294 = or i32 %293, %291
  %295 = zext i32 %294 to i64
  %296 = and i32 %272, 65535
  %297 = and i32 %275, 983040
  %298 = or i32 %297, %296
  %299 = and i32 %275, 8388608
  %300 = icmp eq i32 %299, 0
  %301 = shl nuw i32 %298, 12
  %302 = or i32 %301, 4095
  %303 = select i1 %300, i32 %298, i32 %302
  %304 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 2, i32 0
  store i32 %233, i32* %304, align 8
  store i64 %295, i64* %74, align 8
  %305 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 2, i32 2
  store i32 %303, i32* %305, align 8
  %306 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 2, i32 3
  store i32 %275, i32* %306, align 4
  %307 = load i32, i32* %5, align 16
  br label %308

308:                                              ; preds = %288, %243
  %309 = phi i32 [ %238, %243 ], [ %307, %288 ]
  %310 = phi i64 [ 0, %243 ], [ %295, %288 ]
  %311 = phi i32 [ %245, %243 ], [ %275, %288 ]
  %312 = phi i32 [ 4194304, %243 ], [ %275, %288 ]
  %313 = lshr i32 %102, 16
  %314 = shl i32 %105, 16
  %315 = and i32 %314, 16711680
  %316 = and i32 %105, -16777216
  %317 = or i32 %316, %313
  %318 = or i32 %317, %315
  %319 = zext i32 %318 to i64
  %320 = and i32 %102, 65535
  %321 = and i32 %105, 983040
  %322 = or i32 %321, %320
  %323 = and i32 %105, 8388608
  %324 = icmp eq i32 %323, 0
  %325 = shl nuw i32 %322, 12
  %326 = or i32 %325, 4095
  %327 = select i1 %324, i32 %322, i32 %326
  %328 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 1, i32 0
  store i32 %78, i32* %328, align 8
  %329 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 1, i32 1
  store i64 %319, i64* %329, align 8
  %330 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 1, i32 2
  store i32 %327, i32* %330, align 8
  %331 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 1, i32 3
  store i32 %105, i32* %331, align 4
  %332 = and i32 %309, 16384
  %333 = icmp eq i32 %332, 0
  %334 = and i32 %105, 2097152
  %335 = icmp eq i32 %334, 0
  %336 = or i1 %335, %333
  %337 = lshr i32 %105, 18
  %338 = and i32 %337, 16
  %339 = select i1 %336, i32 %338, i32 32816
  %340 = and i32 %309, -32881
  %341 = lshr i32 %311, 17
  %342 = and i32 %341, 32
  %343 = and i32 %339, 32768
  %344 = icmp eq i32 %343, 0
  br i1 %344, label %345, label %370

345:                                              ; preds = %308
  %346 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 29, i64 0
  %347 = load i64, i64* %346, align 16
  %348 = and i64 %347, 1
  %349 = icmp eq i64 %348, 0
  br i1 %349, label %358, label %350

350:                                              ; preds = %345
  %351 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 20
  %352 = load i64, i64* %351, align 8
  %353 = and i64 %352, 131072
  %354 = icmp ne i64 %353, 0
  %355 = and i32 %339, 16
  %356 = icmp eq i32 %355, 0
  %357 = select i1 %354, i1 true, i1 %356
  br i1 %357, label %358, label %360

358:                                              ; preds = %350, %345
  %359 = or i32 %342, 64
  br label %370

360:                                              ; preds = %350
  %361 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 3, i32 1
  %362 = load i64, i64* %361, align 8
  %363 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 24, i64 0, i32 1
  %364 = load i64, i64* %363, align 8
  %365 = or i64 %364, %362
  %366 = or i64 %365, %310
  %367 = icmp eq i64 %366, 0
  %368 = select i1 %367, i32 0, i32 64
  %369 = or i32 %368, %342
  br label %370

370:                                              ; preds = %308, %358, %360
  %371 = phi i32 [ %342, %308 ], [ %359, %358 ], [ %369, %360 ]
  %372 = and i32 %339, 32784
  %373 = or i32 %340, %372
  %374 = or i32 %371, %373
  store i32 %374, i32* %5, align 16
  %375 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 16), align 8
  %376 = load i32, i32* %375, align 4
  %377 = icmp eq i32 %376, 0
  br i1 %377, label %382, label %378, !prof !5

378:                                              ; preds = %370
  %379 = load void (i32, i32)*, void (i32, i32)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 19), align 8
  %380 = and i32 %309, 3
  tail call void %379(i32 noundef %380, i32 noundef %110)
  %381 = load i32, i32* %5, align 16
  br label %382

382:                                              ; preds = %370, %378
  %383 = phi i32 [ %374, %370 ], [ %381, %378 ]
  %384 = and i32 %383, -4
  %385 = or i32 %384, %110
  store i32 %385, i32* %5, align 16
  %386 = and i32 %383, 32768
  %387 = icmp eq i32 %386, 0
  %388 = and i32 %312, 4194304
  %389 = icmp eq i32 %388, 0
  %390 = select i1 %389, i64 65535, i64 4294967295
  %391 = select i1 %387, i64 %390, i64 -1
  %392 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %393 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %392, i64 0, i32 24, i64 0, i32 3
  %394 = load i32, i32* %393, align 4
  %395 = lshr i32 %394, 13
  %396 = and i32 %395, 3
  %397 = and i32 %394, 3072
  %398 = icmp ne i32 %397, 3072
  %399 = icmp ult i32 %396, %110
  %400 = select i1 %398, i1 %399, i1 false
  br i1 %400, label %401, label %442

401:                                              ; preds = %382
  %402 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %392, i64 0, i32 24, i64 0, i32 0
  store i32 0, i32* %402, align 8
  %403 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %392, i64 0, i32 24, i64 0, i32 1
  %404 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %392, i64 0, i32 21
  %405 = bitcast i64* %403 to i8*
  %406 = call i8* @memset(i8* %405, i32 0, i64 16)
  %407 = load i32, i32* %404, align 16
  %408 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %392, i64 0, i32 24, i64 2, i32 3
  %409 = load i32, i32* %408, align 4
  %410 = lshr i32 %409, 17
  %411 = and i32 %410, 32
  %412 = and i32 %407, 32768
  %413 = icmp eq i32 %412, 0
  br i1 %413, label %414, label %438

414:                                              ; preds = %401
  %415 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %392, i64 0, i32 29, i64 0
  %416 = load i64, i64* %415, align 16
  %417 = and i64 %416, 1
  %418 = icmp eq i64 %417, 0
  br i1 %418, label %427, label %419

419:                                              ; preds = %414
  %420 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %392, i64 0, i32 20
  %421 = load i64, i64* %420, align 8
  %422 = and i64 %421, 131072
  %423 = icmp ne i64 %422, 0
  %424 = and i32 %407, 16
  %425 = icmp eq i32 %424, 0
  %426 = select i1 %423, i1 true, i1 %425
  br i1 %426, label %427, label %429

427:                                              ; preds = %419, %414
  %428 = or i32 %411, 64
  br label %438

429:                                              ; preds = %419
  %430 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %392, i64 0, i32 24, i64 3, i32 1
  %431 = load i64, i64* %430, align 8
  %432 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %392, i64 0, i32 24, i64 2, i32 1
  %433 = load i64, i64* %432, align 8
  %434 = or i64 %431, %433
  %435 = icmp eq i64 %434, 0
  %436 = select i1 %435, i32 0, i32 64
  %437 = or i32 %436, %411
  br label %438

438:                                              ; preds = %429, %427, %401
  %439 = phi i32 [ %411, %401 ], [ %428, %427 ], [ %437, %429 ]
  %440 = and i32 %407, -97
  %441 = or i32 %439, %440
  store i32 %441, i32* %404, align 16
  br label %442

442:                                              ; preds = %382, %438
  %443 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %392, i64 0, i32 24, i64 3, i32 3
  %444 = load i32, i32* %443, align 4
  %445 = lshr i32 %444, 13
  %446 = and i32 %445, 3
  %447 = and i32 %444, 3072
  %448 = icmp ne i32 %447, 3072
  %449 = icmp ult i32 %446, %110
  %450 = select i1 %448, i1 %449, i1 false
  br i1 %450, label %451, label %492

451:                                              ; preds = %442
  %452 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %392, i64 0, i32 24, i64 3, i32 0
  store i32 0, i32* %452, align 8
  %453 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %392, i64 0, i32 24, i64 3, i32 1
  %454 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %392, i64 0, i32 21
  %455 = bitcast i64* %453 to i8*
  %456 = call i8* @memset(i8* %455, i32 0, i64 16)
  %457 = load i32, i32* %454, align 16
  %458 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %392, i64 0, i32 24, i64 2, i32 3
  %459 = load i32, i32* %458, align 4
  %460 = lshr i32 %459, 17
  %461 = and i32 %460, 32
  %462 = and i32 %457, 32768
  %463 = icmp eq i32 %462, 0
  br i1 %463, label %464, label %488

464:                                              ; preds = %451
  %465 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %392, i64 0, i32 29, i64 0
  %466 = load i64, i64* %465, align 16
  %467 = and i64 %466, 1
  %468 = icmp eq i64 %467, 0
  br i1 %468, label %477, label %469

469:                                              ; preds = %464
  %470 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %392, i64 0, i32 20
  %471 = load i64, i64* %470, align 8
  %472 = and i64 %471, 131072
  %473 = icmp ne i64 %472, 0
  %474 = and i32 %457, 16
  %475 = icmp eq i32 %474, 0
  %476 = select i1 %473, i1 true, i1 %475
  br i1 %476, label %477, label %479

477:                                              ; preds = %469, %464
  %478 = or i32 %461, 64
  br label %488

479:                                              ; preds = %469
  %480 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %392, i64 0, i32 24, i64 0, i32 1
  %481 = load i64, i64* %480, align 8
  %482 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %392, i64 0, i32 24, i64 2, i32 1
  %483 = load i64, i64* %482, align 8
  %484 = or i64 %481, %483
  %485 = icmp eq i64 %484, 0
  %486 = select i1 %485, i32 0, i32 64
  %487 = or i32 %486, %461
  br label %488

488:                                              ; preds = %479, %477, %451
  %489 = phi i32 [ %461, %451 ], [ %478, %477 ], [ %487, %479 ]
  %490 = and i32 %457, -97
  %491 = or i32 %489, %490
  store i32 %491, i32* %454, align 16
  br label %492

492:                                              ; preds = %442, %488
  %493 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %392, i64 0, i32 24, i64 4, i32 0
  %494 = load i32, i32* %493, align 8
  %495 = and i32 %494, 65532
  %496 = icmp eq i32 %495, 0
  br i1 %496, label %549, label %497

497:                                              ; preds = %492
  %498 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %392, i64 0, i32 24, i64 4, i32 3
  %499 = load i32, i32* %498, align 4
  %500 = lshr i32 %499, 13
  %501 = and i32 %500, 3
  %502 = and i32 %499, 3072
  %503 = icmp ne i32 %502, 3072
  %504 = icmp ult i32 %501, %110
  %505 = select i1 %503, i1 %504, i1 false
  br i1 %505, label %506, label %549

506:                                              ; preds = %497
  store i32 0, i32* %493, align 8
  %507 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %392, i64 0, i32 24, i64 4, i32 1
  %508 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %392, i64 0, i32 21
  %509 = bitcast i64* %507 to i8*
  %510 = call i8* @memset(i8* %509, i32 0, i64 16)
  %511 = load i32, i32* %508, align 16
  %512 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %392, i64 0, i32 24, i64 2, i32 3
  %513 = load i32, i32* %512, align 4
  %514 = lshr i32 %513, 17
  %515 = and i32 %514, 32
  %516 = and i32 %511, 32768
  %517 = icmp eq i32 %516, 0
  br i1 %517, label %518, label %545

518:                                              ; preds = %506
  %519 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %392, i64 0, i32 29, i64 0
  %520 = load i64, i64* %519, align 16
  %521 = and i64 %520, 1
  %522 = icmp eq i64 %521, 0
  br i1 %522, label %531, label %523

523:                                              ; preds = %518
  %524 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %392, i64 0, i32 20
  %525 = load i64, i64* %524, align 8
  %526 = and i64 %525, 131072
  %527 = icmp ne i64 %526, 0
  %528 = and i32 %511, 16
  %529 = icmp eq i32 %528, 0
  %530 = select i1 %527, i1 true, i1 %529
  br i1 %530, label %531, label %533

531:                                              ; preds = %523, %518
  %532 = or i32 %515, 64
  br label %545

533:                                              ; preds = %523
  %534 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %392, i64 0, i32 24, i64 3, i32 1
  %535 = load i64, i64* %534, align 8
  %536 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %392, i64 0, i32 24, i64 0, i32 1
  %537 = load i64, i64* %536, align 8
  %538 = or i64 %537, %535
  %539 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %392, i64 0, i32 24, i64 2, i32 1
  %540 = load i64, i64* %539, align 8
  %541 = or i64 %538, %540
  %542 = icmp eq i64 %541, 0
  %543 = select i1 %542, i32 0, i32 64
  %544 = or i32 %543, %515
  br label %545

545:                                              ; preds = %533, %531, %506
  %546 = phi i32 [ %515, %506 ], [ %532, %531 ], [ %544, %533 ]
  %547 = and i32 %511, -97
  %548 = or i32 %546, %547
  store i32 %548, i32* %508, align 16
  br label %549

549:                                              ; preds = %492, %497, %545
  %550 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %392, i64 0, i32 24, i64 5, i32 0
  %551 = load i32, i32* %550, align 8
  %552 = and i32 %551, 65532
  %553 = icmp eq i32 %552, 0
  br i1 %553, label %606, label %554

554:                                              ; preds = %549
  %555 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %392, i64 0, i32 24, i64 5, i32 3
  %556 = load i32, i32* %555, align 4
  %557 = lshr i32 %556, 13
  %558 = and i32 %557, 3
  %559 = and i32 %556, 3072
  %560 = icmp ne i32 %559, 3072
  %561 = icmp ult i32 %558, %110
  %562 = select i1 %560, i1 %561, i1 false
  br i1 %562, label %563, label %606

563:                                              ; preds = %554
  store i32 0, i32* %550, align 8
  %564 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %392, i64 0, i32 24, i64 5, i32 1
  %565 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %392, i64 0, i32 21
  %566 = bitcast i64* %564 to i8*
  %567 = call i8* @memset(i8* %566, i32 0, i64 16)
  %568 = load i32, i32* %565, align 16
  %569 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %392, i64 0, i32 24, i64 2, i32 3
  %570 = load i32, i32* %569, align 4
  %571 = lshr i32 %570, 17
  %572 = and i32 %571, 32
  %573 = and i32 %568, 32768
  %574 = icmp eq i32 %573, 0
  br i1 %574, label %575, label %602

575:                                              ; preds = %563
  %576 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %392, i64 0, i32 29, i64 0
  %577 = load i64, i64* %576, align 16
  %578 = and i64 %577, 1
  %579 = icmp eq i64 %578, 0
  br i1 %579, label %588, label %580

580:                                              ; preds = %575
  %581 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %392, i64 0, i32 20
  %582 = load i64, i64* %581, align 8
  %583 = and i64 %582, 131072
  %584 = icmp ne i64 %583, 0
  %585 = and i32 %568, 16
  %586 = icmp eq i32 %585, 0
  %587 = select i1 %584, i1 true, i1 %586
  br i1 %587, label %588, label %590

588:                                              ; preds = %580, %575
  %589 = or i32 %572, 64
  br label %602

590:                                              ; preds = %580
  %591 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %392, i64 0, i32 24, i64 3, i32 1
  %592 = load i64, i64* %591, align 8
  %593 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %392, i64 0, i32 24, i64 0, i32 1
  %594 = load i64, i64* %593, align 8
  %595 = or i64 %594, %592
  %596 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %392, i64 0, i32 24, i64 2, i32 1
  %597 = load i64, i64* %596, align 8
  %598 = or i64 %595, %597
  %599 = icmp eq i64 %598, 0
  %600 = select i1 %599, i32 0, i32 64
  %601 = or i32 %600, %572
  br label %602

602:                                              ; preds = %590, %588, %563
  %603 = phi i32 [ %572, %563 ], [ %589, %588 ], [ %601, %590 ]
  %604 = and i32 %568, -97
  %605 = or i32 %603, %604
  store i32 %605, i32* %565, align 16
  br label %606

606:                                              ; preds = %549, %554, %602
  %607 = add i64 %234, %129
  br label %608

608:                                              ; preds = %199, %606
  %609 = phi i64 [ %607, %606 ], [ %130, %199 ]
  %610 = phi i64 [ %391, %606 ], [ %76, %199 ]
  switch i64 %610, label %618 [
    i64 65535, label %611
    i64 4294967295, label %616
  ]

611:                                              ; preds = %608
  %612 = load i64, i64* %75, align 16
  %613 = and i64 %612, -65536
  %614 = and i64 %609, 65535
  %615 = or i64 %613, %614
  br label %618

616:                                              ; preds = %608
  %617 = and i64 %609, 4294967295
  br label %618

618:                                              ; preds = %608, %616, %611
  %619 = phi i64 [ %617, %616 ], [ %615, %611 ], [ %609, %608 ]
  store i64 %619, i64* %75, align 16
  %620 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 18
  store i64 %80, i64* %620, align 8
  %621 = icmp eq i32 %2, 0
  br i1 %621, label %652, label %622

622:                                              ; preds = %618
  %623 = icmp eq i32 %7, 0
  %624 = select i1 %623, i32 2453760, i32 2441472
  %625 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 20
  %626 = load i64, i64* %625, align 8
  %627 = trunc i64 %626 to i32
  %628 = lshr i32 %627, 12
  %629 = and i32 %628, 3
  %630 = icmp ugt i32 %7, %629
  %631 = or i32 %624, 512
  %632 = select i1 %630, i32 %624, i32 %631
  %633 = icmp eq i32 %1, 0
  %634 = and i32 %632, 29440
  %635 = select i1 %633, i32 %634, i32 %632
  %636 = and i32 %77, 2261
  %637 = zext i32 %636 to i64
  %638 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %639 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %638, i64 0, i32 2
  store i64 %637, i64* %639, align 8
  %640 = and i32 %77, 1024
  %641 = icmp eq i32 %640, 0
  %642 = select i1 %641, i32 1, i32 -1
  %643 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %638, i64 0, i32 19
  store i32 %642, i32* %643, align 16
  %644 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %638, i64 0, i32 20
  %645 = load i64, i64* %644, align 8
  %646 = xor i32 %635, -1
  %647 = sext i32 %646 to i64
  %648 = and i64 %645, %647
  %649 = and i32 %635, %77
  %650 = zext i32 %649 to i64
  %651 = or i64 %648, %650
  store i64 %651, i64* %644, align 8
  br label %652

652:                                              ; preds = %622, %618
  br i1 %131, label %888, label %653

653:                                              ; preds = %652
  %654 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 16), align 8
  %655 = load i32, i32* %654, align 4
  %656 = icmp eq i32 %655, 0
  br i1 %656, label %888, label %885, !prof !5

657:                                              ; preds = %50
  %658 = and i64 %30, %55
  %659 = add i64 %658, %34
  %660 = and i64 %659, 4294967295
  %661 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %660)
  %662 = zext i32 %661 to i64
  %663 = add i64 %32, 16
  %664 = and i64 %30, %663
  %665 = add i64 %664, %34
  %666 = and i64 %665, 4294967295
  %667 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %666)
  %668 = add i64 %32, 20
  %669 = and i64 %30, %668
  %670 = add i64 %669, %34
  %671 = and i64 %670, 4294967295
  %672 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %671)
  %673 = add i64 %32, 24
  %674 = and i64 %30, %673
  %675 = add i64 %674, %34
  %676 = and i64 %675, 4294967295
  %677 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %676)
  %678 = add i64 %32, 28
  %679 = and i64 %30, %678
  %680 = add i64 %679, %34
  %681 = and i64 %680, 4294967295
  %682 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %681)
  %683 = add i64 %32, 32
  %684 = and i64 %30, %683
  %685 = add i64 %684, %34
  %686 = and i64 %685, 4294967295
  %687 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef nonnull %0, i64 noundef %686)
  %688 = and i32 %54, 2261
  %689 = zext i32 %688 to i64
  %690 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %691 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %690, i64 0, i32 2
  store i64 %689, i64* %691, align 8
  %692 = and i32 %54, 1024
  %693 = icmp eq i32 %692, 0
  %694 = select i1 %693, i32 1, i32 -1
  %695 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %690, i64 0, i32 19
  store i32 %694, i32* %695, align 16
  %696 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %690, i64 0, i32 20
  %697 = load i64, i64* %696, align 8
  %698 = and i64 %697, -4092673
  %699 = and i32 %54, 4092672
  %700 = zext i32 %699 to i64
  %701 = or i64 %698, %700
  store i64 %701, i64* %696, align 8
  %702 = shl nuw nsw i32 %48, 4
  %703 = zext i32 %702 to i64
  %704 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %690, i64 0, i32 24, i64 1, i32 0
  store i32 %48, i32* %704, align 8
  %705 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %690, i64 0, i32 24, i64 1, i32 1
  store i64 %703, i64* %705, align 8
  %706 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %690, i64 0, i32 24, i64 1, i32 2
  store i32 65535, i32* %706, align 8
  %707 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %690, i64 0, i32 24, i64 1, i32 3
  store i32 0, i32* %707, align 4
  %708 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %690, i64 0, i32 21
  %709 = load i32, i32* %708, align 16
  %710 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %690, i64 0, i32 24, i64 2, i32 3
  %711 = load i32, i32* %710, align 4
  %712 = lshr i32 %711, 17
  %713 = and i32 %712, 32
  %714 = and i32 %709, -32881
  %715 = or i32 %714, %713
  %716 = or i32 %715, 64
  store i32 %716, i32* %708, align 16
  %717 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 16), align 8
  %718 = load i32, i32* %717, align 4
  %719 = icmp eq i32 %718, 0
  br i1 %719, label %725, label %720, !prof !5

720:                                              ; preds = %657
  %721 = load void (i32, i32)*, void (i32, i32)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 19), align 8
  %722 = load i32, i32* %5, align 16
  %723 = and i32 %722, 3
  tail call void %721(i32 noundef %723, i32 noundef 3)
  %724 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br label %725

725:                                              ; preds = %657, %720
  %726 = phi %struct.CPUX86State* [ %690, %657 ], [ %724, %720 ]
  %727 = load i32, i32* %5, align 16
  %728 = or i32 %727, 3
  store i32 %728, i32* %5, align 16
  %729 = and i32 %667, 65535
  %730 = shl nuw nsw i32 %729, 4
  %731 = zext i32 %730 to i64
  %732 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %726, i64 0, i32 24, i64 2, i32 0
  store i32 %729, i32* %732, align 8
  %733 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %726, i64 0, i32 24, i64 2, i32 1
  store i64 %731, i64* %733, align 8
  %734 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %726, i64 0, i32 24, i64 2, i32 2
  store i32 65535, i32* %734, align 8
  %735 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %726, i64 0, i32 24, i64 2, i32 3
  store i32 0, i32* %735, align 4
  %736 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %726, i64 0, i32 21
  %737 = load i32, i32* %736, align 16
  %738 = and i32 %737, 32768
  %739 = icmp eq i32 %738, 0
  br i1 %739, label %740, label %762

740:                                              ; preds = %725
  %741 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %726, i64 0, i32 29, i64 0
  %742 = load i64, i64* %741, align 16
  %743 = and i64 %742, 1
  %744 = icmp eq i64 %743, 0
  br i1 %744, label %762, label %745

745:                                              ; preds = %740
  %746 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %726, i64 0, i32 20
  %747 = load i64, i64* %746, align 8
  %748 = and i64 %747, 131072
  %749 = icmp ne i64 %748, 0
  %750 = and i32 %737, 16
  %751 = icmp eq i32 %750, 0
  %752 = select i1 %749, i1 true, i1 %751
  br i1 %752, label %762, label %753

753:                                              ; preds = %745
  %754 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %726, i64 0, i32 24, i64 3, i32 1
  %755 = load i64, i64* %754, align 8
  %756 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %726, i64 0, i32 24, i64 0, i32 1
  %757 = load i64, i64* %756, align 8
  %758 = or i64 %755, %731
  %759 = or i64 %758, %757
  %760 = icmp eq i64 %759, 0
  %761 = select i1 %760, i32 0, i32 64
  br label %762

762:                                              ; preds = %740, %745, %725, %753
  %763 = phi i32 [ 0, %725 ], [ %761, %753 ], [ 64, %745 ], [ 64, %740 ]
  %764 = and i32 %737, -97
  %765 = or i32 %763, %764
  store i32 %765, i32* %736, align 16
  %766 = and i32 %672, 65535
  %767 = shl nuw nsw i32 %766, 4
  %768 = zext i32 %767 to i64
  %769 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %726, i64 0, i32 24, i64 0, i32 0
  store i32 %766, i32* %769, align 8
  %770 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %726, i64 0, i32 24, i64 0, i32 1
  store i64 %768, i64* %770, align 8
  %771 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %726, i64 0, i32 24, i64 0, i32 2
  store i32 65535, i32* %771, align 8
  %772 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %726, i64 0, i32 24, i64 0, i32 3
  store i32 0, i32* %772, align 4
  br i1 %739, label %773, label %793

773:                                              ; preds = %762
  %774 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %726, i64 0, i32 29, i64 0
  %775 = load i64, i64* %774, align 16
  %776 = and i64 %775, 1
  %777 = icmp eq i64 %776, 0
  br i1 %777, label %793, label %778

778:                                              ; preds = %773
  %779 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %726, i64 0, i32 20
  %780 = load i64, i64* %779, align 8
  %781 = and i64 %780, 131072
  %782 = icmp ne i64 %781, 0
  %783 = and i32 %737, 16
  %784 = icmp eq i32 %783, 0
  %785 = select i1 %782, i1 true, i1 %784
  br i1 %785, label %793, label %786

786:                                              ; preds = %778
  %787 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %726, i64 0, i32 24, i64 3, i32 1
  %788 = load i64, i64* %787, align 8
  %789 = or i64 %788, %768
  %790 = or i64 %789, %731
  %791 = icmp eq i64 %790, 0
  %792 = select i1 %791, i32 0, i32 64
  br label %793

793:                                              ; preds = %773, %778, %762, %786
  %794 = phi i32 [ 0, %762 ], [ %792, %786 ], [ 64, %778 ], [ 64, %773 ]
  %795 = or i32 %794, %764
  store i32 %795, i32* %736, align 16
  %796 = and i32 %677, 65535
  %797 = shl nuw nsw i32 %796, 4
  %798 = zext i32 %797 to i64
  %799 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %726, i64 0, i32 24, i64 3, i32 0
  store i32 %796, i32* %799, align 8
  %800 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %726, i64 0, i32 24, i64 3, i32 1
  store i64 %798, i64* %800, align 8
  %801 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %726, i64 0, i32 24, i64 3, i32 2
  store i32 65535, i32* %801, align 8
  %802 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %726, i64 0, i32 24, i64 3, i32 3
  store i32 0, i32* %802, align 4
  br i1 %739, label %803, label %821

803:                                              ; preds = %793
  %804 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %726, i64 0, i32 29, i64 0
  %805 = load i64, i64* %804, align 16
  %806 = and i64 %805, 1
  %807 = icmp eq i64 %806, 0
  br i1 %807, label %821, label %808

808:                                              ; preds = %803
  %809 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %726, i64 0, i32 20
  %810 = load i64, i64* %809, align 8
  %811 = and i64 %810, 131072
  %812 = icmp ne i64 %811, 0
  %813 = and i32 %737, 16
  %814 = icmp eq i32 %813, 0
  %815 = select i1 %812, i1 true, i1 %814
  br i1 %815, label %821, label %816

816:                                              ; preds = %808
  %817 = or i32 %767, %797
  %818 = or i32 %817, %730
  %819 = icmp eq i32 %818, 0
  %820 = select i1 %819, i32 0, i32 64
  br label %821

821:                                              ; preds = %803, %808, %793, %816
  %822 = phi i32 [ 0, %793 ], [ %820, %816 ], [ 64, %808 ], [ 64, %803 ]
  %823 = or i32 %822, %764
  store i32 %823, i32* %736, align 16
  %824 = and i32 %682, 65535
  %825 = shl nuw nsw i32 %824, 4
  %826 = zext i32 %825 to i64
  %827 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %726, i64 0, i32 24, i64 4, i32 0
  store i32 %824, i32* %827, align 8
  %828 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %726, i64 0, i32 24, i64 4, i32 1
  store i64 %826, i64* %828, align 8
  %829 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %726, i64 0, i32 24, i64 4, i32 2
  store i32 65535, i32* %829, align 8
  %830 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %726, i64 0, i32 24, i64 4, i32 3
  store i32 0, i32* %830, align 4
  br i1 %739, label %831, label %849

831:                                              ; preds = %821
  %832 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %726, i64 0, i32 29, i64 0
  %833 = load i64, i64* %832, align 16
  %834 = and i64 %833, 1
  %835 = icmp eq i64 %834, 0
  br i1 %835, label %849, label %836

836:                                              ; preds = %831
  %837 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %726, i64 0, i32 20
  %838 = load i64, i64* %837, align 8
  %839 = and i64 %838, 131072
  %840 = icmp ne i64 %839, 0
  %841 = and i32 %737, 16
  %842 = icmp eq i32 %841, 0
  %843 = select i1 %840, i1 true, i1 %842
  br i1 %843, label %849, label %844

844:                                              ; preds = %836
  %845 = or i32 %767, %797
  %846 = or i32 %845, %730
  %847 = icmp eq i32 %846, 0
  %848 = select i1 %847, i32 0, i32 64
  br label %849

849:                                              ; preds = %831, %836, %821, %844
  %850 = phi i32 [ 0, %821 ], [ %848, %844 ], [ 64, %836 ], [ 64, %831 ]
  %851 = or i32 %850, %764
  store i32 %851, i32* %736, align 16
  %852 = and i32 %687, 65535
  %853 = shl nuw nsw i32 %852, 4
  %854 = zext i32 %853 to i64
  %855 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %726, i64 0, i32 24, i64 5, i32 0
  store i32 %852, i32* %855, align 8
  %856 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %726, i64 0, i32 24, i64 5, i32 1
  store i64 %854, i64* %856, align 8
  %857 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %726, i64 0, i32 24, i64 5, i32 2
  store i32 65535, i32* %857, align 8
  %858 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %726, i64 0, i32 24, i64 5, i32 3
  store i32 0, i32* %858, align 4
  br i1 %739, label %859, label %877

859:                                              ; preds = %849
  %860 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %726, i64 0, i32 29, i64 0
  %861 = load i64, i64* %860, align 16
  %862 = and i64 %861, 1
  %863 = icmp eq i64 %862, 0
  br i1 %863, label %877, label %864

864:                                              ; preds = %859
  %865 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %726, i64 0, i32 20
  %866 = load i64, i64* %865, align 8
  %867 = and i64 %866, 131072
  %868 = icmp ne i64 %867, 0
  %869 = and i32 %737, 16
  %870 = icmp eq i32 %869, 0
  %871 = select i1 %868, i1 true, i1 %870
  br i1 %871, label %877, label %872

872:                                              ; preds = %864
  %873 = or i32 %767, %797
  %874 = or i32 %873, %730
  %875 = icmp eq i32 %874, 0
  %876 = select i1 %875, i32 0, i32 64
  br label %877

877:                                              ; preds = %859, %864, %849, %872
  %878 = phi i32 [ 0, %849 ], [ %876, %872 ], [ 64, %864 ], [ 64, %859 ]
  %879 = or i32 %878, %764
  store i32 %879, i32* %736, align 16
  %880 = and i64 %41, 65535
  %881 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 18
  store i64 %880, i64* %881, align 8
  store i64 %662, i64* %31, align 16
  %882 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 16), align 8
  %883 = load i32, i32* %882, align 4
  %884 = icmp eq i32 %883, 0
  br i1 %884, label %888, label %885, !prof !5

885:                                              ; preds = %877, %653
  %886 = phi i32 [ %110, %653 ], [ 3, %877 ]
  %887 = load void (i32, i32)*, void (i32, i32)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 19), align 8
  tail call void %887(i32 noundef %7, i32 noundef %886)
  br label %888

888:                                              ; preds = %885, %877, %652, %653
  ret void
}

; Function Attrs: uwtable
define void @helper_lret_protected(i32 noundef %0, i32 noundef %1) local_unnamed_addr #3 {
  %3 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call fastcc void @helper_ret_protected(%struct.CPUX86State* noundef %3, i32 noundef %0, i32 noundef 0, i32 noundef %1)
  ret void
}

; Function Attrs: uwtable
define void @helper_sysenter() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 21
  %3 = load i32, i32* %2, align 16
  %4 = and i32 %3, 3
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 34
  %6 = load i32, i32* %5, align 16
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %9

8:                                                ; preds = %0
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %1, i32 noundef 13, i32 noundef 0, i64 noundef 0) #28
  unreachable

9:                                                ; preds = %0
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 20
  %11 = load i64, i64* %10, align 8
  %12 = and i64 %11, -197121
  store i64 %12, i64* %10, align 8
  %13 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 16), align 8
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %20, label %16, !prof !5

16:                                               ; preds = %9
  %17 = load void (i32, i32)*, void (i32, i32)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 19), align 8
  tail call void %17(i32 noundef %4, i32 noundef 0)
  %18 = load i32, i32* %2, align 16
  %19 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br label %20

20:                                               ; preds = %9, %16
  %21 = phi %struct.CPUX86State* [ %1, %9 ], [ %19, %16 ]
  %22 = phi i32 [ %3, %9 ], [ %18, %16 ]
  %23 = and i32 %22, -4
  store i32 %23, i32* %2, align 16
  %24 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 21
  %25 = load i32, i32* %24, align 16
  %26 = and i32 %25, 16384
  %27 = icmp eq i32 %26, 0
  %28 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 34
  %29 = load i32, i32* %28, align 16
  %30 = and i32 %29, 65532
  %31 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 24, i64 1, i32 0
  store i32 %30, i32* %31, align 8
  %32 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 24, i64 1, i32 1
  store i64 0, i64* %32, align 8
  %33 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 24, i64 1, i32 2
  store i32 -1, i32* %33, align 8
  %34 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 24, i64 1, i32 3
  br i1 %27, label %43, label %35

35:                                               ; preds = %20
  store i32 14719744, i32* %34, align 4
  %36 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 24, i64 2, i32 3
  %37 = load i32, i32* %36, align 4
  %38 = lshr i32 %37, 17
  %39 = and i32 %38, 32
  %40 = and i32 %25, -32881
  %41 = or i32 %40, %39
  %42 = or i32 %41, 32784
  br label %76

43:                                               ; preds = %20
  store i32 12622592, i32* %34, align 4
  %44 = and i32 %25, -32881
  %45 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 24, i64 2, i32 3
  %46 = load i32, i32* %45, align 4
  %47 = lshr i32 %46, 17
  %48 = and i32 %47, 32
  %49 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 29, i64 0
  %50 = load i64, i64* %49, align 16
  %51 = and i64 %50, 1
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %58, label %53

53:                                               ; preds = %43
  %54 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 20
  %55 = load i64, i64* %54, align 8
  %56 = and i64 %55, 131072
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %60, label %58

58:                                               ; preds = %53, %43
  %59 = or i32 %48, 64
  br label %72

60:                                               ; preds = %53
  %61 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 24, i64 3, i32 1
  %62 = load i64, i64* %61, align 8
  %63 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 24, i64 0, i32 1
  %64 = load i64, i64* %63, align 8
  %65 = or i64 %64, %62
  %66 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 24, i64 2, i32 1
  %67 = load i64, i64* %66, align 8
  %68 = or i64 %65, %67
  %69 = icmp eq i64 %68, 0
  %70 = select i1 %69, i32 0, i32 64
  %71 = or i32 %70, %48
  br label %72

72:                                               ; preds = %58, %60
  %73 = phi i32 [ %59, %58 ], [ %71, %60 ]
  %74 = or i32 %44, %73
  %75 = or i32 %74, 16
  br label %76

76:                                               ; preds = %72, %35
  %77 = phi i32 [ %42, %35 ], [ %75, %72 ]
  store i32 %77, i32* %24, align 16
  %78 = add i32 %29, 8
  %79 = and i32 %78, 65532
  %80 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 24, i64 2, i32 0
  store i32 %79, i32* %80, align 8
  %81 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 24, i64 2, i32 1
  store i64 0, i64* %81, align 8
  %82 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 24, i64 2, i32 2
  store i32 -1, i32* %82, align 8
  %83 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 24, i64 2, i32 3
  store i32 12620544, i32* %83, align 4
  %84 = and i32 %77, 32768
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %86, label %104

86:                                               ; preds = %76
  %87 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 29, i64 0
  %88 = load i64, i64* %87, align 16
  %89 = and i64 %88, 1
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %104, label %91

91:                                               ; preds = %86
  %92 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 20
  %93 = load i64, i64* %92, align 8
  %94 = and i64 %93, 131072
  %95 = icmp eq i64 %94, 0
  br i1 %95, label %96, label %104

96:                                               ; preds = %91
  %97 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 24, i64 3, i32 1
  %98 = load i64, i64* %97, align 8
  %99 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 24, i64 0, i32 1
  %100 = load i64, i64* %99, align 8
  %101 = or i64 %100, %98
  %102 = icmp eq i64 %101, 0
  %103 = select i1 %102, i32 32, i32 96
  br label %104

104:                                              ; preds = %86, %91, %76, %96
  %105 = phi i32 [ 32, %76 ], [ %103, %96 ], [ 96, %91 ], [ 96, %86 ]
  %106 = and i32 %77, -97
  %107 = or i32 %105, %106
  store i32 %107, i32* %24, align 16
  %108 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 35
  %109 = load i64, i64* %108, align 8
  %110 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 0, i64 4
  store i64 %109, i64* %110, align 16
  %111 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 36
  %112 = load i64, i64* %111, align 16
  %113 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 18
  store i64 %112, i64* %113, align 8
  %114 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 16), align 8
  %115 = load i32, i32* %114, align 4
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %119, label %117, !prof !5

117:                                              ; preds = %104
  %118 = load void (i32, i32)*, void (i32, i32)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 19), align 8
  tail call void %118(i32 noundef %4, i32 noundef 0)
  br label %119

119:                                              ; preds = %117, %104
  ret void
}

; Function Attrs: uwtable
define void @helper_sysexit(i32 noundef %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 21
  %4 = load i32, i32* %3, align 16
  %5 = and i32 %4, 3
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 34
  %7 = load i32, i32* %6, align 16
  %8 = icmp eq i32 %7, 0
  %9 = icmp ne i32 %5, 0
  %10 = select i1 %8, i1 true, i1 %9
  br i1 %10, label %11, label %12

11:                                               ; preds = %1
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef nonnull %2, i32 noundef 13, i32 noundef 0, i64 noundef 0) #28
  unreachable

12:                                               ; preds = %1
  %13 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 16), align 8
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %19, label %16, !prof !5

16:                                               ; preds = %12
  %17 = load void (i32, i32)*, void (i32, i32)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 19), align 8
  tail call void %17(i32 noundef 0, i32 noundef 3)
  %18 = load i32, i32* %3, align 16
  br label %19

19:                                               ; preds = %12, %16
  %20 = phi i32 [ %4, %12 ], [ %18, %16 ]
  %21 = or i32 %20, 3
  store i32 %21, i32* %3, align 16
  %22 = icmp eq i32 %0, 2
  %23 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %24 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 34
  %25 = load i32, i32* %24, align 16
  br i1 %22, label %26, label %104

26:                                               ; preds = %19
  %27 = add i32 %25, 32
  %28 = and i32 %27, 65532
  %29 = or i32 %28, 3
  %30 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 24, i64 1, i32 0
  store i32 %29, i32* %30, align 8
  %31 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 24, i64 1, i32 1
  store i64 0, i64* %31, align 8
  %32 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 24, i64 1, i32 2
  store i32 -1, i32* %32, align 8
  %33 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 24, i64 1, i32 3
  store i32 14744320, i32* %33, align 4
  %34 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 21
  %35 = load i32, i32* %34, align 16
  %36 = and i32 %35, 16384
  %37 = icmp eq i32 %36, 0
  %38 = and i32 %35, -32881
  %39 = or i32 %38, 32816
  %40 = and i32 %35, -32785
  %41 = or i32 %40, 16
  %42 = select i1 %37, i32 %41, i32 %39
  %43 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 24, i64 2, i32 3
  %44 = load i32, i32* %43, align 4
  %45 = lshr i32 %44, 17
  %46 = and i32 %45, 32
  %47 = and i32 %42, 32768
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %73

49:                                               ; preds = %26
  %50 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 29, i64 0
  %51 = load i64, i64* %50, align 16
  %52 = and i64 %51, 1
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %59, label %54

54:                                               ; preds = %49
  %55 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 20
  %56 = load i64, i64* %55, align 8
  %57 = and i64 %56, 131072
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %61, label %59

59:                                               ; preds = %54, %49
  %60 = or i32 %46, 64
  br label %73

61:                                               ; preds = %54
  %62 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 24, i64 3, i32 1
  %63 = load i64, i64* %62, align 8
  %64 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 24, i64 0, i32 1
  %65 = load i64, i64* %64, align 8
  %66 = or i64 %65, %63
  %67 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 24, i64 2, i32 1
  %68 = load i64, i64* %67, align 8
  %69 = or i64 %66, %68
  %70 = icmp eq i64 %69, 0
  %71 = select i1 %70, i32 0, i32 64
  %72 = or i32 %71, %46
  br label %73

73:                                               ; preds = %26, %59, %61
  %74 = phi i32 [ %46, %26 ], [ %60, %59 ], [ %72, %61 ]
  %75 = and i32 %42, -97
  %76 = or i32 %74, %75
  store i32 %76, i32* %34, align 16
  %77 = add i32 %25, 40
  %78 = and i32 %77, 65532
  %79 = or i32 %78, 3
  %80 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 24, i64 2, i32 0
  store i32 %79, i32* %80, align 8
  %81 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 24, i64 2, i32 1
  store i64 0, i64* %81, align 8
  %82 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 24, i64 2, i32 2
  store i32 -1, i32* %82, align 8
  store i32 12645120, i32* %43, align 4
  br i1 %48, label %83, label %101

83:                                               ; preds = %73
  %84 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 29, i64 0
  %85 = load i64, i64* %84, align 16
  %86 = and i64 %85, 1
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %101, label %88

88:                                               ; preds = %83
  %89 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 20
  %90 = load i64, i64* %89, align 8
  %91 = and i64 %90, 131072
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %93, label %101

93:                                               ; preds = %88
  %94 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 24, i64 3, i32 1
  %95 = load i64, i64* %94, align 8
  %96 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 24, i64 0, i32 1
  %97 = load i64, i64* %96, align 8
  %98 = or i64 %97, %95
  %99 = icmp eq i64 %98, 0
  %100 = select i1 %99, i32 32, i32 96
  br label %101

101:                                              ; preds = %83, %88, %73, %93
  %102 = phi i32 [ 32, %73 ], [ %100, %93 ], [ 96, %88 ], [ 96, %83 ]
  %103 = or i32 %102, %75
  store i32 %103, i32* %34, align 16
  br label %168

104:                                              ; preds = %19
  %105 = add i32 %25, 16
  %106 = and i32 %105, 65532
  %107 = or i32 %106, 3
  %108 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 24, i64 1, i32 0
  store i32 %107, i32* %108, align 8
  %109 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 24, i64 1, i32 1
  store i64 0, i64* %109, align 8
  %110 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 24, i64 1, i32 2
  store i32 -1, i32* %110, align 8
  %111 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 24, i64 1, i32 3
  store i32 12647168, i32* %111, align 4
  %112 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 21
  %113 = load i32, i32* %112, align 16
  %114 = and i32 %113, -32881
  %115 = or i32 %114, 16
  %116 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 24, i64 2, i32 3
  %117 = load i32, i32* %116, align 4
  %118 = lshr i32 %117, 17
  %119 = and i32 %118, 32
  %120 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 29, i64 0
  %121 = load i64, i64* %120, align 16
  %122 = and i64 %121, 1
  %123 = icmp eq i64 %122, 0
  br i1 %123, label %129, label %124

124:                                              ; preds = %104
  %125 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 20
  %126 = load i64, i64* %125, align 8
  %127 = and i64 %126, 131072
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %131, label %129

129:                                              ; preds = %124, %104
  %130 = or i32 %119, 64
  br label %143

131:                                              ; preds = %124
  %132 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 24, i64 3, i32 1
  %133 = load i64, i64* %132, align 8
  %134 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 24, i64 0, i32 1
  %135 = load i64, i64* %134, align 8
  %136 = or i64 %135, %133
  %137 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 24, i64 2, i32 1
  %138 = load i64, i64* %137, align 8
  %139 = or i64 %136, %138
  %140 = icmp eq i64 %139, 0
  %141 = select i1 %140, i32 0, i32 64
  %142 = or i32 %141, %119
  br label %143

143:                                              ; preds = %129, %131
  %144 = phi i32 [ %130, %129 ], [ %142, %131 ]
  %145 = or i32 %144, %115
  store i32 %145, i32* %112, align 16
  %146 = add i32 %25, 24
  %147 = and i32 %146, 65532
  %148 = or i32 %147, 3
  %149 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 24, i64 2, i32 0
  store i32 %148, i32* %149, align 8
  %150 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 24, i64 2, i32 1
  store i64 0, i64* %150, align 8
  %151 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 24, i64 2, i32 2
  store i32 -1, i32* %151, align 8
  store i32 12645120, i32* %116, align 4
  br i1 %123, label %165, label %152

152:                                              ; preds = %143
  %153 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 20
  %154 = load i64, i64* %153, align 8
  %155 = and i64 %154, 131072
  %156 = icmp eq i64 %155, 0
  br i1 %156, label %157, label %165

157:                                              ; preds = %152
  %158 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 24, i64 3, i32 1
  %159 = load i64, i64* %158, align 8
  %160 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 24, i64 0, i32 1
  %161 = load i64, i64* %160, align 8
  %162 = or i64 %161, %159
  %163 = icmp eq i64 %162, 0
  %164 = select i1 %163, i32 32, i32 96
  br label %165

165:                                              ; preds = %143, %152, %157
  %166 = phi i32 [ %164, %157 ], [ 96, %152 ], [ 96, %143 ]
  %167 = or i32 %166, %115
  store i32 %167, i32* %112, align 16
  br label %168

168:                                              ; preds = %165, %101
  %169 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 0, i64 1
  %170 = load i64, i64* %169, align 8
  %171 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 0, i64 4
  store i64 %170, i64* %171, align 16
  %172 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 0, i64 2
  %173 = load i64, i64* %172, align 16
  %174 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 18
  store i64 %173, i64* %174, align 8
  %175 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 16), align 8
  %176 = load i32, i32* %175, align 4
  %177 = icmp eq i32 %176, 0
  br i1 %177, label %180, label %178, !prof !5

178:                                              ; preds = %168
  %179 = load void (i32, i32)*, void (i32, i32)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 19), align 8
  tail call void %179(i32 noundef 0, i32 noundef 3)
  br label %180

180:                                              ; preds = %178, %168
  ret void
}

; Function Attrs: uwtable
define i64 @helper_read_crN(i32 noundef %0) local_unnamed_addr #3 {
  tail call void @helper_svm_check_intercept_param(i32 noundef %0, i64 noundef 0)
  %2 = icmp eq i32 %0, 8
  %3 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %2, label %8, label %4

4:                                                ; preds = %1
  %5 = sext i32 %0 to i64
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 29, i64 %5
  %7 = load i64, i64* %6, align 8
  br label %12

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 48
  %10 = load i8, i8* %9, align 4
  %11 = zext i8 %10 to i64
  br label %12

12:                                               ; preds = %8, %4
  %13 = phi i64 [ %11, %8 ], [ %7, %4 ]
  ret i64 %13
}

; Function Attrs: uwtable
define void @helper_write_crN(i32 noundef %0, i64 noundef %1) local_unnamed_addr #3 {
  %3 = add nsw i32 %0, 16
  tail call void @helper_svm_check_intercept_param(i32 noundef %3, i64 noundef 0)
  switch i32 %0, label %17 [
    i32 0, label %4
    i32 3, label %7
    i32 4, label %9
    i32 8, label %12
  ]

4:                                                ; preds = %2
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %6 = trunc i64 %1 to i32
  tail call void @cpu_x86_update_cr0(%struct.CPUX86State* noundef %5, i32 noundef %6)
  br label %21

7:                                                ; preds = %2
  %8 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @cpu_x86_update_cr3(%struct.CPUX86State* noundef %8, i64 noundef %1)
  br label %21

9:                                                ; preds = %2
  %10 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %11 = trunc i64 %1 to i32
  tail call void @cpu_x86_update_cr4(%struct.CPUX86State* noundef %10, i32 noundef %11)
  br label %21

12:                                               ; preds = %2
  %13 = trunc i64 %1 to i8
  %14 = and i8 %13, 15
  %15 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 48
  store i8 %14, i8* %16, align 4
  tail call void @cpu_exit(%struct.CPUX86State* noundef %15)
  br label %21

17:                                               ; preds = %2
  %18 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %19 = sext i32 %0 to i64
  %20 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 29, i64 %19
  store i64 %1, i64* %20, align 8
  br label %21

21:                                               ; preds = %17, %12, %9, %7, %4
  ret void
}

declare void @cpu_exit(%struct.CPUX86State* noundef) local_unnamed_addr #9

; Function Attrs: uwtable
define void @helper_movl_drN_T0(i32 noundef %0, i64 noundef %1) local_unnamed_addr #3 {
  %3 = icmp slt i32 %0, 4
  br i1 %3, label %4, label %10

4:                                                ; preds = %2
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @hw_breakpoint_remove(%struct.CPUX86State* noundef %5, i32 noundef %0)
  %6 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %7 = sext i32 %0 to i64
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %6, i64 0, i32 65, i64 %7
  store i64 %1, i64* %8, align 8
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @hw_breakpoint_insert(%struct.CPUX86State* noundef %9, i32 noundef %0)
  br label %25

10:                                               ; preds = %2
  %11 = icmp eq i32 %0, 7
  %12 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %11, label %13, label %22

13:                                               ; preds = %10
  tail call void @hw_breakpoint_remove(%struct.CPUX86State* noundef %12, i32 noundef 0)
  %14 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @hw_breakpoint_remove(%struct.CPUX86State* noundef %14, i32 noundef 1)
  %15 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @hw_breakpoint_remove(%struct.CPUX86State* noundef %15, i32 noundef 2)
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @hw_breakpoint_remove(%struct.CPUX86State* noundef %16, i32 noundef 3)
  %17 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %18 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %17, i64 0, i32 65, i64 7
  store i64 %1, i64* %18, align 8
  tail call void @hw_breakpoint_insert(%struct.CPUX86State* noundef %17, i32 noundef 0)
  %19 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @hw_breakpoint_insert(%struct.CPUX86State* noundef %19, i32 noundef 1)
  %20 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @hw_breakpoint_insert(%struct.CPUX86State* noundef %20, i32 noundef 2)
  %21 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @hw_breakpoint_insert(%struct.CPUX86State* noundef %21, i32 noundef 3)
  br label %25

22:                                               ; preds = %10
  %23 = zext i32 %0 to i64
  %24 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %12, i64 0, i32 65, i64 %23
  store i64 %1, i64* %24, align 8
  br label %25

25:                                               ; preds = %13, %22, %4
  ret void
}

declare void @hw_breakpoint_insert(%struct.CPUX86State* noundef, i32 noundef) local_unnamed_addr #9

; Function Attrs: uwtable
define void @helper_lmsw(i64 noundef %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 29, i64 0
  %4 = load i64, i64* %3, align 16
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 21
  %6 = load i32, i32* %5, align 16
  %7 = and i32 %6, 2097152
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %15, label %9, !prof !5

9:                                                ; preds = %1
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 44
  %11 = load i16, i16* %10, align 2
  %12 = and i16 %11, 1
  %13 = icmp eq i16 %12, 0
  br i1 %13, label %15, label %14

14:                                               ; preds = %9
  tail call void @helper_vmexit(i32 noundef 16, i64 noundef 0)
  unreachable

15:                                               ; preds = %1, %9
  %16 = and i64 %4, 4294967281
  %17 = and i64 %0, 15
  %18 = or i64 %16, %17
  %19 = trunc i64 %18 to i32
  tail call void @cpu_x86_update_cr0(%struct.CPUX86State* noundef nonnull %2, i32 noundef %19)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_clts() local_unnamed_addr #2 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 29, i64 0
  %3 = load i64, i64* %2, align 16
  %4 = and i64 %3, -9
  store i64 %4, i64* %2, align 16
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 21
  %6 = load i32, i32* %5, align 16
  %7 = and i32 %6, -2049
  store i32 %7, i32* %5, align 16
  ret void
}

; Function Attrs: uwtable
define void @helper_invlpg(i64 noundef %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 21
  %4 = load i32, i32* %3, align 16
  %5 = and i32 %4, 2097152
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %13, label %7, !prof !5

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 42
  %9 = load i64, i64* %8, align 16
  %10 = and i64 %9, 33554432
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %13, label %12

12:                                               ; preds = %7
  tail call void @helper_vmexit(i32 noundef 121, i64 noundef 0)
  unreachable

13:                                               ; preds = %1, %7
  tail call void @tlb_flush_page(%struct.CPUX86State* noundef nonnull %2, i64 noundef %0)
  ret void
}

declare void @tlb_flush_page(%struct.CPUX86State* noundef, i64 noundef) local_unnamed_addr #9

; Function Attrs: uwtable
define void @helper_rdtsc() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 29, i64 4
  %3 = load i64, i64* %2, align 16
  %4 = and i64 %3, 4
  %5 = icmp eq i64 %4, 0
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 21
  %7 = load i32, i32* %6, align 16
  %8 = and i32 %7, 3
  %9 = icmp eq i32 %8, 0
  %10 = select i1 %5, i1 true, i1 %9
  br i1 %10, label %12, label %11

11:                                               ; preds = %0
  tail call void @raise_exception_ra(%struct.CPUX86State* noundef nonnull %1, i32 noundef 13, i64 noundef 0) #28
  unreachable

12:                                               ; preds = %0
  %13 = and i32 %7, 2097152
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %21, label %15, !prof !5

15:                                               ; preds = %12
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 42
  %17 = load i64, i64* %16, align 16
  %18 = and i64 %17, 16384
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %21, label %20

20:                                               ; preds = %15
  tail call void @helper_vmexit(i32 noundef 110, i64 noundef 0)
  unreachable

21:                                               ; preds = %12, %15
  %22 = tail call i64 @cpu_get_tsc()
  %23 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %24 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 41
  %25 = load i64, i64* %24, align 8
  %26 = add i64 %25, %22
  %27 = and i64 %26, 4294967295
  %28 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 0, i64 0
  store i64 %27, i64* %28, align 16
  %29 = lshr i64 %26, 32
  %30 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %31 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %30, i64 0, i32 0, i64 2
  store i64 %29, i64* %31, align 16
  ret void
}

declare i64 @cpu_get_tsc() local_unnamed_addr #9

; Function Attrs: uwtable
define void @helper_rdtscp() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 29, i64 4
  %3 = load i64, i64* %2, align 16
  %4 = and i64 %3, 4
  %5 = icmp eq i64 %4, 0
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 21
  %7 = load i32, i32* %6, align 16
  %8 = and i32 %7, 3
  %9 = icmp eq i32 %8, 0
  %10 = select i1 %5, i1 true, i1 %9
  br i1 %10, label %12, label %11

11:                                               ; preds = %0
  tail call void @raise_exception_ra(%struct.CPUX86State* noundef nonnull %1, i32 noundef 13, i64 noundef 0) #28
  unreachable

12:                                               ; preds = %0
  %13 = and i32 %7, 2097152
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %21, label %15, !prof !5

15:                                               ; preds = %12
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 42
  %17 = load i64, i64* %16, align 16
  %18 = and i64 %17, 16384
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %21, label %20

20:                                               ; preds = %15
  tail call void @helper_vmexit(i32 noundef 110, i64 noundef 0)
  unreachable

21:                                               ; preds = %12, %15
  %22 = tail call i64 @cpu_get_tsc()
  %23 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %24 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 41
  %25 = load i64, i64* %24, align 8
  %26 = add i64 %25, %22
  %27 = and i64 %26, 4294967295
  %28 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 0, i64 0
  store i64 %27, i64* %28, align 16
  %29 = lshr i64 %26, 32
  %30 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %31 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %30, i64 0, i32 0, i64 2
  store i64 %29, i64* %31, align 16
  %32 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %30, i64 0, i32 121
  %33 = load i64, i64* %32, align 8
  %34 = and i64 %33, 4294967295
  %35 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %30, i64 0, i32 0, i64 1
  store i64 %34, i64* %35, align 8
  ret void
}

; Function Attrs: noreturn uwtable
define void @helper_rdpmc() local_unnamed_addr #4 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 29, i64 4
  %3 = load i64, i64* %2, align 16
  %4 = and i64 %3, 256
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %12, label %6

6:                                                ; preds = %0
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 21
  %8 = load i32, i32* %7, align 16
  %9 = and i32 %8, 3
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %12, label %11

11:                                               ; preds = %6
  tail call void @raise_exception_ra(%struct.CPUX86State* noundef nonnull %1, i32 noundef 13, i64 noundef 0) #28
  unreachable

12:                                               ; preds = %6, %0
  tail call void @helper_svm_check_intercept_param(i32 noundef 111, i64 noundef 0)
  %13 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @raise_exception_err_ra(%struct.CPUX86State* noundef %13, i32 noundef 6, i32 noundef 0, i64 noundef 0) #28
  unreachable
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_wrmsr_v(i64 noundef %0, i64 noundef %1) local_unnamed_addr #2 {
  %3 = trunc i64 %0 to i32
  switch i32 %3, label %129 [
    i32 372, label %4
    i32 373, label %9
    i32 374, label %12
    i32 27, label %15
    i32 -1073741696, label %18
    i32 -1073741695, label %54
    i32 631, label %57
    i32 -1073676009, label %60
    i32 -1073741694, label %63
    i32 -1073741693, label %66
    i32 -1073741692, label %69
    i32 -1073741568, label %72
    i32 -1073741567, label %75
    i32 -1073741566, label %78
    i32 512, label %81
    i32 514, label %81
    i32 516, label %81
    i32 518, label %81
    i32 520, label %81
    i32 522, label %81
    i32 524, label %81
    i32 526, label %81
    i32 513, label %87
    i32 515, label %87
    i32 517, label %87
    i32 519, label %87
    i32 521, label %87
    i32 523, label %87
    i32 525, label %87
    i32 527, label %87
    i32 592, label %93
    i32 600, label %96
    i32 601, label %96
    i32 616, label %101
    i32 617, label %101
    i32 618, label %101
    i32 619, label %101
    i32 620, label %101
    i32 621, label %101
    i32 622, label %101
    i32 623, label %101
    i32 767, label %106
    i32 378, label %109
    i32 379, label %112
    i32 -1073741565, label %123
    i32 416, label %126
  ]

4:                                                ; preds = %2
  %5 = trunc i64 %1 to i32
  %6 = and i32 %5, 65535
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 34
  store i32 %6, i32* %8, align 16
  br label %150

9:                                                ; preds = %2
  %10 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %11 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %10, i64 0, i32 35
  store i64 %1, i64* %11, align 8
  br label %150

12:                                               ; preds = %2
  %13 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %13, i64 0, i32 36
  store i64 %1, i64* %14, align 16
  br label %150

15:                                               ; preds = %2
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 50
  store i64 %1, i64* %17, align 8
  br label %150

18:                                               ; preds = %2
  %19 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %20 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %19, i64 0, i32 111, i32 9
  %21 = load i32, i32* %20, align 8
  %22 = lshr i32 %21, 11
  %23 = and i32 %22, 1
  %24 = lshr i32 %21, 21
  %25 = and i32 %24, 256
  %26 = or i32 %25, %23
  %27 = lshr i32 %21, 9
  %28 = and i32 %27, 2048
  %29 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %19, i64 0, i32 111, i32 10
  %30 = load i32, i32* %29, align 4
  %31 = shl i32 %30, 10
  %32 = and i32 %31, 4096
  %33 = or i32 %32, %28
  %34 = and i32 %22, 16384
  %35 = or i32 %34, %26
  %36 = or i32 %35, %33
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %19, i64 0, i32 37
  %39 = load i64, i64* %38, align 8
  %40 = xor i64 %37, -1
  %41 = and i64 %39, %40
  %42 = and i64 %37, %1
  %43 = or i64 %41, %42
  store i64 %43, i64* %38, align 8
  %44 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %19, i64 0, i32 21
  %45 = load i32, i32* %44, align 16
  %46 = and i32 %45, -1064961
  %47 = trunc i64 %43 to i32
  %48 = shl i32 %47, 4
  %49 = and i32 %48, 16384
  %50 = or i32 %49, %46
  %51 = shl i32 %47, 8
  %52 = and i32 %51, 1048576
  %53 = or i32 %50, %52
  store i32 %53, i32* %44, align 16
  br label %150

54:                                               ; preds = %2
  %55 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %56 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %55, i64 0, i32 38
  store i64 %1, i64* %56, align 16
  br label %150

57:                                               ; preds = %2
  %58 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %59 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %58, i64 0, i32 110
  store i64 %1, i64* %59, align 16
  br label %150

60:                                               ; preds = %2
  %61 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %62 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %61, i64 0, i32 39
  store i64 %1, i64* %62, align 8
  br label %150

63:                                               ; preds = %2
  %64 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %65 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %64, i64 0, i32 51
  store i64 %1, i64* %65, align 16
  br label %150

66:                                               ; preds = %2
  %67 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %68 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %67, i64 0, i32 52
  store i64 %1, i64* %68, align 8
  br label %150

69:                                               ; preds = %2
  %70 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %71 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %70, i64 0, i32 53
  store i64 %1, i64* %71, align 16
  br label %150

72:                                               ; preds = %2
  %73 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %74 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %73, i64 0, i32 24, i64 4, i32 1
  store i64 %1, i64* %74, align 8
  br label %150

75:                                               ; preds = %2
  %76 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %77 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %76, i64 0, i32 24, i64 5, i32 1
  store i64 %1, i64* %77, align 8
  br label %150

78:                                               ; preds = %2
  %79 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %80 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %79, i64 0, i32 54
  store i64 %1, i64* %80, align 8
  br label %150

81:                                               ; preds = %2, %2, %2, %2, %2, %2, %2, %2
  %82 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %83 = add i64 %0, 4294966784
  %84 = lshr i64 %83, 1
  %85 = and i64 %84, 2147483647
  %86 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %82, i64 0, i32 114, i64 %85, i32 0
  store i64 %1, i64* %86, align 8
  br label %150

87:                                               ; preds = %2, %2, %2, %2, %2, %2, %2, %2
  %88 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %89 = add i64 %0, 4294966783
  %90 = lshr i64 %89, 1
  %91 = and i64 %90, 2147483647
  %92 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %88, i64 0, i32 114, i64 %91, i32 1
  store i64 %1, i64* %92, align 8
  br label %150

93:                                               ; preds = %2
  %94 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %95 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %94, i64 0, i32 112, i64 0
  store i64 %1, i64* %95, align 8
  br label %150

96:                                               ; preds = %2, %2
  %97 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %98 = add i64 %0, 4294966697
  %99 = and i64 %98, 4294967295
  %100 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %97, i64 0, i32 112, i64 %99
  store i64 %1, i64* %100, align 8
  br label %150

101:                                              ; preds = %2, %2, %2, %2, %2, %2, %2, %2
  %102 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %103 = add i64 %0, 4294966683
  %104 = and i64 %103, 4294967295
  %105 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %102, i64 0, i32 112, i64 %104
  store i64 %1, i64* %105, align 8
  br label %150

106:                                              ; preds = %2
  %107 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %108 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %107, i64 0, i32 113
  store i64 %1, i64* %108, align 16
  br label %150

109:                                              ; preds = %2
  %110 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %111 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %110, i64 0, i32 60
  store i64 %1, i64* %111, align 8
  br label %150

112:                                              ; preds = %2
  %113 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %114 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %113, i64 0, i32 118
  %115 = load i64, i64* %114, align 8
  %116 = and i64 %115, 256
  %117 = icmp ne i64 %116, 0
  %118 = add i64 %1, 1
  %119 = icmp ult i64 %118, 2
  %120 = and i1 %119, %117
  br i1 %120, label %121, label %150

121:                                              ; preds = %112
  %122 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %113, i64 0, i32 119
  store i64 %1, i64* %122, align 16
  br label %150

123:                                              ; preds = %2
  %124 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %125 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %124, i64 0, i32 121
  store i64 %1, i64* %125, align 8
  br label %150

126:                                              ; preds = %2
  %127 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %128 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %127, i64 0, i32 61
  store i64 %1, i64* %128, align 16
  br label %150

129:                                              ; preds = %2
  %130 = icmp ugt i32 %3, 1023
  br i1 %130, label %131, label %150

131:                                              ; preds = %129
  %132 = and i64 %0, 4294967295
  %133 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %134 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %133, i64 0, i32 118
  %135 = load i64, i64* %134, align 8
  %136 = shl i64 %135, 2
  %137 = and i64 %136, 252
  %138 = or i64 %137, 1024
  %139 = icmp ult i64 %132, %138
  br i1 %139, label %140, label %150

140:                                              ; preds = %131
  %141 = and i32 %3, 3
  %142 = icmp ne i32 %141, 0
  %143 = add i64 %1, 1
  %144 = icmp ult i64 %143, 2
  %145 = or i1 %144, %142
  br i1 %145, label %146, label %150

146:                                              ; preds = %140
  %147 = add i64 %0, 4294966272
  %148 = and i64 %147, 4294967295
  %149 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %133, i64 0, i32 120, i64 %148
  store i64 %1, i64* %149, align 8
  br label %150

150:                                              ; preds = %146, %140, %129, %131, %112, %121, %126, %123, %109, %106, %101, %96, %93, %87, %81, %78, %75, %72, %69, %66, %63, %60, %57, %54, %18, %15, %12, %9, %4
  ret void
}

; Function Attrs: uwtable
define void @helper_wrmsr() local_unnamed_addr #3 {
  tail call void @helper_svm_check_intercept_param(i32 noundef 124, i64 noundef 1)
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 0, i64 0
  %3 = load i64, i64* %2, align 16
  %4 = and i64 %3, 4294967295
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 0, i64 2
  %6 = load i64, i64* %5, align 16
  %7 = shl i64 %6, 32
  %8 = or i64 %7, %4
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 0, i64 1
  %10 = load i64, i64* %9, align 8
  tail call void @helper_wrmsr_v(i64 noundef %10, i64 noundef %8)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn
define i64 @helper_rdmsr_v(i64 noundef %0) local_unnamed_addr #0 {
  %2 = trunc i64 %0 to i32
  switch i32 %2, label %126 [
    i32 372, label %3
    i32 373, label %8
    i32 374, label %12
    i32 27, label %16
    i32 -1073741696, label %20
    i32 -1073741695, label %24
    i32 631, label %28
    i32 -1073676009, label %32
    i32 408, label %142
    i32 -1073741694, label %36
    i32 -1073741693, label %40
    i32 -1073741692, label %44
    i32 -1073741568, label %48
    i32 -1073741567, label %52
    i32 -1073741566, label %56
    i32 -1073741565, label %60
    i32 512, label %64
    i32 514, label %64
    i32 516, label %64
    i32 518, label %64
    i32 520, label %64
    i32 522, label %64
    i32 524, label %64
    i32 526, label %64
    i32 513, label %71
    i32 515, label %71
    i32 517, label %71
    i32 519, label %71
    i32 521, label %71
    i32 523, label %71
    i32 525, label %71
    i32 527, label %71
    i32 592, label %78
    i32 600, label %82
    i32 601, label %82
    i32 616, label %88
    i32 617, label %88
    i32 618, label %88
    i32 619, label %88
    i32 620, label %88
    i32 621, label %88
    i32 622, label %88
    i32 623, label %88
    i32 767, label %94
    i32 254, label %98
    i32 377, label %105
    i32 379, label %109
    i32 378, label %118
    i32 416, label %122
  ]

3:                                                ; preds = %1
  %4 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 34
  %6 = load i32, i32* %5, align 16
  %7 = zext i32 %6 to i64
  br label %142

8:                                                ; preds = %1
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 35
  %11 = load i64, i64* %10, align 8
  br label %142

12:                                               ; preds = %1
  %13 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %13, i64 0, i32 36
  %15 = load i64, i64* %14, align 16
  br label %142

16:                                               ; preds = %1
  %17 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %18 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %17, i64 0, i32 50
  %19 = load i64, i64* %18, align 8
  br label %142

20:                                               ; preds = %1
  %21 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %22 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 37
  %23 = load i64, i64* %22, align 8
  br label %142

24:                                               ; preds = %1
  %25 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %26 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %25, i64 0, i32 38
  %27 = load i64, i64* %26, align 16
  br label %142

28:                                               ; preds = %1
  %29 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %30 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %29, i64 0, i32 110
  %31 = load i64, i64* %30, align 16
  br label %142

32:                                               ; preds = %1
  %33 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %34 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %33, i64 0, i32 39
  %35 = load i64, i64* %34, align 8
  br label %142

36:                                               ; preds = %1
  %37 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %38 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %37, i64 0, i32 51
  %39 = load i64, i64* %38, align 16
  br label %142

40:                                               ; preds = %1
  %41 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %42 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %41, i64 0, i32 52
  %43 = load i64, i64* %42, align 8
  br label %142

44:                                               ; preds = %1
  %45 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %46 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %45, i64 0, i32 53
  %47 = load i64, i64* %46, align 16
  br label %142

48:                                               ; preds = %1
  %49 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %50 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %49, i64 0, i32 24, i64 4, i32 1
  %51 = load i64, i64* %50, align 8
  br label %142

52:                                               ; preds = %1
  %53 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %54 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %53, i64 0, i32 24, i64 5, i32 1
  %55 = load i64, i64* %54, align 8
  br label %142

56:                                               ; preds = %1
  %57 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %58 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %57, i64 0, i32 54
  %59 = load i64, i64* %58, align 8
  br label %142

60:                                               ; preds = %1
  %61 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %62 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %61, i64 0, i32 121
  %63 = load i64, i64* %62, align 8
  br label %142

64:                                               ; preds = %1, %1, %1, %1, %1, %1, %1, %1
  %65 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %66 = add i64 %0, 4294966784
  %67 = lshr i64 %66, 1
  %68 = and i64 %67, 2147483647
  %69 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %65, i64 0, i32 114, i64 %68, i32 0
  %70 = load i64, i64* %69, align 8
  br label %142

71:                                               ; preds = %1, %1, %1, %1, %1, %1, %1, %1
  %72 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %73 = add i64 %0, 4294966783
  %74 = lshr i64 %73, 1
  %75 = and i64 %74, 2147483647
  %76 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %72, i64 0, i32 114, i64 %75, i32 1
  %77 = load i64, i64* %76, align 8
  br label %142

78:                                               ; preds = %1
  %79 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %80 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %79, i64 0, i32 112, i64 0
  %81 = load i64, i64* %80, align 8
  br label %142

82:                                               ; preds = %1, %1
  %83 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %84 = add i64 %0, 4294966697
  %85 = and i64 %84, 4294967295
  %86 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %83, i64 0, i32 112, i64 %85
  %87 = load i64, i64* %86, align 8
  br label %142

88:                                               ; preds = %1, %1, %1, %1, %1, %1, %1, %1
  %89 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %90 = add i64 %0, 4294966683
  %91 = and i64 %90, 4294967295
  %92 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %89, i64 0, i32 112, i64 %91
  %93 = load i64, i64* %92, align 8
  br label %142

94:                                               ; preds = %1
  %95 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %96 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %95, i64 0, i32 113
  %97 = load i64, i64* %96, align 16
  br label %142

98:                                               ; preds = %1
  %99 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %100 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %99, i64 0, i32 111, i32 5
  %101 = load i32, i32* %100, align 4
  %102 = and i32 %101, 4096
  %103 = icmp eq i32 %102, 0
  %104 = select i1 %103, i64 0, i64 1288
  br label %142

105:                                              ; preds = %1
  %106 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %107 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %106, i64 0, i32 118
  %108 = load i64, i64* %107, align 8
  br label %142

109:                                              ; preds = %1
  %110 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %111 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %110, i64 0, i32 118
  %112 = load i64, i64* %111, align 8
  %113 = and i64 %112, 256
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %142, label %115

115:                                              ; preds = %109
  %116 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %110, i64 0, i32 119
  %117 = load i64, i64* %116, align 16
  br label %142

118:                                              ; preds = %1
  %119 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %120 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %119, i64 0, i32 60
  %121 = load i64, i64* %120, align 8
  br label %142

122:                                              ; preds = %1
  %123 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %124 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %123, i64 0, i32 61
  %125 = load i64, i64* %124, align 16
  br label %142

126:                                              ; preds = %1
  %127 = icmp ugt i32 %2, 1023
  br i1 %127, label %128, label %142

128:                                              ; preds = %126
  %129 = and i64 %0, 4294967295
  %130 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %131 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %130, i64 0, i32 118
  %132 = load i64, i64* %131, align 8
  %133 = shl i64 %132, 2
  %134 = and i64 %133, 252
  %135 = or i64 %134, 1024
  %136 = icmp ult i64 %129, %135
  br i1 %136, label %137, label %142

137:                                              ; preds = %128
  %138 = add i64 %0, 4294966272
  %139 = and i64 %138, 4294967295
  %140 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %130, i64 0, i32 120, i64 %139
  %141 = load i64, i64* %140, align 8
  br label %142

142:                                              ; preds = %126, %128, %109, %98, %1, %115, %137, %122, %118, %105, %94, %88, %82, %78, %71, %64, %60, %56, %52, %48, %44, %40, %36, %32, %28, %24, %20, %16, %12, %8, %3
  %143 = phi i64 [ %141, %137 ], [ %125, %122 ], [ %121, %118 ], [ %117, %115 ], [ %108, %105 ], [ %97, %94 ], [ %93, %88 ], [ %87, %82 ], [ %81, %78 ], [ %77, %71 ], [ %70, %64 ], [ %63, %60 ], [ %59, %56 ], [ %55, %52 ], [ %51, %48 ], [ %47, %44 ], [ %
  ret i64 %143
}

; Function Attrs: uwtable
define void @helper_rdmsr() local_unnamed_addr #3 {
  tail call void @helper_svm_check_intercept_param(i32 noundef 124, i64 noundef 0)
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 0, i64 1
  %3 = load i64, i64* %2, align 8
  %4 = and i64 %3, 4294967295
  %5 = tail call i64 @helper_rdmsr_v(i64 noundef %4)
  %6 = and i64 %5, 4294967295
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 0, i64 0
  store i64 %6, i64* %7, align 16
  %8 = lshr i64 %5, 32
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 0, i64 2
  store i64 %8, i64* %10, align 16
  ret void
}

; Function Attrs: uwtable
define i64 @helper_lsl(i64 noundef %0) local_unnamed_addr #3 {
  %2 = trunc i64 %0 to i32
  %3 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %4 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 1
  %5 = load i64, i64* %4, align 16
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @helper_cc_compute_all(i32 noundef %6)
  %8 = and i32 %2, 65532
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %53, label %10

10:                                               ; preds = %1
  %11 = and i32 %2, 65528
  %12 = and i32 %2, 4
  %13 = icmp eq i32 %12, 0
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 25
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 27
  %16 = select i1 %13, %struct.SegmentCache* %15, %struct.SegmentCache* %14
  %17 = or i32 %11, 7
  %18 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %16, i64 0, i32 2
  %19 = load i32, i32* %18, align 8
  %20 = icmp ugt i32 %17, %19
  br i1 %20, label %53, label %21

21:                                               ; preds = %10
  %22 = and i64 %0, 65528
  %23 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %16, i64 0, i32 1
  %24 = load i64, i64* %23, align 8
  %25 = add i64 %24, %22
  %26 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef nonnull %3, i64 noundef %25)
  %27 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %28 = add i64 %25, 4
  %29 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef %27, i64 noundef %28)
  %30 = and i32 %2, 3
  %31 = lshr i32 %29, 13
  %32 = and i32 %31, 3
  %33 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %34 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %33, i64 0, i32 21
  %35 = load i32, i32* %34, align 16
  %36 = and i32 %35, 3
  %37 = and i32 %29, 4096
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %46, label %39

39:                                               ; preds = %21
  %40 = and i32 %29, 3072
  %41 = icmp eq i32 %40, 3072
  br i1 %41, label %58, label %42

42:                                               ; preds = %39
  %43 = icmp ult i32 %32, %36
  %44 = icmp ult i32 %32, %30
  %45 = or i1 %44, %43
  br i1 %45, label %53, label %58

46:                                               ; preds = %21
  %47 = lshr i32 %29, 8
  %48 = and i32 %47, 15
  switch i32 %48, label %53 [
    i32 1, label %49
    i32 2, label %49
    i32 3, label %49
    i32 9, label %49
    i32 11, label %49
  ]

49:                                               ; preds = %46, %46, %46, %46, %46
  %50 = icmp ult i32 %32, %36
  %51 = icmp ult i32 %32, %30
  %52 = or i1 %51, %50
  br i1 %52, label %53, label %58

53:                                               ; preds = %10, %49, %46, %42, %1
  %54 = phi %struct.CPUX86State* [ %3, %10 ], [ %33, %49 ], [ %33, %46 ], [ %33, %42 ], [ %3, %1 ]
  %55 = and i32 %7, -65
  %56 = zext i32 %55 to i64
  %57 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %54, i64 0, i32 2
  store i64 %56, i64* %57, align 8
  br label %71

58:                                               ; preds = %49, %42, %39
  %59 = and i32 %26, 65535
  %60 = and i32 %29, 983040
  %61 = or i32 %60, %59
  %62 = and i32 %29, 8388608
  %63 = icmp eq i32 %62, 0
  %64 = shl nuw i32 %61, 12
  %65 = or i32 %64, 4095
  %66 = select i1 %63, i32 %61, i32 %65
  %67 = or i32 %7, 64
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %33, i64 0, i32 2
  store i64 %68, i64* %69, align 8
  %70 = zext i32 %66 to i64
  br label %71

71:                                               ; preds = %58, %53
  %72 = phi i64 [ 0, %53 ], [ %70, %58 ]
  ret i64 %72
}

; Function Attrs: uwtable
define i64 @helper_lar(i64 noundef %0) local_unnamed_addr #3 {
  %2 = trunc i64 %0 to i32
  %3 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %4 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 1
  %5 = load i64, i64* %4, align 16
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @helper_cc_compute_all(i32 noundef %6)
  %8 = and i32 %2, 65532
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %53, label %10

10:                                               ; preds = %1
  %11 = and i32 %2, 65528
  %12 = and i32 %2, 4
  %13 = icmp eq i32 %12, 0
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 25
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 27
  %16 = select i1 %13, %struct.SegmentCache* %15, %struct.SegmentCache* %14
  %17 = or i32 %11, 7
  %18 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %16, i64 0, i32 2
  %19 = load i32, i32* %18, align 8
  %20 = icmp ugt i32 %17, %19
  br i1 %20, label %53, label %21

21:                                               ; preds = %10
  %22 = and i64 %0, 65528
  %23 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %16, i64 0, i32 1
  %24 = load i64, i64* %23, align 8
  %25 = add i64 %24, %22
  %26 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef nonnull %3, i64 noundef %25)
  %27 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %28 = add i64 %25, 4
  %29 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef %27, i64 noundef %28)
  %30 = and i32 %2, 3
  %31 = lshr i32 %29, 13
  %32 = and i32 %31, 3
  %33 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %34 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %33, i64 0, i32 21
  %35 = load i32, i32* %34, align 16
  %36 = and i32 %35, 3
  %37 = and i32 %29, 4096
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %46, label %39

39:                                               ; preds = %21
  %40 = and i32 %29, 3072
  %41 = icmp eq i32 %40, 3072
  br i1 %41, label %58, label %42

42:                                               ; preds = %39
  %43 = icmp ult i32 %32, %36
  %44 = icmp ult i32 %32, %30
  %45 = or i1 %44, %43
  br i1 %45, label %53, label %58

46:                                               ; preds = %21
  %47 = lshr i32 %29, 8
  %48 = and i32 %47, 15
  switch i32 %48, label %53 [
    i32 1, label %49
    i32 2, label %49
    i32 3, label %49
    i32 4, label %49
    i32 5, label %49
    i32 9, label %49
    i32 11, label %49
    i32 12, label %49
  ]

49:                                               ; preds = %46, %46, %46, %46, %46, %46, %46, %46
  %50 = icmp ult i32 %32, %36
  %51 = icmp ult i32 %32, %30
  %52 = or i1 %51, %50
  br i1 %52, label %53, label %58

53:                                               ; preds = %10, %49, %46, %42, %1
  %54 = phi %struct.CPUX86State* [ %3, %10 ], [ %33, %49 ], [ %33, %46 ], [ %33, %42 ], [ %3, %1 ]
  %55 = and i32 %7, -65
  %56 = zext i32 %55 to i64
  %57 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %54, i64 0, i32 2
  store i64 %56, i64* %57, align 8
  br label %64

58:                                               ; preds = %49, %42, %39
  %59 = or i32 %7, 64
  %60 = zext i32 %59 to i64
  %61 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %33, i64 0, i32 2
  store i64 %60, i64* %61, align 8
  %62 = and i32 %29, 15793920
  %63 = zext i32 %62 to i64
  br label %64

64:                                               ; preds = %58, %53
  %65 = phi i64 [ 0, %53 ], [ %63, %58 ]
  ret i64 %65
}

; Function Attrs: uwtable
define void @helper_verr(i64 noundef %0) local_unnamed_addr #3 {
  %2 = trunc i64 %0 to i32
  %3 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %4 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 1
  %5 = load i64, i64* %4, align 16
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @helper_cc_compute_all(i32 noundef %6)
  %8 = and i32 %2, 65532
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %58, label %10

10:                                               ; preds = %1
  %11 = and i32 %2, 65528
  %12 = and i32 %2, 4
  %13 = icmp eq i32 %12, 0
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 25
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 27
  %16 = select i1 %13, %struct.SegmentCache* %15, %struct.SegmentCache* %14
  %17 = or i32 %11, 7
  %18 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %16, i64 0, i32 2
  %19 = load i32, i32* %18, align 8
  %20 = icmp ugt i32 %17, %19
  br i1 %20, label %58, label %21

21:                                               ; preds = %10
  %22 = and i64 %0, 65528
  %23 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %16, i64 0, i32 1
  %24 = load i64, i64* %23, align 8
  %25 = add i64 %24, %22
  %26 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef nonnull %3, i64 noundef %25)
  %27 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %28 = add i64 %25, 4
  %29 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef %27, i64 noundef %28)
  %30 = and i32 %29, 4096
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %34

32:                                               ; preds = %21
  %33 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br label %58

34:                                               ; preds = %21
  %35 = and i32 %2, 3
  %36 = lshr i32 %29, 13
  %37 = and i32 %36, 3
  %38 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %39 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %38, i64 0, i32 21
  %40 = load i32, i32* %39, align 16
  %41 = and i32 %40, 3
  %42 = and i32 %29, 2048
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %54, label %44

44:                                               ; preds = %34
  %45 = and i32 %29, 512
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %58, label %47

47:                                               ; preds = %44
  %48 = and i32 %29, 1024
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %61

50:                                               ; preds = %47
  %51 = icmp ult i32 %37, %41
  %52 = icmp ult i32 %37, %35
  %53 = or i1 %52, %51
  br i1 %53, label %58, label %61

54:                                               ; preds = %34
  %55 = icmp ult i32 %37, %41
  %56 = icmp ult i32 %37, %35
  %57 = or i1 %56, %55
  br i1 %57, label %58, label %61

58:                                               ; preds = %32, %10, %54, %50, %44, %1
  %59 = phi %struct.CPUX86State* [ %33, %32 ], [ %3, %10 ], [ %38, %54 ], [ %38, %50 ], [ %38, %44 ], [ %3, %1 ]
  %60 = and i32 %7, -65
  br label %63

61:                                               ; preds = %54, %50, %47
  %62 = or i32 %7, 64
  br label %63

63:                                               ; preds = %61, %58
  %64 = phi i32 [ %62, %61 ], [ %60, %58 ]
  %65 = phi %struct.CPUX86State* [ %38, %61 ], [ %59, %58 ]
  %66 = zext i32 %64 to i64
  %67 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %65, i64 0, i32 2
  store i64 %66, i64* %67, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_verw(i64 noundef %0) local_unnamed_addr #3 {
  %2 = trunc i64 %0 to i32
  %3 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %4 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 1
  %5 = load i64, i64* %4, align 16
  %6 = trunc i64 %5 to i32
  %7 = tail call i32 @helper_cc_compute_all(i32 noundef %6)
  %8 = and i32 %2, 65532
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %51, label %10

10:                                               ; preds = %1
  %11 = and i32 %2, 65528
  %12 = and i32 %2, 4
  %13 = icmp eq i32 %12, 0
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 25
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 27
  %16 = select i1 %13, %struct.SegmentCache* %15, %struct.SegmentCache* %14
  %17 = or i32 %11, 7
  %18 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %16, i64 0, i32 2
  %19 = load i32, i32* %18, align 8
  %20 = icmp ugt i32 %17, %19
  br i1 %20, label %51, label %21

21:                                               ; preds = %10
  %22 = and i64 %0, 65528
  %23 = getelementptr inbounds %struct.SegmentCache, %struct.SegmentCache* %16, i64 0, i32 1
  %24 = load i64, i64* %23, align 8
  %25 = add i64 %24, %22
  %26 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef nonnull %3, i64 noundef %25)
  %27 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %28 = add i64 %25, 4
  %29 = tail call fastcc i32 @cpu_ldl_kernel(%struct.CPUX86State* noundef %27, i64 noundef %28)
  %30 = and i32 %29, 4096
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %34

32:                                               ; preds = %21
  %33 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br label %51

34:                                               ; preds = %21
  %35 = lshr i32 %29, 13
  %36 = and i32 %35, 3
  %37 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %38 = and i32 %29, 2048
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %51

40:                                               ; preds = %34
  %41 = and i32 %2, 3
  %42 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %37, i64 0, i32 21
  %43 = load i32, i32* %42, align 16
  %44 = and i32 %43, 3
  %45 = icmp ult i32 %36, %44
  %46 = icmp ult i32 %36, %41
  %47 = or i1 %46, %45
  %48 = and i32 %29, 512
  %49 = icmp eq i32 %48, 0
  %50 = select i1 %47, i1 true, i1 %49
  br i1 %50, label %51, label %54

51:                                               ; preds = %32, %10, %40, %34, %1
  %52 = phi %struct.CPUX86State* [ %33, %32 ], [ %3, %10 ], [ %37, %40 ], [ %37, %34 ], [ %3, %1 ]
  %53 = and i32 %7, -65
  br label %56

54:                                               ; preds = %40
  %55 = or i32 %7, 64
  br label %56

56:                                               ; preds = %54, %51
  %57 = phi i32 [ %55, %54 ], [ %53, %51 ]
  %58 = phi %struct.CPUX86State* [ %37, %54 ], [ %52, %51 ]
  %59 = zext i32 %57 to i64
  %60 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %58, i64 0, i32 2
  store i64 %59, i64* %60, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_flds_FT0(i32 noundef %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 10
  %4 = tail call { i64, i16 } @float32_to_floatx80(i32 noundef %0, %struct.float_status* noundef nonnull %3)
  %5 = extractvalue { i64, i16 } %4, 0
  %6 = extractvalue { i64, i16 } %4, 1
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 11, i32 0
  store i64 %5, i64* %7, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 11, i32 1
  store i16 %6, i16* %8, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_fldl_FT0(i64 noundef %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 10
  %4 = tail call { i64, i16 } @float64_to_floatx80(i64 noundef %0, %struct.float_status* noundef nonnull %3)
  %5 = extractvalue { i64, i16 } %4, 0
  %6 = extractvalue { i64, i16 } %4, 1
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 11, i32 0
  store i64 %5, i64* %7, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 11, i32 1
  store i16 %6, i16* %8, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_fildl_FT0(i32 noundef %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 10
  %4 = tail call { i64, i16 } @int32_to_floatx80(i32 noundef %0, %struct.float_status* noundef nonnull %3)
  %5 = extractvalue { i64, i16 } %4, 0
  %6 = extractvalue { i64, i16 } %4, 1
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 11, i32 0
  store i64 %5, i64* %7, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 11, i32 1
  store i16 %6, i16* %8, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_flds_ST0(i32 noundef %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 5
  %4 = load i32, i32* %3, align 16
  %5 = add i32 %4, 7
  %6 = and i32 %5, 7
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 10
  %9 = tail call { i64, i16 } @float32_to_floatx80(i32 noundef %0, %struct.float_status* noundef nonnull %8)
  %10 = extractvalue { i64, i16 } %9, 0
  %11 = extractvalue { i64, i16 } %9, 1
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0, i32 0
  store i64 %10, i64* %12, align 16
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0, i32 1
  store i16 %11, i16* %13, align 8
  %14 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 5
  store i32 %6, i32* %15, align 16
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 8, i64 %7
  store i8 0, i8* %16, align 1
  ret void
}

; Function Attrs: uwtable
define void @helper_fldl_ST0(i64 noundef %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 5
  %4 = load i32, i32* %3, align 16
  %5 = add i32 %4, 7
  %6 = and i32 %5, 7
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 10
  %9 = tail call { i64, i16 } @float64_to_floatx80(i64 noundef %0, %struct.float_status* noundef nonnull %8)
  %10 = extractvalue { i64, i16 } %9, 0
  %11 = extractvalue { i64, i16 } %9, 1
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0, i32 0
  store i64 %10, i64* %12, align 16
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0, i32 1
  store i16 %11, i16* %13, align 8
  %14 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 5
  store i32 %6, i32* %15, align 16
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 8, i64 %7
  store i8 0, i8* %16, align 1
  ret void
}

; Function Attrs: uwtable
define void @helper_fildl_ST0(i32 noundef %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 5
  %4 = load i32, i32* %3, align 16
  %5 = add i32 %4, 7
  %6 = and i32 %5, 7
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 10
  %9 = tail call { i64, i16 } @int32_to_floatx80(i32 noundef %0, %struct.float_status* noundef nonnull %8)
  %10 = extractvalue { i64, i16 } %9, 0
  %11 = extractvalue { i64, i16 } %9, 1
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0, i32 0
  store i64 %10, i64* %12, align 16
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0, i32 1
  store i16 %11, i16* %13, align 8
  %14 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 5
  store i32 %6, i32* %15, align 16
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 8, i64 %7
  store i8 0, i8* %16, align 1
  ret void
}

; Function Attrs: uwtable
define void @helper_fildll_ST0(i64 noundef %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 5
  %4 = load i32, i32* %3, align 16
  %5 = add i32 %4, 7
  %6 = and i32 %5, 7
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 10
  %9 = tail call { i64, i16 } @int64_to_floatx80(i64 noundef %0, %struct.float_status* noundef nonnull %8)
  %10 = extractvalue { i64, i16 } %9, 0
  %11 = extractvalue { i64, i16 } %9, 1
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0, i32 0
  store i64 %10, i64* %12, align 16
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0, i32 1
  store i16 %11, i16* %13, align 8
  %14 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 5
  store i32 %6, i32* %15, align 16
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 8, i64 %7
  store i8 0, i8* %16, align 1
  ret void
}

; Function Attrs: uwtable
define i32 @helper_fsts_ST0() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %7 = load i64, i64* %6, align 16
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = tail call i32 @floatx80_to_float32(i64 %7, i16 %9, %struct.float_status* noundef nonnull %5)
  ret i32 %10
}

; Function Attrs: uwtable
define i64 @helper_fstl_ST0() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %7 = load i64, i64* %6, align 16
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = tail call i64 @floatx80_to_float64(i64 %7, i16 %9, %struct.float_status* noundef nonnull %5)
  ret i64 %10
}

; Function Attrs: uwtable
define i32 @helper_fist_ST0() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %7 = load i64, i64* %6, align 16
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = tail call i32 @floatx80_to_int32(i64 %7, i16 %9, %struct.float_status* noundef nonnull %5)
  %11 = add i32 %10, 32768
  %12 = icmp ult i32 %11, 65536
  %13 = select i1 %12, i32 %10, i32 -32768
  ret i32 %13
}

; Function Attrs: uwtable
define i32 @helper_fistl_ST0() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %7 = load i64, i64* %6, align 16
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = tail call i32 @floatx80_to_int32(i64 %7, i16 %9, %struct.float_status* noundef nonnull %5)
  ret i32 %10
}

; Function Attrs: uwtable
define i64 @helper_fistll_ST0() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %7 = load i64, i64* %6, align 16
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = tail call i64 @floatx80_to_int64(i64 %7, i16 %9, %struct.float_status* noundef nonnull %5)
  ret i64 %10
}

; Function Attrs: uwtable
define i32 @helper_fistt_ST0() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %7 = load i64, i64* %6, align 16
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = tail call i32 @floatx80_to_int32_round_to_zero(i64 %7, i16 %9, %struct.float_status* noundef nonnull %5)
  %11 = add i32 %10, 32768
  %12 = icmp ult i32 %11, 65536
  %13 = select i1 %12, i32 %10, i32 -32768
  ret i32 %13
}

; Function Attrs: uwtable
define i32 @helper_fisttl_ST0() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %7 = load i64, i64* %6, align 16
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = tail call i32 @floatx80_to_int32_round_to_zero(i64 %7, i16 %9, %struct.float_status* noundef nonnull %5)
  ret i32 %10
}

; Function Attrs: uwtable
define i64 @helper_fisttll_ST0() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %7 = load i64, i64* %6, align 16
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = tail call i64 @floatx80_to_int64_round_to_zero(i64 %7, i16 %9, %struct.float_status* noundef nonnull %5)
  ret i64 %10
}

; Function Attrs: uwtable
define void @helper_fldt_ST0(i64 noundef %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 5
  %4 = load i32, i32* %3, align 16
  %5 = add i32 %4, 7
  %6 = and i32 %5, 7
  %7 = zext i32 %6 to i64
  %8 = tail call fastcc i64 @cpu_ldq_data(%struct.CPUX86State* noundef %2, i64 noundef %0)
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = add i64 %0, 8
  %11 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* noundef %9, i64 noundef %10)
  %12 = trunc i32 %11 to i16
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0, i32 0
  store i64 %8, i64* %13, align 16
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0, i32 1
  store i16 %12, i16* %14, align 8
  %15 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 5
  store i32 %6, i32* %16, align 16
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 8, i64 %7
  store i8 0, i8* %17, align 1
  ret void
}

; Function Attrs: uwtable
define void @helper_fstt_ST0(i64 noundef %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 5
  %4 = load i32, i32* %3, align 16
  %5 = zext i32 %4 to i64
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %5, i32 0, i32 0
  %7 = load i64, i64* %6, align 16
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %5, i32 0, i32 1
  %9 = load i16, i16* %8, align 8
  tail call fastcc void @cpu_stq_data(%struct.CPUX86State* noundef %2, i64 noundef %0, i64 noundef %7)
  %10 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %11 = add i64 %0, 8
  %12 = zext i16 %9 to i32
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* noundef %10, i64 noundef %11, i32 noundef %12)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_fpush() local_unnamed_addr #2 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = add i32 %3, 7
  %5 = and i32 %4, 7
  store i32 %5, i32* %2, align 16
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 8, i64 %6
  store i8 0, i8* %7, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_fpop() local_unnamed_addr #2 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 8, i64 %4
  store i8 1, i8* %5, align 1
  %6 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %6, i64 0, i32 5
  %8 = load i32, i32* %7, align 16
  %9 = add i32 %8, 1
  %10 = and i32 %9, 7
  store i32 %10, i32* %7, align 16
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_fdecstp() local_unnamed_addr #2 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = add i32 %3, 7
  %5 = and i32 %4, 7
  store i32 %5, i32* %2, align 16
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 6
  %7 = load i16, i16* %6, align 4
  %8 = and i16 %7, -18177
  store i16 %8, i16* %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_fincstp() local_unnamed_addr #2 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = add i32 %3, 1
  %5 = and i32 %4, 7
  store i32 %5, i32* %2, align 16
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 6
  %7 = load i16, i16* %6, align 4
  %8 = and i16 %7, -18177
  store i16 %8, i16* %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_ffree_STN(i32 noundef %0) local_unnamed_addr #2 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 5
  %4 = load i32, i32* %3, align 16
  %5 = add i32 %4, %0
  %6 = and i32 %5, 7
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 8, i64 %7
  store i8 1, i8* %8, align 1
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define void @helper_fmov_ST0_FT0() local_unnamed_addr #14 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 11
  %7 = bitcast %struct.floatx80* %5 to i8*
  %8 = bitcast %struct.floatx80* %6 to i8*
  %9 = call i8* @memcpy(i8* %7, i8* %8, i64 16)
  ret void
}

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #15

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define void @helper_fmov_FT0_STN(i32 noundef %0) local_unnamed_addr #14 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 11
  %4 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 5
  %5 = load i32, i32* %4, align 16
  %6 = add i32 %5, %0
  %7 = and i32 %6, 7
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %8, i32 0
  %10 = bitcast %struct.floatx80* %3 to i8*
  %11 = bitcast %struct.floatx80* %9 to i8*
  %12 = call i8* @memcpy(i8* %10, i8* %11, i64 16)
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define void @helper_fmov_ST0_STN(i32 noundef %0) local_unnamed_addr #14 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 5
  %4 = load i32, i32* %3, align 16
  %5 = zext i32 %4 to i64
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %5, i32 0
  %7 = add i32 %4, %0
  %8 = and i32 %7, 7
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %9, i32 0
  %11 = bitcast %struct.floatx80* %6 to i8*
  %12 = bitcast %struct.floatx80* %10 to i8*
  %13 = call i8* @memcpy(i8* %11, i8* %12, i64 16)
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define void @helper_fmov_STN_ST0(i32 noundef %0) local_unnamed_addr #14 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 5
  %4 = load i32, i32* %3, align 16
  %5 = add i32 %4, %0
  %6 = and i32 %5, 7
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0
  %9 = zext i32 %4 to i64
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %9, i32 0
  %11 = bitcast %struct.floatx80* %8 to i8*
  %12 = bitcast %struct.floatx80* %10 to i8*
  %13 = call i8* @memcpy(i8* %11, i8* %12, i64 16)
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define void @helper_fxchg_ST0_STN(i32 noundef %0) local_unnamed_addr #14 {
  %2 = alloca %struct.floatx80, align 8
  %3 = bitcast %struct.floatx80* %2 to i8*
  %4 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 5
  %6 = load i32, i32* %5, align 16
  %7 = add i32 %6, %0
  %8 = and i32 %7, 7
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 9, i64 %9, i32 0
  %11 = bitcast %struct.floatx80* %10 to i8*
  %12 = call i8* @memcpy(i8* %3, i8* %11, i64 16)
  %13 = zext i32 %6 to i64
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 9, i64 %13, i32 0
  %15 = bitcast %struct.floatx80* %14 to i8*
  %16 = call i8* @memcpy(i8* %11, i8* %15, i64 16)
  %17 = call i8* @memcpy(i8* %15, i8* %3, i64 16)
  ret void
}

; Function Attrs: uwtable
define void @helper_fcom_ST0_FT0() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %7 = load i64, i64* %6, align 16
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 11, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 11, i32 1
  %13 = load i16, i16* %12, align 8
  %14 = tail call i32 @floatx80_compare(i64 %7, i16 %9, i64 %11, i16 %13, %struct.float_status* noundef nonnull %5)
  %15 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 6
  %17 = load i16, i16* %16, align 4
  %18 = and i16 %17, -17665
  %19 = add nsw i32 %14, 1
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds [4 x i32], [4 x i32]* @fcom_ccval, i64 0, i64 %20
  %22 = load i32, i32* %21, align 4
  %23 = trunc i32 %22 to i16
  %24 = or i16 %18, %23
  store i16 %24, i16* %16, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_fucom_ST0_FT0() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %7 = load i64, i64* %6, align 16
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 11, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 11, i32 1
  %13 = load i16, i16* %12, align 8
  %14 = tail call i32 @floatx80_compare_quiet(i64 %7, i16 %9, i64 %11, i16 %13, %struct.float_status* noundef nonnull %5)
  %15 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 6
  %17 = load i16, i16* %16, align 4
  %18 = and i16 %17, -17665
  %19 = add nsw i32 %14, 1
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds [4 x i32], [4 x i32]* @fcom_ccval, i64 0, i64 %20
  %22 = load i32, i32* %21, align 4
  %23 = trunc i32 %22 to i16
  %24 = or i16 %18, %23
  store i16 %24, i16* %16, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_fcomi_ST0_FT0() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %7 = load i64, i64* %6, align 16
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 11, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 11, i32 1
  %13 = load i16, i16* %12, align 8
  %14 = tail call i32 @floatx80_compare(i64 %7, i16 %9, i64 %11, i16 %13, %struct.float_status* noundef nonnull %5)
  %15 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 1
  %17 = load i64, i64* %16, align 16
  %18 = trunc i64 %17 to i32
  %19 = tail call i32 @helper_cc_compute_all(i32 noundef %18)
  %20 = and i32 %19, -70
  %21 = add nsw i32 %14, 1
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds [4 x i32], [4 x i32]* @comis_eflags, i64 0, i64 %22
  %24 = load i32, i32* %23, align 4
  %25 = or i32 %20, %24
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 2
  store i64 %26, i64* %27, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_fucomi_ST0_FT0() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %7 = load i64, i64* %6, align 16
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 11, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 11, i32 1
  %13 = load i16, i16* %12, align 8
  %14 = tail call i32 @floatx80_compare_quiet(i64 %7, i16 %9, i64 %11, i16 %13, %struct.float_status* noundef nonnull %5)
  %15 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 1
  %17 = load i64, i64* %16, align 16
  %18 = trunc i64 %17 to i32
  %19 = tail call i32 @helper_cc_compute_all(i32 noundef %18)
  %20 = and i32 %19, -70
  %21 = add nsw i32 %14, 1
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds [4 x i32], [4 x i32]* @comis_eflags, i64 0, i64 %22
  %24 = load i32, i32* %23, align 4
  %25 = or i32 %20, %24
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 2
  store i64 %26, i64* %27, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_fadd_ST0_FT0() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %7 = load i64, i64* %6, align 16
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 11, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 11, i32 1
  %13 = load i16, i16* %12, align 8
  %14 = tail call { i64, i16 } @floatx80_add(i64 %7, i16 %9, i64 %11, i16 %13, %struct.float_status* noundef nonnull %5)
  %15 = extractvalue { i64, i16 } %14, 0
  %16 = extractvalue { i64, i16 } %14, 1
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  store i64 %15, i64* %17, align 16
  store i16 %16, i16* %8, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_fmul_ST0_FT0() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %7 = load i64, i64* %6, align 16
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 11, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 11, i32 1
  %13 = load i16, i16* %12, align 8
  %14 = tail call { i64, i16 } @floatx80_mul(i64 %7, i16 %9, i64 %11, i16 %13, %struct.float_status* noundef nonnull %5)
  %15 = extractvalue { i64, i16 } %14, 0
  %16 = extractvalue { i64, i16 } %14, 1
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  store i64 %15, i64* %17, align 16
  store i16 %16, i16* %8, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_fsub_ST0_FT0() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %7 = load i64, i64* %6, align 16
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 11, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 11, i32 1
  %13 = load i16, i16* %12, align 8
  %14 = tail call { i64, i16 } @floatx80_sub(i64 %7, i16 %9, i64 %11, i16 %13, %struct.float_status* noundef nonnull %5)
  %15 = extractvalue { i64, i16 } %14, 0
  %16 = extractvalue { i64, i16 } %14, 1
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  store i64 %15, i64* %17, align 16
  store i16 %16, i16* %8, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_fsubr_ST0_FT0() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 11, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 11, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %11 = load i64, i64* %10, align 16
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %13 = load i16, i16* %12, align 8
  %14 = tail call { i64, i16 } @floatx80_sub(i64 %7, i16 %9, i64 %11, i16 %13, %struct.float_status* noundef nonnull %5)
  %15 = extractvalue { i64, i16 } %14, 0
  %16 = extractvalue { i64, i16 } %14, 1
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  store i64 %15, i64* %17, align 16
  store i16 %16, i16* %12, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_fdiv_ST0_FT0() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %6 = load i64, i64* %5, align 16
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %8 = load i16, i16* %7, align 8
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 11, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 11, i32 1
  %12 = load i16, i16* %11, align 8
  %13 = and i16 %12, 32767
  %14 = icmp ne i16 %13, 0
  %15 = icmp ne i64 %10, 0
  %16 = select i1 %14, i1 true, i1 %15
  br i1 %16, label %29, label %17

17:                                               ; preds = %0
  %18 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 6
  %19 = load i16, i16* %18, align 4
  %20 = or i16 %19, 4
  store i16 %20, i16* %18, align 4
  %21 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 7
  %22 = load i16, i16* %21, align 2
  %23 = and i16 %22, 63
  %24 = xor i16 %23, 63
  %25 = and i16 %24, %20
  %26 = icmp eq i16 %25, 0
  br i1 %26, label %29, label %27

27:                                               ; preds = %17
  %28 = or i16 %19, -32636
  store i16 %28, i16* %18, align 4
  br label %29

29:                                               ; preds = %0, %17, %27
  %30 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %31 = tail call { i64, i16 } @floatx80_div(i64 %6, i16 %8, i64 %10, i16 %12, %struct.float_status* noundef nonnull %30)
  %32 = extractvalue { i64, i16 } %31, 0
  %33 = extractvalue { i64, i16 } %31, 1
  %34 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  store i64 %32, i64* %34, align 16
  store i16 %33, i16* %7, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_fdivr_ST0_FT0() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 11, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 11, i32 1
  %8 = load i16, i16* %7, align 8
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %10 = load i64, i64* %9, align 16
  %11 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %12 = load i16, i16* %11, align 8
  %13 = and i16 %12, 32767
  %14 = icmp ne i16 %13, 0
  %15 = icmp ne i64 %10, 0
  %16 = select i1 %14, i1 true, i1 %15
  br i1 %16, label %29, label %17

17:                                               ; preds = %0
  %18 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 6
  %19 = load i16, i16* %18, align 4
  %20 = or i16 %19, 4
  store i16 %20, i16* %18, align 4
  %21 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 7
  %22 = load i16, i16* %21, align 2
  %23 = and i16 %22, 63
  %24 = xor i16 %23, 63
  %25 = and i16 %24, %20
  %26 = icmp eq i16 %25, 0
  br i1 %26, label %29, label %27

27:                                               ; preds = %17
  %28 = or i16 %19, -32636
  store i16 %28, i16* %18, align 4
  br label %29

29:                                               ; preds = %0, %17, %27
  %30 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %31 = tail call { i64, i16 } @floatx80_div(i64 %6, i16 %8, i64 %10, i16 %12, %struct.float_status* noundef nonnull %30)
  %32 = extractvalue { i64, i16 } %31, 0
  %33 = extractvalue { i64, i16 } %31, 1
  %34 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  store i64 %32, i64* %34, align 16
  store i16 %33, i16* %11, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_fadd_STN_ST0(i32 noundef %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 5
  %4 = load i32, i32* %3, align 16
  %5 = add i32 %4, %0
  %6 = and i32 %5, 7
  %7 = zext i32 %6 to i64
  %8 = zext i32 %4 to i64
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 10
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0, i32 0
  %11 = load i64, i64* %10, align 16
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0, i32 1
  %13 = load i16, i16* %12, align 8
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %8, i32 0, i32 0
  %15 = load i64, i64* %14, align 16
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %8, i32 0, i32 1
  %17 = load i16, i16* %16, align 8
  %18 = tail call { i64, i16 } @floatx80_add(i64 %11, i16 %13, i64 %15, i16 %17, %struct.float_status* noundef nonnull %9)
  %19 = extractvalue { i64, i16 } %18, 0
  %20 = extractvalue { i64, i16 } %18, 1
  %21 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0, i32 0
  store i64 %19, i64* %21, align 16
  store i16 %20, i16* %12, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_fmul_STN_ST0(i32 noundef %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 5
  %4 = load i32, i32* %3, align 16
  %5 = add i32 %4, %0
  %6 = and i32 %5, 7
  %7 = zext i32 %6 to i64
  %8 = zext i32 %4 to i64
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 10
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0, i32 0
  %11 = load i64, i64* %10, align 16
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0, i32 1
  %13 = load i16, i16* %12, align 8
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %8, i32 0, i32 0
  %15 = load i64, i64* %14, align 16
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %8, i32 0, i32 1
  %17 = load i16, i16* %16, align 8
  %18 = tail call { i64, i16 } @floatx80_mul(i64 %11, i16 %13, i64 %15, i16 %17, %struct.float_status* noundef nonnull %9)
  %19 = extractvalue { i64, i16 } %18, 0
  %20 = extractvalue { i64, i16 } %18, 1
  %21 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0, i32 0
  store i64 %19, i64* %21, align 16
  store i16 %20, i16* %12, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_fsub_STN_ST0(i32 noundef %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 5
  %4 = load i32, i32* %3, align 16
  %5 = add i32 %4, %0
  %6 = and i32 %5, 7
  %7 = zext i32 %6 to i64
  %8 = zext i32 %4 to i64
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 10
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0, i32 0
  %11 = load i64, i64* %10, align 16
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0, i32 1
  %13 = load i16, i16* %12, align 8
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %8, i32 0, i32 0
  %15 = load i64, i64* %14, align 16
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %8, i32 0, i32 1
  %17 = load i16, i16* %16, align 8
  %18 = tail call { i64, i16 } @floatx80_sub(i64 %11, i16 %13, i64 %15, i16 %17, %struct.float_status* noundef nonnull %9)
  %19 = extractvalue { i64, i16 } %18, 0
  %20 = extractvalue { i64, i16 } %18, 1
  %21 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0, i32 0
  store i64 %19, i64* %21, align 16
  store i16 %20, i16* %12, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_fsubr_STN_ST0(i32 noundef %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 5
  %4 = load i32, i32* %3, align 16
  %5 = add i32 %4, %0
  %6 = and i32 %5, 7
  %7 = zext i32 %6 to i64
  %8 = zext i32 %4 to i64
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 10
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %8, i32 0, i32 0
  %11 = load i64, i64* %10, align 16
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %8, i32 0, i32 1
  %13 = load i16, i16* %12, align 8
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0, i32 0
  %15 = load i64, i64* %14, align 16
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0, i32 1
  %17 = load i16, i16* %16, align 8
  %18 = tail call { i64, i16 } @floatx80_sub(i64 %11, i16 %13, i64 %15, i16 %17, %struct.float_status* noundef nonnull %9)
  %19 = extractvalue { i64, i16 } %18, 0
  %20 = extractvalue { i64, i16 } %18, 1
  %21 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0, i32 0
  store i64 %19, i64* %21, align 16
  store i16 %20, i16* %16, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_fdiv_STN_ST0(i32 noundef %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 5
  %4 = load i32, i32* %3, align 16
  %5 = add i32 %4, %0
  %6 = and i32 %5, 7
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0, i32 0
  %9 = load i64, i64* %8, align 16
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0, i32 1
  %11 = load i16, i16* %10, align 8
  %12 = zext i32 %4 to i64
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %12, i32 0, i32 0
  %14 = load i64, i64* %13, align 16
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %12, i32 0, i32 1
  %16 = load i16, i16* %15, align 8
  %17 = and i16 %16, 32767
  %18 = icmp ne i16 %17, 0
  %19 = icmp ne i64 %14, 0
  %20 = select i1 %18, i1 true, i1 %19
  br i1 %20, label %33, label %21

21:                                               ; preds = %1
  %22 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 6
  %23 = load i16, i16* %22, align 4
  %24 = or i16 %23, 4
  store i16 %24, i16* %22, align 4
  %25 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 7
  %26 = load i16, i16* %25, align 2
  %27 = and i16 %26, 63
  %28 = xor i16 %27, 63
  %29 = and i16 %28, %24
  %30 = icmp eq i16 %29, 0
  br i1 %30, label %33, label %31

31:                                               ; preds = %21
  %32 = or i16 %23, -32636
  store i16 %32, i16* %22, align 4
  br label %33

33:                                               ; preds = %1, %21, %31
  %34 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 10
  %35 = tail call { i64, i16 } @floatx80_div(i64 %9, i16 %11, i64 %14, i16 %16, %struct.float_status* noundef nonnull %34)
  %36 = extractvalue { i64, i16 } %35, 0
  %37 = extractvalue { i64, i16 } %35, 1
  %38 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0, i32 0
  store i64 %36, i64* %38, align 16
  store i16 %37, i16* %10, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_fdivr_STN_ST0(i32 noundef %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 5
  %4 = load i32, i32* %3, align 16
  %5 = add i32 %4, %0
  %6 = and i32 %5, 7
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0, i32 0
  %9 = load i64, i64* %8, align 16
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0, i32 1
  %11 = load i16, i16* %10, align 8
  %12 = zext i32 %4 to i64
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %12, i32 0, i32 0
  %14 = load i64, i64* %13, align 16
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %12, i32 0, i32 1
  %16 = load i16, i16* %15, align 8
  %17 = and i16 %11, 32767
  %18 = icmp ne i16 %17, 0
  %19 = icmp ne i64 %9, 0
  %20 = select i1 %18, i1 true, i1 %19
  br i1 %20, label %33, label %21

21:                                               ; preds = %1
  %22 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 6
  %23 = load i16, i16* %22, align 4
  %24 = or i16 %23, 4
  store i16 %24, i16* %22, align 4
  %25 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 7
  %26 = load i16, i16* %25, align 2
  %27 = and i16 %26, 63
  %28 = xor i16 %27, 63
  %29 = and i16 %28, %24
  %30 = icmp eq i16 %29, 0
  br i1 %30, label %33, label %31

31:                                               ; preds = %21
  %32 = or i16 %23, -32636
  store i16 %32, i16* %22, align 4
  br label %33

33:                                               ; preds = %1, %21, %31
  %34 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 10
  %35 = tail call { i64, i16 } @floatx80_div(i64 %14, i16 %16, i64 %9, i16 %11, %struct.float_status* noundef nonnull %34)
  %36 = extractvalue { i64, i16 } %35, 0
  %37 = extractvalue { i64, i16 } %35, 1
  %38 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %7, i32 0, i32 0
  store i64 %36, i64* %38, align 16
  store i16 %37, i16* %10, align 8
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define void @helper_fchs_ST0() local_unnamed_addr #14 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %6 = load i64, i64* %5, align 16
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %8 = load i16, i16* %7, align 8
  %9 = xor i16 %8, -32768
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  store i64 %6, i64* %10, align 16
  store i16 %9, i16* %7, align 8
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define void @helper_fabs_ST0() local_unnamed_addr #14 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %6 = load i64, i64* %5, align 16
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %8 = load i16, i16* %7, align 8
  %9 = and i16 %8, 32767
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  store i64 %6, i64* %10, align 16
  store i16 %9, i16* %7, align 8
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define void @helper_fld1_ST0() local_unnamed_addr #14 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  store i64 -9223372036854775808, i64* %5, align 16
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  store i16 16383, i16* %6, align 8
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define void @helper_fldl2t_ST0() local_unnamed_addr #14 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  store i64 -3127054724296373506, i64* %5, align 16
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  store i16 16384, i16* %6, align 8
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define void @helper_fldl2e_ST0() local_unnamed_addr #14 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  store i64 -5140230975865229124, i64* %5, align 16
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  store i16 16383, i16* %6, align 8
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define void @helper_fldpi_ST0() local_unnamed_addr #14 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  store i64 -3958705157555305931, i64* %5, align 16
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  store i16 16384, i16* %6, align 8
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define void @helper_fldlg2_ST0() local_unnamed_addr #14 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  store i64 -7340697496662837351, i64* %5, align 16
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  store i16 16381, i16* %6, align 8
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define void @helper_fldln2_ST0() local_unnamed_addr #14 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  store i64 -5660435428506895956, i64* %5, align 16
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  store i16 16382, i16* %6, align 8
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define void @helper_fldz_ST0() local_unnamed_addr #14 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  store i64 0, i64* %5, align 16
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  store i16 0, i16* %6, align 8
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define void @helper_fldz_FT0() local_unnamed_addr #14 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 11, i32 0
  store i64 0, i64* %2, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 11, i32 1
  store i16 0, i16* %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn
define i32 @helper_fnstsw() local_unnamed_addr #0 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 6
  %3 = load i16, i16* %2, align 4
  %4 = and i16 %3, -14337
  %5 = zext i16 %4 to i32
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %7 = load i32, i32* %6, align 16
  %8 = shl i32 %7, 11
  %9 = and i32 %8, 14336
  %10 = or i32 %9, %5
  ret i32 %10
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn
define i32 @helper_fnstcw() local_unnamed_addr #0 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 7
  %3 = load i16, i16* %2, align 2
  %4 = zext i16 %3 to i32
  ret i32 %4
}

; Function Attrs: uwtable
define void @helper_fldcw(i32 noundef %0) local_unnamed_addr #3 {
  %2 = trunc i32 %0 to i16
  %3 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %4 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 7
  store i16 %2, i16* %4, align 2
  %5 = lshr i32 %0, 10
  %6 = and i32 %5, 3
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 10
  tail call void @set_float_rounding_mode(i32 noundef %6, %struct.float_status* noundef nonnull %7)
  %8 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %8, i64 0, i32 7
  %10 = load i16, i16* %9, align 2
  %11 = lshr i16 %10, 8
  %12 = and i16 %11, 3
  %13 = icmp eq i16 %12, 2
  %14 = select i1 %13, i32 64, i32 80
  %15 = icmp eq i16 %12, 0
  %16 = select i1 %15, i32 32, i32 %14
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %8, i64 0, i32 10
  tail call void @set_floatx80_rounding_precision(i32 noundef %16, %struct.float_status* noundef nonnull %17)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_fclex() local_unnamed_addr #2 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 6
  %3 = load i16, i16* %2, align 4
  %4 = and i16 %3, 32512
  store i16 %4, i16* %2, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_fwait() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 6
  %3 = load i16, i16* %2, align 4
  %4 = and i16 %3, 128
  %5 = icmp eq i16 %4, 0
  br i1 %5, label %13, label %6

6:                                                ; preds = %0
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 29, i64 0
  %8 = load i64, i64* %7, align 16
  %9 = and i64 %8, 32
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %12, label %11

11:                                               ; preds = %6
  tail call void @raise_exception_ra(%struct.CPUX86State* noundef nonnull %1, i32 noundef 16, i64 noundef 0) #28
  unreachable

12:                                               ; preds = %6
  tail call void @perror(i8* noundef getelementptr inbounds ([16 x i8], [16 x i8]* @.str.21, i64 0, i64 0)) #31
  br label %13

13:                                               ; preds = %12, %0
  ret void
}

; Function Attrs: nofree nounwind
declare void @perror(i8* nocapture noundef readonly) local_unnamed_addr #5

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_fninit() local_unnamed_addr #2 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 6
  store i16 0, i16* %2, align 4
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  store i32 0, i32* %3, align 16
  %4 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 7
  store i16 895, i16* %4, align 2
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 8, i64 0
  %6 = bitcast i8* %5 to i64*
  store i64 72340172838076673, i64* %6, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_fbld_ST0(i64 noundef %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = add i64 %0, 8
  %4 = tail call fastcc i32 @cpu_ldub_data(%struct.CPUX86State* noundef %2, i64 noundef %3)
  %5 = lshr i32 %4, 4
  %6 = mul nuw i32 %5, 10
  %7 = zext i32 %6 to i64
  %8 = and i32 %4, 15
  %9 = zext i32 %8 to i64
  %10 = add nuw nsw i64 %9, %7
  %11 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %12 = add i64 %0, 7
  %13 = tail call fastcc i32 @cpu_ldub_data(%struct.CPUX86State* noundef %11, i64 noundef %12)
  %14 = mul nuw nsw i64 %10, 100
  %15 = lshr i32 %13, 4
  %16 = mul nuw i32 %15, 10
  %17 = zext i32 %16 to i64
  %18 = and i32 %13, 15
  %19 = zext i32 %18 to i64
  %20 = add nuw nsw i64 %14, %19
  %21 = add nuw nsw i64 %20, %17
  %22 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %23 = add i64 %0, 6
  %24 = tail call fastcc i32 @cpu_ldub_data(%struct.CPUX86State* noundef %22, i64 noundef %23)
  %25 = mul nuw nsw i64 %21, 100
  %26 = lshr i32 %24, 4
  %27 = mul nuw i32 %26, 10
  %28 = zext i32 %27 to i64
  %29 = and i32 %24, 15
  %30 = zext i32 %29 to i64
  %31 = add nuw nsw i64 %25, %30
  %32 = add nuw nsw i64 %31, %28
  %33 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %34 = add i64 %0, 5
  %35 = tail call fastcc i32 @cpu_ldub_data(%struct.CPUX86State* noundef %33, i64 noundef %34)
  %36 = mul nuw nsw i64 %32, 100
  %37 = lshr i32 %35, 4
  %38 = mul nuw i32 %37, 10
  %39 = zext i32 %38 to i64
  %40 = and i32 %35, 15
  %41 = zext i32 %40 to i64
  %42 = add nuw nsw i64 %36, %41
  %43 = add nuw nsw i64 %42, %39
  %44 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %45 = add i64 %0, 4
  %46 = tail call fastcc i32 @cpu_ldub_data(%struct.CPUX86State* noundef %44, i64 noundef %45)
  %47 = mul nuw nsw i64 %43, 100
  %48 = lshr i32 %46, 4
  %49 = mul nuw i32 %48, 10
  %50 = zext i32 %49 to i64
  %51 = and i32 %46, 15
  %52 = zext i32 %51 to i64
  %53 = add nuw nsw i64 %47, %52
  %54 = add nuw nsw i64 %53, %50
  %55 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %56 = add i64 %0, 3
  %57 = tail call fastcc i32 @cpu_ldub_data(%struct.CPUX86State* noundef %55, i64 noundef %56)
  %58 = mul i64 %54, 100
  %59 = lshr i32 %57, 4
  %60 = mul nuw i32 %59, 10
  %61 = zext i32 %60 to i64
  %62 = and i32 %57, 15
  %63 = zext i32 %62 to i64
  %64 = add i64 %58, %63
  %65 = add i64 %64, %61
  %66 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %67 = add i64 %0, 2
  %68 = tail call fastcc i32 @cpu_ldub_data(%struct.CPUX86State* noundef %66, i64 noundef %67)
  %69 = mul i64 %65, 100
  %70 = lshr i32 %68, 4
  %71 = mul nuw i32 %70, 10
  %72 = zext i32 %71 to i64
  %73 = and i32 %68, 15
  %74 = zext i32 %73 to i64
  %75 = add i64 %69, %74
  %76 = add i64 %75, %72
  %77 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %78 = add i64 %0, 1
  %79 = tail call fastcc i32 @cpu_ldub_data(%struct.CPUX86State* noundef %77, i64 noundef %78)
  %80 = mul i64 %76, 100
  %81 = lshr i32 %79, 4
  %82 = mul nuw i32 %81, 10
  %83 = zext i32 %82 to i64
  %84 = and i32 %79, 15
  %85 = zext i32 %84 to i64
  %86 = add i64 %80, %85
  %87 = add i64 %86, %83
  %88 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %89 = tail call fastcc i32 @cpu_ldub_data(%struct.CPUX86State* noundef %88, i64 noundef %0)
  %90 = mul i64 %87, 100
  %91 = lshr i32 %89, 4
  %92 = mul nuw i32 %91, 10
  %93 = zext i32 %92 to i64
  %94 = and i32 %89, 15
  %95 = zext i32 %94 to i64
  %96 = add i64 %90, %95
  %97 = add i64 %96, %93
  %98 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %99 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %98, i64 0, i32 10
  %100 = tail call { i64, i16 } @int64_to_floatx80(i64 noundef %97, %struct.float_status* noundef nonnull %99)
  %101 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %102 = add i64 %0, 9
  %103 = tail call fastcc i32 @cpu_ldub_data(%struct.CPUX86State* noundef %101, i64 noundef %102)
  %104 = extractvalue { i64, i16 } %100, 1
  %105 = extractvalue { i64, i16 } %100, 0
  %106 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %107 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %106, i64 0, i32 5
  %108 = load i32, i32* %107, align 16
  %109 = add i32 %108, 7
  %110 = and i32 %109, 7
  store i32 %110, i32* %107, align 16
  %111 = zext i32 %110 to i64
  %112 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %106, i64 0, i32 8, i64 %111
  store i8 0, i8* %112, align 1
  %113 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %114 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %113, i64 0, i32 5
  %115 = load i32, i32* %114, align 16
  %116 = zext i32 %115 to i64
  %117 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %113, i64 0, i32 9, i64 %116, i32 0, i32 0
  store i64 %105, i64* %117, align 16
  %118 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %113, i64 0, i32 9, i64 %116, i32 0, i32 1
  store i16 %104, i16* %118, align 8
  ret void
}

; Function Attrs: uwtable
define internal fastcc i32 @cpu_ldub_data(%struct.CPUX86State* noundef %0, i64 noundef %1) unnamed_addr #3 {
  %3 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %7, label %6

6:                                                ; preds = %2
  tail call void @tcg_llvm_before_memory_access(i64 noundef %1, i64 noundef 0, i32 noundef 1, i32 noundef 0)
  br label %7

7:                                                ; preds = %6, %2
  %8 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %13, label %11

11:                                               ; preds = %7
  %12 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %1, i64 noundef 0, i64 noundef -1, i64 noundef 0)
  br label %13

13:                                               ; preds = %7, %11
  %14 = phi i64 [ %12, %11 ], [ %1, %7 ]
  %15 = lshr i64 %14, 12
  %16 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %15, i64 noundef 0, i64 noundef 4503599627370495, i64 noundef 0)
  %17 = and i64 %16, 1023
  %18 = getelementptr %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 21
  %19 = load i32, i32* %18, align 16
  %20 = and i32 %19, 3
  %21 = icmp eq i32 %20, 3
  %22 = zext i1 %21 to i64
  %23 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 82, i64 %22
  %24 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %23, align 8
  %25 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %24, i64 %17, i32 0
  %26 = load i64, i64* %25, align 8
  %27 = and i64 %26, -33
  %28 = and i64 %14, -4096
  %29 = icmp eq i64 %27, %28
  br i1 %29, label %33, label %30, !prof !5

30:                                               ; preds = %13
  %31 = zext i1 %21 to i32
  %32 = tail call zeroext i8 @helper_ldb_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %14, i32 noundef %31, i8* noundef null)
  br label %44

33:                                               ; preds = %13
  %34 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %24, i64 %17, i32 4
  %35 = load i64, i64* %34, align 8
  %36 = add i64 %35, %14
  %37 = inttoptr i64 %36 to i8*
  %38 = load i8, i8* %37, align 1
  %39 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %40 = load i32, i32* %39, align 4
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %44, label %42

42:                                               ; preds = %33
  %43 = zext i8 %38 to i64
  tail call void @tcg_llvm_after_memory_access(i64 noundef %14, i64 noundef %43, i32 noundef 1, i32 noundef 0, i64 noundef 0)
  br label %44

44:                                               ; preds = %33, %42, %30
  %45 = phi i8 [ %32, %30 ], [ %38, %42 ], [ %38, %33 ]
  %46 = zext i8 %45 to i32
  ret i32 %46
}

; Function Attrs: uwtable
define void @helper_fbst_ST0(i64 noundef %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 5
  %4 = load i32, i32* %3, align 16
  %5 = zext i32 %4 to i64
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 10
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %5, i32 0, i32 0
  %8 = load i64, i64* %7, align 16
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 9, i64 %5, i32 0, i32 1
  %10 = load i16, i16* %9, align 8
  %11 = tail call i64 @floatx80_to_int64(i64 %8, i16 %10, %struct.float_status* noundef nonnull %6)
  %12 = add i64 %0, 9
  %13 = icmp slt i64 %11, 0
  %14 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %13, label %15, label %17

15:                                               ; preds = %1
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* noundef %14, i64 noundef %12, i32 noundef 128)
  %16 = sub nsw i64 0, %11
  br label %18

17:                                               ; preds = %1
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* noundef %14, i64 noundef %12, i32 noundef 0)
  br label %18

18:                                               ; preds = %17, %15
  %19 = phi i64 [ %16, %15 ], [ %11, %17 ]
  %20 = icmp ugt i64 %0, -10
  %21 = icmp eq i64 %19, 0
  %22 = select i1 %20, i1 true, i1 %21
  br i1 %22, label %23, label %26

23:                                               ; preds = %26, %18
  %24 = phi i64 [ %0, %18 ], [ %39, %26 ]
  %25 = icmp ult i64 %24, %12
  br i1 %25, label %44, label %49

26:                                               ; preds = %18, %26
  %27 = phi i64 [ %30, %26 ], [ %19, %18 ]
  %28 = phi i64 [ %39, %26 ], [ %0, %18 ]
  %29 = srem i64 %27, 100
  %30 = sdiv i64 %27, 100
  %31 = trunc i64 %29 to i8
  %32 = sdiv i8 %31, 10
  %33 = sext i8 %32 to i32
  %34 = shl nsw i32 %33, 4
  %35 = srem i8 %31, 10
  %36 = sext i8 %35 to i32
  %37 = or i32 %34, %36
  %38 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %39 = add nuw i64 %28, 1
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* noundef %38, i64 noundef %28, i32 noundef %37)
  %40 = icmp uge i64 %39, %12
  %41 = add i64 %27, 99
  %42 = icmp ult i64 %41, 199
  %43 = select i1 %40, i1 true, i1 %42
  br i1 %43, label %23, label %26, !llvm.loop !15

44:                                               ; preds = %23, %44
  %45 = phi i64 [ %47, %44 ], [ %24, %23 ]
  %46 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %47 = add i64 %45, 1
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* noundef %46, i64 noundef %45, i32 noundef 0)
  %48 = icmp eq i64 %47, %12
  br i1 %48, label %49, label %44, !llvm.loop !16

49:                                               ; preds = %44, %23
  ret void
}

; Function Attrs: uwtable
define internal fastcc void @cpu_stb_data(%struct.CPUX86State* noundef %0, i64 noundef %1, i32 noundef %2) unnamed_addr #3 {
  %4 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = zext i32 %2 to i64
  tail call void @tcg_llvm_before_memory_access(i64 noundef %1, i64 noundef %8, i32 noundef 1, i32 noundef 1)
  br label %9

9:                                                ; preds = %7, %3
  %10 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %15, label %13

13:                                               ; preds = %9
  %14 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %1, i64 noundef 0, i64 noundef -1, i64 noundef 0)
  br label %15

15:                                               ; preds = %9, %13
  %16 = phi i64 [ %14, %13 ], [ %1, %9 ]
  %17 = lshr i64 %16, 12
  %18 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %17, i64 noundef 0, i64 noundef 4503599627370495, i64 noundef 0)
  %19 = and i64 %18, 1023
  %20 = getelementptr %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 21
  %21 = load i32, i32* %20, align 16
  %22 = and i32 %21, 3
  %23 = icmp eq i32 %22, 3
  %24 = zext i1 %23 to i64
  %25 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 82, i64 %24
  %26 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %25, align 8
  %27 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %26, i64 %19, i32 1
  %28 = load i64, i64* %27, align 8
  %29 = and i64 %28, -33
  %30 = and i64 %16, -4096
  %31 = icmp eq i64 %29, %30
  br i1 %31, label %35, label %32, !prof !5

32:                                               ; preds = %15
  %33 = zext i1 %23 to i32
  %34 = trunc i32 %2 to i8
  tail call void @helper_stb_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %16, i8 noundef zeroext %34, i32 noundef %33, i8* noundef null)
  br label %46

35:                                               ; preds = %15
  %36 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %26, i64 %19, i32 4
  %37 = load i64, i64* %36, align 8
  %38 = add i64 %37, %16
  %39 = inttoptr i64 %38 to i8*
  %40 = trunc i32 %2 to i8
  store i8 %40, i8* %39, align 1
  %41 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %42 = load i32, i32* %41, align 4
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %46, label %44

44:                                               ; preds = %35
  %45 = zext i32 %2 to i64
  tail call void @tcg_llvm_after_memory_access(i64 noundef %16, i64 noundef %45, i32 noundef 1, i32 noundef 2, i64 noundef 0)
  br label %46

46:                                               ; preds = %35, %44, %32
  ret void
}

; Function Attrs: uwtable
define void @helper_f2xm1() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %6 = load i64, i64* %5, align 16
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %8 = load i16, i16* %7, align 8
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %10 = tail call i64 @floatx80_to_float64(i64 %6, i16 %8, %struct.float_status* noundef nonnull %9)
  %11 = bitcast i64 %10 to double
  %12 = tail call double @exp2(double %11)
  %13 = fadd double %12, -1.000000e+00
  %14 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 5
  %16 = load i32, i32* %15, align 16
  %17 = zext i32 %16 to i64
  %18 = bitcast double %13 to i64
  %19 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 10
  %20 = tail call { i64, i16 } @float64_to_floatx80(i64 noundef %18, %struct.float_status* noundef nonnull %19)
  %21 = extractvalue { i64, i16 } %20, 0
  %22 = extractvalue { i64, i16 } %20, 1
  %23 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 9, i64 %17, i32 0, i32 0
  store i64 %21, i64* %23, align 16
  %24 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 9, i64 %17, i32 0, i32 1
  store i16 %22, i16* %24, align 8
  ret void
}

declare double @exp2(double) local_unnamed_addr

; Function Attrs: uwtable
define void @helper_fyl2x() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %6 = load i64, i64* %5, align 16
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %8 = load i16, i16* %7, align 8
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %10 = tail call i64 @floatx80_to_float64(i64 %6, i16 %8, %struct.float_status* noundef nonnull %9)
  %11 = bitcast i64 %10 to double
  %12 = fcmp ogt double %11, 0.000000e+00
  br i1 %12, label %13, label %53

13:                                               ; preds = %0
  %14 = tail call double @log(double noundef %11) #30
  %15 = fdiv double %14, 0x3FE62E42FEFA39EF
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 5
  %18 = load i32, i32* %17, align 16
  %19 = add i32 %18, 1
  %20 = and i32 %19, 7
  %21 = zext i32 %20 to i64
  %22 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 9, i64 %21, i32 0, i32 0
  %23 = load i64, i64* %22, align 16
  %24 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 9, i64 %21, i32 0, i32 1
  %25 = load i16, i16* %24, align 8
  %26 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 10
  %27 = tail call i64 @floatx80_to_float64(i64 %23, i16 %25, %struct.float_status* noundef nonnull %26)
  %28 = bitcast i64 %27 to double
  %29 = fmul double %15, %28
  %30 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %31 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %30, i64 0, i32 5
  %32 = load i32, i32* %31, align 16
  %33 = add i32 %32, 1
  %34 = and i32 %33, 7
  %35 = zext i32 %34 to i64
  %36 = bitcast double %29 to i64
  %37 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %30, i64 0, i32 10
  %38 = tail call { i64, i16 } @float64_to_floatx80(i64 noundef %36, %struct.float_status* noundef nonnull %37)
  %39 = extractvalue { i64, i16 } %38, 0
  %40 = extractvalue { i64, i16 } %38, 1
  %41 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %30, i64 0, i32 9, i64 %35, i32 0, i32 0
  store i64 %39, i64* %41, align 16
  %42 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %30, i64 0, i32 9, i64 %35, i32 0, i32 1
  store i16 %40, i16* %42, align 8
  %43 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %44 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %43, i64 0, i32 5
  %45 = load i32, i32* %44, align 16
  %46 = zext i32 %45 to i64
  %47 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %43, i64 0, i32 8, i64 %46
  store i8 1, i8* %47, align 1
  %48 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %49 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %48, i64 0, i32 5
  %50 = load i32, i32* %49, align 16
  %51 = add i32 %50, 1
  %52 = and i32 %51, 7
  store i32 %52, i32* %49, align 16
  br label %59

53:                                               ; preds = %0
  %54 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %55 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %54, i64 0, i32 6
  %56 = load i16, i16* %55, align 4
  %57 = and i16 %56, -18177
  %58 = or i16 %57, 1024
  store i16 %58, i16* %55, align 4
  br label %59

59:                                               ; preds = %53, %13
  ret void
}

; Function Attrs: mustprogress nofree nounwind willreturn writeonly
declare double @log(double noundef) local_unnamed_addr #16

; Function Attrs: uwtable
define void @helper_fptan() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %6 = load i64, i64* %5, align 16
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %8 = load i16, i16* %7, align 8
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %10 = tail call i64 @floatx80_to_float64(i64 %6, i16 %8, %struct.float_status* noundef nonnull %9)
  %11 = bitcast i64 %10 to double
  %12 = fcmp ogt double %11, 0x43E0000000000000
  %13 = fcmp olt double %11, 0xC3E0000000000000
  %14 = or i1 %12, %13
  br i1 %14, label %15, label %20

15:                                               ; preds = %0
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 6
  %18 = load i16, i16* %17, align 4
  %19 = or i16 %18, 1024
  store i16 %19, i16* %17, align 4
  br label %50

20:                                               ; preds = %0
  %21 = tail call double @tan(double noundef %11) #30
  %22 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %23 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %22, i64 0, i32 5
  %24 = load i32, i32* %23, align 16
  %25 = zext i32 %24 to i64
  %26 = bitcast double %21 to i64
  %27 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %22, i64 0, i32 10
  %28 = tail call { i64, i16 } @float64_to_floatx80(i64 noundef %26, %struct.float_status* noundef nonnull %27)
  %29 = extractvalue { i64, i16 } %28, 0
  %30 = extractvalue { i64, i16 } %28, 1
  %31 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %22, i64 0, i32 9, i64 %25, i32 0, i32 0
  store i64 %29, i64* %31, align 16
  %32 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %22, i64 0, i32 9, i64 %25, i32 0, i32 1
  store i16 %30, i16* %32, align 8
  %33 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %34 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %33, i64 0, i32 5
  %35 = load i32, i32* %34, align 16
  %36 = add i32 %35, 7
  %37 = and i32 %36, 7
  store i32 %37, i32* %34, align 16
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %33, i64 0, i32 8, i64 %38
  store i8 0, i8* %39, align 1
  %40 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %41 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %40, i64 0, i32 5
  %42 = load i32, i32* %41, align 16
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %40, i64 0, i32 9, i64 %43, i32 0, i32 0
  store i64 -9223372036854775808, i64* %44, align 16
  %45 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %40, i64 0, i32 9, i64 %43, i32 0, i32 1
  store i16 16383, i16* %45, align 8
  %46 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %47 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %46, i64 0, i32 6
  %48 = load i16, i16* %47, align 4
  %49 = and i16 %48, -1025
  store i16 %49, i16* %47, align 4
  br label %50

50:                                               ; preds = %20, %15
  ret void
}

; Function Attrs: mustprogress nofree nounwind willreturn writeonly
declare double @tan(double noundef) local_unnamed_addr #16

; Function Attrs: uwtable
define void @helper_fpatan() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = add i32 %3, 1
  %5 = and i32 %4, 7
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %6, i32 0, i32 0
  %8 = load i64, i64* %7, align 16
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %6, i32 0, i32 1
  %10 = load i16, i16* %9, align 8
  %11 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %12 = tail call i64 @floatx80_to_float64(i64 %8, i16 %10, %struct.float_status* noundef nonnull %11)
  %13 = bitcast i64 %12 to double
  %14 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 5
  %16 = load i32, i32* %15, align 16
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 9, i64 %17, i32 0, i32 0
  %19 = load i64, i64* %18, align 16
  %20 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 9, i64 %17, i32 0, i32 1
  %21 = load i16, i16* %20, align 8
  %22 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 10
  %23 = tail call i64 @floatx80_to_float64(i64 %19, i16 %21, %struct.float_status* noundef nonnull %22)
  %24 = bitcast i64 %23 to double
  %25 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %26 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %25, i64 0, i32 5
  %27 = load i32, i32* %26, align 16
  %28 = add i32 %27, 1
  %29 = and i32 %28, 7
  %30 = zext i32 %29 to i64
  %31 = tail call double @atan2(double noundef %13, double noundef %24) #30
  %32 = bitcast double %31 to i64
  %33 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %34 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %33, i64 0, i32 10
  %35 = tail call { i64, i16 } @float64_to_floatx80(i64 noundef %32, %struct.float_status* noundef nonnull %34)
  %36 = extractvalue { i64, i16 } %35, 0
  %37 = extractvalue { i64, i16 } %35, 1
  %38 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %25, i64 0, i32 9, i64 %30, i32 0, i32 0
  store i64 %36, i64* %38, align 16
  %39 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %25, i64 0, i32 9, i64 %30, i32 0, i32 1
  store i16 %37, i16* %39, align 8
  %40 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %41 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %40, i64 0, i32 5
  %42 = load i32, i32* %41, align 16
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %40, i64 0, i32 8, i64 %43
  store i8 1, i8* %44, align 1
  %45 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %46 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %45, i64 0, i32 5
  %47 = load i32, i32* %46, align 16
  %48 = add i32 %47, 1
  %49 = and i32 %48, 7
  store i32 %49, i32* %46, align 16
  ret void
}

; Function Attrs: mustprogress nofree nounwind willreturn writeonly
declare double @atan2(double noundef, double noundef) local_unnamed_addr #16

; Function Attrs: uwtable
define void @helper_fxtract() local_unnamed_addr #3 {
  %1 = alloca [6 x i8], align 2
  %2 = getelementptr inbounds [6 x i8], [6 x i8]* %1, i64 0, i64 0
  %3 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %4 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 5
  %5 = load i32, i32* %4, align 16
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 9, i64 %6
  %8 = getelementptr inbounds %union.FPReg, %union.FPReg* %7, i64 0, i32 0, i32 0
  %9 = load i64, i64* %8, align 16
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 9, i64 %6, i32 0, i32 1
  %11 = load i16, i16* %10, align 8
  %12 = bitcast %union.FPReg* %7 to i8*
  %13 = getelementptr inbounds i8, i8* %12, i64 10
  %14 = call i8* @memcpy(i8* %2, i8* %13, i64 6)
  %15 = and i16 %11, 32767
  %16 = icmp ne i16 %15, 0
  %17 = icmp ne i64 %9, 0
  %18 = select i1 %16, i1 true, i1 %17
  br i1 %18, label %38, label %19

19:                                               ; preds = %0
  %20 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 10
  %21 = tail call { i64, i16 } @floatx80_div(i64 -9223372036854775808, i16 -16385, i64 0, i16 0, %struct.float_status* noundef nonnull %20)
  %22 = extractvalue { i64, i16 } %21, 0
  %23 = extractvalue { i64, i16 } %21, 1
  store i64 %22, i64* %8, align 16
  store i16 %23, i16* %10, align 8
  %24 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %25 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %24, i64 0, i32 5
  %26 = load i32, i32* %25, align 16
  %27 = add i32 %26, 7
  %28 = and i32 %27, 7
  store i32 %28, i32* %25, align 16
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %24, i64 0, i32 8, i64 %29
  store i8 0, i8* %30, align 1
  %31 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %32 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %31, i64 0, i32 5
  %33 = load i32, i32* %32, align 16
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %31, i64 0, i32 9, i64 %34
  %36 = getelementptr inbounds %union.FPReg, %union.FPReg* %35, i64 0, i32 0, i32 0
  store i64 0, i64* %36, align 16
  %37 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %31, i64 0, i32 9, i64 %34, i32 0, i32 1
  store i16 %11, i16* %37, align 8
  br label %61

38:                                               ; preds = %0
  %39 = zext i16 %15 to i32
  %40 = add nsw i32 %39, -16383
  %41 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 10
  %42 = tail call { i64, i16 } @int32_to_floatx80(i32 noundef %40, %struct.float_status* noundef nonnull %41)
  %43 = extractvalue { i64, i16 } %42, 0
  %44 = extractvalue { i64, i16 } %42, 1
  store i64 %43, i64* %8, align 16
  store i16 %44, i16* %10, align 8
  %45 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %46 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %45, i64 0, i32 5
  %47 = load i32, i32* %46, align 16
  %48 = add i32 %47, 7
  %49 = and i32 %48, 7
  store i32 %49, i32* %46, align 16
  %50 = zext i32 %49 to i64
  %51 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %45, i64 0, i32 8, i64 %50
  store i8 0, i8* %51, align 1
  %52 = and i16 %11, -32768
  %53 = or i16 %52, 16383
  %54 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %55 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %54, i64 0, i32 5
  %56 = load i32, i32* %55, align 16
  %57 = zext i32 %56 to i64
  %58 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %54, i64 0, i32 9, i64 %57
  %59 = getelementptr inbounds %union.FPReg, %union.FPReg* %58, i64 0, i32 0, i32 0
  store i64 %9, i64* %59, align 16
  %60 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %54, i64 0, i32 9, i64 %57, i32 0, i32 1
  store i16 %53, i16* %60, align 8
  br label %61

61:                                               ; preds = %38, %19
  %62 = phi %union.FPReg* [ %58, %38 ], [ %35, %19 ]
  %63 = bitcast %union.FPReg* %62 to i8*
  %64 = getelementptr inbounds i8, i8* %63, i64 10
  %65 = call i8* @memcpy(i8* %64, i8* %2, i64 6)
  ret void
}

; Function Attrs: uwtable
define void @helper_fprem1() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %6 = load i64, i64* %5, align 16
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %8 = load i16, i16* %7, align 8
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %10 = tail call i64 @floatx80_to_float64(i64 %6, i16 %8, %struct.float_status* noundef nonnull %9)
  %11 = bitcast i64 %10 to double
  %12 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %12, i64 0, i32 5
  %14 = load i32, i32* %13, align 16
  %15 = add i32 %14, 1
  %16 = and i32 %15, 7
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %12, i64 0, i32 9, i64 %17, i32 0, i32 0
  %19 = load i64, i64* %18, align 16
  %20 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %12, i64 0, i32 9, i64 %17, i32 0, i32 1
  %21 = load i16, i16* %20, align 8
  %22 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %12, i64 0, i32 10
  %23 = tail call i64 @floatx80_to_float64(i64 %19, i16 %21, %struct.float_status* noundef nonnull %22)
  %24 = bitcast i64 %23 to double
  %25 = tail call double @llvm.fabs.f64(double %11) #32
  %26 = fcmp oeq double %25, 0x7FF0000000000000
  %27 = fcmp uno double %11, 0.000000e+00
  %28 = select i1 %26, i1 true, i1 %27
  %29 = fcmp uno double %24, 0.000000e+00
  %30 = select i1 %28, i1 true, i1 %29
  %31 = fcmp oeq double %24, 0.000000e+00
  %32 = select i1 %30, i1 true, i1 %31
  %33 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %34 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %33, i64 0, i32 5
  %35 = load i32, i32* %34, align 16
  %36 = zext i32 %35 to i64
  br i1 %32, label %37, label %48

37:                                               ; preds = %0
  %38 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %33, i64 0, i32 10
  %39 = tail call { i64, i16 } @float64_to_floatx80(i64 noundef 9221120237041090560, %struct.float_status* noundef nonnull %38)
  %40 = extractvalue { i64, i16 } %39, 0
  %41 = extractvalue { i64, i16 } %39, 1
  %42 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %33, i64 0, i32 9, i64 %36, i32 0, i32 0
  store i64 %40, i64* %42, align 16
  %43 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %33, i64 0, i32 9, i64 %36, i32 0, i32 1
  store i16 %41, i16* %43, align 8
  %44 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %45 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %44, i64 0, i32 6
  %46 = load i16, i16* %45, align 4
  %47 = and i16 %46, -18177
  store i16 %47, i16* %45, align 4
  br label %125

48:                                               ; preds = %0
  %49 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %33, i64 0, i32 9, i64 %36, i32 0, i32 1
  %50 = load i16, i16* %49, align 8
  %51 = add i32 %35, 1
  %52 = and i32 %51, 7
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %33, i64 0, i32 9, i64 %53, i32 0, i32 1
  %55 = load i16, i16* %54, align 8
  %56 = and i16 %50, 32767
  %57 = zext i16 %56 to i32
  %58 = and i16 %55, 32767
  %59 = zext i16 %58 to i32
  %60 = sub nsw i32 %57, %59
  %61 = icmp slt i32 %60, 0
  br i1 %61, label %62, label %66

62:                                               ; preds = %48
  %63 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %33, i64 0, i32 6
  %64 = load i16, i16* %63, align 4
  %65 = and i16 %64, -18177
  store i16 %65, i16* %63, align 4
  br label %125

66:                                               ; preds = %48
  %67 = icmp ult i32 %60, 53
  br i1 %67, label %68, label %90

68:                                               ; preds = %66
  %69 = fdiv double %11, %24
  %70 = tail call double @llvm.rint.f64(double %69)
  %71 = fneg double %24
  %72 = tail call double @llvm.fmuladd.f64(double %71, double %70, double %11)
  %73 = fcmp olt double %70, 0.000000e+00
  %74 = fneg double %70
  %75 = select i1 %73, double %74, double %70
  %76 = fptosi double %75 to i64
  %77 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %33, i64 0, i32 6
  %78 = load i16, i16* %77, align 4
  %79 = and i16 %78, -18177
  %80 = trunc i64 %76 to i16
  %81 = shl i16 %80, 6
  %82 = and i16 %81, 256
  %83 = shl i16 %80, 13
  %84 = and i16 %83, 16384
  %85 = shl i16 %80, 9
  %86 = and i16 %85, 512
  %87 = or i16 %84, %82
  %88 = or i16 %87, %86
  %89 = or i16 %88, %79
  store i16 %89, i16* %77, align 4
  br label %114

90:                                               ; preds = %66
  %91 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %33, i64 0, i32 6
  %92 = load i16, i16* %91, align 4
  %93 = or i16 %92, 1024
  store i16 %93, i16* %91, align 4
  %94 = add nsw i32 %60, -50
  %95 = tail call double @ldexp(double 1.000000e+00, i32 %94)
  %96 = fdiv double %11, %24
  %97 = fdiv double %96, %95
  %98 = fcmp olt double %97, 0.000000e+00
  br i1 %98, label %99, label %103

99:                                               ; preds = %90
  %100 = tail call double @llvm.fabs.f64(double %97)
  %101 = call double @floor(double %100)
  %102 = fneg double %101
  br label %105

103:                                              ; preds = %90
  %104 = call double @floor(double %97)
  br label %105

105:                                              ; preds = %103, %99
  %106 = phi double [ %102, %99 ], [ %104, %103 ]
  %107 = fneg double %24
  %108 = fmul double %106, %107
  %109 = tail call double @llvm.fmuladd.f64(double %108, double %95, double %11)
  %110 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %111 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %110, i64 0, i32 5
  %112 = load i32, i32* %111, align 16
  %113 = zext i32 %112 to i64
  br label %114

114:                                              ; preds = %105, %68
  %115 = phi i64 [ %113, %105 ], [ %36, %68 ]
  %116 = phi %struct.CPUX86State* [ %110, %105 ], [ %33, %68 ]
  %117 = phi double [ %109, %105 ], [ %72, %68 ]
  %118 = bitcast double %117 to i64
  %119 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %116, i64 0, i32 10
  %120 = tail call { i64, i16 } @float64_to_floatx80(i64 noundef %118, %struct.float_status* noundef nonnull %119)
  %121 = extractvalue { i64, i16 } %120, 0
  %122 = extractvalue { i64, i16 } %120, 1
  %123 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %116, i64 0, i32 9, i64 %115, i32 0, i32 0
  store i64 %121, i64* %123, align 16
  %124 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %116, i64 0, i32 9, i64 %115, i32 0, i32 1
  store i16 %122, i16* %124, align 8
  br label %125

125:                                              ; preds = %114, %62, %37
  ret void
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double) #11

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.rint.f64(double) #11

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.fmuladd.f64(double, double, double) #11

; Function Attrs: nofree willreturn
declare double @ldexp(double, i32 signext) local_unnamed_addr #17

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.floor.f64(double) #11

; Function Attrs: uwtable
define void @helper_fprem() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %6 = load i64, i64* %5, align 16
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %8 = load i16, i16* %7, align 8
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %10 = tail call i64 @floatx80_to_float64(i64 %6, i16 %8, %struct.float_status* noundef nonnull %9)
  %11 = bitcast i64 %10 to double
  %12 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %12, i64 0, i32 5
  %14 = load i32, i32* %13, align 16
  %15 = add i32 %14, 1
  %16 = and i32 %15, 7
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %12, i64 0, i32 9, i64 %17, i32 0, i32 0
  %19 = load i64, i64* %18, align 16
  %20 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %12, i64 0, i32 9, i64 %17, i32 0, i32 1
  %21 = load i16, i16* %20, align 8
  %22 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %12, i64 0, i32 10
  %23 = tail call i64 @floatx80_to_float64(i64 %19, i16 %21, %struct.float_status* noundef nonnull %22)
  %24 = bitcast i64 %23 to double
  %25 = tail call double @llvm.fabs.f64(double %11) #32
  %26 = fcmp oeq double %25, 0x7FF0000000000000
  %27 = fcmp uno double %11, 0.000000e+00
  %28 = select i1 %26, i1 true, i1 %27
  %29 = fcmp uno double %24, 0.000000e+00
  %30 = select i1 %28, i1 true, i1 %29
  %31 = fcmp oeq double %24, 0.000000e+00
  %32 = select i1 %30, i1 true, i1 %31
  %33 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %34 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %33, i64 0, i32 5
  %35 = load i32, i32* %34, align 16
  %36 = zext i32 %35 to i64
  br i1 %32, label %37, label %48

37:                                               ; preds = %0
  %38 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %33, i64 0, i32 10
  %39 = tail call { i64, i16 } @float64_to_floatx80(i64 noundef 9221120237041090560, %struct.float_status* noundef nonnull %38)
  %40 = extractvalue { i64, i16 } %39, 0
  %41 = extractvalue { i64, i16 } %39, 1
  %42 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %33, i64 0, i32 9, i64 %36, i32 0, i32 0
  store i64 %40, i64* %42, align 16
  %43 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %33, i64 0, i32 9, i64 %36, i32 0, i32 1
  store i16 %41, i16* %43, align 8
  %44 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %45 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %44, i64 0, i32 6
  %46 = load i16, i16* %45, align 4
  %47 = and i16 %46, -18177
  store i16 %47, i16* %45, align 4
  br label %132

48:                                               ; preds = %0
  %49 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %33, i64 0, i32 9, i64 %36, i32 0, i32 1
  %50 = load i16, i16* %49, align 8
  %51 = add i32 %35, 1
  %52 = and i32 %51, 7
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %33, i64 0, i32 9, i64 %53, i32 0, i32 1
  %55 = load i16, i16* %54, align 8
  %56 = and i16 %50, 32767
  %57 = zext i16 %56 to i32
  %58 = and i16 %55, 32767
  %59 = zext i16 %58 to i32
  %60 = sub nsw i32 %57, %59
  %61 = icmp slt i32 %60, 0
  br i1 %61, label %62, label %66

62:                                               ; preds = %48
  %63 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %33, i64 0, i32 6
  %64 = load i16, i16* %63, align 4
  %65 = and i16 %64, -18177
  store i16 %65, i16* %63, align 4
  br label %132

66:                                               ; preds = %48
  %67 = icmp ult i32 %60, 53
  br i1 %67, label %68, label %96

68:                                               ; preds = %66
  %69 = fdiv double %11, %24
  %70 = fcmp olt double %69, 0.000000e+00
  br i1 %70, label %71, label %73

71:                                               ; preds = %68
  %72 = call double @ceil(double %69)
  br label %75

73:                                               ; preds = %68
  %74 = call double @floor(double %69)
  br label %75

75:                                               ; preds = %73, %71
  %76 = phi double [ %72, %71 ], [ %74, %73 ]
  %77 = fneg double %24
  %78 = tail call double @llvm.fmuladd.f64(double %77, double %76, double %11)
  %79 = fcmp olt double %76, 0.000000e+00
  %80 = fneg double %76
  %81 = select i1 %79, double %80, double %76
  %82 = fptosi double %81 to i64
  %83 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %33, i64 0, i32 6
  %84 = load i16, i16* %83, align 4
  %85 = and i16 %84, -18177
  %86 = trunc i64 %82 to i16
  %87 = shl i16 %86, 6
  %88 = and i16 %87, 256
  %89 = or i16 %88, %85
  %90 = shl i16 %86, 13
  %91 = and i16 %90, 16384
  %92 = or i16 %89, %91
  %93 = shl i16 %86, 9
  %94 = and i16 %93, 512
  %95 = or i16 %92, %94
  store i16 %95, i16* %83, align 4
  br label %121

96:                                               ; preds = %66
  %97 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %33, i64 0, i32 6
  %98 = load i16, i16* %97, align 4
  %99 = or i16 %98, 1024
  store i16 %99, i16* %97, align 4
  %100 = add nsw i32 %60, -32
  %101 = and i32 %100, -32
  %102 = tail call double @ldexp(double 1.000000e+00, i32 %101)
  %103 = fdiv double %11, %24
  %104 = fdiv double %103, %102
  %105 = fcmp olt double %104, 0.000000e+00
  br i1 %105, label %106, label %110

106:                                              ; preds = %96
  %107 = tail call double @llvm.fabs.f64(double %104)
  %108 = call double @floor(double %107)
  %109 = fneg double %108
  br label %112

110:                                              ; preds = %96
  %111 = call double @floor(double %104)
  br label %112

112:                                              ; preds = %110, %106
  %113 = phi double [ %109, %106 ], [ %111, %110 ]
  %114 = fneg double %24
  %115 = fmul double %113, %114
  %116 = tail call double @llvm.fmuladd.f64(double %115, double %102, double %11)
  %117 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %118 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %117, i64 0, i32 5
  %119 = load i32, i32* %118, align 16
  %120 = zext i32 %119 to i64
  br label %121

121:                                              ; preds = %112, %75
  %122 = phi i64 [ %120, %112 ], [ %36, %75 ]
  %123 = phi %struct.CPUX86State* [ %117, %112 ], [ %33, %75 ]
  %124 = phi double [ %116, %112 ], [ %78, %75 ]
  %125 = bitcast double %124 to i64
  %126 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %123, i64 0, i32 10
  %127 = tail call { i64, i16 } @float64_to_floatx80(i64 noundef %125, %struct.float_status* noundef nonnull %126)
  %128 = extractvalue { i64, i16 } %127, 0
  %129 = extractvalue { i64, i16 } %127, 1
  %130 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %123, i64 0, i32 9, i64 %122, i32 0, i32 0
  store i64 %128, i64* %130, align 16
  %131 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %123, i64 0, i32 9, i64 %122, i32 0, i32 1
  store i16 %129, i16* %131, align 8
  br label %132

132:                                              ; preds = %121, %62, %37
  ret void
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.ceil.f64(double) #11

; Function Attrs: uwtable
define void @helper_fyl2xp1() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %6 = load i64, i64* %5, align 16
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %8 = load i16, i16* %7, align 8
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %10 = tail call i64 @floatx80_to_float64(i64 %6, i16 %8, %struct.float_status* noundef nonnull %9)
  %11 = bitcast i64 %10 to double
  %12 = fadd double %11, 1.000000e+00
  %13 = fcmp ogt double %12, 0.000000e+00
  br i1 %13, label %14, label %54

14:                                               ; preds = %0
  %15 = tail call double @log(double noundef %12) #30
  %16 = fdiv double %15, 0x3FE62E42FEFA39EF
  %17 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %18 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %17, i64 0, i32 5
  %19 = load i32, i32* %18, align 16
  %20 = add i32 %19, 1
  %21 = and i32 %20, 7
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %17, i64 0, i32 9, i64 %22, i32 0, i32 0
  %24 = load i64, i64* %23, align 16
  %25 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %17, i64 0, i32 9, i64 %22, i32 0, i32 1
  %26 = load i16, i16* %25, align 8
  %27 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %17, i64 0, i32 10
  %28 = tail call i64 @floatx80_to_float64(i64 %24, i16 %26, %struct.float_status* noundef nonnull %27)
  %29 = bitcast i64 %28 to double
  %30 = fmul double %16, %29
  %31 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %32 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %31, i64 0, i32 5
  %33 = load i32, i32* %32, align 16
  %34 = add i32 %33, 1
  %35 = and i32 %34, 7
  %36 = zext i32 %35 to i64
  %37 = bitcast double %30 to i64
  %38 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %31, i64 0, i32 10
  %39 = tail call { i64, i16 } @float64_to_floatx80(i64 noundef %37, %struct.float_status* noundef nonnull %38)
  %40 = extractvalue { i64, i16 } %39, 0
  %41 = extractvalue { i64, i16 } %39, 1
  %42 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %31, i64 0, i32 9, i64 %36, i32 0, i32 0
  store i64 %40, i64* %42, align 16
  %43 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %31, i64 0, i32 9, i64 %36, i32 0, i32 1
  store i16 %41, i16* %43, align 8
  %44 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %45 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %44, i64 0, i32 5
  %46 = load i32, i32* %45, align 16
  %47 = zext i32 %46 to i64
  %48 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %44, i64 0, i32 8, i64 %47
  store i8 1, i8* %48, align 1
  %49 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %50 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %49, i64 0, i32 5
  %51 = load i32, i32* %50, align 16
  %52 = add i32 %51, 1
  %53 = and i32 %52, 7
  store i32 %53, i32* %50, align 16
  br label %60

54:                                               ; preds = %0
  %55 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %56 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %55, i64 0, i32 6
  %57 = load i16, i16* %56, align 4
  %58 = and i16 %57, -18177
  %59 = or i16 %58, 1024
  store i16 %59, i16* %56, align 4
  br label %60

60:                                               ; preds = %54, %14
  ret void
}

; Function Attrs: uwtable
define void @helper_fsqrt() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %6 = load i16, i16* %5, align 8
  %7 = icmp sgt i16 %6, -1
  br i1 %7, label %13, label %8

8:                                                ; preds = %0
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 6
  %10 = load i16, i16* %9, align 4
  %11 = and i16 %10, -18177
  %12 = or i16 %11, 1024
  store i16 %12, i16* %9, align 4
  br label %13

13:                                               ; preds = %8, %0
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %16 = load i64, i64* %15, align 16
  %17 = tail call { i64, i16 } @floatx80_sqrt(i64 %16, i16 %6, %struct.float_status* noundef nonnull %14)
  %18 = extractvalue { i64, i16 } %17, 0
  %19 = extractvalue { i64, i16 } %17, 1
  %20 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  store i64 %18, i64* %20, align 16
  store i16 %19, i16* %5, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_fsincos() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %6 = load i64, i64* %5, align 16
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %8 = load i16, i16* %7, align 8
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %10 = tail call i64 @floatx80_to_float64(i64 %6, i16 %8, %struct.float_status* noundef nonnull %9)
  %11 = bitcast i64 %10 to double
  %12 = fcmp ogt double %11, 0x43E0000000000000
  %13 = fcmp olt double %11, 0xC3E0000000000000
  %14 = or i1 %12, %13
  %15 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %14, label %16, label %20

16:                                               ; preds = %0
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 6
  %18 = load i16, i16* %17, align 4
  %19 = or i16 %18, 1024
  store i16 %19, i16* %17, align 4
  br label %57

20:                                               ; preds = %0
  %21 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 5
  %22 = load i32, i32* %21, align 16
  %23 = zext i32 %22 to i64
  %24 = tail call double @sin(double noundef %11) #30
  %25 = bitcast double %24 to i64
  %26 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %27 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %26, i64 0, i32 10
  %28 = tail call { i64, i16 } @float64_to_floatx80(i64 noundef %25, %struct.float_status* noundef nonnull %27)
  %29 = extractvalue { i64, i16 } %28, 0
  %30 = extractvalue { i64, i16 } %28, 1
  %31 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 9, i64 %23, i32 0, i32 0
  store i64 %29, i64* %31, align 16
  %32 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 9, i64 %23, i32 0, i32 1
  store i16 %30, i16* %32, align 8
  %33 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %34 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %33, i64 0, i32 5
  %35 = load i32, i32* %34, align 16
  %36 = add i32 %35, 7
  %37 = and i32 %36, 7
  store i32 %37, i32* %34, align 16
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %33, i64 0, i32 8, i64 %38
  store i8 0, i8* %39, align 1
  %40 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %41 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %40, i64 0, i32 5
  %42 = load i32, i32* %41, align 16
  %43 = zext i32 %42 to i64
  %44 = tail call double @cos(double noundef %11) #30
  %45 = bitcast double %44 to i64
  %46 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %47 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %46, i64 0, i32 10
  %48 = tail call { i64, i16 } @float64_to_floatx80(i64 noundef %45, %struct.float_status* noundef nonnull %47)
  %49 = extractvalue { i64, i16 } %48, 0
  %50 = extractvalue { i64, i16 } %48, 1
  %51 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %40, i64 0, i32 9, i64 %43, i32 0, i32 0
  store i64 %49, i64* %51, align 16
  %52 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %40, i64 0, i32 9, i64 %43, i32 0, i32 1
  store i16 %50, i16* %52, align 8
  %53 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %54 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %53, i64 0, i32 6
  %55 = load i16, i16* %54, align 4
  %56 = and i16 %55, -1025
  store i16 %56, i16* %54, align 4
  br label %57

57:                                               ; preds = %20, %16
  ret void
}

; Function Attrs: mustprogress nofree nounwind willreturn writeonly
declare double @sin(double noundef) local_unnamed_addr #16

; Function Attrs: mustprogress nofree nounwind willreturn writeonly
declare double @cos(double noundef) local_unnamed_addr #16

; Function Attrs: uwtable
define void @helper_frndint() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %7 = load i64, i64* %6, align 16
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = tail call { i64, i16 } @floatx80_round_to_int(i64 %7, i16 %9, %struct.float_status* noundef nonnull %5)
  %11 = extractvalue { i64, i16 } %10, 0
  %12 = extractvalue { i64, i16 } %10, 1
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  store i64 %11, i64* %13, align 16
  store i16 %12, i16* %8, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_fscale() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = add i32 %3, 1
  %5 = and i32 %4, 7
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %6, i32 0, i32 0
  %8 = load i64, i64* %7, align 16
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %6, i32 0, i32 1
  %10 = load i16, i16* %9, align 8
  %11 = and i16 %10, 32767
  %12 = icmp ne i16 %11, 32767
  %13 = and i64 %8, 9223372036854775807
  %14 = icmp eq i64 %13, 0
  %15 = select i1 %12, i1 true, i1 %14
  br i1 %15, label %23, label %16

16:                                               ; preds = %0
  %17 = zext i32 %3 to i64
  %18 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %17, i32 0
  %19 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %6, i32 0
  %20 = bitcast %struct.floatx80* %18 to i8*
  %21 = bitcast %struct.floatx80* %19 to i8*
  %22 = call i8* @memcpy(i8* %20, i8* %21, i64 16)
  br label %39

23:                                               ; preds = %0
  %24 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %25 = tail call i32 @floatx80_to_int32_round_to_zero(i64 %8, i16 %10, %struct.float_status* noundef nonnull %24)
  %26 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %27 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %26, i64 0, i32 5
  %28 = load i32, i32* %27, align 16
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %26, i64 0, i32 10
  %31 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %26, i64 0, i32 9, i64 %29, i32 0, i32 0
  %32 = load i64, i64* %31, align 16
  %33 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %26, i64 0, i32 9, i64 %29, i32 0, i32 1
  %34 = load i16, i16* %33, align 8
  %35 = tail call { i64, i16 } @floatx80_scalbn(i64 %32, i16 %34, i32 noundef %25, %struct.float_status* noundef nonnull %30)
  %36 = extractvalue { i64, i16 } %35, 0
  %37 = extractvalue { i64, i16 } %35, 1
  %38 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %26, i64 0, i32 9, i64 %29, i32 0, i32 0
  store i64 %36, i64* %38, align 16
  store i16 %37, i16* %33, align 8
  br label %39

39:                                               ; preds = %23, %16
  ret void
}

; Function Attrs: uwtable
define void @helper_fsin() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %6 = load i64, i64* %5, align 16
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %8 = load i16, i16* %7, align 8
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %10 = tail call i64 @floatx80_to_float64(i64 %6, i16 %8, %struct.float_status* noundef nonnull %9)
  %11 = bitcast i64 %10 to double
  %12 = fcmp ogt double %11, 0x43E0000000000000
  %13 = fcmp olt double %11, 0xC3E0000000000000
  %14 = or i1 %12, %13
  %15 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %14, label %16, label %20

16:                                               ; preds = %0
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 6
  %18 = load i16, i16* %17, align 4
  %19 = or i16 %18, 1024
  store i16 %19, i16* %17, align 4
  br label %37

20:                                               ; preds = %0
  %21 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 5
  %22 = load i32, i32* %21, align 16
  %23 = zext i32 %22 to i64
  %24 = tail call double @sin(double noundef %11) #30
  %25 = bitcast double %24 to i64
  %26 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %27 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %26, i64 0, i32 10
  %28 = tail call { i64, i16 } @float64_to_floatx80(i64 noundef %25, %struct.float_status* noundef nonnull %27)
  %29 = extractvalue { i64, i16 } %28, 0
  %30 = extractvalue { i64, i16 } %28, 1
  %31 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 9, i64 %23, i32 0, i32 0
  store i64 %29, i64* %31, align 16
  %32 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 9, i64 %23, i32 0, i32 1
  store i16 %30, i16* %32, align 8
  %33 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %34 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %33, i64 0, i32 6
  %35 = load i16, i16* %34, align 4
  %36 = and i16 %35, -1025
  store i16 %36, i16* %34, align 4
  br label %37

37:                                               ; preds = %20, %16
  ret void
}

; Function Attrs: uwtable
define void @helper_fcos() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %6 = load i64, i64* %5, align 16
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %8 = load i16, i16* %7, align 8
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 10
  %10 = tail call i64 @floatx80_to_float64(i64 %6, i16 %8, %struct.float_status* noundef nonnull %9)
  %11 = bitcast i64 %10 to double
  %12 = fcmp ogt double %11, 0x43E0000000000000
  %13 = fcmp olt double %11, 0xC3E0000000000000
  %14 = or i1 %12, %13
  %15 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %14, label %16, label %20

16:                                               ; preds = %0
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 6
  %18 = load i16, i16* %17, align 4
  %19 = or i16 %18, 1024
  store i16 %19, i16* %17, align 4
  br label %37

20:                                               ; preds = %0
  %21 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 5
  %22 = load i32, i32* %21, align 16
  %23 = zext i32 %22 to i64
  %24 = tail call double @cos(double noundef %11) #30
  %25 = bitcast double %24 to i64
  %26 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %27 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %26, i64 0, i32 10
  %28 = tail call { i64, i16 } @float64_to_floatx80(i64 noundef %25, %struct.float_status* noundef nonnull %27)
  %29 = extractvalue { i64, i16 } %28, 0
  %30 = extractvalue { i64, i16 } %28, 1
  %31 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 9, i64 %23, i32 0, i32 0
  store i64 %29, i64* %31, align 16
  %32 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 9, i64 %23, i32 0, i32 1
  store i16 %30, i16* %32, align 8
  %33 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %34 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %33, i64 0, i32 6
  %35 = load i16, i16* %34, align 4
  %36 = and i16 %35, -1025
  store i16 %36, i16* %34, align 4
  br label %37

37:                                               ; preds = %20, %16
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_fxam_ST0() local_unnamed_addr #2 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  %3 = load i32, i32* %2, align 16
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 0
  %6 = load i64, i64* %5, align 16
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 9, i64 %4, i32 0, i32 1
  %8 = load i16, i16* %7, align 8
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 6
  %10 = load i16, i16* %9, align 4
  %11 = and i16 %8, 32767
  %12 = zext i16 %11 to i32
  switch i32 %12, label %19 [
    i32 32767, label %13
    i32 0, label %16
  ]

13:                                               ; preds = %0
  %14 = icmp eq i64 %6, -9223372036854775808
  %15 = select i1 %14, i16 1280, i16 256
  br label %19

16:                                               ; preds = %0
  %17 = icmp eq i64 %6, 0
  %18 = select i1 %17, i16 16384, i16 17408
  br label %19

19:                                               ; preds = %0, %16, %13
  %20 = phi i16 [ %15, %13 ], [ %18, %16 ], [ 1024, %0 ]
  %21 = lshr i16 %8, 6
  %22 = and i16 %21, 512
  %23 = and i16 %10, -18177
  %24 = or i16 %22, %23
  %25 = or i16 %24, %20
  store i16 %25, i16* %9, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_fstenv(i64 noundef %0, i32 noundef %1) local_unnamed_addr #3 {
  %3 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %4 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 6
  %5 = load i16, i16* %4, align 4
  %6 = and i16 %5, -14337
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 5
  %8 = load i32, i32* %7, align 16
  %9 = shl i32 %8, 11
  %10 = and i32 %9, 14336
  %11 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 8, i64 7
  %12 = load i8, i8* %11, align 1
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %27

14:                                               ; preds = %2
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 9, i64 7, i32 0, i32 0
  %16 = load i64, i64* %15, align 16
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 9, i64 7, i32 0, i32 1
  %18 = load i16, i16* %17, align 8
  %19 = and i16 %18, 32767
  %20 = icmp eq i16 %19, 0
  %21 = icmp eq i64 %16, 0
  %22 = select i1 %20, i1 %21, i1 false
  br i1 %22, label %27, label %23

23:                                               ; preds = %14
  switch i16 %18, label %24 [
    i16 -1, label %26
    i16 -32768, label %26
    i16 32767, label %26
    i16 0, label %26
  ]

24:                                               ; preds = %23
  %25 = icmp sgt i64 %16, -1
  br i1 %25, label %26, label %27

26:                                               ; preds = %23, %23, %23, %23, %24
  br label %27

27:                                               ; preds = %14, %2, %24, %26
  %28 = phi i32 [ 8, %26 ], [ 0, %24 ], [ 12, %2 ], [ 4, %14 ]
  %29 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 8, i64 6
  %30 = load i8, i8* %29, align 1
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %34, label %32

32:                                               ; preds = %27
  %33 = or i32 %28, 3
  br label %50

34:                                               ; preds = %27
  %35 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 9, i64 6, i32 0, i32 0
  %36 = load i64, i64* %35, align 16
  %37 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 9, i64 6, i32 0, i32 1
  %38 = load i16, i16* %37, align 8
  %39 = and i16 %38, 32767
  %40 = icmp eq i16 %39, 0
  %41 = icmp eq i64 %36, 0
  %42 = select i1 %40, i1 %41, i1 false
  br i1 %42, label %48, label %43

43:                                               ; preds = %34
  switch i16 %38, label %44 [
    i16 -1, label %46
    i16 -32768, label %46
    i16 32767, label %46
    i16 0, label %46
  ]

44:                                               ; preds = %43
  %45 = icmp sgt i64 %36, -1
  br i1 %45, label %46, label %50

46:                                               ; preds = %44, %43, %43, %43, %43
  %47 = or i32 %28, 2
  br label %50

48:                                               ; preds = %34
  %49 = or i32 %28, 1
  br label %50

50:                                               ; preds = %48, %46, %44, %32
  %51 = phi i32 [ %33, %32 ], [ %49, %48 ], [ %47, %46 ], [ %28, %44 ]
  %52 = shl nsw i32 %51, 2
  %53 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 8, i64 5
  %54 = load i8, i8* %53, align 1
  %55 = icmp eq i8 %54, 0
  br i1 %55, label %58, label %56

56:                                               ; preds = %50
  %57 = or i32 %52, 3
  br label %74

58:                                               ; preds = %50
  %59 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 9, i64 5, i32 0, i32 0
  %60 = load i64, i64* %59, align 16
  %61 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 9, i64 5, i32 0, i32 1
  %62 = load i16, i16* %61, align 8
  %63 = and i16 %62, 32767
  %64 = icmp eq i16 %63, 0
  %65 = icmp eq i64 %60, 0
  %66 = select i1 %64, i1 %65, i1 false
  br i1 %66, label %72, label %67

67:                                               ; preds = %58
  switch i16 %62, label %68 [
    i16 -1, label %70
    i16 -32768, label %70
    i16 32767, label %70
    i16 0, label %70
  ]

68:                                               ; preds = %67
  %69 = icmp sgt i64 %60, -1
  br i1 %69, label %70, label %74

70:                                               ; preds = %68, %67, %67, %67, %67
  %71 = or i32 %52, 2
  br label %74

72:                                               ; preds = %58
  %73 = or i32 %52, 1
  br label %74

74:                                               ; preds = %72, %70, %68, %56
  %75 = phi i32 [ %57, %56 ], [ %73, %72 ], [ %71, %70 ], [ %52, %68 ]
  %76 = shl i32 %75, 2
  %77 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 8, i64 4
  %78 = load i8, i8* %77, align 1
  %79 = icmp eq i8 %78, 0
  br i1 %79, label %82, label %80

80:                                               ; preds = %74
  %81 = or i32 %76, 3
  br label %98

82:                                               ; preds = %74
  %83 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 9, i64 4, i32 0, i32 0
  %84 = load i64, i64* %83, align 16
  %85 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 9, i64 4, i32 0, i32 1
  %86 = load i16, i16* %85, align 8
  %87 = and i16 %86, 32767
  %88 = icmp eq i16 %87, 0
  %89 = icmp eq i64 %84, 0
  %90 = select i1 %88, i1 %89, i1 false
  br i1 %90, label %96, label %91

91:                                               ; preds = %82
  switch i16 %86, label %92 [
    i16 -1, label %94
    i16 -32768, label %94
    i16 32767, label %94
    i16 0, label %94
  ]

92:                                               ; preds = %91
  %93 = icmp sgt i64 %84, -1
  br i1 %93, label %94, label %98

94:                                               ; preds = %92, %91, %91, %91, %91
  %95 = or i32 %76, 2
  br label %98

96:                                               ; preds = %82
  %97 = or i32 %76, 1
  br label %98

98:                                               ; preds = %96, %94, %92, %80
  %99 = phi i32 [ %81, %80 ], [ %97, %96 ], [ %95, %94 ], [ %76, %92 ]
  %100 = shl i32 %99, 2
  %101 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 8, i64 3
  %102 = load i8, i8* %101, align 1
  %103 = icmp eq i8 %102, 0
  br i1 %103, label %106, label %104

104:                                              ; preds = %98
  %105 = or i32 %100, 3
  br label %122

106:                                              ; preds = %98
  %107 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 9, i64 3, i32 0, i32 0
  %108 = load i64, i64* %107, align 16
  %109 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 9, i64 3, i32 0, i32 1
  %110 = load i16, i16* %109, align 8
  %111 = and i16 %110, 32767
  %112 = icmp eq i16 %111, 0
  %113 = icmp eq i64 %108, 0
  %114 = select i1 %112, i1 %113, i1 false
  br i1 %114, label %120, label %115

115:                                              ; preds = %106
  switch i16 %110, label %116 [
    i16 -1, label %118
    i16 -32768, label %118
    i16 32767, label %118
    i16 0, label %118
  ]

116:                                              ; preds = %115
  %117 = icmp sgt i64 %108, -1
  br i1 %117, label %118, label %122

118:                                              ; preds = %116, %115, %115, %115, %115
  %119 = or i32 %100, 2
  br label %122

120:                                              ; preds = %106
  %121 = or i32 %100, 1
  br label %122

122:                                              ; preds = %120, %118, %116, %104
  %123 = phi i32 [ %105, %104 ], [ %121, %120 ], [ %119, %118 ], [ %100, %116 ]
  %124 = shl i32 %123, 2
  %125 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 8, i64 2
  %126 = load i8, i8* %125, align 1
  %127 = icmp eq i8 %126, 0
  br i1 %127, label %130, label %128

128:                                              ; preds = %122
  %129 = or i32 %124, 3
  br label %146

130:                                              ; preds = %122
  %131 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 9, i64 2, i32 0, i32 0
  %132 = load i64, i64* %131, align 16
  %133 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 9, i64 2, i32 0, i32 1
  %134 = load i16, i16* %133, align 8
  %135 = and i16 %134, 32767
  %136 = icmp eq i16 %135, 0
  %137 = icmp eq i64 %132, 0
  %138 = select i1 %136, i1 %137, i1 false
  br i1 %138, label %144, label %139

139:                                              ; preds = %130
  switch i16 %134, label %140 [
    i16 -1, label %142
    i16 -32768, label %142
    i16 32767, label %142
    i16 0, label %142
  ]

140:                                              ; preds = %139
  %141 = icmp sgt i64 %132, -1
  br i1 %141, label %142, label %146

142:                                              ; preds = %140, %139, %139, %139, %139
  %143 = or i32 %124, 2
  br label %146

144:                                              ; preds = %130
  %145 = or i32 %124, 1
  br label %146

146:                                              ; preds = %144, %142, %140, %128
  %147 = phi i32 [ %129, %128 ], [ %145, %144 ], [ %143, %142 ], [ %124, %140 ]
  %148 = shl i32 %147, 2
  %149 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 8, i64 1
  %150 = load i8, i8* %149, align 1
  %151 = icmp eq i8 %150, 0
  br i1 %151, label %154, label %152

152:                                              ; preds = %146
  %153 = or i32 %148, 3
  br label %170

154:                                              ; preds = %146
  %155 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 9, i64 1, i32 0, i32 0
  %156 = load i64, i64* %155, align 16
  %157 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 9, i64 1, i32 0, i32 1
  %158 = load i16, i16* %157, align 8
  %159 = and i16 %158, 32767
  %160 = icmp eq i16 %159, 0
  %161 = icmp eq i64 %156, 0
  %162 = select i1 %160, i1 %161, i1 false
  br i1 %162, label %168, label %163

163:                                              ; preds = %154
  switch i16 %158, label %164 [
    i16 -1, label %166
    i16 -32768, label %166
    i16 32767, label %166
    i16 0, label %166
  ]

164:                                              ; preds = %163
  %165 = icmp sgt i64 %156, -1
  br i1 %165, label %166, label %170

166:                                              ; preds = %164, %163, %163, %163, %163
  %167 = or i32 %148, 2
  br label %170

168:                                              ; preds = %154
  %169 = or i32 %148, 1
  br label %170

170:                                              ; preds = %168, %166, %164, %152
  %171 = phi i32 [ %153, %152 ], [ %169, %168 ], [ %167, %166 ], [ %148, %164 ]
  %172 = shl i32 %171, 2
  %173 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 8, i64 0
  %174 = load i8, i8* %173, align 1
  %175 = icmp eq i8 %174, 0
  br i1 %175, label %178, label %176

176:                                              ; preds = %170
  %177 = or i32 %172, 3
  br label %194

178:                                              ; preds = %170
  %179 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 9, i64 0, i32 0, i32 0
  %180 = load i64, i64* %179, align 16
  %181 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 9, i64 0, i32 0, i32 1
  %182 = load i16, i16* %181, align 8
  %183 = and i16 %182, 32767
  %184 = icmp eq i16 %183, 0
  %185 = icmp eq i64 %180, 0
  %186 = select i1 %184, i1 %185, i1 false
  br i1 %186, label %192, label %187

187:                                              ; preds = %178
  switch i16 %182, label %188 [
    i16 -1, label %190
    i16 -32768, label %190
    i16 32767, label %190
    i16 0, label %190
  ]

188:                                              ; preds = %187
  %189 = icmp sgt i64 %180, -1
  br i1 %189, label %190, label %194

190:                                              ; preds = %188, %187, %187, %187, %187
  %191 = or i32 %172, 2
  br label %194

192:                                              ; preds = %178
  %193 = or i32 %172, 1
  br label %194

194:                                              ; preds = %192, %190, %188, %176
  %195 = phi i32 [ %177, %176 ], [ %193, %192 ], [ %191, %190 ], [ %172, %188 ]
  %196 = zext i16 %6 to i32
  %197 = or i32 %10, %196
  %198 = icmp eq i32 %1, 0
  %199 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 7
  %200 = load i16, i16* %199, align 2
  %201 = zext i16 %200 to i32
  br i1 %198, label %215, label %202

202:                                              ; preds = %194
  tail call fastcc void @cpu_stl_data(%struct.CPUX86State* noundef nonnull %3, i64 noundef %0, i32 noundef %201)
  %203 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %204 = add i64 %0, 4
  tail call fastcc void @cpu_stl_data(%struct.CPUX86State* noundef %203, i64 noundef %204, i32 noundef %197)
  %205 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %206 = add i64 %0, 8
  tail call fastcc void @cpu_stl_data(%struct.CPUX86State* noundef %205, i64 noundef %206, i32 noundef %195)
  %207 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %208 = add i64 %0, 12
  tail call fastcc void @cpu_stl_data(%struct.CPUX86State* noundef %207, i64 noundef %208, i32 noundef 0)
  %209 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %210 = add i64 %0, 16
  tail call fastcc void @cpu_stl_data(%struct.CPUX86State* noundef %209, i64 noundef %210, i32 noundef 0)
  %211 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %212 = add i64 %0, 20
  tail call fastcc void @cpu_stl_data(%struct.CPUX86State* noundef %211, i64 noundef %212, i32 noundef 0)
  %213 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %214 = add i64 %0, 24
  tail call fastcc void @cpu_stl_data(%struct.CPUX86State* noundef %213, i64 noundef %214, i32 noundef 0)
  br label %228

215:                                              ; preds = %194
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* noundef nonnull %3, i64 noundef %0, i32 noundef %201)
  %216 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %217 = add i64 %0, 2
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* noundef %216, i64 noundef %217, i32 noundef %197)
  %218 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %219 = add i64 %0, 4
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* noundef %218, i64 noundef %219, i32 noundef %195)
  %220 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %221 = add i64 %0, 6
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* noundef %220, i64 noundef %221, i32 noundef 0)
  %222 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %223 = add i64 %0, 8
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* noundef %222, i64 noundef %223, i32 noundef 0)
  %224 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %225 = add i64 %0, 10
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* noundef %224, i64 noundef %225, i32 noundef 0)
  %226 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %227 = add i64 %0, 12
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* noundef %226, i64 noundef %227, i32 noundef 0)
  br label %228

228:                                              ; preds = %215, %202
  ret void
}

; Function Attrs: uwtable
define void @helper_fldenv(i64 noundef %0, i32 noundef %1) local_unnamed_addr #3 {
  %3 = icmp eq i32 %1, 0
  %4 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %5 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* noundef %4, i64 noundef %0)
  %6 = trunc i32 %5 to i16
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 7
  store i16 %6, i16* %8, align 2
  %9 = select i1 %3, i64 2, i64 4
  %10 = select i1 %3, i64 4, i64 8
  %11 = add i64 %9, %0
  %12 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* noundef %7, i64 noundef %11)
  %13 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %14 = add i64 %10, %0
  %15 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* noundef %13, i64 noundef %14)
  %16 = lshr i32 %12, 11
  %17 = and i32 %16, 7
  %18 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %19 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 5
  store i32 %17, i32* %19, align 16
  %20 = trunc i32 %12 to i16
  %21 = and i16 %20, -14337
  %22 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 6
  store i16 %21, i16* %22, align 4
  %23 = and i32 %15, 3
  %24 = icmp eq i32 %23, 3
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 8, i64 0
  store i8 %25, i8* %26, align 1
  %27 = and i32 %15, 12
  %28 = icmp eq i32 %27, 12
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 8, i64 1
  store i8 %29, i8* %30, align 1
  %31 = and i32 %15, 48
  %32 = icmp eq i32 %31, 48
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 8, i64 2
  store i8 %33, i8* %34, align 1
  %35 = and i32 %15, 192
  %36 = icmp eq i32 %35, 192
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 8, i64 3
  store i8 %37, i8* %38, align 1
  %39 = and i32 %15, 768
  %40 = icmp eq i32 %39, 768
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 8, i64 4
  store i8 %41, i8* %42, align 1
  %43 = and i32 %15, 3072
  %44 = icmp eq i32 %43, 3072
  %45 = zext i1 %44 to i8
  %46 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 8, i64 5
  store i8 %45, i8* %46, align 1
  %47 = and i32 %15, 12288
  %48 = icmp eq i32 %47, 12288
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 8, i64 6
  store i8 %49, i8* %50, align 1
  %51 = and i32 %15, 49152
  %52 = icmp eq i32 %51, 49152
  %53 = zext i1 %52 to i8
  %54 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 8, i64 7
  store i8 %53, i8* %54, align 1
  ret void
}

; Function Attrs: uwtable
define void @helper_fsave(i64 noundef %0, i32 noundef %1) local_unnamed_addr #3 {
  tail call void @helper_fstenv(i64 noundef %0, i32 noundef %1)
  %3 = shl i32 14, %1
  %4 = sext i32 %3 to i64
  %5 = add i64 %4, %0
  %6 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %6, i64 0, i32 5
  %8 = load i32, i32* %7, align 16
  %9 = and i32 %8, 7
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %6, i64 0, i32 9, i64 %10, i32 0, i32 0
  %12 = load i64, i64* %11, align 16
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %6, i64 0, i32 9, i64 %10, i32 0, i32 1
  %14 = load i16, i16* %13, align 8
  tail call fastcc void @cpu_stq_data(%struct.CPUX86State* noundef %6, i64 noundef %5, i64 noundef %12)
  %15 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %16 = add i64 %5, 8
  %17 = zext i16 %14 to i32
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* noundef %15, i64 noundef %16, i32 noundef %17)
  %18 = add i64 %5, 10
  %19 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %20 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %19, i64 0, i32 5
  %21 = load i32, i32* %20, align 16
  %22 = add i32 %21, 1
  %23 = and i32 %22, 7
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %19, i64 0, i32 9, i64 %24, i32 0, i32 0
  %26 = load i64, i64* %25, align 16
  %27 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %19, i64 0, i32 9, i64 %24, i32 0, i32 1
  %28 = load i16, i16* %27, align 8
  tail call fastcc void @cpu_stq_data(%struct.CPUX86State* noundef %19, i64 noundef %18, i64 noundef %26)
  %29 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %30 = add i64 %5, 18
  %31 = zext i16 %28 to i32
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* noundef %29, i64 noundef %30, i32 noundef %31)
  %32 = add i64 %5, 20
  %33 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %34 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %33, i64 0, i32 5
  %35 = load i32, i32* %34, align 16
  %36 = add i32 %35, 2
  %37 = and i32 %36, 7
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %33, i64 0, i32 9, i64 %38, i32 0, i32 0
  %40 = load i64, i64* %39, align 16
  %41 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %33, i64 0, i32 9, i64 %38, i32 0, i32 1
  %42 = load i16, i16* %41, align 8
  tail call fastcc void @cpu_stq_data(%struct.CPUX86State* noundef %33, i64 noundef %32, i64 noundef %40)
  %43 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %44 = add i64 %5, 28
  %45 = zext i16 %42 to i32
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* noundef %43, i64 noundef %44, i32 noundef %45)
  %46 = add i64 %5, 30
  %47 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %48 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %47, i64 0, i32 5
  %49 = load i32, i32* %48, align 16
  %50 = add i32 %49, 3
  %51 = and i32 %50, 7
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %47, i64 0, i32 9, i64 %52, i32 0, i32 0
  %54 = load i64, i64* %53, align 16
  %55 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %47, i64 0, i32 9, i64 %52, i32 0, i32 1
  %56 = load i16, i16* %55, align 8
  tail call fastcc void @cpu_stq_data(%struct.CPUX86State* noundef %47, i64 noundef %46, i64 noundef %54)
  %57 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %58 = add i64 %5, 38
  %59 = zext i16 %56 to i32
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* noundef %57, i64 noundef %58, i32 noundef %59)
  %60 = add i64 %5, 40
  %61 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %62 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %61, i64 0, i32 5
  %63 = load i32, i32* %62, align 16
  %64 = add i32 %63, 4
  %65 = and i32 %64, 7
  %66 = zext i32 %65 to i64
  %67 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %61, i64 0, i32 9, i64 %66, i32 0, i32 0
  %68 = load i64, i64* %67, align 16
  %69 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %61, i64 0, i32 9, i64 %66, i32 0, i32 1
  %70 = load i16, i16* %69, align 8
  tail call fastcc void @cpu_stq_data(%struct.CPUX86State* noundef %61, i64 noundef %60, i64 noundef %68)
  %71 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %72 = add i64 %5, 48
  %73 = zext i16 %70 to i32
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* noundef %71, i64 noundef %72, i32 noundef %73)
  %74 = add i64 %5, 50
  %75 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %76 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %75, i64 0, i32 5
  %77 = load i32, i32* %76, align 16
  %78 = add i32 %77, 5
  %79 = and i32 %78, 7
  %80 = zext i32 %79 to i64
  %81 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %75, i64 0, i32 9, i64 %80, i32 0, i32 0
  %82 = load i64, i64* %81, align 16
  %83 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %75, i64 0, i32 9, i64 %80, i32 0, i32 1
  %84 = load i16, i16* %83, align 8
  tail call fastcc void @cpu_stq_data(%struct.CPUX86State* noundef %75, i64 noundef %74, i64 noundef %82)
  %85 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %86 = add i64 %5, 58
  %87 = zext i16 %84 to i32
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* noundef %85, i64 noundef %86, i32 noundef %87)
  %88 = add i64 %5, 60
  %89 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %90 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %89, i64 0, i32 5
  %91 = load i32, i32* %90, align 16
  %92 = add i32 %91, 6
  %93 = and i32 %92, 7
  %94 = zext i32 %93 to i64
  %95 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %89, i64 0, i32 9, i64 %94, i32 0, i32 0
  %96 = load i64, i64* %95, align 16
  %97 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %89, i64 0, i32 9, i64 %94, i32 0, i32 1
  %98 = load i16, i16* %97, align 8
  tail call fastcc void @cpu_stq_data(%struct.CPUX86State* noundef %89, i64 noundef %88, i64 noundef %96)
  %99 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %100 = add i64 %5, 68
  %101 = zext i16 %98 to i32
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* noundef %99, i64 noundef %100, i32 noundef %101)
  %102 = add i64 %5, 70
  %103 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %104 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %103, i64 0, i32 5
  %105 = load i32, i32* %104, align 16
  %106 = add i32 %105, 7
  %107 = and i32 %106, 7
  %108 = zext i32 %107 to i64
  %109 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %103, i64 0, i32 9, i64 %108, i32 0, i32 0
  %110 = load i64, i64* %109, align 16
  %111 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %103, i64 0, i32 9, i64 %108, i32 0, i32 1
  %112 = load i16, i16* %111, align 8
  tail call fastcc void @cpu_stq_data(%struct.CPUX86State* noundef %103, i64 noundef %102, i64 noundef %110)
  %113 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %114 = add i64 %5, 78
  %115 = zext i16 %112 to i32
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* noundef %113, i64 noundef %114, i32 noundef %115)
  %116 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %117 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %116, i64 0, i32 6
  store i16 0, i16* %117, align 4
  %118 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %116, i64 0, i32 5
  store i32 0, i32* %118, align 16
  %119 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %116, i64 0, i32 7
  store i16 895, i16* %119, align 2
  %120 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %116, i64 0, i32 8, i64 0
  %121 = bitcast i8* %120 to i64*
  store i64 72340172838076673, i64* %121, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_frstor(i64 noundef %0, i32 noundef %1) local_unnamed_addr #3 {
  %3 = icmp eq i32 %1, 0
  %4 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %5 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* noundef %4, i64 noundef %0)
  %6 = trunc i32 %5 to i16
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 7
  store i16 %6, i16* %8, align 2
  %9 = select i1 %3, i64 2, i64 4
  %10 = select i1 %3, i64 4, i64 8
  %11 = add i64 %9, %0
  %12 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* noundef %7, i64 noundef %11)
  %13 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %14 = add i64 %10, %0
  %15 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* noundef %13, i64 noundef %14)
  %16 = lshr i32 %12, 11
  %17 = and i32 %16, 7
  %18 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %19 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 5
  store i32 %17, i32* %19, align 16
  %20 = trunc i32 %12 to i16
  %21 = and i16 %20, -14337
  %22 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 6
  store i16 %21, i16* %22, align 4
  %23 = and i32 %15, 3
  %24 = icmp eq i32 %23, 3
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 8, i64 0
  store i8 %25, i8* %26, align 1
  %27 = and i32 %15, 12
  %28 = icmp eq i32 %27, 12
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 8, i64 1
  store i8 %29, i8* %30, align 1
  %31 = and i32 %15, 48
  %32 = icmp eq i32 %31, 48
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 8, i64 2
  store i8 %33, i8* %34, align 1
  %35 = and i32 %15, 192
  %36 = icmp eq i32 %35, 192
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 8, i64 3
  store i8 %37, i8* %38, align 1
  %39 = and i32 %15, 768
  %40 = icmp eq i32 %39, 768
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 8, i64 4
  store i8 %41, i8* %42, align 1
  %43 = and i32 %15, 3072
  %44 = icmp eq i32 %43, 3072
  %45 = zext i1 %44 to i8
  %46 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 8, i64 5
  store i8 %45, i8* %46, align 1
  %47 = and i32 %15, 12288
  %48 = icmp eq i32 %47, 12288
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 8, i64 6
  store i8 %49, i8* %50, align 1
  %51 = and i32 %15, 49152
  %52 = icmp eq i32 %51, 49152
  %53 = zext i1 %52 to i8
  %54 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 8, i64 7
  store i8 %53, i8* %54, align 1
  %55 = shl i32 14, %1
  %56 = sext i32 %55 to i64
  %57 = add i64 %56, %0
  %58 = tail call fastcc i64 @cpu_ldq_data(%struct.CPUX86State* noundef %18, i64 noundef %57)
  %59 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %60 = add i64 %57, 8
  %61 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* noundef %59, i64 noundef %60)
  %62 = trunc i32 %61 to i16
  %63 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %64 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %63, i64 0, i32 5
  %65 = load i32, i32* %64, align 16
  %66 = and i32 %65, 7
  %67 = zext i32 %66 to i64
  %68 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %63, i64 0, i32 9, i64 %67, i32 0, i32 0
  store i64 %58, i64* %68, align 16
  %69 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %63, i64 0, i32 9, i64 %67, i32 0, i32 1
  store i16 %62, i16* %69, align 8
  %70 = add i64 %57, 10
  %71 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %72 = tail call fastcc i64 @cpu_ldq_data(%struct.CPUX86State* noundef %71, i64 noundef %70)
  %73 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %74 = add i64 %57, 18
  %75 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* noundef %73, i64 noundef %74)
  %76 = trunc i32 %75 to i16
  %77 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %78 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %77, i64 0, i32 5
  %79 = load i32, i32* %78, align 16
  %80 = add i32 %79, 1
  %81 = and i32 %80, 7
  %82 = zext i32 %81 to i64
  %83 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %77, i64 0, i32 9, i64 %82, i32 0, i32 0
  store i64 %72, i64* %83, align 16
  %84 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %77, i64 0, i32 9, i64 %82, i32 0, i32 1
  store i16 %76, i16* %84, align 8
  %85 = add i64 %57, 20
  %86 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %87 = tail call fastcc i64 @cpu_ldq_data(%struct.CPUX86State* noundef %86, i64 noundef %85)
  %88 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %89 = add i64 %57, 28
  %90 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* noundef %88, i64 noundef %89)
  %91 = trunc i32 %90 to i16
  %92 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %93 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %92, i64 0, i32 5
  %94 = load i32, i32* %93, align 16
  %95 = add i32 %94, 2
  %96 = and i32 %95, 7
  %97 = zext i32 %96 to i64
  %98 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %92, i64 0, i32 9, i64 %97, i32 0, i32 0
  store i64 %87, i64* %98, align 16
  %99 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %92, i64 0, i32 9, i64 %97, i32 0, i32 1
  store i16 %91, i16* %99, align 8
  %100 = add i64 %57, 30
  %101 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %102 = tail call fastcc i64 @cpu_ldq_data(%struct.CPUX86State* noundef %101, i64 noundef %100)
  %103 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %104 = add i64 %57, 38
  %105 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* noundef %103, i64 noundef %104)
  %106 = trunc i32 %105 to i16
  %107 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %108 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %107, i64 0, i32 5
  %109 = load i32, i32* %108, align 16
  %110 = add i32 %109, 3
  %111 = and i32 %110, 7
  %112 = zext i32 %111 to i64
  %113 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %107, i64 0, i32 9, i64 %112, i32 0, i32 0
  store i64 %102, i64* %113, align 16
  %114 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %107, i64 0, i32 9, i64 %112, i32 0, i32 1
  store i16 %106, i16* %114, align 8
  %115 = add i64 %57, 40
  %116 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %117 = tail call fastcc i64 @cpu_ldq_data(%struct.CPUX86State* noundef %116, i64 noundef %115)
  %118 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %119 = add i64 %57, 48
  %120 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* noundef %118, i64 noundef %119)
  %121 = trunc i32 %120 to i16
  %122 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %123 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %122, i64 0, i32 5
  %124 = load i32, i32* %123, align 16
  %125 = add i32 %124, 4
  %126 = and i32 %125, 7
  %127 = zext i32 %126 to i64
  %128 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %122, i64 0, i32 9, i64 %127, i32 0, i32 0
  store i64 %117, i64* %128, align 16
  %129 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %122, i64 0, i32 9, i64 %127, i32 0, i32 1
  store i16 %121, i16* %129, align 8
  %130 = add i64 %57, 50
  %131 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %132 = tail call fastcc i64 @cpu_ldq_data(%struct.CPUX86State* noundef %131, i64 noundef %130)
  %133 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %134 = add i64 %57, 58
  %135 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* noundef %133, i64 noundef %134)
  %136 = trunc i32 %135 to i16
  %137 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %138 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %137, i64 0, i32 5
  %139 = load i32, i32* %138, align 16
  %140 = add i32 %139, 5
  %141 = and i32 %140, 7
  %142 = zext i32 %141 to i64
  %143 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %137, i64 0, i32 9, i64 %142, i32 0, i32 0
  store i64 %132, i64* %143, align 16
  %144 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %137, i64 0, i32 9, i64 %142, i32 0, i32 1
  store i16 %136, i16* %144, align 8
  %145 = add i64 %57, 60
  %146 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %147 = tail call fastcc i64 @cpu_ldq_data(%struct.CPUX86State* noundef %146, i64 noundef %145)
  %148 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %149 = add i64 %57, 68
  %150 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* noundef %148, i64 noundef %149)
  %151 = trunc i32 %150 to i16
  %152 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %153 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %152, i64 0, i32 5
  %154 = load i32, i32* %153, align 16
  %155 = add i32 %154, 6
  %156 = and i32 %155, 7
  %157 = zext i32 %156 to i64
  %158 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %152, i64 0, i32 9, i64 %157, i32 0, i32 0
  store i64 %147, i64* %158, align 16
  %159 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %152, i64 0, i32 9, i64 %157, i32 0, i32 1
  store i16 %151, i16* %159, align 8
  %160 = add i64 %57, 70
  %161 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %162 = tail call fastcc i64 @cpu_ldq_data(%struct.CPUX86State* noundef %161, i64 noundef %160)
  %163 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %164 = add i64 %57, 78
  %165 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* noundef %163, i64 noundef %164)
  %166 = trunc i32 %165 to i16
  %167 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %168 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %167, i64 0, i32 5
  %169 = load i32, i32* %168, align 16
  %170 = add i32 %169, 7
  %171 = and i32 %170, 7
  %172 = zext i32 %171 to i64
  %173 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %167, i64 0, i32 9, i64 %172, i32 0, i32 0
  store i64 %162, i64* %173, align 16
  %174 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %167, i64 0, i32 9, i64 %172, i32 0, i32 1
  store i16 %166, i16* %174, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_fxsave(i64 noundef %0, i32 noundef %1) local_unnamed_addr #3 {
  %3 = and i64 %0, 15
  %4 = icmp eq i64 %3, 0
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %4, label %7, label %6

6:                                                ; preds = %2
  tail call void @raise_exception_ra(%struct.CPUX86State* noundef %5, i32 noundef 13, i64 noundef 0) #28
  unreachable

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 6
  %9 = load i16, i16* %8, align 4
  %10 = and i16 %9, -14337
  %11 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 5
  %12 = load i32, i32* %11, align 16
  %13 = shl i32 %12, 11
  %14 = and i32 %13, 14336
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 8, i64 0
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 8, i64 1
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = shl nuw nsw i32 %20, 1
  %22 = or i32 %21, %17
  %23 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 8, i64 2
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = shl nuw nsw i32 %25, 2
  %27 = or i32 %26, %22
  %28 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 8, i64 3
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = shl nuw nsw i32 %30, 3
  %32 = or i32 %31, %27
  %33 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 8, i64 4
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = shl nuw nsw i32 %35, 4
  %37 = or i32 %36, %32
  %38 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 8, i64 5
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = shl nuw nsw i32 %40, 5
  %42 = or i32 %41, %37
  %43 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 8, i64 6
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = shl nuw nsw i32 %45, 6
  %47 = or i32 %46, %42
  %48 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 8, i64 7
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = shl nuw nsw i32 %50, 7
  %52 = or i32 %51, %47
  %53 = zext i16 %10 to i32
  %54 = or i32 %14, %53
  %55 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 7
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i32
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* noundef nonnull %5, i64 noundef %0, i32 noundef %57)
  %58 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %59 = add nuw i64 %0, 2
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* noundef %58, i64 noundef %59, i32 noundef %54)
  %60 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %61 = add nuw i64 %0, 4
  %62 = xor i32 %52, 255
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* noundef %60, i64 noundef %61, i32 noundef %62)
  %63 = icmp eq i32 %1, 0
  %64 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %65 = add nuw i64 %0, 8
  br i1 %63, label %69, label %66

66:                                               ; preds = %7
  tail call fastcc void @cpu_stq_data(%struct.CPUX86State* noundef %64, i64 noundef %65, i64 noundef 0)
  %67 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %68 = add i64 %0, 16
  tail call fastcc void @cpu_stq_data(%struct.CPUX86State* noundef %67, i64 noundef %68, i64 noundef 0)
  br label %76

69:                                               ; preds = %7
  tail call fastcc void @cpu_stl_data(%struct.CPUX86State* noundef %64, i64 noundef %65, i32 noundef 0)
  %70 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %71 = add nuw i64 %0, 12
  tail call fastcc void @cpu_stl_data(%struct.CPUX86State* noundef %70, i64 noundef %71, i32 noundef 0)
  %72 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %73 = add i64 %0, 16
  tail call fastcc void @cpu_stl_data(%struct.CPUX86State* noundef %72, i64 noundef %73, i32 noundef 0)
  %74 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %75 = add i64 %0, 20
  tail call fastcc void @cpu_stl_data(%struct.CPUX86State* noundef %74, i64 noundef %75, i32 noundef 0)
  br label %76

76:                                               ; preds = %69, %66
  %77 = add i64 %0, 32
  %78 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %79 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %78, i64 0, i32 5
  %80 = load i32, i32* %79, align 16
  %81 = and i32 %80, 7
  %82 = zext i32 %81 to i64
  %83 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %78, i64 0, i32 9, i64 %82, i32 0, i32 0
  %84 = load i64, i64* %83, align 16
  %85 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %78, i64 0, i32 9, i64 %82, i32 0, i32 1
  %86 = load i16, i16* %85, align 8
  tail call fastcc void @cpu_stq_data(%struct.CPUX86State* noundef %78, i64 noundef %77, i64 noundef %84)
  %87 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %88 = add i64 %0, 40
  %89 = zext i16 %86 to i32
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* noundef %87, i64 noundef %88, i32 noundef %89)
  %90 = add i64 %0, 48
  %91 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %92 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %91, i64 0, i32 5
  %93 = load i32, i32* %92, align 16
  %94 = add i32 %93, 1
  %95 = and i32 %94, 7
  %96 = zext i32 %95 to i64
  %97 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %91, i64 0, i32 9, i64 %96, i32 0, i32 0
  %98 = load i64, i64* %97, align 16
  %99 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %91, i64 0, i32 9, i64 %96, i32 0, i32 1
  %100 = load i16, i16* %99, align 8
  tail call fastcc void @cpu_stq_data(%struct.CPUX86State* noundef %91, i64 noundef %90, i64 noundef %98)
  %101 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %102 = add i64 %0, 56
  %103 = zext i16 %100 to i32
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* noundef %101, i64 noundef %102, i32 noundef %103)
  %104 = add i64 %0, 64
  %105 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %106 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %105, i64 0, i32 5
  %107 = load i32, i32* %106, align 16
  %108 = add i32 %107, 2
  %109 = and i32 %108, 7
  %110 = zext i32 %109 to i64
  %111 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %105, i64 0, i32 9, i64 %110, i32 0, i32 0
  %112 = load i64, i64* %111, align 16
  %113 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %105, i64 0, i32 9, i64 %110, i32 0, i32 1
  %114 = load i16, i16* %113, align 8
  tail call fastcc void @cpu_stq_data(%struct.CPUX86State* noundef %105, i64 noundef %104, i64 noundef %112)
  %115 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %116 = add i64 %0, 72
  %117 = zext i16 %114 to i32
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* noundef %115, i64 noundef %116, i32 noundef %117)
  %118 = add i64 %0, 80
  %119 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %120 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %119, i64 0, i32 5
  %121 = load i32, i32* %120, align 16
  %122 = add i32 %121, 3
  %123 = and i32 %122, 7
  %124 = zext i32 %123 to i64
  %125 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %119, i64 0, i32 9, i64 %124, i32 0, i32 0
  %126 = load i64, i64* %125, align 16
  %127 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %119, i64 0, i32 9, i64 %124, i32 0, i32 1
  %128 = load i16, i16* %127, align 8
  tail call fastcc void @cpu_stq_data(%struct.CPUX86State* noundef %119, i64 noundef %118, i64 noundef %126)
  %129 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %130 = add i64 %0, 88
  %131 = zext i16 %128 to i32
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* noundef %129, i64 noundef %130, i32 noundef %131)
  %132 = add i64 %0, 96
  %133 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %134 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %133, i64 0, i32 5
  %135 = load i32, i32* %134, align 16
  %136 = add i32 %135, 4
  %137 = and i32 %136, 7
  %138 = zext i32 %137 to i64
  %139 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %133, i64 0, i32 9, i64 %138, i32 0, i32 0
  %140 = load i64, i64* %139, align 16
  %141 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %133, i64 0, i32 9, i64 %138, i32 0, i32 1
  %142 = load i16, i16* %141, align 8
  tail call fastcc void @cpu_stq_data(%struct.CPUX86State* noundef %133, i64 noundef %132, i64 noundef %140)
  %143 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %144 = add i64 %0, 104
  %145 = zext i16 %142 to i32
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* noundef %143, i64 noundef %144, i32 noundef %145)
  %146 = add i64 %0, 112
  %147 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %148 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %147, i64 0, i32 5
  %149 = load i32, i32* %148, align 16
  %150 = add i32 %149, 5
  %151 = and i32 %150, 7
  %152 = zext i32 %151 to i64
  %153 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %147, i64 0, i32 9, i64 %152, i32 0, i32 0
  %154 = load i64, i64* %153, align 16
  %155 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %147, i64 0, i32 9, i64 %152, i32 0, i32 1
  %156 = load i16, i16* %155, align 8
  tail call fastcc void @cpu_stq_data(%struct.CPUX86State* noundef %147, i64 noundef %146, i64 noundef %154)
  %157 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %158 = add i64 %0, 120
  %159 = zext i16 %156 to i32
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* noundef %157, i64 noundef %158, i32 noundef %159)
  %160 = add i64 %0, 128
  %161 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %162 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %161, i64 0, i32 5
  %163 = load i32, i32* %162, align 16
  %164 = add i32 %163, 6
  %165 = and i32 %164, 7
  %166 = zext i32 %165 to i64
  %167 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %161, i64 0, i32 9, i64 %166, i32 0, i32 0
  %168 = load i64, i64* %167, align 16
  %169 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %161, i64 0, i32 9, i64 %166, i32 0, i32 1
  %170 = load i16, i16* %169, align 8
  tail call fastcc void @cpu_stq_data(%struct.CPUX86State* noundef %161, i64 noundef %160, i64 noundef %168)
  %171 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %172 = add i64 %0, 136
  %173 = zext i16 %170 to i32
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* noundef %171, i64 noundef %172, i32 noundef %173)
  %174 = add i64 %0, 144
  %175 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %176 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %175, i64 0, i32 5
  %177 = load i32, i32* %176, align 16
  %178 = add i32 %177, 7
  %179 = and i32 %178, 7
  %180 = zext i32 %179 to i64
  %181 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %175, i64 0, i32 9, i64 %180, i32 0, i32 0
  %182 = load i64, i64* %181, align 16
  %183 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %175, i64 0, i32 9, i64 %180, i32 0, i32 1
  %184 = load i16, i16* %183, align 8
  tail call fastcc void @cpu_stq_data(%struct.CPUX86State* noundef %175, i64 noundef %174, i64 noundef %182)
  %185 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %186 = add i64 %0, 152
  %187 = zext i16 %184 to i32
  tail call fastcc void @cpu_stw_data(%struct.CPUX86State* noundef %185, i64 noundef %186, i32 noundef %187)
  %188 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %189 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %188, i64 0, i32 29, i64 4
  %190 = load i64, i64* %189, align 16
  %191 = and i64 %190, 512
  %192 = icmp eq i64 %191, 0
  br i1 %192, label %229, label %193

193:                                              ; preds = %76
  %194 = add i64 %0, 24
  %195 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %188, i64 0, i32 14
  %196 = load i32, i32* %195, align 8
  tail call fastcc void @cpu_stl_data(%struct.CPUX86State* noundef nonnull %188, i64 noundef %194, i32 noundef %196)
  %197 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %198 = add i64 %0, 28
  tail call fastcc void @cpu_stl_data(%struct.CPUX86State* noundef %197, i64 noundef %198, i32 noundef 65535)
  %199 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %200 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %199, i64 0, i32 21
  %201 = load i32, i32* %200, align 16
  %202 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %199, i64 0, i32 37
  %203 = load i64, i64* %202, align 8
  %204 = and i64 %203, 16384
  %205 = icmp ne i64 %204, 0
  %206 = and i32 %201, 16387
  %207 = icmp eq i32 %206, 16384
  %208 = select i1 %205, i1 %207, i1 false
  br i1 %208, label %229, label %209

209:                                              ; preds = %193
  %210 = add i64 %0, 160
  %211 = and i32 %201, 32768
  %212 = icmp eq i32 %211, 0
  %213 = select i1 %212, i64 8, i64 16
  br label %214

214:                                              ; preds = %226, %209
  %215 = phi %struct.CPUX86State* [ %199, %209 ], [ %228, %226 ]
  %216 = phi i64 [ 0, %209 ], [ %224, %226 ]
  %217 = phi i64 [ %210, %209 ], [ %227, %226 ]
  %218 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %215, i64 0, i32 15, i64 %216, i32 0, i64 0
  %219 = load i64, i64* %218, align 16
  tail call fastcc void @cpu_stq_data(%struct.CPUX86State* noundef %215, i64 noundef %217, i64 noundef %219)
  %220 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %221 = add i64 %217, 8
  %222 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %220, i64 0, i32 15, i64 %216, i32 0, i64 1
  %223 = load i64, i64* %222, align 8
  tail call fastcc void @cpu_stq_data(%struct.CPUX86State* noundef %220, i64 noundef %221, i64 noundef %223)
  %224 = add nuw nsw i64 %216, 1
  %225 = icmp eq i64 %224, %213
  br i1 %225, label %229, label %226, !llvm.loop !17

226:                                              ; preds = %214
  %227 = add i64 %217, 16
  %228 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br label %214

229:                                              ; preds = %214, %193, %76
  ret void
}

; Function Attrs: uwtable
define void @helper_fxrstor(i64 noundef %0, i32 noundef %1) local_unnamed_addr #3 {
  %3 = and i64 %0, 15
  %4 = icmp eq i64 %3, 0
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %4, label %7, label %6

6:                                                ; preds = %2
  tail call void @raise_exception_ra(%struct.CPUX86State* noundef %5, i32 noundef 13, i64 noundef 0) #28
  unreachable

7:                                                ; preds = %2
  %8 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* noundef %5, i64 noundef %0)
  %9 = trunc i32 %8 to i16
  %10 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %11 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %10, i64 0, i32 7
  store i16 %9, i16* %11, align 2
  %12 = add nuw i64 %0, 2
  %13 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* noundef %10, i64 noundef %12)
  %14 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %15 = add nuw i64 %0, 4
  %16 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* noundef %14, i64 noundef %15)
  %17 = lshr i32 %13, 11
  %18 = and i32 %17, 7
  %19 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %20 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %19, i64 0, i32 5
  store i32 %18, i32* %20, align 16
  %21 = trunc i32 %13 to i16
  %22 = and i16 %21, -14337
  %23 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %19, i64 0, i32 6
  store i16 %22, i16* %23, align 4
  %24 = xor i32 %16, 255
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %19, i64 0, i32 8, i64 0
  store i8 %26, i8* %27, align 1
  %28 = trunc i32 %24 to i8
  %29 = lshr i8 %28, 1
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %19, i64 0, i32 8, i64 1
  store i8 %30, i8* %31, align 1
  %32 = trunc i32 %24 to i8
  %33 = lshr i8 %32, 2
  %34 = and i8 %33, 1
  %35 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %19, i64 0, i32 8, i64 2
  store i8 %34, i8* %35, align 1
  %36 = trunc i32 %24 to i8
  %37 = lshr i8 %36, 3
  %38 = and i8 %37, 1
  %39 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %19, i64 0, i32 8, i64 3
  store i8 %38, i8* %39, align 1
  %40 = trunc i32 %24 to i8
  %41 = lshr i8 %40, 4
  %42 = and i8 %41, 1
  %43 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %19, i64 0, i32 8, i64 4
  store i8 %42, i8* %43, align 1
  %44 = trunc i32 %24 to i8
  %45 = lshr i8 %44, 5
  %46 = and i8 %45, 1
  %47 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %19, i64 0, i32 8, i64 5
  store i8 %46, i8* %47, align 1
  %48 = trunc i32 %24 to i8
  %49 = lshr i8 %48, 6
  %50 = and i8 %49, 1
  %51 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %19, i64 0, i32 8, i64 6
  store i8 %50, i8* %51, align 1
  %52 = trunc i32 %24 to i8
  %53 = lshr i8 %52, 7
  %54 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %19, i64 0, i32 8, i64 7
  store i8 %53, i8* %54, align 1
  %55 = add i64 %0, 32
  %56 = tail call fastcc i64 @cpu_ldq_data(%struct.CPUX86State* noundef %19, i64 noundef %55)
  %57 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %58 = add i64 %0, 40
  %59 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* noundef %57, i64 noundef %58)
  %60 = trunc i32 %59 to i16
  %61 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %62 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %61, i64 0, i32 5
  %63 = load i32, i32* %62, align 16
  %64 = and i32 %63, 7
  %65 = zext i32 %64 to i64
  %66 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %61, i64 0, i32 9, i64 %65, i32 0, i32 0
  store i64 %56, i64* %66, align 16
  %67 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %61, i64 0, i32 9, i64 %65, i32 0, i32 1
  store i16 %60, i16* %67, align 8
  %68 = add i64 %0, 48
  %69 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %70 = tail call fastcc i64 @cpu_ldq_data(%struct.CPUX86State* noundef %69, i64 noundef %68)
  %71 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %72 = add i64 %0, 56
  %73 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* noundef %71, i64 noundef %72)
  %74 = trunc i32 %73 to i16
  %75 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %76 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %75, i64 0, i32 5
  %77 = load i32, i32* %76, align 16
  %78 = add i32 %77, 1
  %79 = and i32 %78, 7
  %80 = zext i32 %79 to i64
  %81 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %75, i64 0, i32 9, i64 %80, i32 0, i32 0
  store i64 %70, i64* %81, align 16
  %82 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %75, i64 0, i32 9, i64 %80, i32 0, i32 1
  store i16 %74, i16* %82, align 8
  %83 = add i64 %0, 64
  %84 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %85 = tail call fastcc i64 @cpu_ldq_data(%struct.CPUX86State* noundef %84, i64 noundef %83)
  %86 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %87 = add i64 %0, 72
  %88 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* noundef %86, i64 noundef %87)
  %89 = trunc i32 %88 to i16
  %90 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %91 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %90, i64 0, i32 5
  %92 = load i32, i32* %91, align 16
  %93 = add i32 %92, 2
  %94 = and i32 %93, 7
  %95 = zext i32 %94 to i64
  %96 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %90, i64 0, i32 9, i64 %95, i32 0, i32 0
  store i64 %85, i64* %96, align 16
  %97 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %90, i64 0, i32 9, i64 %95, i32 0, i32 1
  store i16 %89, i16* %97, align 8
  %98 = add i64 %0, 80
  %99 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %100 = tail call fastcc i64 @cpu_ldq_data(%struct.CPUX86State* noundef %99, i64 noundef %98)
  %101 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %102 = add i64 %0, 88
  %103 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* noundef %101, i64 noundef %102)
  %104 = trunc i32 %103 to i16
  %105 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %106 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %105, i64 0, i32 5
  %107 = load i32, i32* %106, align 16
  %108 = add i32 %107, 3
  %109 = and i32 %108, 7
  %110 = zext i32 %109 to i64
  %111 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %105, i64 0, i32 9, i64 %110, i32 0, i32 0
  store i64 %100, i64* %111, align 16
  %112 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %105, i64 0, i32 9, i64 %110, i32 0, i32 1
  store i16 %104, i16* %112, align 8
  %113 = add i64 %0, 96
  %114 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %115 = tail call fastcc i64 @cpu_ldq_data(%struct.CPUX86State* noundef %114, i64 noundef %113)
  %116 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %117 = add i64 %0, 104
  %118 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* noundef %116, i64 noundef %117)
  %119 = trunc i32 %118 to i16
  %120 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %121 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %120, i64 0, i32 5
  %122 = load i32, i32* %121, align 16
  %123 = add i32 %122, 4
  %124 = and i32 %123, 7
  %125 = zext i32 %124 to i64
  %126 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %120, i64 0, i32 9, i64 %125, i32 0, i32 0
  store i64 %115, i64* %126, align 16
  %127 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %120, i64 0, i32 9, i64 %125, i32 0, i32 1
  store i16 %119, i16* %127, align 8
  %128 = add i64 %0, 112
  %129 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %130 = tail call fastcc i64 @cpu_ldq_data(%struct.CPUX86State* noundef %129, i64 noundef %128)
  %131 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %132 = add i64 %0, 120
  %133 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* noundef %131, i64 noundef %132)
  %134 = trunc i32 %133 to i16
  %135 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %136 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %135, i64 0, i32 5
  %137 = load i32, i32* %136, align 16
  %138 = add i32 %137, 5
  %139 = and i32 %138, 7
  %140 = zext i32 %139 to i64
  %141 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %135, i64 0, i32 9, i64 %140, i32 0, i32 0
  store i64 %130, i64* %141, align 16
  %142 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %135, i64 0, i32 9, i64 %140, i32 0, i32 1
  store i16 %134, i16* %142, align 8
  %143 = add i64 %0, 128
  %144 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %145 = tail call fastcc i64 @cpu_ldq_data(%struct.CPUX86State* noundef %144, i64 noundef %143)
  %146 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %147 = add i64 %0, 136
  %148 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* noundef %146, i64 noundef %147)
  %149 = trunc i32 %148 to i16
  %150 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %151 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %150, i64 0, i32 5
  %152 = load i32, i32* %151, align 16
  %153 = add i32 %152, 6
  %154 = and i32 %153, 7
  %155 = zext i32 %154 to i64
  %156 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %150, i64 0, i32 9, i64 %155, i32 0, i32 0
  store i64 %145, i64* %156, align 16
  %157 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %150, i64 0, i32 9, i64 %155, i32 0, i32 1
  store i16 %149, i16* %157, align 8
  %158 = add i64 %0, 144
  %159 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %160 = tail call fastcc i64 @cpu_ldq_data(%struct.CPUX86State* noundef %159, i64 noundef %158)
  %161 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %162 = add i64 %0, 152
  %163 = tail call fastcc i32 @cpu_lduw_data(%struct.CPUX86State* noundef %161, i64 noundef %162)
  %164 = trunc i32 %163 to i16
  %165 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %166 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %165, i64 0, i32 5
  %167 = load i32, i32* %166, align 16
  %168 = add i32 %167, 7
  %169 = and i32 %168, 7
  %170 = zext i32 %169 to i64
  %171 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %165, i64 0, i32 9, i64 %170, i32 0, i32 0
  store i64 %160, i64* %171, align 16
  %172 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %165, i64 0, i32 9, i64 %170, i32 0, i32 1
  store i16 %164, i16* %172, align 8
  %173 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %174 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %173, i64 0, i32 29, i64 4
  %175 = load i64, i64* %174, align 16
  %176 = and i64 %175, 512
  %177 = icmp eq i64 %176, 0
  br i1 %177, label %214, label %178

178:                                              ; preds = %7
  %179 = add i64 %0, 24
  %180 = tail call fastcc i32 @cpu_ldl_data(%struct.CPUX86State* noundef nonnull %173, i64 noundef %179)
  %181 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %182 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %181, i64 0, i32 14
  store i32 %180, i32* %182, align 8
  %183 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %181, i64 0, i32 21
  %184 = load i32, i32* %183, align 16
  %185 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %181, i64 0, i32 37
  %186 = load i64, i64* %185, align 8
  %187 = and i64 %186, 16384
  %188 = icmp ne i64 %187, 0
  %189 = and i32 %184, 16387
  %190 = icmp eq i32 %189, 16384
  %191 = select i1 %188, i1 %190, i1 false
  br i1 %191, label %214, label %192

192:                                              ; preds = %178
  %193 = add i64 %0, 160
  %194 = and i32 %184, 32768
  %195 = icmp eq i32 %194, 0
  %196 = select i1 %195, i64 8, i64 16
  br label %197

197:                                              ; preds = %211, %192
  %198 = phi %struct.CPUX86State* [ %181, %192 ], [ %213, %211 ]
  %199 = phi i64 [ 0, %192 ], [ %209, %211 ]
  %200 = phi i64 [ %193, %192 ], [ %212, %211 ]
  %201 = tail call fastcc i64 @cpu_ldq_data(%struct.CPUX86State* noundef %198, i64 noundef %200)
  %202 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %203 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %202, i64 0, i32 15, i64 %199, i32 0, i64 0
  store i64 %201, i64* %203, align 16
  %204 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %205 = add i64 %200, 8
  %206 = tail call fastcc i64 @cpu_ldq_data(%struct.CPUX86State* noundef %204, i64 noundef %205)
  %207 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %208 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %207, i64 0, i32 15, i64 %199, i32 0, i64 1
  store i64 %206, i64* %208, align 8
  %209 = add nuw nsw i64 %199, 1
  %210 = icmp eq i64 %209, %196
  br i1 %210, label %214, label %211, !llvm.loop !18

211:                                              ; preds = %197
  %212 = add i64 %200, 16
  %213 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br label %197

214:                                              ; preds = %197, %178, %7
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn writeonly
define void @cpu_get_fp80(i64* nocapture noundef writeonly %0, i16* nocapture noundef writeonly %1, i64 %2, i16 %3) local_unnamed_addr #1 {
  store i64 %2, i64* %0, align 8
  store i16 %3, i16* %1, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn
define { i64, i16 } @cpu_set_fp80(i64 noundef %0, i16 noundef zeroext %1) local_unnamed_addr #18 {
  %3 = insertvalue { i64, i16 } poison, i64 %0, 0
  %4 = insertvalue { i64, i16 } %3, i16 %1, 1
  ret { i64, i16 } %4
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define void @helper_mulq_EAX_T0(i64 noundef %0) local_unnamed_addr #14 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 16
  %5 = zext i64 %4 to i128
  %6 = zext i64 %0 to i128
  %7 = mul nuw i128 %5, %6
  %8 = trunc i128 %7 to i64
  %9 = lshr i128 %7, 64
  %10 = trunc i128 %9 to i64
  store i64 %8, i64* %3, align 16
  %11 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %11, i64 0, i32 0, i64 2
  store i64 %10, i64* %12, align 16
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %11, i64 0, i32 3
  store i64 %8, i64* %13, align 16
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %11, i64 0, i32 2
  store i64 %10, i64* %14, align 8
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define void @helper_imulq_EAX_T0(i64 noundef %0) local_unnamed_addr #14 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 16
  %5 = sext i64 %4 to i128
  %6 = sext i64 %0 to i128
  %7 = mul nsw i128 %5, %6
  %8 = trunc i128 %7 to i64
  %9 = lshr i128 %7, 64
  %10 = trunc i128 %9 to i64
  store i64 %8, i64* %3, align 16
  %11 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %11, i64 0, i32 0, i64 2
  store i64 %10, i64* %12, align 16
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %11, i64 0, i32 3
  store i64 %8, i64* %13, align 16
  %14 = add nsw i128 %7, -9223372036854775808
  %15 = icmp ult i128 %14, -18446744073709551616
  %16 = zext i1 %15 to i64
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %11, i64 0, i32 2
  store i64 %16, i64* %17, align 8
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define i64 @helper_imulq_T0_T1(i64 noundef %0, i64 noundef %1) local_unnamed_addr #14 {
  %3 = sext i64 %0 to i128
  %4 = sext i64 %1 to i128
  %5 = mul nsw i128 %4, %3
  %6 = trunc i128 %5 to i64
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 3
  store i64 %6, i64* %8, align 16
  %9 = add nsw i128 %5, -9223372036854775808
  %10 = icmp ult i128 %9, -18446744073709551616
  %11 = zext i1 %10 to i64
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 2
  store i64 %11, i64* %12, align 8
  ret i64 %6
}

; Function Attrs: uwtable
define void @helper_divq_EAX(i64 noundef %0) local_unnamed_addr #3 {
  %2 = icmp eq i64 %0, 0
  %3 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %2, label %4, label %5

4:                                                ; preds = %1
  tail call void @raise_exception_ra(%struct.CPUX86State* noundef %3, i32 noundef 0, i64 noundef 0) #28
  unreachable

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 0, i64 0
  %7 = load i64, i64* %6, align 16
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 0, i64 2
  %9 = load i64, i64* %8, align 16
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %11, label %14

11:                                               ; preds = %5
  %12 = udiv i64 %7, %0
  %13 = urem i64 %7, %0
  br label %33

14:                                               ; preds = %5
  %15 = icmp ult i64 %9, %0
  br i1 %15, label %16, label %32

16:                                               ; preds = %14, %16
  %17 = phi i32 [ %30, %16 ], [ 0, %14 ]
  %18 = phi i64 [ %29, %16 ], [ %7, %14 ]
  %19 = phi i64 [ %25, %16 ], [ %9, %14 ]
  %20 = tail call i64 @llvm.fshl.i64(i64 %19, i64 %18, i64 1) #30
  %21 = icmp sgt i64 %19, -1
  %22 = icmp ult i64 %20, %0
  %23 = select i1 %21, i1 %22, i1 false
  %24 = select i1 %23, i64 0, i64 %0
  %25 = sub i64 %20, %24
  %26 = xor i1 %23, true
  %27 = zext i1 %26 to i64
  %28 = shl i64 %18, 1
  %29 = or i64 %28, %27
  %30 = add nuw nsw i32 %17, 1
  %31 = icmp eq i32 %30, 64
  br i1 %31, label %33, label %16, !llvm.loop !19

32:                                               ; preds = %14
  tail call void @raise_exception_ra(%struct.CPUX86State* noundef nonnull %3, i32 noundef 0, i64 noundef 0) #28
  unreachable

33:                                               ; preds = %16, %11
  %34 = phi i64 [ %12, %11 ], [ %29, %16 ]
  %35 = phi i64 [ %13, %11 ], [ %25, %16 ]
  store i64 %34, i64* %6, align 16
  %36 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %37 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %36, i64 0, i32 0, i64 2
  store i64 %35, i64* %37, align 16
  ret void
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.fshl.i64(i64, i64, i64) #11

; Function Attrs: uwtable
define void @helper_idivq_EAX(i64 noundef %0) local_unnamed_addr #3 {
  %2 = icmp eq i64 %0, 0
  %3 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %2, label %4, label %5

4:                                                ; preds = %1
  tail call void @raise_exception_ra(%struct.CPUX86State* noundef %3, i32 noundef 0, i64 noundef 0) #28
  unreachable

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 0, i64 0
  %7 = load i64, i64* %6, align 16
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 0, i64 2
  %9 = load i64, i64* %8, align 16
  %10 = icmp slt i64 %9, 0
  br i1 %10, label %11, label %18

11:                                               ; preds = %5
  %12 = xor i64 %9, -1
  %13 = sub i64 0, %7
  %14 = icmp eq i64 %7, 0
  br i1 %14, label %15, label %18

15:                                               ; preds = %11
  %16 = sub i64 0, %9
  %17 = tail call i64 @llvm.abs.i64(i64 %0, i1 true) #30
  br label %26

18:                                               ; preds = %11, %5
  %19 = phi i64 [ %7, %5 ], [ %13, %11 ]
  %20 = phi i64 [ %9, %5 ], [ %12, %11 ]
  %21 = tail call i64 @llvm.abs.i64(i64 %0, i1 true) #30
  %22 = icmp eq i64 %20, 0
  br i1 %22, label %23, label %26

23:                                               ; preds = %18
  %24 = udiv i64 %19, %21
  %25 = urem i64 %19, %21
  br label %47

26:                                               ; preds = %15, %18
  %27 = phi i64 [ %17, %15 ], [ %21, %18 ]
  %28 = phi i64 [ %16, %15 ], [ %20, %18 ]
  %29 = phi i64 [ 0, %15 ], [ %19, %18 ]
  %30 = icmp ult i64 %28, %27
  br i1 %30, label %31, label %65

31:                                               ; preds = %26, %31
  %32 = phi i32 [ %45, %31 ], [ 0, %26 ]
  %33 = phi i64 [ %44, %31 ], [ %29, %26 ]
  %34 = phi i64 [ %40, %31 ], [ %28, %26 ]
  %35 = tail call i64 @llvm.fshl.i64(i64 %34, i64 %33, i64 1) #30
  %36 = icmp sgt i64 %34, -1
  %37 = icmp ult i64 %35, %27
  %38 = select i1 %36, i1 %37, i1 false
  %39 = select i1 %38, i64 0, i64 %27
  %40 = sub i64 %35, %39
  %41 = xor i1 %38, true
  %42 = zext i1 %41 to i64
  %43 = shl i64 %33, 1
  %44 = or i64 %43, %42
  %45 = add nuw nsw i32 %32, 1
  %46 = icmp eq i32 %45, 64
  br i1 %46, label %47, label %31, !llvm.loop !19

47:                                               ; preds = %31, %23
  %48 = phi i64 [ %24, %23 ], [ %44, %31 ]
  %49 = phi i64 [ %25, %23 ], [ %40, %31 ]
  %50 = xor i64 %9, %0
  %51 = icmp sgt i64 %50, -1
  br i1 %51, label %56, label %52

52:                                               ; preds = %47
  %53 = icmp ugt i64 %48, -9223372036854775808
  br i1 %53, label %65, label %54

54:                                               ; preds = %52
  %55 = sub i64 0, %48
  br i1 %10, label %60, label %66

56:                                               ; preds = %47
  %57 = icmp slt i64 %48, 0
  %58 = xor i1 %10, true
  %59 = select i1 %57, i1 true, i1 %58
  br i1 %59, label %63, label %60

60:                                               ; preds = %54, %56
  %61 = phi i64 [ %48, %56 ], [ %55, %54 ]
  %62 = sub i64 0, %49
  br label %66

63:                                               ; preds = %56
  %64 = icmp sgt i64 %48, -1
  br i1 %64, label %66, label %65

65:                                               ; preds = %26, %52, %63
  tail call void @raise_exception_ra(%struct.CPUX86State* noundef %3, i32 noundef 0, i64 noundef 0) #28
  unreachable

66:                                               ; preds = %54, %60, %63
  %67 = phi i64 [ %49, %63 ], [ %49, %54 ], [ %62, %60 ]
  %68 = phi i64 [ %48, %63 ], [ %55, %54 ], [ %61, %60 ]
  store i64 %68, i64* %6, align 16
  %69 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %70 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %69, i64 0, i32 0, i64 2
  store i64 %67, i64* %70, align 16
  ret void
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.abs.i64(i64, i1 immarg) #11

; Function Attrs: noreturn uwtable
define void @helper_hlt(i32 noundef %0) local_unnamed_addr #4 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 21
  %4 = load i32, i32* %3, align 16
  %5 = and i32 %4, 2097152
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %13, label %7, !prof !5

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 42
  %9 = load i64, i64* %8, align 16
  %10 = and i64 %9, 16777216
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %13, label %12

12:                                               ; preds = %7
  tail call void @helper_vmexit(i32 noundef 120, i64 noundef 0)
  unreachable

13:                                               ; preds = %1, %7
  %14 = sext i32 %0 to i64
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 18
  %16 = load i64, i64* %15, align 8
  %17 = add i64 %16, %14
  store i64 %17, i64* %15, align 8
  %18 = and i32 %4, -9
  store i32 %18, i32* %3, align 16
  %19 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 79
  store i32 1, i32* %19, align 4
  %20 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 99
  store i32 65537, i32* %20, align 16
  tail call void @cpu_loop_exit(%struct.CPUX86State* noundef nonnull %2) #28
  unreachable
}

; Function Attrs: uwtable
define void @helper_monitor(i64 noundef %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 0, i64 1
  %4 = load i64, i64* %3, align 8
  %5 = trunc i64 %4 to i32
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %8, label %7

7:                                                ; preds = %1
  tail call void @raise_exception_ra(%struct.CPUX86State* noundef nonnull %2, i32 noundef 13, i64 noundef 0) #28
  unreachable

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 21
  %10 = load i32, i32* %9, align 16
  %11 = and i32 %10, 2097152
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %19, label %13, !prof !5

13:                                               ; preds = %8
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 42
  %15 = load i64, i64* %14, align 16
  %16 = and i64 %15, 4398046511104
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %19, label %18

18:                                               ; preds = %13
  tail call void @helper_vmexit(i32 noundef 138, i64 noundef 0)
  unreachable

19:                                               ; preds = %8, %13
  ret void
}

; Function Attrs: uwtable
define void @helper_mwait(i32 noundef %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 0, i64 1
  %4 = load i64, i64* %3, align 8
  %5 = trunc i64 %4 to i32
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %8, label %7

7:                                                ; preds = %1
  tail call void @raise_exception_ra(%struct.CPUX86State* noundef nonnull %2, i32 noundef 13, i64 noundef 0) #28
  unreachable

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 21
  %10 = load i32, i32* %9, align 16
  %11 = and i32 %10, 2097152
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %19, label %13, !prof !5

13:                                               ; preds = %8
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 42
  %15 = load i64, i64* %14, align 16
  %16 = and i64 %15, 8796093022208
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %19, label %18

18:                                               ; preds = %13
  tail call void @helper_vmexit(i32 noundef 139, i64 noundef 0)
  unreachable

19:                                               ; preds = %8, %13
  %20 = sext i32 %0 to i64
  %21 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 18
  %22 = load i64, i64* %21, align 8
  %23 = add i64 %22, %20
  store i64 %23, i64* %21, align 8
  %24 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 101
  %25 = load i32, i32* %24, align 16
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %35

27:                                               ; preds = %19
  %28 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 100
  %29 = load %struct.CPUX86State*, %struct.CPUX86State** %28, align 8
  %30 = icmp eq %struct.CPUX86State* %29, null
  br i1 %30, label %31, label %35

31:                                               ; preds = %27
  %32 = and i32 %10, -9
  store i32 %32, i32* %9, align 16
  %33 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 79
  store i32 1, i32* %33, align 4
  %34 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 99
  store i32 65537, i32* %34, align 16
  tail call void @cpu_loop_exit(%struct.CPUX86State* noundef nonnull %2) #28
  unreachable

35:                                               ; preds = %19, %27
  ret void
}

; Function Attrs: noreturn uwtable
define void @helper_debug() local_unnamed_addr #4 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 99
  store i32 65538, i32* %2, align 16
  tail call void @cpu_loop_exit(%struct.CPUX86State* noundef %1) #28
  unreachable
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_reset_rf() local_unnamed_addr #2 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 20
  %3 = load i64, i64* %2, align 8
  %4 = and i64 %3, -65537
  store i64 %4, i64* %2, align 8
  ret void
}

; Function Attrs: noreturn uwtable
define void @helper_raise_interrupt(i32 noundef %0, i32 noundef %1) local_unnamed_addr #4 {
  %3 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @raise_interrupt(%struct.CPUX86State* noundef %3, i32 noundef %0, i32 noundef 1, i32 noundef 0, i32 noundef %1) #28
  unreachable
}

; Function Attrs: noreturn uwtable
define void @helper_raise_exception(i32 noundef %0) local_unnamed_addr #4 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @raise_exception(%struct.CPUX86State* noundef %2, i32 noundef %0) #28
  unreachable
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_cli() local_unnamed_addr #2 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 20
  %3 = load i64, i64* %2, align 8
  %4 = and i64 %3, -513
  store i64 %4, i64* %2, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_sti() local_unnamed_addr #2 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 20
  %3 = load i64, i64* %2, align 8
  %4 = or i64 %3, 512
  store i64 %4, i64* %2, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_set_inhibit_irq() local_unnamed_addr #2 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 21
  %3 = load i32, i32* %2, align 16
  %4 = or i32 %3, 8
  store i32 %4, i32* %2, align 16
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_reset_inhibit_irq() local_unnamed_addr #2 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 21
  %3 = load i32, i32* %2, align 16
  %4 = and i32 %3, -9
  store i32 %4, i32* %2, align 16
  ret void
}

; Function Attrs: uwtable
define void @helper_boundw(i64 noundef %0, i32 noundef %1) local_unnamed_addr #3 {
  %3 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %4 = tail call fastcc i32 @cpu_ldsw_data(%struct.CPUX86State* noundef %3, i64 noundef %0)
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %6 = add i64 %0, 2
  %7 = tail call fastcc i32 @cpu_ldsw_data(%struct.CPUX86State* noundef %5, i64 noundef %6)
  %8 = shl i32 %1, 16
  %9 = ashr exact i32 %8, 16
  %10 = icmp slt i32 %9, %4
  %11 = icmp sgt i32 %9, %7
  %12 = select i1 %10, i1 true, i1 %11
  br i1 %12, label %13, label %15

13:                                               ; preds = %2
  %14 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @raise_exception_ra(%struct.CPUX86State* noundef %14, i32 noundef 5, i64 noundef 0) #28
  unreachable

15:                                               ; preds = %2
  ret void
}

; Function Attrs: uwtable
define internal fastcc i32 @cpu_ldsw_data(%struct.CPUX86State* noundef %0, i64 noundef %1) unnamed_addr #3 {
  %3 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 0), align 8
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %7, label %6

6:                                                ; preds = %2
  tail call void @tcg_llvm_before_memory_access(i64 noundef %1, i64 noundef 0, i32 noundef 2, i32 noundef 0)
  br label %7

7:                                                ; preds = %6, %2
  %8 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 1, i32 1), align 8
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %13, label %11

11:                                               ; preds = %7
  %12 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %1, i64 noundef 0, i64 noundef -1, i64 noundef 0)
  br label %13

13:                                               ; preds = %7, %11
  %14 = phi i64 [ %12, %11 ], [ %1, %7 ]
  %15 = lshr i64 %14, 12
  %16 = tail call i64 @tcg_llvm_fork_and_concretize(i64 noundef %15, i64 noundef 0, i64 noundef 4503599627370495, i64 noundef 0)
  %17 = and i64 %16, 1023
  %18 = getelementptr %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 21
  %19 = load i32, i32* %18, align 16
  %20 = and i32 %19, 3
  %21 = icmp eq i32 %20, 3
  %22 = zext i1 %21 to i64
  %23 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %0, i64 0, i32 82, i64 %22
  %24 = load %struct.CPUTLBEntry*, %struct.CPUTLBEntry** %23, align 8
  %25 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %24, i64 %17, i32 0
  %26 = load i64, i64* %25, align 8
  %27 = and i64 %26, -33
  %28 = and i64 %14, -4095
  %29 = icmp eq i64 %27, %28
  br i1 %29, label %33, label %30, !prof !5

30:                                               ; preds = %13
  %31 = zext i1 %21 to i32
  %32 = tail call zeroext i16 @helper_ldw_mmu(%struct.CPUX86State* noundef nonnull %0, i64 noundef %14, i32 noundef %31, i8* noundef null)
  br label %44

33:                                               ; preds = %13
  %34 = getelementptr inbounds %struct.CPUTLBEntry, %struct.CPUTLBEntry* %24, i64 %17, i32 4
  %35 = load i64, i64* %34, align 8
  %36 = add i64 %35, %14
  %37 = inttoptr i64 %36 to i16*
  %38 = load i16, i16* %37, align 2
  %39 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 1), align 8
  %40 = load i32, i32* %39, align 4
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %44, label %42

42:                                               ; preds = %33
  %43 = sext i16 %38 to i64
  tail call void @tcg_llvm_after_memory_access(i64 noundef %14, i64 noundef %43, i32 noundef 2, i32 noundef 0, i64 noundef 0)
  br label %44

44:                                               ; preds = %33, %42, %30
  %45 = phi i16 [ %32, %30 ], [ %38, %42 ], [ %38, %33 ]
  %46 = sext i16 %45 to i32
  ret i32 %46
}

; Function Attrs: uwtable
define void @helper_boundl(i64 noundef %0, i32 noundef %1) local_unnamed_addr #3 {
  %3 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %4 = tail call fastcc i32 @cpu_ldl_data(%struct.CPUX86State* noundef %3, i64 noundef %0)
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %6 = add i64 %0, 4
  %7 = tail call fastcc i32 @cpu_ldl_data(%struct.CPUX86State* noundef %5, i64 noundef %6)
  %8 = icmp sgt i32 %4, %1
  %9 = icmp slt i32 %7, %1
  %10 = select i1 %8, i1 true, i1 %9
  br i1 %10, label %11, label %13

11:                                               ; preds = %2
  %12 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @raise_exception_ra(%struct.CPUX86State* noundef %12, i32 noundef 5, i64 noundef 0) #28
  unreachable

13:                                               ; preds = %2
  ret void
}

; Function Attrs: uwtable
define void @helper_vmrun(i32 noundef %0, i32 noundef %1) local_unnamed_addr #3 {
  %3 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %4 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 21
  %5 = load i32, i32* %4, align 16
  %6 = and i32 %5, 3
  %7 = and i32 %5, 2097152
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %15, label %9, !prof !5

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 42
  %11 = load i64, i64* %10, align 16
  %12 = and i64 %11, 4294967296
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %15, label %14

14:                                               ; preds = %9
  tail call void @helper_vmexit(i32 noundef 128, i64 noundef 0)
  unreachable

15:                                               ; preds = %2, %9
  %16 = icmp eq i32 %0, 2
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 0, i64 0
  %18 = load i64, i64* %17, align 16
  %19 = and i64 %18, 4294967295
  %20 = select i1 %16, i64 %18, i64 %19
  %21 = load i32, i32* @loglevel, align 4
  %22 = and i32 %21, 2
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %28, label %24

24:                                               ; preds = %15
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @logfile, align 8
  %26 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* noundef %25, i8* noundef getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6, i64 0, i64 0), i64 noundef %20)
  %27 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br label %28

28:                                               ; preds = %24, %15
  %29 = phi %struct.CPUX86State* [ %27, %24 ], [ %3, %15 ]
  %30 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %29, i64 0, i32 40
  store i64 %20, i64* %30, align 16
  %31 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %29, i64 0, i32 39
  %32 = load i64, i64* %31, align 8
  %33 = add i64 %32, 1128
  %34 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %29, i64 0, i32 27, i32 1
  %35 = load i64, i64* %34, align 8
  tail call void @stq_phys(i64 noundef %33, i64 noundef %35)
  %36 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %37 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %36, i64 0, i32 39
  %38 = load i64, i64* %37, align 8
  %39 = add i64 %38, 1124
  %40 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %36, i64 0, i32 27, i32 2
  %41 = load i32, i32* %40, align 16
  tail call void @stl_phys(i64 noundef %39, i32 noundef %41)
  %42 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %43 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %42, i64 0, i32 39
  %44 = load i64, i64* %43, align 8
  %45 = add i64 %44, 1160
  %46 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %42, i64 0, i32 28, i32 1
  %47 = load i64, i64* %46, align 8
  tail call void @stq_phys(i64 noundef %45, i64 noundef %47)
  %48 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %49 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %48, i64 0, i32 39
  %50 = load i64, i64* %49, align 8
  %51 = add i64 %50, 1156
  %52 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %48, i64 0, i32 28, i32 2
  %53 = load i32, i32* %52, align 8
  tail call void @stl_phys(i64 noundef %51, i32 noundef %53)
  %54 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %55 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %54, i64 0, i32 39
  %56 = load i64, i64* %55, align 8
  %57 = add i64 %56, 1368
  %58 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %54, i64 0, i32 29, i64 0
  %59 = load i64, i64* %58, align 16
  tail call void @stq_phys(i64 noundef %57, i64 noundef %59)
  %60 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %61 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %60, i64 0, i32 39
  %62 = load i64, i64* %61, align 8
  %63 = add i64 %62, 1600
  %64 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %60, i64 0, i32 29, i64 2
  %65 = load i64, i64* %64, align 16
  tail call void @stq_phys(i64 noundef %63, i64 noundef %65)
  %66 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %67 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %66, i64 0, i32 39
  %68 = load i64, i64* %67, align 8
  %69 = add i64 %68, 1360
  %70 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %66, i64 0, i32 29, i64 3
  %71 = load i64, i64* %70, align 8
  tail call void @stq_phys(i64 noundef %69, i64 noundef %71)
  %72 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %73 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %72, i64 0, i32 39
  %74 = load i64, i64* %73, align 8
  %75 = add i64 %74, 1352
  %76 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %72, i64 0, i32 29, i64 4
  %77 = load i64, i64* %76, align 16
  tail call void @stq_phys(i64 noundef %75, i64 noundef %77)
  %78 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %79 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %78, i64 0, i32 39
  %80 = load i64, i64* %79, align 8
  %81 = add i64 %80, 1384
  %82 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %78, i64 0, i32 65, i64 6
  %83 = load i64, i64* %82, align 8
  tail call void @stq_phys(i64 noundef %81, i64 noundef %83)
  %84 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %85 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %84, i64 0, i32 39
  %86 = load i64, i64* %85, align 8
  %87 = add i64 %86, 1376
  %88 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %84, i64 0, i32 65, i64 7
  %89 = load i64, i64* %88, align 8
  tail call void @stq_phys(i64 noundef %87, i64 noundef %89)
  %90 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %91 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %90, i64 0, i32 39
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %92, 1232
  %94 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %90, i64 0, i32 37
  %95 = load i64, i64* %94, align 8
  tail call void @stq_phys(i64 noundef %93, i64 noundef %95)
  %96 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %97 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 39
  %98 = load i64, i64* %97, align 8
  %99 = add i64 %98, 1392
  %100 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 20
  %101 = load i64, i64* %100, align 8
  %102 = trunc i64 %101 to i32
  %103 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 1
  %104 = load i64, i64* %103, align 16
  %105 = trunc i64 %104 to i32
  %106 = tail call i32 @helper_cc_compute_all(i32 noundef %105) #30
  %107 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %96, i64 0, i32 19
  %108 = load i32, i32* %107, align 16
  %109 = and i32 %108, 1024
  %110 = or i32 %106, %102
  %111 = or i32 %110, %109
  %112 = or i32 %111, 2
  %113 = zext i32 %112 to i64
  tail call void @stq_phys(i64 noundef %99, i64 noundef %113)
  %114 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %115 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %114, i64 0, i32 39
  %116 = load i64, i64* %115, align 8
  %117 = add i64 %116, 1024
  %118 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %114, i64 0, i32 24, i64 0, i32 0
  %119 = load i32, i32* %118, align 8
  tail call void @stw_phys(i64 noundef %117, i32 noundef %119)
  %120 = add i64 %116, 1032
  %121 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %114, i64 0, i32 24, i64 0, i32 1
  %122 = load i64, i64* %121, align 8
  tail call void @stq_phys(i64 noundef %120, i64 noundef %122)
  %123 = add i64 %116, 1028
  %124 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %114, i64 0, i32 24, i64 0, i32 2
  %125 = load i32, i32* %124, align 8
  tail call void @stl_phys(i64 noundef %123, i32 noundef %125)
  %126 = add i64 %116, 1026
  %127 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %114, i64 0, i32 24, i64 0, i32 3
  %128 = load i32, i32* %127, align 4
  %129 = lshr i32 %128, 8
  %130 = and i32 %129, 255
  %131 = lshr i32 %128, 12
  %132 = and i32 %131, 3840
  %133 = or i32 %130, %132
  tail call void @stw_phys(i64 noundef %126, i32 noundef %133)
  %134 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %135 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %134, i64 0, i32 39
  %136 = load i64, i64* %135, align 8
  %137 = add i64 %136, 1040
  %138 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %134, i64 0, i32 24, i64 1, i32 0
  %139 = load i32, i32* %138, align 8
  tail call void @stw_phys(i64 noundef %137, i32 noundef %139)
  %140 = add i64 %136, 1048
  %141 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %134, i64 0, i32 24, i64 1, i32 1
  %142 = load i64, i64* %141, align 8
  tail call void @stq_phys(i64 noundef %140, i64 noundef %142)
  %143 = add i64 %136, 1044
  %144 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %134, i64 0, i32 24, i64 1, i32 2
  %145 = load i32, i32* %144, align 8
  tail call void @stl_phys(i64 noundef %143, i32 noundef %145)
  %146 = add i64 %136, 1042
  %147 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %134, i64 0, i32 24, i64 1, i32 3
  %148 = load i32, i32* %147, align 4
  %149 = lshr i32 %148, 8
  %150 = and i32 %149, 255
  %151 = lshr i32 %148, 12
  %152 = and i32 %151, 3840
  %153 = or i32 %150, %152
  tail call void @stw_phys(i64 noundef %146, i32 noundef %153)
  %154 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %155 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %154, i64 0, i32 39
  %156 = load i64, i64* %155, align 8
  %157 = add i64 %156, 1056
  %158 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %154, i64 0, i32 24, i64 2, i32 0
  %159 = load i32, i32* %158, align 8
  tail call void @stw_phys(i64 noundef %157, i32 noundef %159)
  %160 = add i64 %156, 1064
  %161 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %154, i64 0, i32 24, i64 2, i32 1
  %162 = load i64, i64* %161, align 8
  tail call void @stq_phys(i64 noundef %160, i64 noundef %162)
  %163 = add i64 %156, 1060
  %164 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %154, i64 0, i32 24, i64 2, i32 2
  %165 = load i32, i32* %164, align 8
  tail call void @stl_phys(i64 noundef %163, i32 noundef %165)
  %166 = add i64 %156, 1058
  %167 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %154, i64 0, i32 24, i64 2, i32 3
  %168 = load i32, i32* %167, align 4
  %169 = lshr i32 %168, 8
  %170 = and i32 %169, 255
  %171 = lshr i32 %168, 12
  %172 = and i32 %171, 3840
  %173 = or i32 %170, %172
  tail call void @stw_phys(i64 noundef %166, i32 noundef %173)
  %174 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %175 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %174, i64 0, i32 39
  %176 = load i64, i64* %175, align 8
  %177 = add i64 %176, 1072
  %178 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %174, i64 0, i32 24, i64 3, i32 0
  %179 = load i32, i32* %178, align 8
  tail call void @stw_phys(i64 noundef %177, i32 noundef %179)
  %180 = add i64 %176, 1080
  %181 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %174, i64 0, i32 24, i64 3, i32 1
  %182 = load i64, i64* %181, align 8
  tail call void @stq_phys(i64 noundef %180, i64 noundef %182)
  %183 = add i64 %176, 1076
  %184 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %174, i64 0, i32 24, i64 3, i32 2
  %185 = load i32, i32* %184, align 8
  tail call void @stl_phys(i64 noundef %183, i32 noundef %185)
  %186 = add i64 %176, 1074
  %187 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %174, i64 0, i32 24, i64 3, i32 3
  %188 = load i32, i32* %187, align 4
  %189 = lshr i32 %188, 8
  %190 = and i32 %189, 255
  %191 = lshr i32 %188, 12
  %192 = and i32 %191, 3840
  %193 = or i32 %190, %192
  tail call void @stw_phys(i64 noundef %186, i32 noundef %193)
  %194 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %195 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %194, i64 0, i32 39
  %196 = load i64, i64* %195, align 8
  %197 = add i64 %196, 1400
  %198 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %194, i64 0, i32 18
  %199 = load i64, i64* %198, align 8
  %200 = sext i32 %1 to i64
  %201 = add i64 %199, %200
  tail call void @stq_phys(i64 noundef %197, i64 noundef %201)
  %202 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %203 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %202, i64 0, i32 39
  %204 = load i64, i64* %203, align 8
  %205 = add i64 %204, 1496
  %206 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %202, i64 0, i32 0, i64 4
  %207 = load i64, i64* %206, align 16
  tail call void @stq_phys(i64 noundef %205, i64 noundef %207)
  %208 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %209 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %208, i64 0, i32 39
  %210 = load i64, i64* %209, align 8
  %211 = add i64 %210, 1528
  %212 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %208, i64 0, i32 0, i64 0
  %213 = load i64, i64* %212, align 16
  tail call void @stq_phys(i64 noundef %211, i64 noundef %213)
  %214 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %215 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %214, i64 0, i32 40
  %216 = load i64, i64* %215, align 16
  %217 = add i64 %216, 12
  %218 = tail call i64 @ldq_phys(i64 noundef %217)
  %219 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %220 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %219, i64 0, i32 42
  store i64 %218, i64* %220, align 16
  %221 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %219, i64 0, i32 40
  %222 = load i64, i64* %221, align 16
  %223 = tail call i32 @lduw_phys(i64 noundef %222)
  %224 = trunc i32 %223 to i16
  %225 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %226 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %225, i64 0, i32 43
  store i16 %224, i16* %226, align 8
  %227 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %225, i64 0, i32 40
  %228 = load i64, i64* %227, align 16
  %229 = add i64 %228, 2
  %230 = tail call i32 @lduw_phys(i64 noundef %229)
  %231 = trunc i32 %230 to i16
  %232 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %233 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %232, i64 0, i32 44
  store i16 %231, i16* %233, align 2
  %234 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %232, i64 0, i32 40
  %235 = load i64, i64* %234, align 16
  %236 = add i64 %235, 4
  %237 = tail call i32 @lduw_phys(i64 noundef %236)
  %238 = trunc i32 %237 to i16
  %239 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %240 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %239, i64 0, i32 45
  store i16 %238, i16* %240, align 4
  %241 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %239, i64 0, i32 40
  %242 = load i64, i64* %241, align 16
  %243 = add i64 %242, 6
  %244 = tail call i32 @lduw_phys(i64 noundef %243)
  %245 = trunc i32 %244 to i16
  %246 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %247 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %246, i64 0, i32 46
  store i16 %245, i16* %247, align 2
  %248 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %246, i64 0, i32 40
  %249 = load i64, i64* %248, align 16
  %250 = add i64 %249, 8
  %251 = tail call i32 @ldl_phys(i64 noundef %250)
  %252 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %253 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %252, i64 0, i32 47
  store i32 %251, i32* %253, align 16
  %254 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %252, i64 0, i32 21
  %255 = load i32, i32* %254, align 16
  %256 = or i32 %255, 2097152
  store i32 %256, i32* %254, align 16
  %257 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %252, i64 0, i32 40
  %258 = load i64, i64* %257, align 16
  %259 = add i64 %258, 80
  %260 = tail call i64 @ldq_phys(i64 noundef %259)
  %261 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %262 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %261, i64 0, i32 41
  store i64 %260, i64* %262, align 8
  %263 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %261, i64 0, i32 40
  %264 = load i64, i64* %263, align 16
  %265 = add i64 %264, 1128
  %266 = tail call i64 @ldq_phys(i64 noundef %265)
  %267 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %268 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %267, i64 0, i32 27, i32 1
  store i64 %266, i64* %268, align 8
  %269 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %267, i64 0, i32 40
  %270 = load i64, i64* %269, align 16
  %271 = add i64 %270, 1124
  %272 = tail call i32 @ldl_phys(i64 noundef %271)
  %273 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %274 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %273, i64 0, i32 27, i32 2
  store i32 %272, i32* %274, align 16
  %275 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %273, i64 0, i32 40
  %276 = load i64, i64* %275, align 16
  %277 = add i64 %276, 1160
  %278 = tail call i64 @ldq_phys(i64 noundef %277)
  %279 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %280 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %279, i64 0, i32 28, i32 1
  store i64 %278, i64* %280, align 8
  %281 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %279, i64 0, i32 40
  %282 = load i64, i64* %281, align 16
  %283 = add i64 %282, 1156
  %284 = tail call i32 @ldl_phys(i64 noundef %283)
  %285 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %286 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %285, i64 0, i32 28, i32 2
  store i32 %284, i32* %286, align 8
  %287 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %285, i64 0, i32 40
  %288 = load i64, i64* %287, align 16
  %289 = add i64 %288, 128
  tail call void @stq_phys(i64 noundef %289, i64 noundef 0)
  %290 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %291 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %290, i64 0, i32 40
  %292 = load i64, i64* %291, align 16
  %293 = add i64 %292, 1368
  %294 = tail call i64 @ldq_phys(i64 noundef %293)
  %295 = trunc i64 %294 to i32
  tail call void @cpu_x86_update_cr0(%struct.CPUX86State* noundef %290, i32 noundef %295)
  %296 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %297 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %296, i64 0, i32 40
  %298 = load i64, i64* %297, align 16
  %299 = add i64 %298, 1352
  %300 = tail call i64 @ldq_phys(i64 noundef %299)
  %301 = trunc i64 %300 to i32
  tail call void @cpu_x86_update_cr4(%struct.CPUX86State* noundef %296, i32 noundef %301)
  %302 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %303 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %302, i64 0, i32 40
  %304 = load i64, i64* %303, align 16
  %305 = add i64 %304, 1360
  %306 = tail call i64 @ldq_phys(i64 noundef %305)
  tail call void @cpu_x86_update_cr3(%struct.CPUX86State* noundef %302, i64 noundef %306)
  %307 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %308 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %307, i64 0, i32 40
  %309 = load i64, i64* %308, align 16
  %310 = add i64 %309, 1600
  %311 = tail call i64 @ldq_phys(i64 noundef %310)
  %312 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %313 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %312, i64 0, i32 29, i64 2
  store i64 %311, i64* %313, align 16
  %314 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %312, i64 0, i32 40
  %315 = load i64, i64* %314, align 16
  %316 = add i64 %315, 96
  %317 = tail call i32 @ldl_phys(i64 noundef %316)
  %318 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %319 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %318, i64 0, i32 22
  %320 = load i32, i32* %319, align 4
  %321 = and i32 %320, -11
  store i32 %321, i32* %319, align 4
  %322 = and i32 %317, 16777216
  %323 = icmp eq i32 %322, 0
  br i1 %323, label %335, label %324

324:                                              ; preds = %28
  %325 = trunc i32 %317 to i8
  %326 = and i8 %325, 15
  %327 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %318, i64 0, i32 48
  store i8 %326, i8* %327, align 4
  %328 = or i32 %321, 8
  store i32 %328, i32* %319, align 4
  %329 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %318, i64 0, i32 20
  %330 = load i64, i64* %329, align 8
  %331 = and i64 %330, 512
  %332 = icmp eq i64 %331, 0
  br i1 %332, label %335, label %333

333:                                              ; preds = %324
  %334 = or i32 %320, 10
  store i32 %334, i32* %319, align 4
  br label %335

335:                                              ; preds = %324, %333, %28
  %336 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %318, i64 0, i32 40
  %337 = load i64, i64* %336, align 16
  %338 = add i64 %337, 1232
  %339 = tail call i64 @ldq_phys(i64 noundef %338)
  %340 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %318, i64 0, i32 37
  store i64 %339, i64* %340, align 8
  %341 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %318, i64 0, i32 21
  %342 = load i32, i32* %341, align 16
  %343 = and i32 %342, -1064961
  %344 = trunc i64 %339 to i32
  %345 = shl i32 %344, 4
  %346 = and i32 %345, 16384
  %347 = or i32 %343, %346
  %348 = shl i32 %344, 8
  %349 = and i32 %348, 1048576
  %350 = or i32 %347, %349
  store i32 %350, i32* %341, align 16
  %351 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %352 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %351, i64 0, i32 20
  store i64 0, i64* %352, align 8
  %353 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %351, i64 0, i32 40
  %354 = load i64, i64* %353, align 16
  %355 = add i64 %354, 1392
  %356 = tail call i64 @ldq_phys(i64 noundef %355)
  %357 = and i64 %356, 2261
  %358 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %359 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %358, i64 0, i32 2
  store i64 %357, i64* %359, align 8
  %360 = and i64 %356, 1024
  %361 = icmp eq i64 %360, 0
  %362 = select i1 %361, i32 1, i32 -1
  %363 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %358, i64 0, i32 19
  store i32 %362, i32* %363, align 16
  %364 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %358, i64 0, i32 20
  %365 = load i64, i64* %364, align 8
  %366 = and i64 %365, 3285
  %367 = shl i64 %356, 32
  %368 = ashr exact i64 %367, 32
  %369 = and i64 %368, -3286
  %370 = or i64 %366, %369
  store i64 %370, i64* %364, align 8
  %371 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %358, i64 0, i32 1
  store i64 1, i64* %371, align 16
  %372 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %358, i64 0, i32 40
  %373 = load i64, i64* %372, align 16
  %374 = add i64 %373, 1024
  %375 = tail call i32 @lduw_phys(i64 noundef %374)
  %376 = add i64 %373, 1032
  %377 = tail call i64 @ldq_phys(i64 noundef %376)
  %378 = add i64 %373, 1028
  %379 = tail call i32 @ldl_phys(i64 noundef %378)
  %380 = add i64 %373, 1026
  %381 = tail call i32 @lduw_phys(i64 noundef %380)
  %382 = shl i32 %381, 8
  %383 = and i32 %382, 65280
  %384 = shl i32 %381, 12
  %385 = and i32 %384, 15728640
  %386 = or i32 %383, %385
  %387 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %358, i64 0, i32 24, i64 0, i32 0
  store i32 %375, i32* %387, align 8
  %388 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %358, i64 0, i32 24, i64 0, i32 1
  store i64 %377, i64* %388, align 8
  %389 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %358, i64 0, i32 24, i64 0, i32 2
  store i32 %379, i32* %389, align 8
  %390 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %358, i64 0, i32 24, i64 0, i32 3
  store i32 %386, i32* %390, align 4
  %391 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %358, i64 0, i32 21
  %392 = load i32, i32* %391, align 16
  %393 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %358, i64 0, i32 24, i64 2, i32 3
  %394 = load i32, i32* %393, align 4
  %395 = lshr i32 %394, 17
  %396 = and i32 %395, 32
  %397 = and i32 %392, 32768
  %398 = icmp eq i32 %397, 0
  br i1 %398, label %399, label %423

399:                                              ; preds = %335
  %400 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %358, i64 0, i32 29, i64 0
  %401 = load i64, i64* %400, align 16
  %402 = and i64 %401, 1
  %403 = icmp eq i64 %402, 0
  br i1 %403, label %411, label %404

404:                                              ; preds = %399
  %405 = load i64, i64* %364, align 8
  %406 = and i64 %405, 131072
  %407 = icmp ne i64 %406, 0
  %408 = and i32 %392, 16
  %409 = icmp eq i32 %408, 0
  %410 = select i1 %407, i1 true, i1 %409
  br i1 %410, label %411, label %413

411:                                              ; preds = %404, %399
  %412 = or i32 %396, 64
  br label %423

413:                                              ; preds = %404
  %414 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %358, i64 0, i32 24, i64 3, i32 1
  %415 = load i64, i64* %414, align 8
  %416 = or i64 %415, %377
  %417 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %358, i64 0, i32 24, i64 2, i32 1
  %418 = load i64, i64* %417, align 8
  %419 = or i64 %416, %418
  %420 = icmp eq i64 %419, 0
  %421 = select i1 %420, i32 0, i32 64
  %422 = or i32 %421, %396
  br label %423

423:                                              ; preds = %335, %411, %413
  %424 = phi i32 [ %396, %335 ], [ %412, %411 ], [ %422, %413 ]
  %425 = and i32 %392, -97
  %426 = or i32 %424, %425
  store i32 %426, i32* %391, align 16
  %427 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %428 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %427, i64 0, i32 40
  %429 = load i64, i64* %428, align 16
  %430 = add i64 %429, 1040
  tail call fastcc void @svm_load_seg_cache(i64 noundef %430, %struct.CPUX86State* noundef %427, i32 noundef 1)
  %431 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %432 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %431, i64 0, i32 40
  %433 = load i64, i64* %432, align 16
  %434 = add i64 %433, 1056
  %435 = tail call i32 @lduw_phys(i64 noundef %434)
  %436 = add i64 %433, 1064
  %437 = tail call i64 @ldq_phys(i64 noundef %436)
  %438 = add i64 %433, 1060
  %439 = tail call i32 @ldl_phys(i64 noundef %438)
  %440 = add i64 %433, 1058
  %441 = tail call i32 @lduw_phys(i64 noundef %440)
  %442 = shl i32 %441, 8
  %443 = and i32 %442, 65280
  %444 = shl i32 %441, 12
  %445 = and i32 %444, 15728640
  %446 = or i32 %443, %445
  %447 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %431, i64 0, i32 24, i64 2, i32 0
  store i32 %435, i32* %447, align 8
  %448 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %431, i64 0, i32 24, i64 2, i32 1
  store i64 %437, i64* %448, align 8
  %449 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %431, i64 0, i32 24, i64 2, i32 2
  store i32 %439, i32* %449, align 8
  %450 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %431, i64 0, i32 24, i64 2, i32 3
  store i32 %446, i32* %450, align 4
  %451 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %431, i64 0, i32 21
  %452 = load i32, i32* %451, align 16
  %453 = lshr exact i32 %445, 17
  %454 = and i32 %453, 32
  %455 = and i32 %452, 32768
  %456 = icmp eq i32 %455, 0
  br i1 %456, label %457, label %482

457:                                              ; preds = %423
  %458 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %431, i64 0, i32 29, i64 0
  %459 = load i64, i64* %458, align 16
  %460 = and i64 %459, 1
  %461 = icmp eq i64 %460, 0
  br i1 %461, label %470, label %462

462:                                              ; preds = %457
  %463 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %431, i64 0, i32 20
  %464 = load i64, i64* %463, align 8
  %465 = and i64 %464, 131072
  %466 = icmp ne i64 %465, 0
  %467 = and i32 %452, 16
  %468 = icmp eq i32 %467, 0
  %469 = select i1 %466, i1 true, i1 %468
  br i1 %469, label %470, label %472

470:                                              ; preds = %462, %457
  %471 = or i32 %454, 64
  br label %482

472:                                              ; preds = %462
  %473 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %431, i64 0, i32 24, i64 3, i32 1
  %474 = load i64, i64* %473, align 8
  %475 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %431, i64 0, i32 24, i64 0, i32 1
  %476 = load i64, i64* %475, align 8
  %477 = or i64 %474, %437
  %478 = or i64 %477, %476
  %479 = icmp eq i64 %478, 0
  %480 = select i1 %479, i32 0, i32 64
  %481 = or i32 %480, %454
  br label %482

482:                                              ; preds = %423, %470, %472
  %483 = phi i32 [ %454, %423 ], [ %471, %470 ], [ %481, %472 ]
  %484 = and i32 %452, -97
  %485 = or i32 %483, %484
  store i32 %485, i32* %451, align 16
  %486 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %487 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %486, i64 0, i32 40
  %488 = load i64, i64* %487, align 16
  %489 = add i64 %488, 1072
  %490 = tail call i32 @lduw_phys(i64 noundef %489)
  %491 = add i64 %488, 1080
  %492 = tail call i64 @ldq_phys(i64 noundef %491)
  %493 = add i64 %488, 1076
  %494 = tail call i32 @ldl_phys(i64 noundef %493)
  %495 = add i64 %488, 1074
  %496 = tail call i32 @lduw_phys(i64 noundef %495)
  %497 = shl i32 %496, 8
  %498 = and i32 %497, 65280
  %499 = shl i32 %496, 12
  %500 = and i32 %499, 15728640
  %501 = or i32 %498, %500
  %502 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %486, i64 0, i32 24, i64 3, i32 0
  store i32 %490, i32* %502, align 8
  %503 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %486, i64 0, i32 24, i64 3, i32 1
  store i64 %492, i64* %503, align 8
  %504 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %486, i64 0, i32 24, i64 3, i32 2
  store i32 %494, i32* %504, align 8
  %505 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %486, i64 0, i32 24, i64 3, i32 3
  store i32 %501, i32* %505, align 4
  %506 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %486, i64 0, i32 21
  %507 = load i32, i32* %506, align 16
  %508 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %486, i64 0, i32 24, i64 2, i32 3
  %509 = load i32, i32* %508, align 4
  %510 = lshr i32 %509, 17
  %511 = and i32 %510, 32
  %512 = and i32 %507, 32768
  %513 = icmp eq i32 %512, 0
  br i1 %513, label %514, label %539

514:                                              ; preds = %482
  %515 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %486, i64 0, i32 29, i64 0
  %516 = load i64, i64* %515, align 16
  %517 = and i64 %516, 1
  %518 = icmp eq i64 %517, 0
  br i1 %518, label %527, label %519

519:                                              ; preds = %514
  %520 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %486, i64 0, i32 20
  %521 = load i64, i64* %520, align 8
  %522 = and i64 %521, 131072
  %523 = icmp ne i64 %522, 0
  %524 = and i32 %507, 16
  %525 = icmp eq i32 %524, 0
  %526 = select i1 %523, i1 true, i1 %525
  br i1 %526, label %527, label %529

527:                                              ; preds = %519, %514
  %528 = or i32 %511, 64
  br label %539

529:                                              ; preds = %519
  %530 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %486, i64 0, i32 24, i64 0, i32 1
  %531 = load i64, i64* %530, align 8
  %532 = or i64 %531, %492
  %533 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %486, i64 0, i32 24, i64 2, i32 1
  %534 = load i64, i64* %533, align 8
  %535 = or i64 %532, %534
  %536 = icmp eq i64 %535, 0
  %537 = select i1 %536, i32 0, i32 64
  %538 = or i32 %537, %511
  br label %539

539:                                              ; preds = %482, %527, %529
  %540 = phi i32 [ %511, %482 ], [ %528, %527 ], [ %538, %529 ]
  %541 = and i32 %507, -97
  %542 = or i32 %540, %541
  store i32 %542, i32* %506, align 16
  %543 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %544 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %543, i64 0, i32 40
  %545 = load i64, i64* %544, align 16
  %546 = add i64 %545, 1400
  %547 = tail call i64 @ldq_phys(i64 noundef %546)
  %548 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %549 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %548, i64 0, i32 18
  store i64 %547, i64* %549, align 8
  %550 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %548, i64 0, i32 40
  %551 = load i64, i64* %550, align 16
  %552 = add i64 %551, 1496
  %553 = tail call i64 @ldq_phys(i64 noundef %552)
  %554 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %555 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %554, i64 0, i32 0, i64 4
  store i64 %553, i64* %555, align 16
  %556 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %554, i64 0, i32 40
  %557 = load i64, i64* %556, align 16
  %558 = add i64 %557, 1528
  %559 = tail call i64 @ldq_phys(i64 noundef %558)
  %560 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %561 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %560, i64 0, i32 0, i64 0
  store i64 %559, i64* %561, align 16
  %562 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %563 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %562, i64 0, i32 40
  %564 = load i64, i64* %563, align 16
  %565 = add i64 %564, 1376
  %566 = tail call i64 @ldq_phys(i64 noundef %565)
  %567 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %568 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %567, i64 0, i32 65, i64 7
  store i64 %566, i64* %568, align 8
  %569 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %567, i64 0, i32 40
  %570 = load i64, i64* %569, align 16
  %571 = add i64 %570, 1384
  %572 = tail call i64 @ldq_phys(i64 noundef %571)
  %573 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %574 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %573, i64 0, i32 65, i64 6
  store i64 %572, i64* %574, align 8
  %575 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %573, i64 0, i32 40
  %576 = load i64, i64* %575, align 16
  %577 = add i64 %576, 1227
  %578 = tail call i32 @ldub_phys(i64 noundef %577)
  %579 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %580 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 16), align 8
  %581 = load i32, i32* %580, align 4
  %582 = icmp eq i32 %581, 0
  br i1 %582, label %589, label %583, !prof !5

583:                                              ; preds = %539
  %584 = load void (i32, i32)*, void (i32, i32)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 19), align 8
  %585 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %579, i64 0, i32 21
  %586 = load i32, i32* %585, align 16
  %587 = and i32 %586, 3
  tail call void %584(i32 noundef %587, i32 noundef %578)
  %588 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br label %589

589:                                              ; preds = %539, %583
  %590 = phi %struct.CPUX86State* [ %579, %539 ], [ %588, %583 ]
  %591 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %579, i64 0, i32 21
  %592 = load i32, i32* %591, align 16
  %593 = and i32 %592, -4
  %594 = or i32 %593, %578
  store i32 %594, i32* %591, align 16
  %595 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %590, i64 0, i32 40
  %596 = load i64, i64* %595, align 16
  %597 = add i64 %596, 92
  %598 = tail call i32 @ldub_phys(i64 noundef %597)
  %599 = icmp eq i32 %598, 1
  br i1 %599, label %600, label %602

600:                                              ; preds = %589
  %601 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @tlb_flush(%struct.CPUX86State* noundef %601, i32 noundef 1)
  br label %602

602:                                              ; preds = %589, %600
  %603 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %604 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %603, i64 0, i32 22
  %605 = load i32, i32* %604, align 4
  %606 = or i32 %605, 1
  store i32 %606, i32* %604, align 4
  %607 = and i32 %317, 256
  %608 = icmp eq i32 %607, 0
  br i1 %608, label %613, label %609

609:                                              ; preds = %602
  %610 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %603, i64 0, i32 80
  %611 = load i32, i32* %610, align 16
  %612 = or i32 %611, 256
  store i32 %612, i32* %610, align 16
  br label %613

613:                                              ; preds = %609, %602
  %614 = load i32*, i32** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 16), align 8
  %615 = load i32, i32* %614, align 4
  %616 = icmp eq i32 %615, 0
  br i1 %616, label %620, label %617, !prof !5

617:                                              ; preds = %613
  %618 = load void (i32, i32)*, void (i32, i32)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 9, i32 19), align 8
  tail call void %618(i32 noundef %6, i32 noundef %578)
  %619 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br label %620

620:                                              ; preds = %617, %613
  %621 = phi %struct.CPUX86State* [ %619, %617 ], [ %603, %613 ]
  %622 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %621, i64 0, i32 40
  %623 = load i64, i64* %622, align 16
  %624 = add i64 %623, 168
  %625 = tail call i32 @ldl_phys(i64 noundef %624)
  %626 = icmp sgt i32 %625, -1
  br i1 %626, label %721, label %627

627:                                              ; preds = %620
  %628 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %629 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %628, i64 0, i32 40
  %630 = load i64, i64* %629, align 16
  %631 = add i64 %630, 172
  %632 = tail call i32 @ldl_phys(i64 noundef %631)
  %633 = load i32, i32* @loglevel, align 4
  %634 = and i32 %633, 2
  %635 = icmp eq i32 %634, 0
  br i1 %635, label %640, label %636

636:                                              ; preds = %627
  %637 = and i32 %625, 2048
  %638 = load %struct._IO_FILE*, %struct._IO_FILE** @logfile, align 8
  %639 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* noundef %638, i8* noundef getelementptr inbounds ([18 x i8], [18 x i8]* @.str.7, i64 0, i64 0), i32 noundef %637)
  br label %640

640:                                              ; preds = %636, %627
  %641 = lshr i32 %625, 8
  %642 = and i32 %641, 7
  switch i32 %642, label %709 [
    i32 0, label %643
    i32 2, label %658
    i32 3, label %675
    i32 4, label %691
  ]

643:                                              ; preds = %640
  %644 = and i32 %625, 255
  %645 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %646 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %645, i64 0, i32 99
  store i32 %644, i32* %646, align 16
  %647 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %645, i64 0, i32 62
  store i32 %632, i32* %647, align 8
  %648 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %645, i64 0, i32 63
  store i32 0, i32* %648, align 4
  %649 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %645, i64 0, i32 64
  store i64 -1, i64* %649, align 16
  %650 = load i32, i32* @loglevel, align 4
  %651 = and i32 %650, 2
  %652 = icmp eq i32 %651, 0
  br i1 %652, label %656, label %653

653:                                              ; preds = %643
  %654 = load %struct._IO_FILE*, %struct._IO_FILE** @logfile, align 8
  %655 = tail call i64 @fwrite(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0), i64 4, i64 1, %struct._IO_FILE* %654)
  br label %656

656:                                              ; preds = %653, %643
  %657 = load void (i32, i32, i32, i64, i32)*, void (i32, i32, i32, i64, i32)** getelementptr inbounds (%struct.se_libcpu_interface_t, %struct.se_libcpu_interface_t* @g_sqi, i64 0, i32 2, i32 9), align 8
  tail call void %657(i32 noundef %644, i32 noundef 0, i32 noundef 0, i64 noundef 0, i32 noundef 1)
  br label %709

658:                                              ; preds = %640
  %659 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %660 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %659, i64 0, i32 99
  store i32 2, i32* %660, align 16
  %661 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %659, i64 0, i32 62
  store i32 %632, i32* %661, align 8
  %662 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %659, i64 0, i32 63
  store i32 0, i32* %662, align 4
  %663 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %659, i64 0, i32 18
  %664 = load i64, i64* %663, align 8
  %665 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %659, i64 0, i32 64
  store i64 %664, i64* %665, align 16
  %666 = load i32, i32* @loglevel, align 4
  %667 = and i32 %666, 2
  %668 = icmp eq i32 %667, 0
  br i1 %668, label %673, label %669

669:                                              ; preds = %658
  %670 = load %struct._IO_FILE*, %struct._IO_FILE** @logfile, align 8
  %671 = tail call i64 @fwrite(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i64 0, i64 0), i64 3, i64 1, %struct._IO_FILE* %670)
  %672 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br label %673

673:                                              ; preds = %669, %658
  %674 = phi %struct.CPUX86State* [ %672, %669 ], [ %659, %658 ]
  tail call void @cpu_loop_exit(%struct.CPUX86State* noundef %674) #28
  unreachable

675:                                              ; preds = %640
  %676 = and i32 %625, 255
  %677 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %678 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %677, i64 0, i32 99
  store i32 %676, i32* %678, align 16
  %679 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %677, i64 0, i32 62
  store i32 %632, i32* %679, align 8
  %680 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %677, i64 0, i32 63
  store i32 0, i32* %680, align 4
  %681 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %677, i64 0, i32 64
  store i64 -1, i64* %681, align 16
  %682 = load i32, i32* @loglevel, align 4
  %683 = and i32 %682, 2
  %684 = icmp eq i32 %683, 0
  br i1 %684, label %689, label %685

685:                                              ; preds = %675
  %686 = load %struct._IO_FILE*, %struct._IO_FILE** @logfile, align 8
  %687 = tail call i64 @fwrite(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i64 0, i64 0), i64 5, i64 1, %struct._IO_FILE* %686)
  %688 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br label %689

689:                                              ; preds = %685, %675
  %690 = phi %struct.CPUX86State* [ %688, %685 ], [ %677, %675 ]
  tail call void @cpu_loop_exit(%struct.CPUX86State* noundef %690) #28
  unreachable

691:                                              ; preds = %640
  %692 = and i32 %625, 255
  %693 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %694 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %693, i64 0, i32 99
  store i32 %692, i32* %694, align 16
  %695 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %693, i64 0, i32 62
  store i32 %632, i32* %695, align 8
  %696 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %693, i64 0, i32 63
  store i32 1, i32* %696, align 4
  %697 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %693, i64 0, i32 18
  %698 = load i64, i64* %697, align 8
  %699 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %693, i64 0, i32 64
  store i64 %698, i64* %699, align 16
  %700 = load i32, i32* @loglevel, align 4
  %701 = and i32 %700, 2
  %702 = icmp eq i32 %701, 0
  br i1 %702, label %707, label %703

703:                                              ; preds = %691
  %704 = load %struct._IO_FILE*, %struct._IO_FILE** @logfile, align 8
  %705 = tail call i64 @fwrite(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i64 0, i64 0), i64 4, i64 1, %struct._IO_FILE* %704)
  %706 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br label %707

707:                                              ; preds = %703, %691
  %708 = phi %struct.CPUX86State* [ %706, %703 ], [ %693, %691 ]
  tail call void @cpu_loop_exit(%struct.CPUX86State* noundef %708) #28
  unreachable

709:                                              ; preds = %656, %640
  %710 = load i32, i32* @loglevel, align 4
  %711 = and i32 %710, 2
  %712 = icmp eq i32 %711, 0
  br i1 %712, label %721, label %713

713:                                              ; preds = %709
  %714 = load %struct._IO_FILE*, %struct._IO_FILE** @logfile, align 8
  %715 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %716 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %715, i64 0, i32 99
  %717 = load i32, i32* %716, align 16
  %718 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %715, i64 0, i32 62
  %719 = load i32, i32* %718, align 8
  %720 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* noundef %714, i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.12, i64 0, i64 0), i32 noundef %717, i32 noundef %719)
  br label %721

721:                                              ; preds = %709, %713, %620
  ret void
}

declare void @tlb_flush(%struct.CPUX86State* noundef, i32 noundef) local_unnamed_addr #9

; Function Attrs: noreturn uwtable
define void @helper_vmmcall() local_unnamed_addr #4 {
  tail call void @helper_svm_check_intercept_param(i32 noundef 129, i64 noundef 0)
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @raise_exception_ra(%struct.CPUX86State* noundef %1, i32 noundef 6, i64 noundef 0) #28
  unreachable
}

; Function Attrs: uwtable
define void @helper_vmload(i32 noundef %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 21
  %4 = load i32, i32* %3, align 16
  %5 = and i32 %4, 2097152
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %13, label %7, !prof !5

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 42
  %9 = load i64, i64* %8, align 16
  %10 = and i64 %9, 17179869184
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %13, label %12

12:                                               ; preds = %7
  tail call void @helper_vmexit(i32 noundef 130, i64 noundef 0)
  unreachable

13:                                               ; preds = %1, %7
  %14 = icmp eq i32 %0, 2
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 0, i64 0
  %16 = load i64, i64* %15, align 16
  %17 = and i64 %16, 4294967295
  %18 = select i1 %14, i64 %16, i64 %17
  %19 = load i32, i32* @loglevel, align 4
  %20 = and i32 %19, 2
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %24

22:                                               ; preds = %13
  %23 = add i64 %18, 1096
  br label %33

24:                                               ; preds = %13
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @logfile, align 8
  %26 = add i64 %18, 1096
  %27 = tail call i64 @ldq_phys(i64 noundef %26)
  %28 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %29 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %28, i64 0, i32 24, i64 4, i32 1
  %30 = load i64, i64* %29, align 8
  %31 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* noundef %25, i8* noundef getelementptr inbounds ([36 x i8], [36 x i8]* @.str.13, i64 0, i64 0), i64 noundef %18, i64 noundef %27, i64 noundef %30)
  %32 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br label %33

33:                                               ; preds = %22, %24
  %34 = phi i64 [ %23, %22 ], [ %26, %24 ]
  %35 = phi %struct.CPUX86State* [ %2, %22 ], [ %32, %24 ]
  %36 = add i64 %18, 1088
  %37 = tail call i32 @lduw_phys(i64 noundef %36)
  %38 = tail call i64 @ldq_phys(i64 noundef %34)
  %39 = add i64 %18, 1092
  %40 = tail call i32 @ldl_phys(i64 noundef %39)
  %41 = add i64 %18, 1090
  %42 = tail call i32 @lduw_phys(i64 noundef %41)
  %43 = shl i32 %42, 8
  %44 = and i32 %43, 65280
  %45 = shl i32 %42, 12
  %46 = and i32 %45, 15728640
  %47 = or i32 %44, %46
  %48 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %35, i64 0, i32 24, i64 4, i32 0
  store i32 %37, i32* %48, align 8
  %49 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %35, i64 0, i32 24, i64 4, i32 1
  store i64 %38, i64* %49, align 8
  %50 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %35, i64 0, i32 24, i64 4, i32 2
  store i32 %40, i32* %50, align 8
  %51 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %35, i64 0, i32 24, i64 4, i32 3
  store i32 %47, i32* %51, align 4
  %52 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %35, i64 0, i32 21
  %53 = load i32, i32* %52, align 16
  %54 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %35, i64 0, i32 24, i64 2, i32 3
  %55 = load i32, i32* %54, align 4
  %56 = lshr i32 %55, 17
  %57 = and i32 %56, 32
  %58 = and i32 %53, 32768
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %87

60:                                               ; preds = %33
  %61 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %35, i64 0, i32 29, i64 0
  %62 = load i64, i64* %61, align 16
  %63 = and i64 %62, 1
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %73, label %65

65:                                               ; preds = %60
  %66 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %35, i64 0, i32 20
  %67 = load i64, i64* %66, align 8
  %68 = and i64 %67, 131072
  %69 = icmp ne i64 %68, 0
  %70 = and i32 %53, 16
  %71 = icmp eq i32 %70, 0
  %72 = select i1 %69, i1 true, i1 %71
  br i1 %72, label %73, label %75

73:                                               ; preds = %65, %60
  %74 = or i32 %57, 64
  br label %87

75:                                               ; preds = %65
  %76 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %35, i64 0, i32 24, i64 3, i32 1
  %77 = load i64, i64* %76, align 8
  %78 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %35, i64 0, i32 24, i64 0, i32 1
  %79 = load i64, i64* %78, align 8
  %80 = or i64 %79, %77
  %81 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %35, i64 0, i32 24, i64 2, i32 1
  %82 = load i64, i64* %81, align 8
  %83 = or i64 %80, %82
  %84 = icmp eq i64 %83, 0
  %85 = select i1 %84, i32 0, i32 64
  %86 = or i32 %85, %57
  br label %87

87:                                               ; preds = %33, %73, %75
  %88 = phi i32 [ %57, %33 ], [ %74, %73 ], [ %86, %75 ]
  %89 = and i32 %53, -97
  %90 = or i32 %88, %89
  store i32 %90, i32* %52, align 16
  %91 = add i64 %18, 1104
  %92 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %93 = tail call i32 @lduw_phys(i64 noundef %91)
  %94 = add i64 %18, 1112
  %95 = tail call i64 @ldq_phys(i64 noundef %94)
  %96 = add i64 %18, 1108
  %97 = tail call i32 @ldl_phys(i64 noundef %96)
  %98 = add i64 %18, 1106
  %99 = tail call i32 @lduw_phys(i64 noundef %98)
  %100 = shl i32 %99, 8
  %101 = and i32 %100, 65280
  %102 = shl i32 %99, 12
  %103 = and i32 %102, 15728640
  %104 = or i32 %101, %103
  %105 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %92, i64 0, i32 24, i64 5, i32 0
  store i32 %93, i32* %105, align 8
  %106 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %92, i64 0, i32 24, i64 5, i32 1
  store i64 %95, i64* %106, align 8
  %107 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %92, i64 0, i32 24, i64 5, i32 2
  store i32 %97, i32* %107, align 8
  %108 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %92, i64 0, i32 24, i64 5, i32 3
  store i32 %104, i32* %108, align 4
  %109 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %92, i64 0, i32 21
  %110 = load i32, i32* %109, align 16
  %111 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %92, i64 0, i32 24, i64 2, i32 3
  %112 = load i32, i32* %111, align 4
  %113 = lshr i32 %112, 17
  %114 = and i32 %113, 32
  %115 = and i32 %110, 32768
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %117, label %144

117:                                              ; preds = %87
  %118 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %92, i64 0, i32 29, i64 0
  %119 = load i64, i64* %118, align 16
  %120 = and i64 %119, 1
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %130, label %122

122:                                              ; preds = %117
  %123 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %92, i64 0, i32 20
  %124 = load i64, i64* %123, align 8
  %125 = and i64 %124, 131072
  %126 = icmp ne i64 %125, 0
  %127 = and i32 %110, 16
  %128 = icmp eq i32 %127, 0
  %129 = select i1 %126, i1 true, i1 %128
  br i1 %129, label %130, label %132

130:                                              ; preds = %122, %117
  %131 = or i32 %114, 64
  br label %144

132:                                              ; preds = %122
  %133 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %92, i64 0, i32 24, i64 3, i32 1
  %134 = load i64, i64* %133, align 8
  %135 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %92, i64 0, i32 24, i64 0, i32 1
  %136 = load i64, i64* %135, align 8
  %137 = or i64 %136, %134
  %138 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %92, i64 0, i32 24, i64 2, i32 1
  %139 = load i64, i64* %138, align 8
  %140 = or i64 %137, %139
  %141 = icmp eq i64 %140, 0
  %142 = select i1 %141, i32 0, i32 64
  %143 = or i32 %142, %114
  br label %144

144:                                              ; preds = %87, %130, %132
  %145 = phi i32 [ %114, %87 ], [ %131, %130 ], [ %143, %132 ]
  %146 = and i32 %110, -97
  %147 = or i32 %145, %146
  store i32 %147, i32* %109, align 16
  %148 = add i64 %18, 1168
  %149 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %150 = tail call i32 @lduw_phys(i64 noundef %148)
  %151 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %149, i64 0, i32 26, i32 0
  store i32 %150, i32* %151, align 8
  %152 = add i64 %18, 1176
  %153 = tail call i64 @ldq_phys(i64 noundef %152)
  %154 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %149, i64 0, i32 26, i32 1
  store i64 %153, i64* %154, align 8
  %155 = add i64 %18, 1172
  %156 = tail call i32 @ldl_phys(i64 noundef %155)
  %157 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %149, i64 0, i32 26, i32 2
  store i32 %156, i32* %157, align 8
  %158 = add i64 %18, 1170
  %159 = tail call i32 @lduw_phys(i64 noundef %158)
  %160 = shl i32 %159, 8
  %161 = and i32 %160, 65280
  %162 = shl i32 %159, 12
  %163 = and i32 %162, 15728640
  %164 = or i32 %161, %163
  %165 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %149, i64 0, i32 26, i32 3
  store i32 %164, i32* %165, align 4
  %166 = add i64 %18, 1136
  %167 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %168 = tail call i32 @lduw_phys(i64 noundef %166)
  %169 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %167, i64 0, i32 25, i32 0
  store i32 %168, i32* %169, align 8
  %170 = add i64 %18, 1144
  %171 = tail call i64 @ldq_phys(i64 noundef %170)
  %172 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %167, i64 0, i32 25, i32 1
  store i64 %171, i64* %172, align 8
  %173 = add i64 %18, 1140
  %174 = tail call i32 @ldl_phys(i64 noundef %173)
  %175 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %167, i64 0, i32 25, i32 2
  store i32 %174, i32* %175, align 8
  %176 = add i64 %18, 1138
  %177 = tail call i32 @lduw_phys(i64 noundef %176)
  %178 = shl i32 %177, 8
  %179 = and i32 %178, 65280
  %180 = shl i32 %177, 12
  %181 = and i32 %180, 15728640
  %182 = or i32 %179, %181
  %183 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %167, i64 0, i32 25, i32 3
  store i32 %182, i32* %183, align 4
  %184 = add i64 %18, 1568
  %185 = tail call i64 @ldq_phys(i64 noundef %184)
  %186 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %187 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %186, i64 0, i32 54
  store i64 %185, i64* %187, align 8
  %188 = add i64 %18, 1544
  %189 = tail call i64 @ldq_phys(i64 noundef %188)
  %190 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %191 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %190, i64 0, i32 51
  store i64 %189, i64* %191, align 16
  %192 = add i64 %18, 1552
  %193 = tail call i64 @ldq_phys(i64 noundef %192)
  %194 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %195 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %194, i64 0, i32 52
  store i64 %193, i64* %195, align 8
  %196 = add i64 %18, 1560
  %197 = tail call i64 @ldq_phys(i64 noundef %196)
  %198 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %199 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %198, i64 0, i32 53
  store i64 %197, i64* %199, align 16
  %200 = add i64 %18, 1536
  %201 = tail call i64 @ldq_phys(i64 noundef %200)
  %202 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %203 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %202, i64 0, i32 38
  store i64 %201, i64* %203, align 16
  %204 = add i64 %18, 1576
  %205 = tail call i64 @ldq_phys(i64 noundef %204)
  %206 = trunc i64 %205 to i32
  %207 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %208 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %207, i64 0, i32 34
  store i32 %206, i32* %208, align 16
  %209 = add i64 %18, 1584
  %210 = tail call i64 @ldq_phys(i64 noundef %209)
  %211 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %212 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %211, i64 0, i32 35
  store i64 %210, i64* %212, align 8
  %213 = add i64 %18, 1592
  %214 = tail call i64 @ldq_phys(i64 noundef %213)
  %215 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %216 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %215, i64 0, i32 36
  store i64 %214, i64* %216, align 16
  ret void
}

; Function Attrs: uwtable
define void @helper_vmsave(i32 noundef %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 21
  %4 = load i32, i32* %3, align 16
  %5 = and i32 %4, 2097152
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %13, label %7, !prof !5

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 42
  %9 = load i64, i64* %8, align 16
  %10 = and i64 %9, 34359738368
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %13, label %12

12:                                               ; preds = %7
  tail call void @helper_vmexit(i32 noundef 131, i64 noundef 0)
  unreachable

13:                                               ; preds = %1, %7
  %14 = icmp eq i32 %0, 2
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 0, i64 0
  %16 = load i64, i64* %15, align 16
  %17 = and i64 %16, 4294967295
  %18 = select i1 %14, i64 %16, i64 %17
  %19 = load i32, i32* @loglevel, align 4
  %20 = and i32 %19, 2
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %24

22:                                               ; preds = %13
  %23 = add i64 %18, 1096
  br label %33

24:                                               ; preds = %13
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @logfile, align 8
  %26 = add i64 %18, 1096
  %27 = tail call i64 @ldq_phys(i64 noundef %26)
  %28 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %29 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %28, i64 0, i32 24, i64 4, i32 1
  %30 = load i64, i64* %29, align 8
  %31 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* noundef %25, i8* noundef getelementptr inbounds ([36 x i8], [36 x i8]* @.str.14, i64 0, i64 0), i64 noundef %18, i64 noundef %27, i64 noundef %30)
  %32 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br label %33

33:                                               ; preds = %22, %24
  %34 = phi i64 [ %23, %22 ], [ %26, %24 ]
  %35 = phi %struct.CPUX86State* [ %2, %22 ], [ %32, %24 ]
  %36 = add i64 %18, 1088
  %37 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %35, i64 0, i32 24, i64 4, i32 0
  %38 = load i32, i32* %37, align 8
  tail call void @stw_phys(i64 noundef %36, i32 noundef %38)
  %39 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %35, i64 0, i32 24, i64 4, i32 1
  %40 = load i64, i64* %39, align 8
  tail call void @stq_phys(i64 noundef %34, i64 noundef %40)
  %41 = add i64 %18, 1092
  %42 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %35, i64 0, i32 24, i64 4, i32 2
  %43 = load i32, i32* %42, align 8
  tail call void @stl_phys(i64 noundef %41, i32 noundef %43)
  %44 = add i64 %18, 1090
  %45 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %35, i64 0, i32 24, i64 4, i32 3
  %46 = load i32, i32* %45, align 4
  %47 = lshr i32 %46, 8
  %48 = and i32 %47, 255
  %49 = lshr i32 %46, 12
  %50 = and i32 %49, 3840
  %51 = or i32 %48, %50
  tail call void @stw_phys(i64 noundef %44, i32 noundef %51)
  %52 = add i64 %18, 1104
  %53 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %54 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %53, i64 0, i32 24, i64 5, i32 0
  %55 = load i32, i32* %54, align 8
  tail call void @stw_phys(i64 noundef %52, i32 noundef %55)
  %56 = add i64 %18, 1112
  %57 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %53, i64 0, i32 24, i64 5, i32 1
  %58 = load i64, i64* %57, align 8
  tail call void @stq_phys(i64 noundef %56, i64 noundef %58)
  %59 = add i64 %18, 1108
  %60 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %53, i64 0, i32 24, i64 5, i32 2
  %61 = load i32, i32* %60, align 8
  tail call void @stl_phys(i64 noundef %59, i32 noundef %61)
  %62 = add i64 %18, 1106
  %63 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %53, i64 0, i32 24, i64 5, i32 3
  %64 = load i32, i32* %63, align 4
  %65 = lshr i32 %64, 8
  %66 = and i32 %65, 255
  %67 = lshr i32 %64, 12
  %68 = and i32 %67, 3840
  %69 = or i32 %66, %68
  tail call void @stw_phys(i64 noundef %62, i32 noundef %69)
  %70 = add i64 %18, 1168
  %71 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %72 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %71, i64 0, i32 26, i32 0
  %73 = load i32, i32* %72, align 8
  tail call void @stw_phys(i64 noundef %70, i32 noundef %73)
  %74 = add i64 %18, 1176
  %75 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %71, i64 0, i32 26, i32 1
  %76 = load i64, i64* %75, align 8
  tail call void @stq_phys(i64 noundef %74, i64 noundef %76)
  %77 = add i64 %18, 1172
  %78 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %71, i64 0, i32 26, i32 2
  %79 = load i32, i32* %78, align 8
  tail call void @stl_phys(i64 noundef %77, i32 noundef %79)
  %80 = add i64 %18, 1170
  %81 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %71, i64 0, i32 26, i32 3
  %82 = load i32, i32* %81, align 4
  %83 = lshr i32 %82, 8
  %84 = and i32 %83, 255
  %85 = lshr i32 %82, 12
  %86 = and i32 %85, 3840
  %87 = or i32 %84, %86
  tail call void @stw_phys(i64 noundef %80, i32 noundef %87)
  %88 = add i64 %18, 1136
  %89 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %90 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %89, i64 0, i32 25, i32 0
  %91 = load i32, i32* %90, align 8
  tail call void @stw_phys(i64 noundef %88, i32 noundef %91)
  %92 = add i64 %18, 1144
  %93 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %89, i64 0, i32 25, i32 1
  %94 = load i64, i64* %93, align 8
  tail call void @stq_phys(i64 noundef %92, i64 noundef %94)
  %95 = add i64 %18, 1140
  %96 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %89, i64 0, i32 25, i32 2
  %97 = load i32, i32* %96, align 8
  tail call void @stl_phys(i64 noundef %95, i32 noundef %97)
  %98 = add i64 %18, 1138
  %99 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %89, i64 0, i32 25, i32 3
  %100 = load i32, i32* %99, align 4
  %101 = lshr i32 %100, 8
  %102 = and i32 %101, 255
  %103 = lshr i32 %100, 12
  %104 = and i32 %103, 3840
  %105 = or i32 %102, %104
  tail call void @stw_phys(i64 noundef %98, i32 noundef %105)
  %106 = add i64 %18, 1568
  %107 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %108 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %107, i64 0, i32 54
  %109 = load i64, i64* %108, align 8
  tail call void @stq_phys(i64 noundef %106, i64 noundef %109)
  %110 = add i64 %18, 1544
  %111 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %112 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %111, i64 0, i32 51
  %113 = load i64, i64* %112, align 16
  tail call void @stq_phys(i64 noundef %110, i64 noundef %113)
  %114 = add i64 %18, 1552
  %115 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %116 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %115, i64 0, i32 52
  %117 = load i64, i64* %116, align 8
  tail call void @stq_phys(i64 noundef %114, i64 noundef %117)
  %118 = add i64 %18, 1560
  %119 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %120 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %119, i64 0, i32 53
  %121 = load i64, i64* %120, align 16
  tail call void @stq_phys(i64 noundef %118, i64 noundef %121)
  %122 = add i64 %18, 1536
  %123 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %124 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %123, i64 0, i32 38
  %125 = load i64, i64* %124, align 16
  tail call void @stq_phys(i64 noundef %122, i64 noundef %125)
  %126 = add i64 %18, 1576
  %127 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %128 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %127, i64 0, i32 34
  %129 = load i32, i32* %128, align 16
  %130 = zext i32 %129 to i64
  tail call void @stq_phys(i64 noundef %126, i64 noundef %130)
  %131 = add i64 %18, 1584
  %132 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %133 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %132, i64 0, i32 35
  %134 = load i64, i64* %133, align 8
  tail call void @stq_phys(i64 noundef %131, i64 noundef %134)
  %135 = add i64 %18, 1592
  %136 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %137 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %136, i64 0, i32 36
  %138 = load i64, i64* %137, align 16
  tail call void @stq_phys(i64 noundef %135, i64 noundef %138)
  ret void
}

; Function Attrs: uwtable
define void @helper_stgi() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 21
  %3 = load i32, i32* %2, align 16
  %4 = and i32 %3, 2097152
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %12, label %6, !prof !5

6:                                                ; preds = %0
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 42
  %8 = load i64, i64* %7, align 16
  %9 = and i64 %8, 68719476736
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %12, label %11

11:                                               ; preds = %6
  tail call void @helper_vmexit(i32 noundef 132, i64 noundef 0)
  unreachable

12:                                               ; preds = %0, %6
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 22
  %14 = load i32, i32* %13, align 4
  %15 = or i32 %14, 1
  store i32 %15, i32* %13, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_clgi() local_unnamed_addr #3 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 21
  %3 = load i32, i32* %2, align 16
  %4 = and i32 %3, 2097152
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %12, label %6, !prof !5

6:                                                ; preds = %0
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 42
  %8 = load i64, i64* %7, align 16
  %9 = and i64 %8, 137438953472
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %12, label %11

11:                                               ; preds = %6
  tail call void @helper_vmexit(i32 noundef 133, i64 noundef 0)
  unreachable

12:                                               ; preds = %0, %6
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 22
  %14 = load i32, i32* %13, align 4
  %15 = and i32 %14, -2
  store i32 %15, i32* %13, align 4
  ret void
}

; Function Attrs: noreturn uwtable
define void @helper_skinit() local_unnamed_addr #4 {
  tail call void @helper_svm_check_intercept_param(i32 noundef 134, i64 noundef 0)
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  tail call void @raise_exception_ra(%struct.CPUX86State* noundef %1, i32 noundef 6, i64 noundef 0) #28
  unreachable
}

; Function Attrs: uwtable
define void @helper_invlpga(i32 noundef %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 21
  %4 = load i32, i32* %3, align 16
  %5 = and i32 %4, 2097152
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %13, label %7, !prof !5

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 42
  %9 = load i64, i64* %8, align 16
  %10 = and i64 %9, 67108864
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %13, label %12

12:                                               ; preds = %7
  tail call void @helper_vmexit(i32 noundef 122, i64 noundef 0)
  unreachable

13:                                               ; preds = %1, %7
  %14 = icmp eq i32 %0, 2
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 0, i64 0
  %16 = load i64, i64* %15, align 16
  %17 = and i64 %16, 4294967295
  %18 = select i1 %14, i64 %16, i64 %17
  tail call void @tlb_flush_page(%struct.CPUX86State* noundef nonnull %2, i64 noundef %18)
  ret void
}

; Function Attrs: uwtable
define void @svm_check_intercept(%struct.CPUX86State* noundef %0, i32 noundef %1) local_unnamed_addr #3 {
  %3 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  store %struct.CPUX86State* %0, %struct.CPUX86State** @env, align 8
  tail call void @helper_svm_check_intercept_param(i32 noundef %1, i64 noundef 0)
  store %struct.CPUX86State* %3, %struct.CPUX86State** @env, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_svm_check_io(i32 noundef %0, i32 noundef %1, i32 noundef %2) local_unnamed_addr #3 {
  %4 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 42
  %6 = load i64, i64* %5, align 16
  %7 = and i64 %6, 134217728
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %38, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 40
  %11 = load i64, i64* %10, align 16
  %12 = add i64 %11, 64
  %13 = tail call i64 @ldq_phys(i64 noundef %12)
  %14 = lshr i32 %1, 4
  %15 = and i32 %14, 7
  %16 = shl nsw i32 -1, %15
  %17 = xor i32 %16, -1
  %18 = lshr i32 %0, 3
  %19 = zext i32 %18 to i64
  %20 = add i64 %13, %19
  %21 = tail call i32 @lduw_phys(i64 noundef %20)
  %22 = and i32 %0, 7
  %23 = shl i32 %17, %22
  %24 = and i32 %21, %23
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %38, label %26

26:                                               ; preds = %9
  %27 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %28 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %27, i64 0, i32 40
  %29 = load i64, i64* %28, align 16
  %30 = add i64 %29, 128
  %31 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %27, i64 0, i32 18
  %32 = load i64, i64* %31, align 8
  %33 = zext i32 %2 to i64
  %34 = add i64 %32, %33
  tail call void @stq_phys(i64 noundef %30, i64 noundef %34)
  %35 = shl i32 %0, 16
  %36 = or i32 %35, %1
  %37 = zext i32 %36 to i64
  tail call void @helper_vmexit(i32 noundef 123, i64 noundef %37)
  unreachable

38:                                               ; preds = %9, %3
  ret void
}

; Function Attrs: uwtable
define void @helper_ldmxcsr(i32 noundef %0) local_unnamed_addr #3 {
  %2 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 14
  store i32 %0, i32* %3, align 8
  %4 = lshr i32 %0, 13
  %5 = and i32 %4, 3
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %2, i64 0, i32 13
  tail call void @set_float_rounding_mode(i32 noundef %5, %struct.float_status* noundef nonnull %6)
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 14
  %9 = load i32, i32* %8, align 8
  %10 = trunc i32 %9 to i8
  %11 = lshr i8 %10, 6
  %12 = and i8 %11, 1
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13, i32 5
  store i8 %12, i8* %13, align 1
  %14 = lshr i32 %9, 15
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 10, i32 4
  store i8 %16, i8* %17, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_enter_mmx() local_unnamed_addr #2 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 5
  store i32 0, i32* %2, align 16
  %3 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 8, i64 0
  %4 = bitcast i8* %3 to i64*
  store i64 0, i64* %4, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_emms() local_unnamed_addr #2 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 8, i64 0
  %3 = bitcast i8* %2 to i64*
  store i64 72340172838076673, i64* %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_movq(i8* nocapture noundef writeonly %0, i8* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast i8* %1 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = bitcast i8* %0 to i64*
  store i64 %4, i64* %5, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_psrlw_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr %union.MMXReg, %union.MMXReg* %1, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp ugt i64 %4, 15
  br i1 %5, label %6, label %8

6:                                                ; preds = %2
  %7 = getelementptr %union.MMXReg, %union.MMXReg* %0, i64 0, i32 0
  store i64 0, i64* %7, align 8
  br label %31

8:                                                ; preds = %2
  %9 = trunc i64 %4 to i32
  %10 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %11 = bitcast %union.MMXReg* %0 to i16*
  %12 = load i16, i16* %11, align 8
  %13 = zext i16 %12 to i32
  %14 = lshr i32 %13, %9
  %15 = trunc i32 %14 to i16
  store i16 %15, i16* %11, align 8
  %16 = getelementptr inbounds [4 x i16], [4 x i16]* %10, i64 0, i64 1
  %17 = load i16, i16* %16, align 2
  %18 = zext i16 %17 to i32
  %19 = lshr i32 %18, %9
  %20 = trunc i32 %19 to i16
  store i16 %20, i16* %16, align 2
  %21 = getelementptr inbounds [4 x i16], [4 x i16]* %10, i64 0, i64 2
  %22 = load i16, i16* %21, align 4
  %23 = zext i16 %22 to i32
  %24 = lshr i32 %23, %9
  %25 = trunc i32 %24 to i16
  store i16 %25, i16* %21, align 4
  %26 = getelementptr inbounds [4 x i16], [4 x i16]* %10, i64 0, i64 3
  %27 = load i16, i16* %26, align 2
  %28 = zext i16 %27 to i32
  %29 = lshr i32 %28, %9
  %30 = trunc i32 %29 to i16
  store i16 %30, i16* %26, align 2
  br label %31

31:                                               ; preds = %8, %6
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_psraw_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr %union.MMXReg, %union.MMXReg* %1, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp ult i64 %4, 15
  %6 = select i1 %5, i64 %4, i64 15
  %7 = trunc i64 %6 to i32
  %8 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %9 = bitcast %union.MMXReg* %0 to i16*
  %10 = load i16, i16* %9, align 8
  %11 = sext i16 %10 to i32
  %12 = ashr i32 %11, %7
  %13 = trunc i32 %12 to i16
  store i16 %13, i16* %9, align 8
  %14 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 1
  %15 = load i16, i16* %14, align 2
  %16 = sext i16 %15 to i32
  %17 = ashr i32 %16, %7
  %18 = trunc i32 %17 to i16
  store i16 %18, i16* %14, align 2
  %19 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 2
  %20 = load i16, i16* %19, align 4
  %21 = sext i16 %20 to i32
  %22 = ashr i32 %21, %7
  %23 = trunc i32 %22 to i16
  store i16 %23, i16* %19, align 4
  %24 = getelementptr inbounds [4 x i16], [4 x i16]* %8, i64 0, i64 3
  %25 = load i16, i16* %24, align 2
  %26 = sext i16 %25 to i32
  %27 = ashr i32 %26, %7
  %28 = trunc i32 %27 to i16
  store i16 %28, i16* %24, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_psllw_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr %union.MMXReg, %union.MMXReg* %1, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp ugt i64 %4, 15
  br i1 %5, label %6, label %8

6:                                                ; preds = %2
  %7 = getelementptr %union.MMXReg, %union.MMXReg* %0, i64 0, i32 0
  store i64 0, i64* %7, align 8
  br label %31

8:                                                ; preds = %2
  %9 = trunc i64 %4 to i32
  %10 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %11 = bitcast %union.MMXReg* %0 to i16*
  %12 = load i16, i16* %11, align 8
  %13 = zext i16 %12 to i32
  %14 = shl nuw nsw i32 %13, %9
  %15 = trunc i32 %14 to i16
  store i16 %15, i16* %11, align 8
  %16 = getelementptr inbounds [4 x i16], [4 x i16]* %10, i64 0, i64 1
  %17 = load i16, i16* %16, align 2
  %18 = zext i16 %17 to i32
  %19 = shl nuw nsw i32 %18, %9
  %20 = trunc i32 %19 to i16
  store i16 %20, i16* %16, align 2
  %21 = getelementptr inbounds [4 x i16], [4 x i16]* %10, i64 0, i64 2
  %22 = load i16, i16* %21, align 4
  %23 = zext i16 %22 to i32
  %24 = shl nuw nsw i32 %23, %9
  %25 = trunc i32 %24 to i16
  store i16 %25, i16* %21, align 4
  %26 = getelementptr inbounds [4 x i16], [4 x i16]* %10, i64 0, i64 3
  %27 = load i16, i16* %26, align 2
  %28 = zext i16 %27 to i32
  %29 = shl nuw nsw i32 %28, %9
  %30 = trunc i32 %29 to i16
  store i16 %30, i16* %26, align 2
  br label %31

31:                                               ; preds = %8, %6
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_psrld_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr %union.MMXReg, %union.MMXReg* %1, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp ugt i64 %4, 31
  br i1 %5, label %6, label %8

6:                                                ; preds = %2
  %7 = getelementptr %union.MMXReg, %union.MMXReg* %0, i64 0, i32 0
  store i64 0, i64* %7, align 8
  br label %17

8:                                                ; preds = %2
  %9 = trunc i64 %4 to i32
  %10 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %11 = bitcast %union.MMXReg* %0 to i32*
  %12 = load i32, i32* %11, align 8
  %13 = lshr i32 %12, %9
  store i32 %13, i32* %11, align 8
  %14 = getelementptr inbounds [2 x i32], [2 x i32]* %10, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = lshr i32 %15, %9
  store i32 %16, i32* %14, align 4
  br label %17

17:                                               ; preds = %8, %6
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_psrad_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr %union.MMXReg, %union.MMXReg* %1, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp ult i64 %4, 31
  %6 = select i1 %5, i64 %4, i64 31
  %7 = trunc i64 %6 to i32
  %8 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %9 = bitcast %union.MMXReg* %0 to i32*
  %10 = load i32, i32* %9, align 8
  %11 = ashr i32 %10, %7
  store i32 %11, i32* %9, align 8
  %12 = getelementptr inbounds [2 x i32], [2 x i32]* %8, i64 0, i64 1
  %13 = load i32, i32* %12, align 4
  %14 = ashr i32 %13, %7
  store i32 %14, i32* %12, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pslld_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr %union.MMXReg, %union.MMXReg* %1, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp ugt i64 %4, 31
  br i1 %5, label %6, label %8

6:                                                ; preds = %2
  %7 = getelementptr %union.MMXReg, %union.MMXReg* %0, i64 0, i32 0
  store i64 0, i64* %7, align 8
  br label %17

8:                                                ; preds = %2
  %9 = trunc i64 %4 to i32
  %10 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %11 = bitcast %union.MMXReg* %0 to i32*
  %12 = load i32, i32* %11, align 8
  %13 = shl i32 %12, %9
  store i32 %13, i32* %11, align 8
  %14 = getelementptr inbounds [2 x i32], [2 x i32]* %10, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = shl i32 %15, %9
  store i32 %16, i32* %14, align 4
  br label %17

17:                                               ; preds = %8, %6
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_psrlq_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr %union.MMXReg, %union.MMXReg* %1, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp ugt i64 %4, 63
  %6 = getelementptr %union.MMXReg, %union.MMXReg* %0, i64 0, i32 0
  br i1 %5, label %10, label %7

7:                                                ; preds = %2
  %8 = load i64, i64* %6, align 8
  %9 = lshr i64 %8, %4
  br label %10

10:                                               ; preds = %2, %7
  %11 = phi i64 [ %9, %7 ], [ 0, %2 ]
  store i64 %11, i64* %6, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_psllq_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr %union.MMXReg, %union.MMXReg* %1, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp ugt i64 %4, 63
  %6 = getelementptr %union.MMXReg, %union.MMXReg* %0, i64 0, i32 0
  br i1 %5, label %10, label %7

7:                                                ; preds = %2
  %8 = load i64, i64* %6, align 8
  %9 = shl i64 %8, %4
  br label %10

10:                                               ; preds = %2, %7
  %11 = phi i64 [ %9, %7 ], [ 0, %2 ]
  store i64 %11, i64* %6, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_paddb_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [8 x i8]*
  %4 = bitcast %union.MMXReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [8 x i8]*
  %7 = bitcast %union.MMXReg* %1 to i8*
  %8 = load i8, i8* %7, align 8
  %9 = add i8 %8, %5
  store i8 %9, i8* %4, align 8
  %10 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 1
  %11 = load i8, i8* %10, align 1
  %12 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 1
  %13 = load i8, i8* %12, align 1
  %14 = add i8 %13, %11
  store i8 %14, i8* %10, align 1
  %15 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 2
  %16 = load i8, i8* %15, align 2
  %17 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 2
  %18 = load i8, i8* %17, align 2
  %19 = add i8 %18, %16
  store i8 %19, i8* %15, align 2
  %20 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 3
  %21 = load i8, i8* %20, align 1
  %22 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 3
  %23 = load i8, i8* %22, align 1
  %24 = add i8 %23, %21
  store i8 %24, i8* %20, align 1
  %25 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 4
  %26 = load i8, i8* %25, align 4
  %27 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 4
  %28 = load i8, i8* %27, align 4
  %29 = add i8 %28, %26
  store i8 %29, i8* %25, align 4
  %30 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 5
  %31 = load i8, i8* %30, align 1
  %32 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 5
  %33 = load i8, i8* %32, align 1
  %34 = add i8 %33, %31
  store i8 %34, i8* %30, align 1
  %35 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 6
  %36 = load i8, i8* %35, align 2
  %37 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 6
  %38 = load i8, i8* %37, align 2
  %39 = add i8 %38, %36
  store i8 %39, i8* %35, align 2
  %40 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 7
  %41 = load i8, i8* %40, align 1
  %42 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 7
  %43 = load i8, i8* %42, align 1
  %44 = add i8 %43, %41
  store i8 %44, i8* %40, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_paddw_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %7 = bitcast %union.MMXReg* %1 to i16*
  %8 = load i16, i16* %7, align 8
  %9 = add i16 %8, %5
  store i16 %9, i16* %4, align 8
  %10 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %11 = load i16, i16* %10, align 2
  %12 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 1
  %13 = load i16, i16* %12, align 2
  %14 = add i16 %13, %11
  store i16 %14, i16* %10, align 2
  %15 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %16 = load i16, i16* %15, align 4
  %17 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 2
  %18 = load i16, i16* %17, align 4
  %19 = add i16 %18, %16
  store i16 %19, i16* %15, align 4
  %20 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %21 = load i16, i16* %20, align 2
  %22 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 3
  %23 = load i16, i16* %22, align 2
  %24 = add i16 %23, %21
  store i16 %24, i16* %20, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_paddl_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %7 = bitcast %union.MMXReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = add i32 %8, %5
  store i32 %9, i32* %4, align 8
  %10 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 1
  %13 = load i32, i32* %12, align 4
  %14 = add i32 %13, %11
  store i32 %14, i32* %10, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_paddq_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr %union.MMXReg, %union.MMXReg* %0, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr %union.MMXReg, %union.MMXReg* %1, i64 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, %4
  store i64 %7, i64* %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_psubb_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [8 x i8]*
  %4 = bitcast %union.MMXReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [8 x i8]*
  %7 = bitcast %union.MMXReg* %1 to i8*
  %8 = load i8, i8* %7, align 8
  %9 = sub i8 %5, %8
  store i8 %9, i8* %4, align 8
  %10 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 1
  %11 = load i8, i8* %10, align 1
  %12 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 1
  %13 = load i8, i8* %12, align 1
  %14 = sub i8 %11, %13
  store i8 %14, i8* %10, align 1
  %15 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 2
  %16 = load i8, i8* %15, align 2
  %17 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 2
  %18 = load i8, i8* %17, align 2
  %19 = sub i8 %16, %18
  store i8 %19, i8* %15, align 2
  %20 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 3
  %21 = load i8, i8* %20, align 1
  %22 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 3
  %23 = load i8, i8* %22, align 1
  %24 = sub i8 %21, %23
  store i8 %24, i8* %20, align 1
  %25 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 4
  %26 = load i8, i8* %25, align 4
  %27 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 4
  %28 = load i8, i8* %27, align 4
  %29 = sub i8 %26, %28
  store i8 %29, i8* %25, align 4
  %30 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 5
  %31 = load i8, i8* %30, align 1
  %32 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 5
  %33 = load i8, i8* %32, align 1
  %34 = sub i8 %31, %33
  store i8 %34, i8* %30, align 1
  %35 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 6
  %36 = load i8, i8* %35, align 2
  %37 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 6
  %38 = load i8, i8* %37, align 2
  %39 = sub i8 %36, %38
  store i8 %39, i8* %35, align 2
  %40 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 7
  %41 = load i8, i8* %40, align 1
  %42 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 7
  %43 = load i8, i8* %42, align 1
  %44 = sub i8 %41, %43
  store i8 %44, i8* %40, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_psubw_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %7 = bitcast %union.MMXReg* %1 to i16*
  %8 = load i16, i16* %7, align 8
  %9 = sub i16 %5, %8
  store i16 %9, i16* %4, align 8
  %10 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %11 = load i16, i16* %10, align 2
  %12 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 1
  %13 = load i16, i16* %12, align 2
  %14 = sub i16 %11, %13
  store i16 %14, i16* %10, align 2
  %15 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %16 = load i16, i16* %15, align 4
  %17 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 2
  %18 = load i16, i16* %17, align 4
  %19 = sub i16 %16, %18
  store i16 %19, i16* %15, align 4
  %20 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %21 = load i16, i16* %20, align 2
  %22 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 3
  %23 = load i16, i16* %22, align 2
  %24 = sub i16 %21, %23
  store i16 %24, i16* %20, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_psubl_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %7 = bitcast %union.MMXReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = sub i32 %5, %8
  store i32 %9, i32* %4, align 8
  %10 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 1
  %13 = load i32, i32* %12, align 4
  %14 = sub i32 %11, %13
  store i32 %14, i32* %10, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_psubq_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr %union.MMXReg, %union.MMXReg* %0, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr %union.MMXReg, %union.MMXReg* %1, i64 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = sub i64 %4, %6
  store i64 %7, i64* %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_paddusb_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [8 x i8]*
  %4 = bitcast %union.MMXReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = zext i8 %5 to i32
  %7 = bitcast %union.MMXReg* %1 to [8 x i8]*
  %8 = bitcast %union.MMXReg* %1 to i8*
  %9 = load i8, i8* %8, align 8
  %10 = zext i8 %9 to i32
  %11 = add nuw nsw i32 %10, %6
  %12 = icmp ult i32 %11, 255
  %13 = select i1 %12, i32 %11, i32 255
  %14 = trunc i32 %13 to i8
  store i8 %14, i8* %4, align 8
  %15 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 1
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 1
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = add nuw nsw i32 %20, %17
  %22 = icmp ult i32 %21, 255
  %23 = select i1 %22, i32 %21, i32 255
  %24 = trunc i32 %23 to i8
  store i8 %24, i8* %15, align 1
  %25 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 2
  %26 = load i8, i8* %25, align 2
  %27 = zext i8 %26 to i32
  %28 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 2
  %29 = load i8, i8* %28, align 2
  %30 = zext i8 %29 to i32
  %31 = add nuw nsw i32 %30, %27
  %32 = icmp ult i32 %31, 255
  %33 = select i1 %32, i32 %31, i32 255
  %34 = trunc i32 %33 to i8
  store i8 %34, i8* %25, align 2
  %35 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 3
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 3
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = add nuw nsw i32 %40, %37
  %42 = icmp ult i32 %41, 255
  %43 = select i1 %42, i32 %41, i32 255
  %44 = trunc i32 %43 to i8
  store i8 %44, i8* %35, align 1
  %45 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 4
  %46 = load i8, i8* %45, align 4
  %47 = zext i8 %46 to i32
  %48 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 4
  %49 = load i8, i8* %48, align 4
  %50 = zext i8 %49 to i32
  %51 = add nuw nsw i32 %50, %47
  %52 = icmp ult i32 %51, 255
  %53 = select i1 %52, i32 %51, i32 255
  %54 = trunc i32 %53 to i8
  store i8 %54, i8* %45, align 4
  %55 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 5
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 5
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i32
  %61 = add nuw nsw i32 %60, %57
  %62 = icmp ult i32 %61, 255
  %63 = select i1 %62, i32 %61, i32 255
  %64 = trunc i32 %63 to i8
  store i8 %64, i8* %55, align 1
  %65 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 6
  %66 = load i8, i8* %65, align 2
  %67 = zext i8 %66 to i32
  %68 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 6
  %69 = load i8, i8* %68, align 2
  %70 = zext i8 %69 to i32
  %71 = add nuw nsw i32 %70, %67
  %72 = icmp ult i32 %71, 255
  %73 = select i1 %72, i32 %71, i32 255
  %74 = trunc i32 %73 to i8
  store i8 %74, i8* %65, align 2
  %75 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 7
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i32
  %78 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 7
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i32
  %81 = add nuw nsw i32 %80, %77
  %82 = icmp ult i32 %81, 255
  %83 = select i1 %82, i32 %81, i32 255
  %84 = trunc i32 %83 to i8
  store i8 %84, i8* %75, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_paddsb_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [8 x i8]*
  %4 = bitcast %union.MMXReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [8 x i8]*
  %7 = bitcast %union.MMXReg* %1 to i8*
  %8 = load i8, i8* %7, align 8
  %9 = add i8 %5, %8
  %10 = icmp slt i8 %5, 0
  %11 = icmp slt i8 %8, 0
  %12 = icmp slt i8 %9, 0
  %13 = select i1 %11, i8 -128, i8 127
  %14 = xor i1 %10, %12
  %15 = xor i1 %10, %11
  %16 = xor i1 %15, true
  %17 = and i1 %14, %16
  %18 = select i1 %17, i8 %13, i8 %9
  store i8 %18, i8* %4, align 8
  %19 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 1
  %20 = load i8, i8* %19, align 1
  %21 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 1
  %22 = load i8, i8* %21, align 1
  %23 = add i8 %20, %22
  %24 = icmp slt i8 %20, 0
  %25 = icmp slt i8 %22, 0
  %26 = icmp slt i8 %23, 0
  %27 = select i1 %25, i8 -128, i8 127
  %28 = xor i1 %24, %26
  %29 = xor i1 %24, %25
  %30 = xor i1 %29, true
  %31 = and i1 %28, %30
  %32 = select i1 %31, i8 %27, i8 %23
  store i8 %32, i8* %19, align 1
  %33 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 2
  %34 = load i8, i8* %33, align 2
  %35 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 2
  %36 = load i8, i8* %35, align 2
  %37 = add i8 %34, %36
  %38 = icmp slt i8 %34, 0
  %39 = icmp slt i8 %36, 0
  %40 = icmp slt i8 %37, 0
  %41 = select i1 %39, i8 -128, i8 127
  %42 = xor i1 %38, %40
  %43 = xor i1 %38, %39
  %44 = xor i1 %43, true
  %45 = and i1 %42, %44
  %46 = select i1 %45, i8 %41, i8 %37
  store i8 %46, i8* %33, align 2
  %47 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 3
  %48 = load i8, i8* %47, align 1
  %49 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 3
  %50 = load i8, i8* %49, align 1
  %51 = add i8 %48, %50
  %52 = icmp slt i8 %48, 0
  %53 = icmp slt i8 %50, 0
  %54 = icmp slt i8 %51, 0
  %55 = select i1 %53, i8 -128, i8 127
  %56 = xor i1 %52, %54
  %57 = xor i1 %52, %53
  %58 = xor i1 %57, true
  %59 = and i1 %56, %58
  %60 = select i1 %59, i8 %55, i8 %51
  store i8 %60, i8* %47, align 1
  %61 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 4
  %62 = load i8, i8* %61, align 4
  %63 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 4
  %64 = load i8, i8* %63, align 4
  %65 = add i8 %62, %64
  %66 = icmp slt i8 %62, 0
  %67 = icmp slt i8 %64, 0
  %68 = icmp slt i8 %65, 0
  %69 = select i1 %67, i8 -128, i8 127
  %70 = xor i1 %66, %68
  %71 = xor i1 %66, %67
  %72 = xor i1 %71, true
  %73 = and i1 %70, %72
  %74 = select i1 %73, i8 %69, i8 %65
  store i8 %74, i8* %61, align 4
  %75 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 5
  %76 = load i8, i8* %75, align 1
  %77 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 5
  %78 = load i8, i8* %77, align 1
  %79 = add i8 %76, %78
  %80 = icmp slt i8 %76, 0
  %81 = icmp slt i8 %78, 0
  %82 = icmp slt i8 %79, 0
  %83 = select i1 %81, i8 -128, i8 127
  %84 = xor i1 %80, %82
  %85 = xor i1 %80, %81
  %86 = xor i1 %85, true
  %87 = and i1 %84, %86
  %88 = select i1 %87, i8 %83, i8 %79
  store i8 %88, i8* %75, align 1
  %89 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 6
  %90 = load i8, i8* %89, align 2
  %91 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 6
  %92 = load i8, i8* %91, align 2
  %93 = add i8 %90, %92
  %94 = icmp slt i8 %90, 0
  %95 = icmp slt i8 %92, 0
  %96 = icmp slt i8 %93, 0
  %97 = select i1 %95, i8 -128, i8 127
  %98 = xor i1 %94, %96
  %99 = xor i1 %94, %95
  %100 = xor i1 %99, true
  %101 = and i1 %98, %100
  %102 = select i1 %101, i8 %97, i8 %93
  store i8 %102, i8* %89, align 2
  %103 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 7
  %104 = load i8, i8* %103, align 1
  %105 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 7
  %106 = load i8, i8* %105, align 1
  %107 = add i8 %104, %106
  %108 = icmp slt i8 %104, 0
  %109 = icmp slt i8 %106, 0
  %110 = icmp slt i8 %107, 0
  %111 = select i1 %109, i8 -128, i8 127
  %112 = xor i1 %108, %110
  %113 = xor i1 %108, %109
  %114 = xor i1 %113, true
  %115 = and i1 %112, %114
  %116 = select i1 %115, i8 %111, i8 %107
  store i8 %116, i8* %103, align 1
  ret void
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i8 @llvm.sadd.sat.i8(i8, i8) #11

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_psubusb_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [8 x i8]*
  %4 = bitcast %union.MMXReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = zext i8 %5 to i32
  %7 = bitcast %union.MMXReg* %1 to [8 x i8]*
  %8 = bitcast %union.MMXReg* %1 to i8*
  %9 = load i8, i8* %8, align 8
  %10 = zext i8 %9 to i32
  %11 = sub nsw i32 %6, %10
  %12 = icmp slt i32 %11, 255
  %13 = select i1 %12, i32 %11, i32 255
  %14 = icmp sgt i32 %13, 0
  %15 = select i1 %14, i32 %13, i32 0
  %16 = trunc i32 %15 to i8
  store i8 %16, i8* %4, align 8
  %17 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 1
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 1
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = sub nsw i32 %19, %22
  %24 = icmp slt i32 %23, 255
  %25 = select i1 %24, i32 %23, i32 255
  %26 = icmp sgt i32 %25, 0
  %27 = select i1 %26, i32 %25, i32 0
  %28 = trunc i32 %27 to i8
  store i8 %28, i8* %17, align 1
  %29 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 2
  %30 = load i8, i8* %29, align 2
  %31 = zext i8 %30 to i32
  %32 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 2
  %33 = load i8, i8* %32, align 2
  %34 = zext i8 %33 to i32
  %35 = sub nsw i32 %31, %34
  %36 = icmp slt i32 %35, 255
  %37 = select i1 %36, i32 %35, i32 255
  %38 = icmp sgt i32 %37, 0
  %39 = select i1 %38, i32 %37, i32 0
  %40 = trunc i32 %39 to i8
  store i8 %40, i8* %29, align 2
  %41 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 3
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 3
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i32
  %47 = sub nsw i32 %43, %46
  %48 = icmp slt i32 %47, 255
  %49 = select i1 %48, i32 %47, i32 255
  %50 = icmp sgt i32 %49, 0
  %51 = select i1 %50, i32 %49, i32 0
  %52 = trunc i32 %51 to i8
  store i8 %52, i8* %41, align 1
  %53 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 4
  %54 = load i8, i8* %53, align 4
  %55 = zext i8 %54 to i32
  %56 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 4
  %57 = load i8, i8* %56, align 4
  %58 = zext i8 %57 to i32
  %59 = sub nsw i32 %55, %58
  %60 = icmp slt i32 %59, 255
  %61 = select i1 %60, i32 %59, i32 255
  %62 = icmp sgt i32 %61, 0
  %63 = select i1 %62, i32 %61, i32 0
  %64 = trunc i32 %63 to i8
  store i8 %64, i8* %53, align 4
  %65 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 5
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 5
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = sub nsw i32 %67, %70
  %72 = icmp slt i32 %71, 255
  %73 = select i1 %72, i32 %71, i32 255
  %74 = icmp sgt i32 %73, 0
  %75 = select i1 %74, i32 %73, i32 0
  %76 = trunc i32 %75 to i8
  store i8 %76, i8* %65, align 1
  %77 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 6
  %78 = load i8, i8* %77, align 2
  %79 = zext i8 %78 to i32
  %80 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 6
  %81 = load i8, i8* %80, align 2
  %82 = zext i8 %81 to i32
  %83 = sub nsw i32 %79, %82
  %84 = icmp slt i32 %83, 255
  %85 = select i1 %84, i32 %83, i32 255
  %86 = icmp sgt i32 %85, 0
  %87 = select i1 %86, i32 %85, i32 0
  %88 = trunc i32 %87 to i8
  store i8 %88, i8* %77, align 2
  %89 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 7
  %90 = load i8, i8* %89, align 1
  %91 = zext i8 %90 to i32
  %92 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 7
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i32
  %95 = sub nsw i32 %91, %94
  %96 = icmp slt i32 %95, 255
  %97 = select i1 %96, i32 %95, i32 255
  %98 = icmp sgt i32 %97, 0
  %99 = select i1 %98, i32 %97, i32 0
  %100 = trunc i32 %99 to i8
  store i8 %100, i8* %89, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_psubsb_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [8 x i8]*
  %4 = bitcast %union.MMXReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [8 x i8]*
  %7 = bitcast %union.MMXReg* %1 to i8*
  %8 = load i8, i8* %7, align 8
  %9 = sub i8 %5, %8
  %10 = icmp slt i8 %5, 0
  %11 = icmp slt i8 %8, 0
  %12 = icmp slt i8 %9, 0
  %13 = select i1 %11, i8 127, i8 -128
  %14 = xor i1 %10, %12
  %15 = xor i1 %10, %11
  %16 = and i1 %14, %15
  %17 = select i1 %16, i8 %13, i8 %9
  store i8 %17, i8* %4, align 8
  %18 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 1
  %19 = load i8, i8* %18, align 1
  %20 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 1
  %21 = load i8, i8* %20, align 1
  %22 = sub i8 %19, %21
  %23 = icmp slt i8 %19, 0
  %24 = icmp slt i8 %21, 0
  %25 = icmp slt i8 %22, 0
  %26 = select i1 %24, i8 127, i8 -128
  %27 = xor i1 %23, %25
  %28 = xor i1 %23, %24
  %29 = and i1 %27, %28
  %30 = select i1 %29, i8 %26, i8 %22
  store i8 %30, i8* %18, align 1
  %31 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 2
  %32 = load i8, i8* %31, align 2
  %33 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 2
  %34 = load i8, i8* %33, align 2
  %35 = sub i8 %32, %34
  %36 = icmp slt i8 %32, 0
  %37 = icmp slt i8 %34, 0
  %38 = icmp slt i8 %35, 0
  %39 = select i1 %37, i8 127, i8 -128
  %40 = xor i1 %36, %38
  %41 = xor i1 %36, %37
  %42 = and i1 %40, %41
  %43 = select i1 %42, i8 %39, i8 %35
  store i8 %43, i8* %31, align 2
  %44 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 3
  %45 = load i8, i8* %44, align 1
  %46 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 3
  %47 = load i8, i8* %46, align 1
  %48 = sub i8 %45, %47
  %49 = icmp slt i8 %45, 0
  %50 = icmp slt i8 %47, 0
  %51 = icmp slt i8 %48, 0
  %52 = select i1 %50, i8 127, i8 -128
  %53 = xor i1 %49, %51
  %54 = xor i1 %49, %50
  %55 = and i1 %53, %54
  %56 = select i1 %55, i8 %52, i8 %48
  store i8 %56, i8* %44, align 1
  %57 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 4
  %58 = load i8, i8* %57, align 4
  %59 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 4
  %60 = load i8, i8* %59, align 4
  %61 = sub i8 %58, %60
  %62 = icmp slt i8 %58, 0
  %63 = icmp slt i8 %60, 0
  %64 = icmp slt i8 %61, 0
  %65 = select i1 %63, i8 127, i8 -128
  %66 = xor i1 %62, %64
  %67 = xor i1 %62, %63
  %68 = and i1 %66, %67
  %69 = select i1 %68, i8 %65, i8 %61
  store i8 %69, i8* %57, align 4
  %70 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 5
  %71 = load i8, i8* %70, align 1
  %72 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 5
  %73 = load i8, i8* %72, align 1
  %74 = sub i8 %71, %73
  %75 = icmp slt i8 %71, 0
  %76 = icmp slt i8 %73, 0
  %77 = icmp slt i8 %74, 0
  %78 = select i1 %76, i8 127, i8 -128
  %79 = xor i1 %75, %77
  %80 = xor i1 %75, %76
  %81 = and i1 %79, %80
  %82 = select i1 %81, i8 %78, i8 %74
  store i8 %82, i8* %70, align 1
  %83 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 6
  %84 = load i8, i8* %83, align 2
  %85 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 6
  %86 = load i8, i8* %85, align 2
  %87 = sub i8 %84, %86
  %88 = icmp slt i8 %84, 0
  %89 = icmp slt i8 %86, 0
  %90 = icmp slt i8 %87, 0
  %91 = select i1 %89, i8 127, i8 -128
  %92 = xor i1 %88, %90
  %93 = xor i1 %88, %89
  %94 = and i1 %92, %93
  %95 = select i1 %94, i8 %91, i8 %87
  store i8 %95, i8* %83, align 2
  %96 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 7
  %97 = load i8, i8* %96, align 1
  %98 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 7
  %99 = load i8, i8* %98, align 1
  %100 = sub i8 %97, %99
  %101 = icmp slt i8 %97, 0
  %102 = icmp slt i8 %99, 0
  %103 = icmp slt i8 %100, 0
  %104 = select i1 %102, i8 127, i8 -128
  %105 = xor i1 %101, %103
  %106 = xor i1 %101, %102
  %107 = and i1 %105, %106
  %108 = select i1 %107, i8 %104, i8 %100
  store i8 %108, i8* %96, align 1
  ret void
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i8 @llvm.ssub.sat.i8(i8, i8) #11

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_paddusw_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = zext i16 %5 to i32
  %7 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %8 = bitcast %union.MMXReg* %1 to i16*
  %9 = load i16, i16* %8, align 8
  %10 = zext i16 %9 to i32
  %11 = add nuw nsw i32 %10, %6
  %12 = icmp ult i32 %11, 65535
  %13 = select i1 %12, i32 %11, i32 65535
  %14 = trunc i32 %13 to i16
  store i16 %14, i16* %4, align 8
  %15 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = getelementptr inbounds [4 x i16], [4 x i16]* %7, i64 0, i64 1
  %19 = load i16, i16* %18, align 2
  %20 = zext i16 %19 to i32
  %21 = add nuw nsw i32 %20, %17
  %22 = icmp ult i32 %21, 65535
  %23 = select i1 %22, i32 %21, i32 65535
  %24 = trunc i32 %23 to i16
  store i16 %24, i16* %15, align 2
  %25 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %26 = load i16, i16* %25, align 4
  %27 = zext i16 %26 to i32
  %28 = getelementptr inbounds [4 x i16], [4 x i16]* %7, i64 0, i64 2
  %29 = load i16, i16* %28, align 4
  %30 = zext i16 %29 to i32
  %31 = add nuw nsw i32 %30, %27
  %32 = icmp ult i32 %31, 65535
  %33 = select i1 %32, i32 %31, i32 65535
  %34 = trunc i32 %33 to i16
  store i16 %34, i16* %25, align 4
  %35 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = getelementptr inbounds [4 x i16], [4 x i16]* %7, i64 0, i64 3
  %39 = load i16, i16* %38, align 2
  %40 = zext i16 %39 to i32
  %41 = add nuw nsw i32 %40, %37
  %42 = icmp ult i32 %41, 65535
  %43 = select i1 %42, i32 %41, i32 65535
  %44 = trunc i32 %43 to i16
  store i16 %44, i16* %35, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_paddsw_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %7 = bitcast %union.MMXReg* %1 to i16*
  %8 = load i16, i16* %7, align 8
  %9 = add i16 %5, %8
  %10 = icmp slt i16 %5, 0
  %11 = icmp slt i16 %8, 0
  %12 = icmp slt i16 %9, 0
  %13 = select i1 %11, i16 -32768, i16 32767
  %14 = xor i1 %10, %12
  %15 = xor i1 %10, %11
  %16 = xor i1 %15, true
  %17 = and i1 %14, %16
  %18 = select i1 %17, i16 %13, i16 %9
  store i16 %18, i16* %4, align 8
  %19 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %20 = load i16, i16* %19, align 2
  %21 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 1
  %22 = load i16, i16* %21, align 2
  %23 = add i16 %20, %22
  %24 = icmp slt i16 %20, 0
  %25 = icmp slt i16 %22, 0
  %26 = icmp slt i16 %23, 0
  %27 = select i1 %25, i16 -32768, i16 32767
  %28 = xor i1 %24, %26
  %29 = xor i1 %24, %25
  %30 = xor i1 %29, true
  %31 = and i1 %28, %30
  %32 = select i1 %31, i16 %27, i16 %23
  store i16 %32, i16* %19, align 2
  %33 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %34 = load i16, i16* %33, align 4
  %35 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 2
  %36 = load i16, i16* %35, align 4
  %37 = add i16 %34, %36
  %38 = icmp slt i16 %34, 0
  %39 = icmp slt i16 %36, 0
  %40 = icmp slt i16 %37, 0
  %41 = select i1 %39, i16 -32768, i16 32767
  %42 = xor i1 %38, %40
  %43 = xor i1 %38, %39
  %44 = xor i1 %43, true
  %45 = and i1 %42, %44
  %46 = select i1 %45, i16 %41, i16 %37
  store i16 %46, i16* %33, align 4
  %47 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %48 = load i16, i16* %47, align 2
  %49 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 3
  %50 = load i16, i16* %49, align 2
  %51 = add i16 %48, %50
  %52 = icmp slt i16 %48, 0
  %53 = icmp slt i16 %50, 0
  %54 = icmp slt i16 %51, 0
  %55 = select i1 %53, i16 -32768, i16 32767
  %56 = xor i1 %52, %54
  %57 = xor i1 %52, %53
  %58 = xor i1 %57, true
  %59 = and i1 %56, %58
  %60 = select i1 %59, i16 %55, i16 %51
  store i16 %60, i16* %47, align 2
  ret void
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i16 @llvm.sadd.sat.i16(i16, i16) #11

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_psubusw_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = zext i16 %5 to i32
  %7 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %8 = bitcast %union.MMXReg* %1 to i16*
  %9 = load i16, i16* %8, align 8
  %10 = zext i16 %9 to i32
  %11 = sub nsw i32 %6, %10
  %12 = icmp slt i32 %11, 65535
  %13 = select i1 %12, i32 %11, i32 65535
  %14 = icmp sgt i32 %13, 0
  %15 = select i1 %14, i32 %13, i32 0
  %16 = trunc i32 %15 to i16
  store i16 %16, i16* %4, align 8
  %17 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %18 = load i16, i16* %17, align 2
  %19 = zext i16 %18 to i32
  %20 = getelementptr inbounds [4 x i16], [4 x i16]* %7, i64 0, i64 1
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = sub nsw i32 %19, %22
  %24 = icmp slt i32 %23, 65535
  %25 = select i1 %24, i32 %23, i32 65535
  %26 = icmp sgt i32 %25, 0
  %27 = select i1 %26, i32 %25, i32 0
  %28 = trunc i32 %27 to i16
  store i16 %28, i16* %17, align 2
  %29 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %30 = load i16, i16* %29, align 4
  %31 = zext i16 %30 to i32
  %32 = getelementptr inbounds [4 x i16], [4 x i16]* %7, i64 0, i64 2
  %33 = load i16, i16* %32, align 4
  %34 = zext i16 %33 to i32
  %35 = sub nsw i32 %31, %34
  %36 = icmp slt i32 %35, 65535
  %37 = select i1 %36, i32 %35, i32 65535
  %38 = icmp sgt i32 %37, 0
  %39 = select i1 %38, i32 %37, i32 0
  %40 = trunc i32 %39 to i16
  store i16 %40, i16* %29, align 4
  %41 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %42 = load i16, i16* %41, align 2
  %43 = zext i16 %42 to i32
  %44 = getelementptr inbounds [4 x i16], [4 x i16]* %7, i64 0, i64 3
  %45 = load i16, i16* %44, align 2
  %46 = zext i16 %45 to i32
  %47 = sub nsw i32 %43, %46
  %48 = icmp slt i32 %47, 65535
  %49 = select i1 %48, i32 %47, i32 65535
  %50 = icmp sgt i32 %49, 0
  %51 = select i1 %50, i32 %49, i32 0
  %52 = trunc i32 %51 to i16
  store i16 %52, i16* %41, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_psubsw_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %7 = bitcast %union.MMXReg* %1 to i16*
  %8 = load i16, i16* %7, align 8
  %9 = sub i16 %5, %8
  %10 = icmp slt i16 %5, 0
  %11 = icmp slt i16 %8, 0
  %12 = icmp slt i16 %9, 0
  %13 = select i1 %11, i16 32767, i16 -32768
  %14 = xor i1 %10, %12
  %15 = xor i1 %10, %11
  %16 = and i1 %14, %15
  %17 = select i1 %16, i16 %13, i16 %9
  store i16 %17, i16* %4, align 8
  %18 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %19 = load i16, i16* %18, align 2
  %20 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 1
  %21 = load i16, i16* %20, align 2
  %22 = sub i16 %19, %21
  %23 = icmp slt i16 %19, 0
  %24 = icmp slt i16 %21, 0
  %25 = icmp slt i16 %22, 0
  %26 = select i1 %24, i16 32767, i16 -32768
  %27 = xor i1 %23, %25
  %28 = xor i1 %23, %24
  %29 = and i1 %27, %28
  %30 = select i1 %29, i16 %26, i16 %22
  store i16 %30, i16* %18, align 2
  %31 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %32 = load i16, i16* %31, align 4
  %33 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 2
  %34 = load i16, i16* %33, align 4
  %35 = sub i16 %32, %34
  %36 = icmp slt i16 %32, 0
  %37 = icmp slt i16 %34, 0
  %38 = icmp slt i16 %35, 0
  %39 = select i1 %37, i16 32767, i16 -32768
  %40 = xor i1 %36, %38
  %41 = xor i1 %36, %37
  %42 = and i1 %40, %41
  %43 = select i1 %42, i16 %39, i16 %35
  store i16 %43, i16* %31, align 4
  %44 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %45 = load i16, i16* %44, align 2
  %46 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 3
  %47 = load i16, i16* %46, align 2
  %48 = sub i16 %45, %47
  %49 = icmp slt i16 %45, 0
  %50 = icmp slt i16 %47, 0
  %51 = icmp slt i16 %48, 0
  %52 = select i1 %50, i16 32767, i16 -32768
  %53 = xor i1 %49, %51
  %54 = xor i1 %49, %50
  %55 = and i1 %53, %54
  %56 = select i1 %55, i16 %52, i16 %48
  store i16 %56, i16* %44, align 2
  ret void
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i16 @llvm.ssub.sat.i16(i16, i16) #11

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pminub_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [8 x i8]*
  %4 = bitcast %union.MMXReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [8 x i8]*
  %7 = bitcast %union.MMXReg* %1 to i8*
  %8 = load i8, i8* %7, align 8
  %9 = icmp ult i8 %5, %8
  %10 = select i1 %9, i8 %5, i8 %8
  store i8 %10, i8* %4, align 8
  %11 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 1
  %12 = load i8, i8* %11, align 1
  %13 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 1
  %14 = load i8, i8* %13, align 1
  %15 = icmp ult i8 %12, %14
  %16 = select i1 %15, i8 %12, i8 %14
  store i8 %16, i8* %11, align 1
  %17 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 2
  %18 = load i8, i8* %17, align 2
  %19 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 2
  %20 = load i8, i8* %19, align 2
  %21 = icmp ult i8 %18, %20
  %22 = select i1 %21, i8 %18, i8 %20
  store i8 %22, i8* %17, align 2
  %23 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 3
  %24 = load i8, i8* %23, align 1
  %25 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 3
  %26 = load i8, i8* %25, align 1
  %27 = icmp ult i8 %24, %26
  %28 = select i1 %27, i8 %24, i8 %26
  store i8 %28, i8* %23, align 1
  %29 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 4
  %30 = load i8, i8* %29, align 4
  %31 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 4
  %32 = load i8, i8* %31, align 4
  %33 = icmp ult i8 %30, %32
  %34 = select i1 %33, i8 %30, i8 %32
  store i8 %34, i8* %29, align 4
  %35 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 5
  %36 = load i8, i8* %35, align 1
  %37 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 5
  %38 = load i8, i8* %37, align 1
  %39 = icmp ult i8 %36, %38
  %40 = select i1 %39, i8 %36, i8 %38
  store i8 %40, i8* %35, align 1
  %41 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 6
  %42 = load i8, i8* %41, align 2
  %43 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 6
  %44 = load i8, i8* %43, align 2
  %45 = icmp ult i8 %42, %44
  %46 = select i1 %45, i8 %42, i8 %44
  store i8 %46, i8* %41, align 2
  %47 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 7
  %48 = load i8, i8* %47, align 1
  %49 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 7
  %50 = load i8, i8* %49, align 1
  %51 = icmp ult i8 %48, %50
  %52 = select i1 %51, i8 %48, i8 %50
  store i8 %52, i8* %47, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pmaxub_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [8 x i8]*
  %4 = bitcast %union.MMXReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [8 x i8]*
  %7 = bitcast %union.MMXReg* %1 to i8*
  %8 = load i8, i8* %7, align 8
  %9 = icmp ugt i8 %5, %8
  %10 = select i1 %9, i8 %5, i8 %8
  store i8 %10, i8* %4, align 8
  %11 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 1
  %12 = load i8, i8* %11, align 1
  %13 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 1
  %14 = load i8, i8* %13, align 1
  %15 = icmp ugt i8 %12, %14
  %16 = select i1 %15, i8 %12, i8 %14
  store i8 %16, i8* %11, align 1
  %17 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 2
  %18 = load i8, i8* %17, align 2
  %19 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 2
  %20 = load i8, i8* %19, align 2
  %21 = icmp ugt i8 %18, %20
  %22 = select i1 %21, i8 %18, i8 %20
  store i8 %22, i8* %17, align 2
  %23 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 3
  %24 = load i8, i8* %23, align 1
  %25 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 3
  %26 = load i8, i8* %25, align 1
  %27 = icmp ugt i8 %24, %26
  %28 = select i1 %27, i8 %24, i8 %26
  store i8 %28, i8* %23, align 1
  %29 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 4
  %30 = load i8, i8* %29, align 4
  %31 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 4
  %32 = load i8, i8* %31, align 4
  %33 = icmp ugt i8 %30, %32
  %34 = select i1 %33, i8 %30, i8 %32
  store i8 %34, i8* %29, align 4
  %35 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 5
  %36 = load i8, i8* %35, align 1
  %37 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 5
  %38 = load i8, i8* %37, align 1
  %39 = icmp ugt i8 %36, %38
  %40 = select i1 %39, i8 %36, i8 %38
  store i8 %40, i8* %35, align 1
  %41 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 6
  %42 = load i8, i8* %41, align 2
  %43 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 6
  %44 = load i8, i8* %43, align 2
  %45 = icmp ugt i8 %42, %44
  %46 = select i1 %45, i8 %42, i8 %44
  store i8 %46, i8* %41, align 2
  %47 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 7
  %48 = load i8, i8* %47, align 1
  %49 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 7
  %50 = load i8, i8* %49, align 1
  %51 = icmp ugt i8 %48, %50
  %52 = select i1 %51, i8 %48, i8 %50
  store i8 %52, i8* %47, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pminsw_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %7 = bitcast %union.MMXReg* %1 to i16*
  %8 = load i16, i16* %7, align 8
  %9 = icmp slt i16 %5, %8
  %10 = select i1 %9, i16 %5, i16 %8
  store i16 %10, i16* %4, align 8
  %11 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %12 = load i16, i16* %11, align 2
  %13 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 1
  %14 = load i16, i16* %13, align 2
  %15 = icmp slt i16 %12, %14
  %16 = select i1 %15, i16 %12, i16 %14
  store i16 %16, i16* %11, align 2
  %17 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %18 = load i16, i16* %17, align 4
  %19 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 2
  %20 = load i16, i16* %19, align 4
  %21 = icmp slt i16 %18, %20
  %22 = select i1 %21, i16 %18, i16 %20
  store i16 %22, i16* %17, align 4
  %23 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %24 = load i16, i16* %23, align 2
  %25 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 3
  %26 = load i16, i16* %25, align 2
  %27 = icmp slt i16 %24, %26
  %28 = select i1 %27, i16 %24, i16 %26
  store i16 %28, i16* %23, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pmaxsw_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %7 = bitcast %union.MMXReg* %1 to i16*
  %8 = load i16, i16* %7, align 8
  %9 = icmp sgt i16 %5, %8
  %10 = select i1 %9, i16 %5, i16 %8
  store i16 %10, i16* %4, align 8
  %11 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %12 = load i16, i16* %11, align 2
  %13 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 1
  %14 = load i16, i16* %13, align 2
  %15 = icmp sgt i16 %12, %14
  %16 = select i1 %15, i16 %12, i16 %14
  store i16 %16, i16* %11, align 2
  %17 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %18 = load i16, i16* %17, align 4
  %19 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 2
  %20 = load i16, i16* %19, align 4
  %21 = icmp sgt i16 %18, %20
  %22 = select i1 %21, i16 %18, i16 %20
  store i16 %22, i16* %17, align 4
  %23 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %24 = load i16, i16* %23, align 2
  %25 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 3
  %26 = load i16, i16* %25, align 2
  %27 = icmp sgt i16 %24, %26
  %28 = select i1 %27, i16 %24, i16 %26
  store i16 %28, i16* %23, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pand_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr %union.MMXReg, %union.MMXReg* %0, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr %union.MMXReg, %union.MMXReg* %1, i64 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = and i64 %6, %4
  store i64 %7, i64* %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pandn_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr %union.MMXReg, %union.MMXReg* %0, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = xor i64 %4, -1
  %6 = getelementptr %union.MMXReg, %union.MMXReg* %1, i64 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = and i64 %7, %5
  store i64 %8, i64* %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_por_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr %union.MMXReg, %union.MMXReg* %0, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr %union.MMXReg, %union.MMXReg* %1, i64 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = or i64 %6, %4
  store i64 %7, i64* %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pxor_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr %union.MMXReg, %union.MMXReg* %0, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr %union.MMXReg, %union.MMXReg* %1, i64 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = xor i64 %6, %4
  store i64 %7, i64* %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pcmpgtb_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [8 x i8]*
  %4 = bitcast %union.MMXReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [8 x i8]*
  %7 = bitcast %union.MMXReg* %1 to i8*
  %8 = load i8, i8* %7, align 8
  %9 = icmp sgt i8 %5, %8
  %10 = sext i1 %9 to i8
  store i8 %10, i8* %4, align 8
  %11 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 1
  %12 = load i8, i8* %11, align 1
  %13 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 1
  %14 = load i8, i8* %13, align 1
  %15 = icmp sgt i8 %12, %14
  %16 = sext i1 %15 to i8
  store i8 %16, i8* %11, align 1
  %17 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 2
  %18 = load i8, i8* %17, align 2
  %19 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 2
  %20 = load i8, i8* %19, align 2
  %21 = icmp sgt i8 %18, %20
  %22 = sext i1 %21 to i8
  store i8 %22, i8* %17, align 2
  %23 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 3
  %24 = load i8, i8* %23, align 1
  %25 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 3
  %26 = load i8, i8* %25, align 1
  %27 = icmp sgt i8 %24, %26
  %28 = sext i1 %27 to i8
  store i8 %28, i8* %23, align 1
  %29 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 4
  %30 = load i8, i8* %29, align 4
  %31 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 4
  %32 = load i8, i8* %31, align 4
  %33 = icmp sgt i8 %30, %32
  %34 = sext i1 %33 to i8
  store i8 %34, i8* %29, align 4
  %35 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 5
  %36 = load i8, i8* %35, align 1
  %37 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 5
  %38 = load i8, i8* %37, align 1
  %39 = icmp sgt i8 %36, %38
  %40 = sext i1 %39 to i8
  store i8 %40, i8* %35, align 1
  %41 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 6
  %42 = load i8, i8* %41, align 2
  %43 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 6
  %44 = load i8, i8* %43, align 2
  %45 = icmp sgt i8 %42, %44
  %46 = sext i1 %45 to i8
  store i8 %46, i8* %41, align 2
  %47 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 7
  %48 = load i8, i8* %47, align 1
  %49 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 7
  %50 = load i8, i8* %49, align 1
  %51 = icmp sgt i8 %48, %50
  %52 = sext i1 %51 to i8
  store i8 %52, i8* %47, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pcmpgtw_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %7 = bitcast %union.MMXReg* %1 to i16*
  %8 = load i16, i16* %7, align 8
  %9 = icmp sgt i16 %5, %8
  %10 = sext i1 %9 to i16
  store i16 %10, i16* %4, align 8
  %11 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %12 = load i16, i16* %11, align 2
  %13 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 1
  %14 = load i16, i16* %13, align 2
  %15 = icmp sgt i16 %12, %14
  %16 = sext i1 %15 to i16
  store i16 %16, i16* %11, align 2
  %17 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %18 = load i16, i16* %17, align 4
  %19 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 2
  %20 = load i16, i16* %19, align 4
  %21 = icmp sgt i16 %18, %20
  %22 = sext i1 %21 to i16
  store i16 %22, i16* %17, align 4
  %23 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %24 = load i16, i16* %23, align 2
  %25 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 3
  %26 = load i16, i16* %25, align 2
  %27 = icmp sgt i16 %24, %26
  %28 = sext i1 %27 to i16
  store i16 %28, i16* %23, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pcmpgtl_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %7 = bitcast %union.MMXReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = icmp sgt i32 %5, %8
  %10 = sext i1 %9 to i32
  store i32 %10, i32* %4, align 8
  %11 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 1
  %14 = load i32, i32* %13, align 4
  %15 = icmp sgt i32 %12, %14
  %16 = sext i1 %15 to i32
  store i32 %16, i32* %11, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pcmpeqb_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [8 x i8]*
  %4 = bitcast %union.MMXReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [8 x i8]*
  %7 = bitcast %union.MMXReg* %1 to i8*
  %8 = load i8, i8* %7, align 8
  %9 = icmp eq i8 %5, %8
  %10 = sext i1 %9 to i8
  store i8 %10, i8* %4, align 8
  %11 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 1
  %12 = load i8, i8* %11, align 1
  %13 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 1
  %14 = load i8, i8* %13, align 1
  %15 = icmp eq i8 %12, %14
  %16 = sext i1 %15 to i8
  store i8 %16, i8* %11, align 1
  %17 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 2
  %18 = load i8, i8* %17, align 2
  %19 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 2
  %20 = load i8, i8* %19, align 2
  %21 = icmp eq i8 %18, %20
  %22 = sext i1 %21 to i8
  store i8 %22, i8* %17, align 2
  %23 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 3
  %24 = load i8, i8* %23, align 1
  %25 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 3
  %26 = load i8, i8* %25, align 1
  %27 = icmp eq i8 %24, %26
  %28 = sext i1 %27 to i8
  store i8 %28, i8* %23, align 1
  %29 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 4
  %30 = load i8, i8* %29, align 4
  %31 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 4
  %32 = load i8, i8* %31, align 4
  %33 = icmp eq i8 %30, %32
  %34 = sext i1 %33 to i8
  store i8 %34, i8* %29, align 4
  %35 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 5
  %36 = load i8, i8* %35, align 1
  %37 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 5
  %38 = load i8, i8* %37, align 1
  %39 = icmp eq i8 %36, %38
  %40 = sext i1 %39 to i8
  store i8 %40, i8* %35, align 1
  %41 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 6
  %42 = load i8, i8* %41, align 2
  %43 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 6
  %44 = load i8, i8* %43, align 2
  %45 = icmp eq i8 %42, %44
  %46 = sext i1 %45 to i8
  store i8 %46, i8* %41, align 2
  %47 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 7
  %48 = load i8, i8* %47, align 1
  %49 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 7
  %50 = load i8, i8* %49, align 1
  %51 = icmp eq i8 %48, %50
  %52 = sext i1 %51 to i8
  store i8 %52, i8* %47, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pcmpeqw_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %7 = bitcast %union.MMXReg* %1 to i16*
  %8 = load i16, i16* %7, align 8
  %9 = icmp eq i16 %5, %8
  %10 = sext i1 %9 to i16
  store i16 %10, i16* %4, align 8
  %11 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %12 = load i16, i16* %11, align 2
  %13 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 1
  %14 = load i16, i16* %13, align 2
  %15 = icmp eq i16 %12, %14
  %16 = sext i1 %15 to i16
  store i16 %16, i16* %11, align 2
  %17 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %18 = load i16, i16* %17, align 4
  %19 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 2
  %20 = load i16, i16* %19, align 4
  %21 = icmp eq i16 %18, %20
  %22 = sext i1 %21 to i16
  store i16 %22, i16* %17, align 4
  %23 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %24 = load i16, i16* %23, align 2
  %25 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 3
  %26 = load i16, i16* %25, align 2
  %27 = icmp eq i16 %24, %26
  %28 = sext i1 %27 to i16
  store i16 %28, i16* %23, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pcmpeql_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %7 = bitcast %union.MMXReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %5, %8
  %10 = sext i1 %9 to i32
  store i32 %10, i32* %4, align 8
  %11 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 1
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %12, %14
  %16 = sext i1 %15 to i32
  store i32 %16, i32* %11, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pmullw_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %7 = bitcast %union.MMXReg* %1 to i16*
  %8 = load i16, i16* %7, align 8
  %9 = mul i16 %8, %5
  store i16 %9, i16* %4, align 8
  %10 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %11 = load i16, i16* %10, align 2
  %12 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 1
  %13 = load i16, i16* %12, align 2
  %14 = mul i16 %13, %11
  store i16 %14, i16* %10, align 2
  %15 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %16 = load i16, i16* %15, align 4
  %17 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 2
  %18 = load i16, i16* %17, align 4
  %19 = mul i16 %18, %16
  store i16 %19, i16* %15, align 4
  %20 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %21 = load i16, i16* %20, align 2
  %22 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 3
  %23 = load i16, i16* %22, align 2
  %24 = mul i16 %23, %21
  store i16 %24, i16* %20, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pmulhrw_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = sext i16 %5 to i32
  %7 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %8 = bitcast %union.MMXReg* %1 to i16*
  %9 = load i16, i16* %8, align 8
  %10 = sext i16 %9 to i32
  %11 = mul nsw i32 %10, %6
  %12 = add nsw i32 %11, 32768
  %13 = lshr i32 %12, 16
  %14 = trunc i32 %13 to i16
  store i16 %14, i16* %4, align 8
  %15 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %16 = load i16, i16* %15, align 2
  %17 = sext i16 %16 to i32
  %18 = getelementptr inbounds [4 x i16], [4 x i16]* %7, i64 0, i64 1
  %19 = load i16, i16* %18, align 2
  %20 = sext i16 %19 to i32
  %21 = mul nsw i32 %20, %17
  %22 = add nsw i32 %21, 32768
  %23 = lshr i32 %22, 16
  %24 = trunc i32 %23 to i16
  store i16 %24, i16* %15, align 2
  %25 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %26 = load i16, i16* %25, align 4
  %27 = sext i16 %26 to i32
  %28 = getelementptr inbounds [4 x i16], [4 x i16]* %7, i64 0, i64 2
  %29 = load i16, i16* %28, align 4
  %30 = sext i16 %29 to i32
  %31 = mul nsw i32 %30, %27
  %32 = add nsw i32 %31, 32768
  %33 = lshr i32 %32, 16
  %34 = trunc i32 %33 to i16
  store i16 %34, i16* %25, align 4
  %35 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %36 = load i16, i16* %35, align 2
  %37 = sext i16 %36 to i32
  %38 = getelementptr inbounds [4 x i16], [4 x i16]* %7, i64 0, i64 3
  %39 = load i16, i16* %38, align 2
  %40 = sext i16 %39 to i32
  %41 = mul nsw i32 %40, %37
  %42 = add nsw i32 %41, 32768
  %43 = lshr i32 %42, 16
  %44 = trunc i32 %43 to i16
  store i16 %44, i16* %35, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pmulhuw_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = zext i16 %5 to i32
  %7 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %8 = bitcast %union.MMXReg* %1 to i16*
  %9 = load i16, i16* %8, align 8
  %10 = zext i16 %9 to i32
  %11 = mul nuw nsw i32 %10, %6
  %12 = lshr i32 %11, 16
  %13 = trunc i32 %12 to i16
  store i16 %13, i16* %4, align 8
  %14 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %15 = load i16, i16* %14, align 2
  %16 = zext i16 %15 to i32
  %17 = getelementptr inbounds [4 x i16], [4 x i16]* %7, i64 0, i64 1
  %18 = load i16, i16* %17, align 2
  %19 = zext i16 %18 to i32
  %20 = mul nuw nsw i32 %19, %16
  %21 = lshr i32 %20, 16
  %22 = trunc i32 %21 to i16
  store i16 %22, i16* %14, align 2
  %23 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %24 = load i16, i16* %23, align 4
  %25 = zext i16 %24 to i32
  %26 = getelementptr inbounds [4 x i16], [4 x i16]* %7, i64 0, i64 2
  %27 = load i16, i16* %26, align 4
  %28 = zext i16 %27 to i32
  %29 = mul nuw nsw i32 %28, %25
  %30 = lshr i32 %29, 16
  %31 = trunc i32 %30 to i16
  store i16 %31, i16* %23, align 4
  %32 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %33 = load i16, i16* %32, align 2
  %34 = zext i16 %33 to i32
  %35 = getelementptr inbounds [4 x i16], [4 x i16]* %7, i64 0, i64 3
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = mul nuw nsw i32 %37, %34
  %39 = lshr i32 %38, 16
  %40 = trunc i32 %39 to i16
  store i16 %40, i16* %32, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pmulhw_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = sext i16 %5 to i32
  %7 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %8 = bitcast %union.MMXReg* %1 to i16*
  %9 = load i16, i16* %8, align 8
  %10 = sext i16 %9 to i32
  %11 = mul nsw i32 %10, %6
  %12 = lshr i32 %11, 16
  %13 = trunc i32 %12 to i16
  store i16 %13, i16* %4, align 8
  %14 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %15 = load i16, i16* %14, align 2
  %16 = sext i16 %15 to i32
  %17 = getelementptr inbounds [4 x i16], [4 x i16]* %7, i64 0, i64 1
  %18 = load i16, i16* %17, align 2
  %19 = sext i16 %18 to i32
  %20 = mul nsw i32 %19, %16
  %21 = lshr i32 %20, 16
  %22 = trunc i32 %21 to i16
  store i16 %22, i16* %14, align 2
  %23 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %24 = load i16, i16* %23, align 4
  %25 = sext i16 %24 to i32
  %26 = getelementptr inbounds [4 x i16], [4 x i16]* %7, i64 0, i64 2
  %27 = load i16, i16* %26, align 4
  %28 = sext i16 %27 to i32
  %29 = mul nsw i32 %28, %25
  %30 = lshr i32 %29, 16
  %31 = trunc i32 %30 to i16
  store i16 %31, i16* %23, align 4
  %32 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %33 = load i16, i16* %32, align 2
  %34 = sext i16 %33 to i32
  %35 = getelementptr inbounds [4 x i16], [4 x i16]* %7, i64 0, i64 3
  %36 = load i16, i16* %35, align 2
  %37 = sext i16 %36 to i32
  %38 = mul nsw i32 %37, %34
  %39 = lshr i32 %38, 16
  %40 = trunc i32 %39 to i16
  store i16 %40, i16* %32, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pavgb_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [8 x i8]*
  %4 = bitcast %union.MMXReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = zext i8 %5 to i16
  %7 = bitcast %union.MMXReg* %1 to [8 x i8]*
  %8 = bitcast %union.MMXReg* %1 to i8*
  %9 = load i8, i8* %8, align 8
  %10 = zext i8 %9 to i16
  %11 = add nuw nsw i16 %6, 1
  %12 = add nuw nsw i16 %11, %10
  %13 = lshr i16 %12, 1
  %14 = trunc i16 %13 to i8
  store i8 %14, i8* %4, align 8
  %15 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 1
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i16
  %18 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 1
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i16
  %21 = add nuw nsw i16 %17, 1
  %22 = add nuw nsw i16 %21, %20
  %23 = lshr i16 %22, 1
  %24 = trunc i16 %23 to i8
  store i8 %24, i8* %15, align 1
  %25 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 2
  %26 = load i8, i8* %25, align 2
  %27 = zext i8 %26 to i16
  %28 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 2
  %29 = load i8, i8* %28, align 2
  %30 = zext i8 %29 to i16
  %31 = add nuw nsw i16 %27, 1
  %32 = add nuw nsw i16 %31, %30
  %33 = lshr i16 %32, 1
  %34 = trunc i16 %33 to i8
  store i8 %34, i8* %25, align 2
  %35 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 3
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i16
  %38 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 3
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i16
  %41 = add nuw nsw i16 %37, 1
  %42 = add nuw nsw i16 %41, %40
  %43 = lshr i16 %42, 1
  %44 = trunc i16 %43 to i8
  store i8 %44, i8* %35, align 1
  %45 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 4
  %46 = load i8, i8* %45, align 4
  %47 = zext i8 %46 to i16
  %48 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 4
  %49 = load i8, i8* %48, align 4
  %50 = zext i8 %49 to i16
  %51 = add nuw nsw i16 %47, 1
  %52 = add nuw nsw i16 %51, %50
  %53 = lshr i16 %52, 1
  %54 = trunc i16 %53 to i8
  store i8 %54, i8* %45, align 4
  %55 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 5
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i16
  %58 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 5
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i16
  %61 = add nuw nsw i16 %57, 1
  %62 = add nuw nsw i16 %61, %60
  %63 = lshr i16 %62, 1
  %64 = trunc i16 %63 to i8
  store i8 %64, i8* %55, align 1
  %65 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 6
  %66 = load i8, i8* %65, align 2
  %67 = zext i8 %66 to i16
  %68 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 6
  %69 = load i8, i8* %68, align 2
  %70 = zext i8 %69 to i16
  %71 = add nuw nsw i16 %67, 1
  %72 = add nuw nsw i16 %71, %70
  %73 = lshr i16 %72, 1
  %74 = trunc i16 %73 to i8
  store i8 %74, i8* %65, align 2
  %75 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 7
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i16
  %78 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 7
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i16
  %81 = add nuw nsw i16 %77, 1
  %82 = add nuw nsw i16 %81, %80
  %83 = lshr i16 %82, 1
  %84 = trunc i16 %83 to i8
  store i8 %84, i8* %75, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pavgw_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = zext i16 %5 to i32
  %7 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %8 = bitcast %union.MMXReg* %1 to i16*
  %9 = load i16, i16* %8, align 8
  %10 = zext i16 %9 to i32
  %11 = add nuw nsw i32 %6, 1
  %12 = add nuw nsw i32 %11, %10
  %13 = lshr i32 %12, 1
  %14 = trunc i32 %13 to i16
  store i16 %14, i16* %4, align 8
  %15 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = getelementptr inbounds [4 x i16], [4 x i16]* %7, i64 0, i64 1
  %19 = load i16, i16* %18, align 2
  %20 = zext i16 %19 to i32
  %21 = add nuw nsw i32 %17, 1
  %22 = add nuw nsw i32 %21, %20
  %23 = lshr i32 %22, 1
  %24 = trunc i32 %23 to i16
  store i16 %24, i16* %15, align 2
  %25 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %26 = load i16, i16* %25, align 4
  %27 = zext i16 %26 to i32
  %28 = getelementptr inbounds [4 x i16], [4 x i16]* %7, i64 0, i64 2
  %29 = load i16, i16* %28, align 4
  %30 = zext i16 %29 to i32
  %31 = add nuw nsw i32 %27, 1
  %32 = add nuw nsw i32 %31, %30
  %33 = lshr i32 %32, 1
  %34 = trunc i32 %33 to i16
  store i16 %34, i16* %25, align 4
  %35 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = getelementptr inbounds [4 x i16], [4 x i16]* %7, i64 0, i64 3
  %39 = load i16, i16* %38, align 2
  %40 = zext i16 %39 to i32
  %41 = add nuw nsw i32 %37, 1
  %42 = add nuw nsw i32 %41, %40
  %43 = lshr i32 %42, 1
  %44 = trunc i32 %43 to i16
  store i16 %44, i16* %35, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pmuludq_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %1 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = zext i32 %4 to i64
  %6 = bitcast %union.MMXReg* %0 to i32*
  %7 = load i32, i32* %6, align 8
  %8 = zext i32 %7 to i64
  %9 = mul nuw i64 %8, %5
  %10 = getelementptr %union.MMXReg, %union.MMXReg* %0, i64 0, i32 0
  store i64 %9, i64* %10, align 8
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind uwtable
define void @helper_pmaddwd_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #19 {
  %3 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %5 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %6 = bitcast %union.MMXReg* %1 to i16*
  %7 = load i16, i16* %6, align 2
  %8 = bitcast %union.MMXReg* %0 to i16*
  %9 = load i16, i16* %8, align 2
  %10 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %11 = load i16, i16* %10, align 2
  %12 = getelementptr inbounds [4 x i16], [4 x i16]* %4, i64 0, i64 1
  %13 = load i16, i16* %12, align 2
  %14 = sext i16 %7 to i32
  %15 = sext i16 %9 to i32
  %16 = mul nsw i32 %15, %14
  %17 = sext i16 %11 to i32
  %18 = sext i16 %13 to i32
  %19 = mul nsw i32 %18, %17
  %20 = add nsw i32 %19, %16
  %21 = bitcast %union.MMXReg* %0 to i32*
  store i32 %20, i32* %21, align 4
  %22 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %23 = load i16, i16* %22, align 2
  %24 = getelementptr inbounds [4 x i16], [4 x i16]* %4, i64 0, i64 2
  %25 = load i16, i16* %24, align 2
  %26 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %27 = load i16, i16* %26, align 2
  %28 = getelementptr inbounds [4 x i16], [4 x i16]* %4, i64 0, i64 3
  %29 = load i16, i16* %28, align 2
  %30 = sext i16 %23 to i32
  %31 = sext i16 %25 to i32
  %32 = mul nsw i32 %31, %30
  %33 = sext i16 %27 to i32
  %34 = sext i16 %29 to i32
  %35 = mul nsw i32 %34, %33
  %36 = add nsw i32 %35, %32
  %37 = getelementptr inbounds [2 x i32], [2 x i32]* %5, i64 0, i64 1
  store i32 %36, i32* %37, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define void @helper_psadbw_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #14 {
  %3 = bitcast %union.MMXReg* %0 to [8 x i8]*
  %4 = bitcast %union.MMXReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = zext i8 %5 to i32
  %7 = bitcast %union.MMXReg* %1 to [8 x i8]*
  %8 = bitcast %union.MMXReg* %1 to i8*
  %9 = load i8, i8* %8, align 8
  %10 = zext i8 %9 to i32
  %11 = sub nsw i32 %6, %10
  %12 = tail call i32 @llvm.abs.i32(i32 %11, i1 true) #30
  %13 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 1
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 1
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = sub nsw i32 %15, %18
  %20 = tail call i32 @llvm.abs.i32(i32 %19, i1 true) #30
  %21 = add nuw nsw i32 %20, %12
  %22 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 2
  %23 = load i8, i8* %22, align 2
  %24 = zext i8 %23 to i32
  %25 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 2
  %26 = load i8, i8* %25, align 2
  %27 = zext i8 %26 to i32
  %28 = sub nsw i32 %24, %27
  %29 = tail call i32 @llvm.abs.i32(i32 %28, i1 true) #30
  %30 = add nuw nsw i32 %21, %29
  %31 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 3
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 3
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i32
  %37 = sub nsw i32 %33, %36
  %38 = tail call i32 @llvm.abs.i32(i32 %37, i1 true) #30
  %39 = add nuw nsw i32 %30, %38
  %40 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 4
  %41 = load i8, i8* %40, align 4
  %42 = zext i8 %41 to i32
  %43 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 4
  %44 = load i8, i8* %43, align 4
  %45 = zext i8 %44 to i32
  %46 = sub nsw i32 %42, %45
  %47 = tail call i32 @llvm.abs.i32(i32 %46, i1 true) #30
  %48 = add nuw nsw i32 %39, %47
  %49 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 5
  %50 = load i8, i8* %49, align 1
  %51 = zext i8 %50 to i32
  %52 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 5
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i32
  %55 = sub nsw i32 %51, %54
  %56 = tail call i32 @llvm.abs.i32(i32 %55, i1 true) #30
  %57 = add nuw nsw i32 %48, %56
  %58 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 6
  %59 = load i8, i8* %58, align 2
  %60 = zext i8 %59 to i32
  %61 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 6
  %62 = load i8, i8* %61, align 2
  %63 = zext i8 %62 to i32
  %64 = sub nsw i32 %60, %63
  %65 = tail call i32 @llvm.abs.i32(i32 %64, i1 true) #30
  %66 = add nuw nsw i32 %57, %65
  %67 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 7
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i32
  %70 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 7
  %71 = load i8, i8* %70, align 1
  %72 = zext i8 %71 to i32
  %73 = sub nsw i32 %69, %72
  %74 = tail call i32 @llvm.abs.i32(i32 %73, i1 true) #30
  %75 = add nuw nsw i32 %66, %74
  %76 = zext i32 %75 to i64
  %77 = getelementptr %union.MMXReg, %union.MMXReg* %0, i64 0, i32 0
  store i64 %76, i64* %77, align 8
  ret void
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.abs.i32(i32, i1 immarg) #11

; Function Attrs: uwtable
define void @helper_maskmov_mmx(%union.MMXReg* nocapture noundef readonly %0, %union.MMXReg* nocapture noundef readonly %1, i64 noundef %2) local_unnamed_addr #3 {
  %4 = bitcast %union.MMXReg* %1 to [8 x i8]*
  %5 = bitcast %union.MMXReg* %0 to [8 x i8]*
  %6 = bitcast %union.MMXReg* %1 to i8*
  %7 = load i8, i8* %6, align 1
  %8 = icmp sgt i8 %7, -1
  br i1 %8, label %14, label %9

9:                                                ; preds = %3
  %10 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %11 = bitcast %union.MMXReg* %0 to i8*
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* noundef %10, i64 noundef %2, i32 noundef %13)
  br label %14

14:                                               ; preds = %3, %9
  %15 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 1
  %16 = load i8, i8* %15, align 1
  %17 = icmp sgt i8 %16, -1
  br i1 %17, label %24, label %18

18:                                               ; preds = %14
  %19 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %20 = add i64 %2, 1
  %21 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 1
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* noundef %19, i64 noundef %20, i32 noundef %23)
  br label %24

24:                                               ; preds = %18, %14
  %25 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 2
  %26 = load i8, i8* %25, align 1
  %27 = icmp sgt i8 %26, -1
  br i1 %27, label %34, label %28

28:                                               ; preds = %24
  %29 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %30 = add i64 %2, 2
  %31 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 2
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* noundef %29, i64 noundef %30, i32 noundef %33)
  br label %34

34:                                               ; preds = %28, %24
  %35 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 3
  %36 = load i8, i8* %35, align 1
  %37 = icmp sgt i8 %36, -1
  br i1 %37, label %44, label %38

38:                                               ; preds = %34
  %39 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %40 = add i64 %2, 3
  %41 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 3
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* noundef %39, i64 noundef %40, i32 noundef %43)
  br label %44

44:                                               ; preds = %38, %34
  %45 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 4
  %46 = load i8, i8* %45, align 1
  %47 = icmp sgt i8 %46, -1
  br i1 %47, label %54, label %48

48:                                               ; preds = %44
  %49 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %50 = add i64 %2, 4
  %51 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 4
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i32
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* noundef %49, i64 noundef %50, i32 noundef %53)
  br label %54

54:                                               ; preds = %48, %44
  %55 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 5
  %56 = load i8, i8* %55, align 1
  %57 = icmp sgt i8 %56, -1
  br i1 %57, label %64, label %58

58:                                               ; preds = %54
  %59 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %60 = add i64 %2, 5
  %61 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 5
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* noundef %59, i64 noundef %60, i32 noundef %63)
  br label %64

64:                                               ; preds = %58, %54
  %65 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 6
  %66 = load i8, i8* %65, align 1
  %67 = icmp sgt i8 %66, -1
  br i1 %67, label %74, label %68

68:                                               ; preds = %64
  %69 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %70 = add i64 %2, 6
  %71 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 6
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i32
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* noundef %69, i64 noundef %70, i32 noundef %73)
  br label %74

74:                                               ; preds = %68, %64
  %75 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 7
  %76 = load i8, i8* %75, align 1
  %77 = icmp sgt i8 %76, -1
  br i1 %77, label %84, label %78

78:                                               ; preds = %74
  %79 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %80 = add i64 %2, 7
  %81 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 7
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i32
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* noundef %79, i64 noundef %80, i32 noundef %83)
  br label %84

84:                                               ; preds = %78, %74
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn writeonly
define void @helper_movl_mm_T0_mmx(%union.MMXReg* nocapture noundef writeonly %0, i32 noundef %1) local_unnamed_addr #1 {
  %3 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %0 to i32*
  store i32 %1, i32* %4, align 8
  %5 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  store i32 0, i32* %5, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn writeonly
define void @helper_movq_mm_T0_mmx(%union.MMXReg* nocapture noundef writeonly %0, i64 noundef %1) local_unnamed_addr #1 {
  %3 = getelementptr %union.MMXReg, %union.MMXReg* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pshufw_mmx(%union.MMXReg* nocapture noundef writeonly %0, %union.MMXReg* nocapture noundef readonly %1, i32 noundef %2) local_unnamed_addr #2 {
  %4 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %5 = and i32 %2, 3
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds [4 x i16], [4 x i16]* %4, i64 0, i64 %6
  %8 = load i16, i16* %7, align 2
  %9 = lshr i32 %2, 2
  %10 = and i32 %9, 3
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds [4 x i16], [4 x i16]* %4, i64 0, i64 %11
  %13 = load i16, i16* %12, align 2
  %14 = lshr i32 %2, 4
  %15 = and i32 %14, 3
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds [4 x i16], [4 x i16]* %4, i64 0, i64 %16
  %18 = load i16, i16* %17, align 2
  %19 = lshr i32 %2, 6
  %20 = and i32 %19, 3
  %21 = zext i32 %20 to i64
  %22 = getelementptr inbounds [4 x i16], [4 x i16]* %4, i64 0, i64 %21
  %23 = load i16, i16* %22, align 2
  %24 = bitcast %union.MMXReg* %0 to i8*
  %25 = bitcast %union.MMXReg* %0 to i16*
  store i16 %8, i16* %25, align 8
  %26 = getelementptr inbounds i8, i8* %24, i64 2
  %27 = bitcast i8* %26 to i16*
  store i16 %13, i16* %27, align 2
  %28 = getelementptr inbounds i8, i8* %24, i64 4
  %29 = bitcast i8* %28 to i16*
  store i16 %18, i16* %29, align 4
  %30 = getelementptr inbounds i8, i8* %24, i64 6
  %31 = bitcast i8* %30 to i16*
  store i16 %23, i16* %31, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn
define i32 @helper_pmovmskb_mmx(%union.MMXReg* nocapture noundef readonly %0) local_unnamed_addr #0 {
  %2 = bitcast %union.MMXReg* %0 to [8 x i8]*
  %3 = bitcast %union.MMXReg* %0 to i8*
  %4 = load i8, i8* %3, align 8
  %5 = lshr i8 %4, 7
  %6 = getelementptr inbounds [8 x i8], [8 x i8]* %2, i64 0, i64 1
  %7 = load i8, i8* %6, align 1
  %8 = lshr i8 %7, 6
  %9 = and i8 %8, 2
  %10 = or i8 %9, %5
  %11 = getelementptr inbounds [8 x i8], [8 x i8]* %2, i64 0, i64 2
  %12 = load i8, i8* %11, align 2
  %13 = lshr i8 %12, 5
  %14 = and i8 %13, 4
  %15 = or i8 %10, %14
  %16 = getelementptr inbounds [8 x i8], [8 x i8]* %2, i64 0, i64 3
  %17 = load i8, i8* %16, align 1
  %18 = lshr i8 %17, 4
  %19 = and i8 %18, 8
  %20 = or i8 %15, %19
  %21 = getelementptr inbounds [8 x i8], [8 x i8]* %2, i64 0, i64 4
  %22 = load i8, i8* %21, align 4
  %23 = lshr i8 %22, 3
  %24 = and i8 %23, 16
  %25 = or i8 %20, %24
  %26 = getelementptr inbounds [8 x i8], [8 x i8]* %2, i64 0, i64 5
  %27 = load i8, i8* %26, align 1
  %28 = lshr i8 %27, 2
  %29 = and i8 %28, 32
  %30 = or i8 %25, %29
  %31 = getelementptr inbounds [8 x i8], [8 x i8]* %2, i64 0, i64 6
  %32 = load i8, i8* %31, align 2
  %33 = lshr i8 %32, 1
  %34 = and i8 %33, 64
  %35 = or i8 %30, %34
  %36 = getelementptr inbounds [8 x i8], [8 x i8]* %2, i64 0, i64 7
  %37 = load i8, i8* %36, align 1
  %38 = and i8 %37, -128
  %39 = or i8 %35, %38
  %40 = zext i8 %39 to i32
  ret i32 %40
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_packsswb_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = sext i16 %5 to i32
  %7 = icmp slt i32 %6, 127
  %8 = select i1 %7, i32 %6, i32 127
  %9 = icmp sgt i32 %8, -128
  %10 = select i1 %9, i32 %8, i32 -128
  %11 = trunc i32 %10 to i8
  %12 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %13 = load i16, i16* %12, align 2
  %14 = sext i16 %13 to i32
  %15 = icmp slt i32 %14, 127
  %16 = select i1 %15, i32 %14, i32 127
  %17 = icmp sgt i32 %16, -128
  %18 = select i1 %17, i32 %16, i32 -128
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %21 = load i16, i16* %20, align 4
  %22 = sext i16 %21 to i32
  %23 = icmp slt i32 %22, 127
  %24 = select i1 %23, i32 %22, i32 127
  %25 = icmp sgt i32 %24, -128
  %26 = select i1 %25, i32 %24, i32 -128
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %29 = load i16, i16* %28, align 2
  %30 = sext i16 %29 to i32
  %31 = icmp slt i32 %30, 127
  %32 = select i1 %31, i32 %30, i32 127
  %33 = icmp sgt i32 %32, -128
  %34 = select i1 %33, i32 %32, i32 -128
  %35 = trunc i32 %34 to i8
  %36 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %37 = bitcast %union.MMXReg* %1 to i16*
  %38 = load i16, i16* %37, align 8
  %39 = sext i16 %38 to i32
  %40 = icmp slt i32 %39, 127
  %41 = select i1 %40, i32 %39, i32 127
  %42 = icmp sgt i32 %41, -128
  %43 = select i1 %42, i32 %41, i32 -128
  %44 = trunc i32 %43 to i8
  %45 = getelementptr inbounds [4 x i16], [4 x i16]* %36, i64 0, i64 1
  %46 = load i16, i16* %45, align 2
  %47 = sext i16 %46 to i32
  %48 = icmp slt i32 %47, 127
  %49 = select i1 %48, i32 %47, i32 127
  %50 = icmp sgt i32 %49, -128
  %51 = select i1 %50, i32 %49, i32 -128
  %52 = trunc i32 %51 to i8
  %53 = getelementptr inbounds [4 x i16], [4 x i16]* %36, i64 0, i64 2
  %54 = load i16, i16* %53, align 4
  %55 = sext i16 %54 to i32
  %56 = icmp slt i32 %55, 127
  %57 = select i1 %56, i32 %55, i32 127
  %58 = icmp sgt i32 %57, -128
  %59 = select i1 %58, i32 %57, i32 -128
  %60 = trunc i32 %59 to i8
  %61 = getelementptr inbounds [4 x i16], [4 x i16]* %36, i64 0, i64 3
  %62 = load i16, i16* %61, align 2
  %63 = sext i16 %62 to i32
  %64 = icmp slt i32 %63, 127
  %65 = select i1 %64, i32 %63, i32 127
  %66 = icmp sgt i32 %65, -128
  %67 = select i1 %66, i32 %65, i32 -128
  %68 = trunc i32 %67 to i8
  %69 = bitcast %union.MMXReg* %0 to i8*
  store i8 %11, i8* %69, align 8
  %70 = getelementptr inbounds i8, i8* %69, i64 1
  store i8 %19, i8* %70, align 1
  %71 = getelementptr inbounds i8, i8* %69, i64 2
  store i8 %27, i8* %71, align 2
  %72 = getelementptr inbounds i8, i8* %69, i64 3
  store i8 %35, i8* %72, align 1
  %73 = getelementptr inbounds i8, i8* %69, i64 4
  store i8 %44, i8* %73, align 4
  %74 = getelementptr inbounds i8, i8* %69, i64 5
  store i8 %52, i8* %74, align 1
  %75 = getelementptr inbounds i8, i8* %69, i64 6
  store i8 %60, i8* %75, align 2
  %76 = getelementptr inbounds i8, i8* %69, i64 7
  store i8 %68, i8* %76, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_packuswb_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = sext i16 %5 to i32
  %7 = icmp slt i32 %6, 255
  %8 = select i1 %7, i32 %6, i32 255
  %9 = icmp sgt i32 %8, 0
  %10 = select i1 %9, i32 %8, i32 0
  %11 = trunc i32 %10 to i8
  %12 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %13 = load i16, i16* %12, align 2
  %14 = sext i16 %13 to i32
  %15 = icmp slt i32 %14, 255
  %16 = select i1 %15, i32 %14, i32 255
  %17 = icmp sgt i32 %16, 0
  %18 = select i1 %17, i32 %16, i32 0
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %21 = load i16, i16* %20, align 4
  %22 = sext i16 %21 to i32
  %23 = icmp slt i32 %22, 255
  %24 = select i1 %23, i32 %22, i32 255
  %25 = icmp sgt i32 %24, 0
  %26 = select i1 %25, i32 %24, i32 0
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %29 = load i16, i16* %28, align 2
  %30 = sext i16 %29 to i32
  %31 = icmp slt i32 %30, 255
  %32 = select i1 %31, i32 %30, i32 255
  %33 = icmp sgt i32 %32, 0
  %34 = select i1 %33, i32 %32, i32 0
  %35 = trunc i32 %34 to i8
  %36 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %37 = bitcast %union.MMXReg* %1 to i16*
  %38 = load i16, i16* %37, align 8
  %39 = sext i16 %38 to i32
  %40 = icmp slt i32 %39, 255
  %41 = select i1 %40, i32 %39, i32 255
  %42 = icmp sgt i32 %41, 0
  %43 = select i1 %42, i32 %41, i32 0
  %44 = trunc i32 %43 to i8
  %45 = getelementptr inbounds [4 x i16], [4 x i16]* %36, i64 0, i64 1
  %46 = load i16, i16* %45, align 2
  %47 = sext i16 %46 to i32
  %48 = icmp slt i32 %47, 255
  %49 = select i1 %48, i32 %47, i32 255
  %50 = icmp sgt i32 %49, 0
  %51 = select i1 %50, i32 %49, i32 0
  %52 = trunc i32 %51 to i8
  %53 = getelementptr inbounds [4 x i16], [4 x i16]* %36, i64 0, i64 2
  %54 = load i16, i16* %53, align 4
  %55 = sext i16 %54 to i32
  %56 = icmp slt i32 %55, 255
  %57 = select i1 %56, i32 %55, i32 255
  %58 = icmp sgt i32 %57, 0
  %59 = select i1 %58, i32 %57, i32 0
  %60 = trunc i32 %59 to i8
  %61 = getelementptr inbounds [4 x i16], [4 x i16]* %36, i64 0, i64 3
  %62 = load i16, i16* %61, align 2
  %63 = sext i16 %62 to i32
  %64 = icmp slt i32 %63, 255
  %65 = select i1 %64, i32 %63, i32 255
  %66 = icmp sgt i32 %65, 0
  %67 = select i1 %66, i32 %65, i32 0
  %68 = trunc i32 %67 to i8
  %69 = bitcast %union.MMXReg* %0 to i8*
  store i8 %11, i8* %69, align 8
  %70 = getelementptr inbounds i8, i8* %69, i64 1
  store i8 %19, i8* %70, align 1
  %71 = getelementptr inbounds i8, i8* %69, i64 2
  store i8 %27, i8* %71, align 2
  %72 = getelementptr inbounds i8, i8* %69, i64 3
  store i8 %35, i8* %72, align 1
  %73 = getelementptr inbounds i8, i8* %69, i64 4
  store i8 %44, i8* %73, align 4
  %74 = getelementptr inbounds i8, i8* %69, i64 5
  store i8 %52, i8* %74, align 1
  %75 = getelementptr inbounds i8, i8* %69, i64 6
  store i8 %60, i8* %75, align 2
  %76 = getelementptr inbounds i8, i8* %69, i64 7
  store i8 %68, i8* %76, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_packssdw_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = icmp slt i32 %5, 32767
  %7 = select i1 %6, i32 %5, i32 32767
  %8 = icmp sgt i32 %7, -32768
  %9 = select i1 %8, i32 %7, i32 -32768
  %10 = trunc i32 %9 to i16
  %11 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = icmp slt i32 %12, 32767
  %14 = select i1 %13, i32 %12, i32 32767
  %15 = icmp sgt i32 %14, -32768
  %16 = select i1 %15, i32 %14, i32 -32768
  %17 = trunc i32 %16 to i16
  %18 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %19 = bitcast %union.MMXReg* %1 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = icmp slt i32 %20, 32767
  %22 = select i1 %21, i32 %20, i32 32767
  %23 = icmp sgt i32 %22, -32768
  %24 = select i1 %23, i32 %22, i32 -32768
  %25 = trunc i32 %24 to i16
  %26 = getelementptr inbounds [2 x i32], [2 x i32]* %18, i64 0, i64 1
  %27 = load i32, i32* %26, align 4
  %28 = icmp slt i32 %27, 32767
  %29 = select i1 %28, i32 %27, i32 32767
  %30 = icmp sgt i32 %29, -32768
  %31 = select i1 %30, i32 %29, i32 -32768
  %32 = trunc i32 %31 to i16
  %33 = bitcast %union.MMXReg* %0 to i8*
  %34 = bitcast %union.MMXReg* %0 to i16*
  store i16 %10, i16* %34, align 8
  %35 = getelementptr inbounds i8, i8* %33, i64 2
  %36 = bitcast i8* %35 to i16*
  store i16 %17, i16* %36, align 2
  %37 = getelementptr inbounds i8, i8* %33, i64 4
  %38 = bitcast i8* %37 to i16*
  store i16 %25, i16* %38, align 4
  %39 = getelementptr inbounds i8, i8* %33, i64 6
  %40 = bitcast i8* %39 to i16*
  store i16 %32, i16* %40, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_punpcklbw_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [8 x i8]*
  %4 = bitcast %union.MMXReg* %0 to i8*
  %5 = bitcast %union.MMXReg* %1 to [8 x i8]*
  %6 = bitcast %union.MMXReg* %1 to i8*
  %7 = load i8, i8* %6, align 8
  %8 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 1
  %9 = load i8, i8* %8, align 1
  %10 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 1
  %11 = load i8, i8* %10, align 1
  %12 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 2
  %13 = load i8, i8* %12, align 2
  %14 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 2
  %15 = load i8, i8* %14, align 2
  %16 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 3
  %17 = load i8, i8* %16, align 1
  %18 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 3
  %19 = load i8, i8* %18, align 1
  %20 = getelementptr inbounds i8, i8* %4, i64 1
  store i8 %7, i8* %20, align 1
  %21 = getelementptr inbounds i8, i8* %4, i64 2
  store i8 %9, i8* %21, align 2
  %22 = getelementptr inbounds i8, i8* %4, i64 3
  store i8 %11, i8* %22, align 1
  %23 = getelementptr inbounds i8, i8* %4, i64 4
  store i8 %13, i8* %23, align 4
  %24 = getelementptr inbounds i8, i8* %4, i64 5
  store i8 %15, i8* %24, align 1
  %25 = getelementptr inbounds i8, i8* %4, i64 6
  store i8 %17, i8* %25, align 2
  %26 = getelementptr inbounds i8, i8* %4, i64 7
  store i8 %19, i8* %26, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_punpcklwd_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %5 = bitcast %union.MMXReg* %1 to i16*
  %6 = load i16, i16* %5, align 8
  %7 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %8 = load i16, i16* %7, align 2
  %9 = getelementptr inbounds [4 x i16], [4 x i16]* %4, i64 0, i64 1
  %10 = load i16, i16* %9, align 2
  %11 = bitcast %union.MMXReg* %0 to i8*
  %12 = getelementptr inbounds i8, i8* %11, i64 2
  %13 = bitcast i8* %12 to i16*
  store i16 %6, i16* %13, align 2
  %14 = getelementptr inbounds i8, i8* %11, i64 4
  %15 = bitcast i8* %14 to i16*
  store i16 %8, i16* %15, align 4
  %16 = getelementptr inbounds i8, i8* %11, i64 6
  %17 = bitcast i8* %16 to i16*
  store i16 %10, i16* %17, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_punpckldq_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %1 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = bitcast %union.MMXReg* %0 to i8*
  %6 = getelementptr inbounds i8, i8* %5, i64 4
  %7 = bitcast i8* %6 to i32*
  store i32 %4, i32* %7, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_punpckhbw_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [8 x i8]*
  %4 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 4
  %5 = load i8, i8* %4, align 4
  %6 = bitcast %union.MMXReg* %1 to [8 x i8]*
  %7 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 4
  %8 = load i8, i8* %7, align 4
  %9 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 5
  %10 = load i8, i8* %9, align 1
  %11 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 5
  %12 = load i8, i8* %11, align 1
  %13 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 6
  %14 = load i8, i8* %13, align 2
  %15 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 6
  %16 = load i8, i8* %15, align 2
  %17 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 7
  %18 = load i8, i8* %17, align 1
  %19 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 7
  %20 = load i8, i8* %19, align 1
  %21 = bitcast %union.MMXReg* %0 to i8*
  store i8 %5, i8* %21, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 1
  store i8 %8, i8* %22, align 1
  %23 = getelementptr inbounds i8, i8* %21, i64 2
  store i8 %10, i8* %23, align 2
  %24 = getelementptr inbounds i8, i8* %21, i64 3
  store i8 %12, i8* %24, align 1
  %25 = getelementptr inbounds i8, i8* %21, i64 4
  store i8 %14, i8* %25, align 4
  %26 = getelementptr inbounds i8, i8* %21, i64 5
  store i8 %16, i8* %26, align 1
  %27 = getelementptr inbounds i8, i8* %21, i64 6
  store i8 %18, i8* %27, align 2
  %28 = getelementptr inbounds i8, i8* %21, i64 7
  store i8 %20, i8* %28, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_punpckhwd_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %4 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %5 = load i16, i16* %4, align 4
  %6 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %7 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 2
  %8 = load i16, i16* %7, align 4
  %9 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %10 = load i16, i16* %9, align 2
  %11 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 3
  %12 = load i16, i16* %11, align 2
  %13 = bitcast %union.MMXReg* %0 to i8*
  %14 = bitcast %union.MMXReg* %0 to i16*
  store i16 %5, i16* %14, align 8
  %15 = getelementptr inbounds i8, i8* %13, i64 2
  %16 = bitcast i8* %15 to i16*
  store i16 %8, i16* %16, align 2
  %17 = getelementptr inbounds i8, i8* %13, i64 4
  %18 = bitcast i8* %17 to i16*
  store i16 %10, i16* %18, align 4
  %19 = getelementptr inbounds i8, i8* %13, i64 6
  %20 = bitcast i8* %19 to i16*
  store i16 %12, i16* %20, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_punpckhdq_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %4 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %5 = load i32, i32* %4, align 4
  %6 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %7 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 1
  %8 = load i32, i32* %7, align 4
  %9 = bitcast %union.MMXReg* %0 to i8*
  %10 = bitcast %union.MMXReg* %0 to i32*
  store i32 %5, i32* %10, align 8
  %11 = getelementptr inbounds i8, i8* %9, i64 4
  %12 = bitcast i8* %11 to i32*
  store i32 %8, i32* %12, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_pi2fd(%union.MMXReg* nocapture noundef writeonly %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %6, i64 0, i32 12
  %8 = tail call i32 @int32_to_float32(i32 noundef %5, %struct.float_status* noundef nonnull %7)
  %9 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %10 = bitcast %union.MMXReg* %0 to i32*
  store i32 %8, i32* %10, align 8
  %11 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %13, i64 0, i32 12
  %15 = tail call i32 @int32_to_float32(i32 noundef %12, %struct.float_status* noundef nonnull %14)
  %16 = getelementptr inbounds [2 x i32], [2 x i32]* %9, i64 0, i64 1
  store i32 %15, i32* %16, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_pi2fw(%union.MMXReg* nocapture noundef writeonly %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %1 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = sext i16 %5 to i32
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 12
  %9 = tail call i32 @int32_to_float32(i32 noundef %6, %struct.float_status* noundef nonnull %8)
  %10 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %11 = bitcast %union.MMXReg* %0 to i32*
  store i32 %9, i32* %11, align 8
  %12 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %13 = load i16, i16* %12, align 4
  %14 = sext i16 %13 to i32
  %15 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 12
  %17 = tail call i32 @int32_to_float32(i32 noundef %14, %struct.float_status* noundef nonnull %16)
  %18 = getelementptr inbounds [2 x i32], [2 x i32]* %10, i64 0, i64 1
  store i32 %17, i32* %18, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_pf2id(%union.MMXReg* nocapture noundef writeonly %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %6, i64 0, i32 12
  %8 = tail call i32 @float32_to_int32_round_to_zero(i32 noundef %5, %struct.float_status* noundef nonnull %7)
  %9 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %10 = bitcast %union.MMXReg* %0 to i32*
  store i32 %8, i32* %10, align 8
  %11 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %13, i64 0, i32 12
  %15 = tail call i32 @float32_to_int32_round_to_zero(i32 noundef %12, %struct.float_status* noundef nonnull %14)
  %16 = getelementptr inbounds [2 x i32], [2 x i32]* %9, i64 0, i64 1
  store i32 %15, i32* %16, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_pf2iw(%union.MMXReg* nocapture noundef writeonly %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %6, i64 0, i32 12
  %8 = tail call i32 @float32_to_int32_round_to_zero(i32 noundef %5, %struct.float_status* noundef nonnull %7)
  %9 = icmp slt i32 %8, 32767
  %10 = select i1 %9, i32 %8, i32 32767
  %11 = icmp sgt i32 %10, -32768
  %12 = select i1 %11, i32 %10, i32 -32768
  %13 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %14 = bitcast %union.MMXReg* %0 to i32*
  store i32 %12, i32* %14, align 8
  %15 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %16 = load i32, i32* %15, align 4
  %17 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %18 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %17, i64 0, i32 12
  %19 = tail call i32 @float32_to_int32_round_to_zero(i32 noundef %16, %struct.float_status* noundef nonnull %18)
  %20 = icmp slt i32 %19, 32767
  %21 = select i1 %20, i32 %19, i32 32767
  %22 = icmp sgt i32 %21, -32768
  %23 = select i1 %22, i32 %21, i32 -32768
  %24 = getelementptr inbounds [2 x i32], [2 x i32]* %13, i64 0, i64 1
  store i32 %23, i32* %24, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_pfacc(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %8, i64 0, i32 12
  %10 = tail call i32 @float32_add(i32 noundef %5, i32 noundef %7, %struct.float_status* noundef nonnull %9)
  %11 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %12 = bitcast %union.MMXReg* %1 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds [2 x i32], [2 x i32]* %11, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 12
  %18 = tail call i32 @float32_add(i32 noundef %13, i32 noundef %15, %struct.float_status* noundef nonnull %17)
  %19 = bitcast %union.MMXReg* %0 to i8*
  store i32 %10, i32* %4, align 8
  %20 = getelementptr inbounds i8, i8* %19, i64 4
  %21 = bitcast i8* %20 to i32*
  store i32 %18, i32* %21, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_pfadd(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %7 = bitcast %union.MMXReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 12
  %11 = tail call i32 @float32_add(i32 noundef %5, i32 noundef %8, %struct.float_status* noundef nonnull %10)
  store i32 %11, i32* %4, align 8
  %12 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 12
  %18 = tail call i32 @float32_add(i32 noundef %13, i32 noundef %15, %struct.float_status* noundef nonnull %17)
  store i32 %18, i32* %12, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_pfcmpeq(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %7 = bitcast %union.MMXReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 12
  %11 = tail call i32 @float32_eq_quiet(i32 noundef %5, i32 noundef %8, %struct.float_status* noundef nonnull %10)
  %12 = icmp ne i32 %11, 0
  %13 = sext i1 %12 to i32
  store i32 %13, i32* %4, align 8
  %14 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 1
  %17 = load i32, i32* %16, align 4
  %18 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %19 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 12
  %20 = tail call i32 @float32_eq_quiet(i32 noundef %15, i32 noundef %17, %struct.float_status* noundef nonnull %19)
  %21 = icmp ne i32 %20, 0
  %22 = sext i1 %21 to i32
  store i32 %22, i32* %14, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_pfcmpge(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %7 = bitcast %union.MMXReg* %0 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 12
  %11 = tail call i32 @float32_le(i32 noundef %5, i32 noundef %8, %struct.float_status* noundef nonnull %10)
  %12 = icmp ne i32 %11, 0
  %13 = sext i1 %12 to i32
  store i32 %13, i32* %7, align 8
  %14 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 1
  %17 = load i32, i32* %16, align 4
  %18 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %19 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 12
  %20 = tail call i32 @float32_le(i32 noundef %15, i32 noundef %17, %struct.float_status* noundef nonnull %19)
  %21 = icmp ne i32 %20, 0
  %22 = sext i1 %21 to i32
  store i32 %22, i32* %16, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_pfcmpgt(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %7 = bitcast %union.MMXReg* %0 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 12
  %11 = tail call i32 @float32_lt(i32 noundef %5, i32 noundef %8, %struct.float_status* noundef nonnull %10)
  %12 = icmp ne i32 %11, 0
  %13 = sext i1 %12 to i32
  store i32 %13, i32* %7, align 8
  %14 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 1
  %17 = load i32, i32* %16, align 4
  %18 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %19 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 12
  %20 = tail call i32 @float32_lt(i32 noundef %15, i32 noundef %17, %struct.float_status* noundef nonnull %19)
  %21 = icmp ne i32 %20, 0
  %22 = sext i1 %21 to i32
  store i32 %22, i32* %16, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_pfmax(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %7 = bitcast %union.MMXReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 12
  %11 = tail call i32 @float32_lt(i32 noundef %5, i32 noundef %8, %struct.float_status* noundef nonnull %10)
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %15, label %13

13:                                               ; preds = %2
  %14 = load i32, i32* %7, align 8
  store i32 %14, i32* %4, align 8
  br label %15

15:                                               ; preds = %13, %2
  %16 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 1
  %19 = load i32, i32* %18, align 4
  %20 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %21 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %20, i64 0, i32 12
  %22 = tail call i32 @float32_lt(i32 noundef %17, i32 noundef %19, %struct.float_status* noundef nonnull %21)
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %26, label %24

24:                                               ; preds = %15
  %25 = load i32, i32* %18, align 4
  store i32 %25, i32* %16, align 4
  br label %26

26:                                               ; preds = %24, %15
  ret void
}

; Function Attrs: uwtable
define void @helper_pfmin(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %7 = bitcast %union.MMXReg* %0 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 12
  %11 = tail call i32 @float32_lt(i32 noundef %5, i32 noundef %8, %struct.float_status* noundef nonnull %10)
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %15, label %13

13:                                               ; preds = %2
  %14 = load i32, i32* %4, align 8
  store i32 %14, i32* %7, align 8
  br label %15

15:                                               ; preds = %13, %2
  %16 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 1
  %19 = load i32, i32* %18, align 4
  %20 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %21 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %20, i64 0, i32 12
  %22 = tail call i32 @float32_lt(i32 noundef %17, i32 noundef %19, %struct.float_status* noundef nonnull %21)
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %26, label %24

24:                                               ; preds = %15
  %25 = load i32, i32* %16, align 4
  store i32 %25, i32* %18, align 4
  br label %26

26:                                               ; preds = %24, %15
  ret void
}

; Function Attrs: uwtable
define void @helper_pfmul(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %7 = bitcast %union.MMXReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 12
  %11 = tail call i32 @float32_mul(i32 noundef %5, i32 noundef %8, %struct.float_status* noundef nonnull %10)
  store i32 %11, i32* %4, align 8
  %12 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 12
  %18 = tail call i32 @float32_mul(i32 noundef %13, i32 noundef %15, %struct.float_status* noundef nonnull %17)
  store i32 %18, i32* %12, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_pfnacc(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %8, i64 0, i32 12
  %10 = tail call i32 @float32_sub(i32 noundef %5, i32 noundef %7, %struct.float_status* noundef nonnull %9)
  %11 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %12 = bitcast %union.MMXReg* %1 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds [2 x i32], [2 x i32]* %11, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 12
  %18 = tail call i32 @float32_sub(i32 noundef %13, i32 noundef %15, %struct.float_status* noundef nonnull %17)
  %19 = bitcast %union.MMXReg* %0 to i8*
  store i32 %10, i32* %4, align 8
  %20 = getelementptr inbounds i8, i8* %19, i64 4
  %21 = bitcast i8* %20 to i32*
  store i32 %18, i32* %21, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_pfpnacc(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %8, i64 0, i32 12
  %10 = tail call i32 @float32_sub(i32 noundef %5, i32 noundef %7, %struct.float_status* noundef nonnull %9)
  %11 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %12 = bitcast %union.MMXReg* %1 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds [2 x i32], [2 x i32]* %11, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 12
  %18 = tail call i32 @float32_add(i32 noundef %13, i32 noundef %15, %struct.float_status* noundef nonnull %17)
  %19 = bitcast %union.MMXReg* %0 to i8*
  store i32 %10, i32* %4, align 8
  %20 = getelementptr inbounds i8, i8* %19, i64 4
  %21 = bitcast i8* %20 to i32*
  store i32 %18, i32* %21, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_pfrcp(%union.MMXReg* nocapture noundef writeonly %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.MMXReg* %1 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 12
  %7 = tail call i32 @float32_div(i32 noundef 1065353216, i32 noundef %4, %struct.float_status* noundef nonnull %6)
  %8 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %9 = bitcast %union.MMXReg* %0 to i32*
  store i32 %7, i32* %9, align 8
  %10 = getelementptr inbounds [2 x i32], [2 x i32]* %8, i64 0, i64 1
  store i32 %7, i32* %10, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_pfrsqrt(%union.MMXReg* nocapture noundef writeonly %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.MMXReg* %1 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = and i32 %4, 2147483647
  %6 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %7 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 1
  store i32 %5, i32* %7, align 4
  %8 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %8, i64 0, i32 12
  %10 = tail call i32 @float32_sqrt(i32 noundef %5, %struct.float_status* noundef nonnull %9)
  %11 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %11, i64 0, i32 12
  %13 = tail call i32 @float32_div(i32 noundef 1065353216, i32 noundef %10, %struct.float_status* noundef nonnull %12)
  store i32 %13, i32* %7, align 4
  %14 = load i32, i32* %3, align 8
  %15 = and i32 %14, -2147483648
  %16 = or i32 %15, %13
  store i32 %16, i32* %7, align 4
  %17 = bitcast %union.MMXReg* %0 to i32*
  store i32 %16, i32* %17, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_pfsub(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %7 = bitcast %union.MMXReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 12
  %11 = tail call i32 @float32_sub(i32 noundef %5, i32 noundef %8, %struct.float_status* noundef nonnull %10)
  store i32 %11, i32* %4, align 8
  %12 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 12
  %18 = tail call i32 @float32_sub(i32 noundef %13, i32 noundef %15, %struct.float_status* noundef nonnull %17)
  store i32 %18, i32* %12, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_pfsubr(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %7 = bitcast %union.MMXReg* %0 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 12
  %11 = tail call i32 @float32_sub(i32 noundef %5, i32 noundef %8, %struct.float_status* noundef nonnull %10)
  store i32 %11, i32* %7, align 8
  %12 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 12
  %18 = tail call i32 @float32_sub(i32 noundef %13, i32 noundef %15, %struct.float_status* noundef nonnull %17)
  store i32 %18, i32* %14, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pswapd(%union.MMXReg* nocapture noundef writeonly %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %4 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %5 = load i32, i32* %4, align 4
  %6 = bitcast %union.MMXReg* %1 to i32*
  %7 = load i32, i32* %6, align 8
  %8 = bitcast %union.MMXReg* %0 to i8*
  %9 = bitcast %union.MMXReg* %0 to i32*
  store i32 %5, i32* %9, align 8
  %10 = getelementptr inbounds i8, i8* %8, i64 4
  %11 = bitcast i8* %10 to i32*
  store i32 %7, i32* %11, align 4
  ret void
}

; Function Attrs: nofree nosync nounwind uwtable
define void @helper_pshufb_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #20 {
  %3 = bitcast %union.MMXReg* %1 to [8 x i8]*
  %4 = bitcast %union.MMXReg* %0 to [8 x i8]*
  %5 = bitcast %union.MMXReg* %1 to i8*
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = and i32 %7, 128
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %16

10:                                               ; preds = %2
  %11 = and i32 %7, 7
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 %12
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i64
  br label %16

16:                                               ; preds = %2, %10
  %17 = phi i64 [ %15, %10 ], [ 0, %2 ]
  %18 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 1
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = and i32 %20, 128
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %30

23:                                               ; preds = %16
  %24 = and i32 %20, 7
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 %25
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i64
  %29 = shl nuw nsw i64 %28, 8
  br label %30

30:                                               ; preds = %23, %16
  %31 = phi i64 [ %29, %23 ], [ 0, %16 ]
  %32 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 2
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = and i32 %34, 128
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %44

37:                                               ; preds = %30
  %38 = and i32 %34, 7
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 %39
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i64
  %43 = shl nuw nsw i64 %42, 16
  br label %44

44:                                               ; preds = %37, %30
  %45 = phi i64 [ %43, %37 ], [ 0, %30 ]
  %46 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 3
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = and i32 %48, 128
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %58

51:                                               ; preds = %44
  %52 = and i32 %48, 7
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 %53
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i64
  %57 = shl nuw nsw i64 %56, 24
  br label %58

58:                                               ; preds = %51, %44
  %59 = phi i64 [ %57, %51 ], [ 0, %44 ]
  %60 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 4
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i32
  %63 = and i32 %62, 128
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %72

65:                                               ; preds = %58
  %66 = and i32 %62, 7
  %67 = zext i32 %66 to i64
  %68 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 %67
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i64
  %71 = shl nuw nsw i64 %70, 32
  br label %72

72:                                               ; preds = %65, %58
  %73 = phi i64 [ %71, %65 ], [ 0, %58 ]
  %74 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 5
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i32
  %77 = and i32 %76, 128
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %86

79:                                               ; preds = %72
  %80 = and i32 %76, 7
  %81 = zext i32 %80 to i64
  %82 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 %81
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i64
  %85 = shl nuw nsw i64 %84, 40
  br label %86

86:                                               ; preds = %79, %72
  %87 = phi i64 [ %85, %79 ], [ 0, %72 ]
  %88 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 6
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i32
  %91 = and i32 %90, 128
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %93, label %100

93:                                               ; preds = %86
  %94 = and i32 %90, 7
  %95 = zext i32 %94 to i64
  %96 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 %95
  %97 = load i8, i8* %96, align 1
  %98 = zext i8 %97 to i64
  %99 = shl nuw nsw i64 %98, 48
  br label %100

100:                                              ; preds = %93, %86
  %101 = phi i64 [ %99, %93 ], [ 0, %86 ]
  %102 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 7
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i32
  %105 = and i32 %104, 128
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %107, label %114

107:                                              ; preds = %100
  %108 = and i32 %104, 7
  %109 = zext i32 %108 to i64
  %110 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 %109
  %111 = load i8, i8* %110, align 1
  %112 = zext i8 %111 to i64
  %113 = shl nuw i64 %112, 56
  br label %114

114:                                              ; preds = %107, %100
  %115 = phi i64 [ %113, %107 ], [ 0, %100 ]
  %116 = getelementptr %union.MMXReg, %union.MMXReg* %0, i64 0, i32 0
  %117 = or i64 %115, %101
  %118 = or i64 %117, %87
  %119 = or i64 %118, %73
  %120 = or i64 %119, %59
  %121 = or i64 %120, %45
  %122 = or i64 %121, %31
  %123 = or i64 %122, %17
  store i64 %123, i64* %116, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_phaddw_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %7 = load i16, i16* %6, align 2
  %8 = add i16 %7, %5
  store i16 %8, i16* %4, align 8
  %9 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %10 = load i16, i16* %9, align 4
  %11 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %12 = load i16, i16* %11, align 2
  %13 = add i16 %12, %10
  store i16 %13, i16* %6, align 2
  %14 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %15 = bitcast %union.MMXReg* %1 to i16*
  %16 = load i16, i16* %15, align 8
  %17 = getelementptr inbounds [4 x i16], [4 x i16]* %14, i64 0, i64 1
  %18 = load i16, i16* %17, align 2
  %19 = add i16 %18, %16
  store i16 %19, i16* %9, align 4
  %20 = getelementptr inbounds [4 x i16], [4 x i16]* %14, i64 0, i64 2
  %21 = load i16, i16* %20, align 4
  %22 = getelementptr inbounds [4 x i16], [4 x i16]* %14, i64 0, i64 3
  %23 = load i16, i16* %22, align 2
  %24 = add i16 %23, %21
  store i16 %24, i16* %11, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_phaddd_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = add nsw i32 %7, %5
  store i32 %8, i32* %4, align 8
  %9 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %10 = bitcast %union.MMXReg* %1 to i32*
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds [2 x i32], [2 x i32]* %9, i64 0, i64 1
  %13 = load i32, i32* %12, align 4
  %14 = add nsw i32 %13, %11
  store i32 %14, i32* %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_phaddsw_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %7 = load i16, i16* %6, align 2
  %8 = add i16 %5, %7
  %9 = icmp slt i16 %5, 0
  %10 = icmp slt i16 %7, 0
  %11 = icmp slt i16 %8, 0
  %12 = select i1 %10, i16 -32768, i16 32767
  %13 = xor i1 %9, %11
  %14 = xor i1 %9, %10
  %15 = xor i1 %14, true
  %16 = and i1 %13, %15
  %17 = select i1 %16, i16 %12, i16 %8
  store i16 %17, i16* %4, align 8
  %18 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %19 = load i16, i16* %18, align 4
  %20 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %21 = load i16, i16* %20, align 2
  %22 = add i16 %19, %21
  %23 = icmp slt i16 %19, 0
  %24 = icmp slt i16 %21, 0
  %25 = icmp slt i16 %22, 0
  %26 = select i1 %24, i16 -32768, i16 32767
  %27 = xor i1 %23, %25
  %28 = xor i1 %23, %24
  %29 = xor i1 %28, true
  %30 = and i1 %27, %29
  %31 = select i1 %30, i16 %26, i16 %22
  store i16 %31, i16* %6, align 2
  %32 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %33 = bitcast %union.MMXReg* %1 to i16*
  %34 = load i16, i16* %33, align 8
  %35 = getelementptr inbounds [4 x i16], [4 x i16]* %32, i64 0, i64 1
  %36 = load i16, i16* %35, align 2
  %37 = add i16 %34, %36
  %38 = icmp slt i16 %34, 0
  %39 = icmp slt i16 %36, 0
  %40 = icmp slt i16 %37, 0
  %41 = select i1 %39, i16 -32768, i16 32767
  %42 = xor i1 %38, %40
  %43 = xor i1 %38, %39
  %44 = xor i1 %43, true
  %45 = and i1 %42, %44
  %46 = select i1 %45, i16 %41, i16 %37
  store i16 %46, i16* %18, align 4
  %47 = getelementptr inbounds [4 x i16], [4 x i16]* %32, i64 0, i64 2
  %48 = load i16, i16* %47, align 4
  %49 = getelementptr inbounds [4 x i16], [4 x i16]* %32, i64 0, i64 3
  %50 = load i16, i16* %49, align 2
  %51 = add i16 %48, %50
  %52 = icmp slt i16 %48, 0
  %53 = icmp slt i16 %50, 0
  %54 = icmp slt i16 %51, 0
  %55 = select i1 %53, i16 -32768, i16 32767
  %56 = xor i1 %52, %54
  %57 = xor i1 %52, %53
  %58 = xor i1 %57, true
  %59 = and i1 %56, %58
  %60 = select i1 %59, i16 %55, i16 %51
  store i16 %60, i16* %20, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pmaddubsw_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %1 to [8 x i8]*
  %4 = bitcast %union.MMXReg* %1 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = sext i8 %5 to i32
  %7 = bitcast %union.MMXReg* %0 to [8 x i8]*
  %8 = bitcast %union.MMXReg* %0 to i8*
  %9 = load i8, i8* %8, align 8
  %10 = zext i8 %9 to i32
  %11 = mul nsw i32 %10, %6
  %12 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 1
  %13 = load i8, i8* %12, align 1
  %14 = sext i8 %13 to i32
  %15 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 1
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = mul nsw i32 %17, %14
  %19 = add nsw i32 %18, %11
  %20 = icmp slt i32 %19, 32767
  %21 = select i1 %20, i32 %19, i32 32767
  %22 = icmp sgt i32 %21, -32768
  %23 = select i1 %22, i32 %21, i32 -32768
  %24 = trunc i32 %23 to i16
  %25 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %26 = bitcast %union.MMXReg* %0 to i16*
  store i16 %24, i16* %26, align 8
  %27 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 2
  %28 = load i8, i8* %27, align 2
  %29 = sext i8 %28 to i32
  %30 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 2
  %31 = load i8, i8* %30, align 2
  %32 = zext i8 %31 to i32
  %33 = mul nsw i32 %32, %29
  %34 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 3
  %35 = load i8, i8* %34, align 1
  %36 = sext i8 %35 to i32
  %37 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 3
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i32
  %40 = mul nsw i32 %39, %36
  %41 = add nsw i32 %40, %33
  %42 = icmp slt i32 %41, 32767
  %43 = select i1 %42, i32 %41, i32 32767
  %44 = icmp sgt i32 %43, -32768
  %45 = select i1 %44, i32 %43, i32 -32768
  %46 = trunc i32 %45 to i16
  %47 = getelementptr inbounds [4 x i16], [4 x i16]* %25, i64 0, i64 1
  store i16 %46, i16* %47, align 2
  %48 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 4
  %49 = load i8, i8* %48, align 4
  %50 = sext i8 %49 to i32
  %51 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 4
  %52 = load i8, i8* %51, align 4
  %53 = zext i8 %52 to i32
  %54 = mul nsw i32 %53, %50
  %55 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 5
  %56 = load i8, i8* %55, align 1
  %57 = sext i8 %56 to i32
  %58 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 5
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i32
  %61 = mul nsw i32 %60, %57
  %62 = add nsw i32 %61, %54
  %63 = icmp slt i32 %62, 32767
  %64 = select i1 %63, i32 %62, i32 32767
  %65 = icmp sgt i32 %64, -32768
  %66 = select i1 %65, i32 %64, i32 -32768
  %67 = trunc i32 %66 to i16
  %68 = getelementptr inbounds [4 x i16], [4 x i16]* %25, i64 0, i64 2
  store i16 %67, i16* %68, align 4
  %69 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 6
  %70 = load i8, i8* %69, align 2
  %71 = sext i8 %70 to i32
  %72 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 6
  %73 = load i8, i8* %72, align 2
  %74 = zext i8 %73 to i32
  %75 = mul nsw i32 %74, %71
  %76 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 7
  %77 = load i8, i8* %76, align 1
  %78 = sext i8 %77 to i32
  %79 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 7
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i32
  %82 = mul nsw i32 %81, %78
  %83 = add nsw i32 %82, %75
  %84 = icmp slt i32 %83, 32767
  %85 = select i1 %84, i32 %83, i32 32767
  %86 = icmp sgt i32 %85, -32768
  %87 = select i1 %86, i32 %85, i32 -32768
  %88 = trunc i32 %87 to i16
  %89 = getelementptr inbounds [4 x i16], [4 x i16]* %25, i64 0, i64 3
  store i16 %88, i16* %89, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_phsubw_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %7 = load i16, i16* %6, align 2
  %8 = sub i16 %5, %7
  store i16 %8, i16* %4, align 8
  %9 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %10 = load i16, i16* %9, align 4
  %11 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %12 = load i16, i16* %11, align 2
  %13 = sub i16 %10, %12
  store i16 %13, i16* %6, align 2
  %14 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %15 = bitcast %union.MMXReg* %1 to i16*
  %16 = load i16, i16* %15, align 8
  %17 = getelementptr inbounds [4 x i16], [4 x i16]* %14, i64 0, i64 1
  %18 = load i16, i16* %17, align 2
  %19 = sub i16 %16, %18
  store i16 %19, i16* %9, align 4
  %20 = getelementptr inbounds [4 x i16], [4 x i16]* %14, i64 0, i64 2
  %21 = load i16, i16* %20, align 4
  %22 = getelementptr inbounds [4 x i16], [4 x i16]* %14, i64 0, i64 3
  %23 = load i16, i16* %22, align 2
  %24 = sub i16 %21, %23
  store i16 %24, i16* %11, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_phsubd_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = sub nsw i32 %5, %7
  store i32 %8, i32* %4, align 8
  %9 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %10 = bitcast %union.MMXReg* %1 to i32*
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds [2 x i32], [2 x i32]* %9, i64 0, i64 1
  %13 = load i32, i32* %12, align 4
  %14 = sub nsw i32 %11, %13
  store i32 %14, i32* %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_phsubsw_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %7 = load i16, i16* %6, align 2
  %8 = sub i16 %5, %7
  %9 = icmp slt i16 %5, 0
  %10 = icmp slt i16 %7, 0
  %11 = icmp slt i16 %8, 0
  %12 = select i1 %10, i16 32767, i16 -32768
  %13 = xor i1 %9, %11
  %14 = xor i1 %9, %10
  %15 = and i1 %13, %14
  %16 = select i1 %15, i16 %12, i16 %8
  store i16 %16, i16* %4, align 8
  %17 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %18 = load i16, i16* %17, align 4
  %19 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %20 = load i16, i16* %19, align 2
  %21 = sub i16 %18, %20
  %22 = icmp slt i16 %18, 0
  %23 = icmp slt i16 %20, 0
  %24 = icmp slt i16 %21, 0
  %25 = select i1 %23, i16 32767, i16 -32768
  %26 = xor i1 %22, %24
  %27 = xor i1 %22, %23
  %28 = and i1 %26, %27
  %29 = select i1 %28, i16 %25, i16 %21
  store i16 %29, i16* %6, align 2
  %30 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %31 = bitcast %union.MMXReg* %1 to i16*
  %32 = load i16, i16* %31, align 8
  %33 = getelementptr inbounds [4 x i16], [4 x i16]* %30, i64 0, i64 1
  %34 = load i16, i16* %33, align 2
  %35 = sub i16 %32, %34
  %36 = icmp slt i16 %32, 0
  %37 = icmp slt i16 %34, 0
  %38 = icmp slt i16 %35, 0
  %39 = select i1 %37, i16 32767, i16 -32768
  %40 = xor i1 %36, %38
  %41 = xor i1 %36, %37
  %42 = and i1 %40, %41
  %43 = select i1 %42, i16 %39, i16 %35
  store i16 %43, i16* %17, align 4
  %44 = getelementptr inbounds [4 x i16], [4 x i16]* %30, i64 0, i64 2
  %45 = load i16, i16* %44, align 4
  %46 = getelementptr inbounds [4 x i16], [4 x i16]* %30, i64 0, i64 3
  %47 = load i16, i16* %46, align 2
  %48 = sub i16 %45, %47
  %49 = icmp slt i16 %45, 0
  %50 = icmp slt i16 %47, 0
  %51 = icmp slt i16 %48, 0
  %52 = select i1 %50, i16 32767, i16 -32768
  %53 = xor i1 %49, %51
  %54 = xor i1 %49, %50
  %55 = and i1 %53, %54
  %56 = select i1 %55, i16 %52, i16 %48
  store i16 %56, i16* %19, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pabsb_mmx(%union.MMXReg* nocapture noundef writeonly %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %1 to [8 x i8]*
  %4 = bitcast %union.MMXReg* %1 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = tail call i8 @llvm.abs.i8(i8 %5, i1 false)
  %7 = bitcast %union.MMXReg* %0 to [8 x i8]*
  %8 = bitcast %union.MMXReg* %0 to i8*
  store i8 %6, i8* %8, align 8
  %9 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 1
  %10 = load i8, i8* %9, align 1
  %11 = tail call i8 @llvm.abs.i8(i8 %10, i1 false)
  %12 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 1
  store i8 %11, i8* %12, align 1
  %13 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 2
  %14 = load i8, i8* %13, align 2
  %15 = tail call i8 @llvm.abs.i8(i8 %14, i1 false)
  %16 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 2
  store i8 %15, i8* %16, align 2
  %17 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 3
  %18 = load i8, i8* %17, align 1
  %19 = tail call i8 @llvm.abs.i8(i8 %18, i1 false)
  %20 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 3
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 4
  %22 = load i8, i8* %21, align 4
  %23 = tail call i8 @llvm.abs.i8(i8 %22, i1 false)
  %24 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 4
  store i8 %23, i8* %24, align 4
  %25 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 5
  %26 = load i8, i8* %25, align 1
  %27 = tail call i8 @llvm.abs.i8(i8 %26, i1 false)
  %28 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 5
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 6
  %30 = load i8, i8* %29, align 2
  %31 = tail call i8 @llvm.abs.i8(i8 %30, i1 false)
  %32 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 6
  store i8 %31, i8* %32, align 2
  %33 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 7
  %34 = load i8, i8* %33, align 1
  %35 = tail call i8 @llvm.abs.i8(i8 %34, i1 false)
  %36 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 7
  store i8 %35, i8* %36, align 1
  ret void
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i8 @llvm.abs.i8(i8, i1 immarg) #11

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pabsw_mmx(%union.MMXReg* nocapture noundef writeonly %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %1 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = tail call i16 @llvm.abs.i16(i16 %5, i1 false)
  %7 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %8 = bitcast %union.MMXReg* %0 to i16*
  store i16 %6, i16* %8, align 8
  %9 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %10 = load i16, i16* %9, align 2
  %11 = tail call i16 @llvm.abs.i16(i16 %10, i1 false)
  %12 = getelementptr inbounds [4 x i16], [4 x i16]* %7, i64 0, i64 1
  store i16 %11, i16* %12, align 2
  %13 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %14 = load i16, i16* %13, align 4
  %15 = tail call i16 @llvm.abs.i16(i16 %14, i1 false)
  %16 = getelementptr inbounds [4 x i16], [4 x i16]* %7, i64 0, i64 2
  store i16 %15, i16* %16, align 4
  %17 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %18 = load i16, i16* %17, align 2
  %19 = tail call i16 @llvm.abs.i16(i16 %18, i1 false)
  %20 = getelementptr inbounds [4 x i16], [4 x i16]* %7, i64 0, i64 3
  store i16 %19, i16* %20, align 2
  ret void
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i16 @llvm.abs.i16(i16, i1 immarg) #11

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pabsd_mmx(%union.MMXReg* nocapture noundef writeonly %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = tail call i32 @llvm.abs.i32(i32 %5, i1 true)
  %7 = bitcast %union.MMXReg* %0 to i32*
  store i32 %6, i32* %7, align 8
  %8 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %9 = load i32, i32* %8, align 4
  %10 = tail call i32 @llvm.abs.i32(i32 %9, i1 true)
  %11 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %12 = getelementptr inbounds [2 x i32], [2 x i32]* %11, i64 0, i64 1
  store i32 %10, i32* %12, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pmulhrsw_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %0 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = sext i16 %5 to i32
  %7 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %8 = bitcast %union.MMXReg* %1 to i16*
  %9 = load i16, i16* %8, align 8
  %10 = sext i16 %9 to i32
  %11 = mul nsw i32 %10, %6
  %12 = add nsw i32 %11, 16384
  %13 = lshr i32 %12, 15
  %14 = trunc i32 %13 to i16
  store i16 %14, i16* %4, align 8
  %15 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %16 = load i16, i16* %15, align 2
  %17 = sext i16 %16 to i32
  %18 = getelementptr inbounds [4 x i16], [4 x i16]* %7, i64 0, i64 1
  %19 = load i16, i16* %18, align 2
  %20 = sext i16 %19 to i32
  %21 = mul nsw i32 %20, %17
  %22 = add nsw i32 %21, 16384
  %23 = lshr i32 %22, 15
  %24 = trunc i32 %23 to i16
  store i16 %24, i16* %15, align 2
  %25 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %26 = load i16, i16* %25, align 4
  %27 = sext i16 %26 to i32
  %28 = getelementptr inbounds [4 x i16], [4 x i16]* %7, i64 0, i64 2
  %29 = load i16, i16* %28, align 4
  %30 = sext i16 %29 to i32
  %31 = mul nsw i32 %30, %27
  %32 = add nsw i32 %31, 16384
  %33 = lshr i32 %32, 15
  %34 = trunc i32 %33 to i16
  store i16 %34, i16* %25, align 4
  %35 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %36 = load i16, i16* %35, align 2
  %37 = sext i16 %36 to i32
  %38 = getelementptr inbounds [4 x i16], [4 x i16]* %7, i64 0, i64 3
  %39 = load i16, i16* %38, align 2
  %40 = sext i16 %39 to i32
  %41 = mul nsw i32 %40, %37
  %42 = add nsw i32 %41, 16384
  %43 = lshr i32 %42, 15
  %44 = trunc i32 %43 to i16
  store i16 %44, i16* %35, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_psignb_mmx(%union.MMXReg* noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %1 to [8 x i8]*
  %4 = bitcast %union.MMXReg* %1 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = icmp sgt i8 %5, -1
  br i1 %6, label %7, label %12

7:                                                ; preds = %2
  %8 = icmp eq i8 %5, 0
  br i1 %8, label %16, label %9

9:                                                ; preds = %7
  %10 = bitcast %union.MMXReg* %0 to i8*
  %11 = load i8, i8* %10, align 8
  br label %16

12:                                               ; preds = %2
  %13 = bitcast %union.MMXReg* %0 to i8*
  %14 = load i8, i8* %13, align 8
  %15 = sub i8 0, %14
  br label %16

16:                                               ; preds = %7, %9, %12
  %17 = phi i8 [ %15, %12 ], [ %11, %9 ], [ 0, %7 ]
  %18 = bitcast %union.MMXReg* %0 to i8*
  %19 = bitcast %union.MMXReg* %0 to [8 x i8]*
  store i8 %17, i8* %18, align 8
  %20 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 1
  %21 = load i8, i8* %20, align 1
  %22 = icmp sgt i8 %21, -1
  br i1 %22, label %23, label %28

23:                                               ; preds = %16
  %24 = icmp eq i8 %21, 0
  br i1 %24, label %32, label %25

25:                                               ; preds = %23
  %26 = getelementptr inbounds [8 x i8], [8 x i8]* %19, i64 0, i64 1
  %27 = load i8, i8* %26, align 1
  br label %32

28:                                               ; preds = %16
  %29 = getelementptr inbounds [8 x i8], [8 x i8]* %19, i64 0, i64 1
  %30 = load i8, i8* %29, align 1
  %31 = sub i8 0, %30
  br label %32

32:                                               ; preds = %25, %23, %28
  %33 = phi i8 [ %31, %28 ], [ %27, %25 ], [ 0, %23 ]
  %34 = getelementptr inbounds [8 x i8], [8 x i8]* %19, i64 0, i64 1
  store i8 %33, i8* %34, align 1
  %35 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 2
  %36 = load i8, i8* %35, align 2
  %37 = icmp sgt i8 %36, -1
  br i1 %37, label %38, label %43

38:                                               ; preds = %32
  %39 = icmp eq i8 %36, 0
  br i1 %39, label %47, label %40

40:                                               ; preds = %38
  %41 = getelementptr inbounds [8 x i8], [8 x i8]* %19, i64 0, i64 2
  %42 = load i8, i8* %41, align 2
  br label %47

43:                                               ; preds = %32
  %44 = getelementptr inbounds [8 x i8], [8 x i8]* %19, i64 0, i64 2
  %45 = load i8, i8* %44, align 2
  %46 = sub i8 0, %45
  br label %47

47:                                               ; preds = %40, %38, %43
  %48 = phi i8 [ %46, %43 ], [ %42, %40 ], [ 0, %38 ]
  %49 = getelementptr inbounds [8 x i8], [8 x i8]* %19, i64 0, i64 2
  store i8 %48, i8* %49, align 2
  %50 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 3
  %51 = load i8, i8* %50, align 1
  %52 = icmp sgt i8 %51, -1
  br i1 %52, label %53, label %58

53:                                               ; preds = %47
  %54 = icmp eq i8 %51, 0
  br i1 %54, label %62, label %55

55:                                               ; preds = %53
  %56 = getelementptr inbounds [8 x i8], [8 x i8]* %19, i64 0, i64 3
  %57 = load i8, i8* %56, align 1
  br label %62

58:                                               ; preds = %47
  %59 = getelementptr inbounds [8 x i8], [8 x i8]* %19, i64 0, i64 3
  %60 = load i8, i8* %59, align 1
  %61 = sub i8 0, %60
  br label %62

62:                                               ; preds = %55, %53, %58
  %63 = phi i8 [ %61, %58 ], [ %57, %55 ], [ 0, %53 ]
  %64 = getelementptr inbounds [8 x i8], [8 x i8]* %19, i64 0, i64 3
  store i8 %63, i8* %64, align 1
  %65 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 4
  %66 = load i8, i8* %65, align 4
  %67 = icmp sgt i8 %66, -1
  br i1 %67, label %68, label %73

68:                                               ; preds = %62
  %69 = icmp eq i8 %66, 0
  br i1 %69, label %77, label %70

70:                                               ; preds = %68
  %71 = getelementptr inbounds [8 x i8], [8 x i8]* %19, i64 0, i64 4
  %72 = load i8, i8* %71, align 4
  br label %77

73:                                               ; preds = %62
  %74 = getelementptr inbounds [8 x i8], [8 x i8]* %19, i64 0, i64 4
  %75 = load i8, i8* %74, align 4
  %76 = sub i8 0, %75
  br label %77

77:                                               ; preds = %70, %68, %73
  %78 = phi i8 [ %76, %73 ], [ %72, %70 ], [ 0, %68 ]
  %79 = getelementptr inbounds [8 x i8], [8 x i8]* %19, i64 0, i64 4
  store i8 %78, i8* %79, align 4
  %80 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 5
  %81 = load i8, i8* %80, align 1
  %82 = icmp sgt i8 %81, -1
  br i1 %82, label %83, label %88

83:                                               ; preds = %77
  %84 = icmp eq i8 %81, 0
  br i1 %84, label %92, label %85

85:                                               ; preds = %83
  %86 = getelementptr inbounds [8 x i8], [8 x i8]* %19, i64 0, i64 5
  %87 = load i8, i8* %86, align 1
  br label %92

88:                                               ; preds = %77
  %89 = getelementptr inbounds [8 x i8], [8 x i8]* %19, i64 0, i64 5
  %90 = load i8, i8* %89, align 1
  %91 = sub i8 0, %90
  br label %92

92:                                               ; preds = %85, %83, %88
  %93 = phi i8 [ %91, %88 ], [ %87, %85 ], [ 0, %83 ]
  %94 = getelementptr inbounds [8 x i8], [8 x i8]* %19, i64 0, i64 5
  store i8 %93, i8* %94, align 1
  %95 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 6
  %96 = load i8, i8* %95, align 2
  %97 = icmp sgt i8 %96, -1
  br i1 %97, label %98, label %103

98:                                               ; preds = %92
  %99 = icmp eq i8 %96, 0
  br i1 %99, label %107, label %100

100:                                              ; preds = %98
  %101 = getelementptr inbounds [8 x i8], [8 x i8]* %19, i64 0, i64 6
  %102 = load i8, i8* %101, align 2
  br label %107

103:                                              ; preds = %92
  %104 = getelementptr inbounds [8 x i8], [8 x i8]* %19, i64 0, i64 6
  %105 = load i8, i8* %104, align 2
  %106 = sub i8 0, %105
  br label %107

107:                                              ; preds = %100, %98, %103
  %108 = phi i8 [ %106, %103 ], [ %102, %100 ], [ 0, %98 ]
  %109 = getelementptr inbounds [8 x i8], [8 x i8]* %19, i64 0, i64 6
  store i8 %108, i8* %109, align 2
  %110 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 7
  %111 = load i8, i8* %110, align 1
  %112 = icmp sgt i8 %111, -1
  br i1 %112, label %113, label %118

113:                                              ; preds = %107
  %114 = icmp eq i8 %111, 0
  br i1 %114, label %122, label %115

115:                                              ; preds = %113
  %116 = getelementptr inbounds [8 x i8], [8 x i8]* %19, i64 0, i64 7
  %117 = load i8, i8* %116, align 1
  br label %122

118:                                              ; preds = %107
  %119 = getelementptr inbounds [8 x i8], [8 x i8]* %19, i64 0, i64 7
  %120 = load i8, i8* %119, align 1
  %121 = sub i8 0, %120
  br label %122

122:                                              ; preds = %115, %113, %118
  %123 = phi i8 [ %121, %118 ], [ %117, %115 ], [ 0, %113 ]
  %124 = getelementptr inbounds [8 x i8], [8 x i8]* %19, i64 0, i64 7
  store i8 %123, i8* %124, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_psignw_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %1 to [4 x i16]*
  %4 = bitcast %union.MMXReg* %1 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = icmp sgt i16 %5, -1
  br i1 %6, label %7, label %12

7:                                                ; preds = %2
  %8 = icmp eq i16 %5, 0
  br i1 %8, label %16, label %9

9:                                                ; preds = %7
  %10 = bitcast %union.MMXReg* %0 to i16*
  %11 = load i16, i16* %10, align 8
  br label %16

12:                                               ; preds = %2
  %13 = bitcast %union.MMXReg* %0 to i16*
  %14 = load i16, i16* %13, align 8
  %15 = sub i16 0, %14
  br label %16

16:                                               ; preds = %7, %9, %12
  %17 = phi i16 [ %15, %12 ], [ %11, %9 ], [ 0, %7 ]
  %18 = bitcast %union.MMXReg* %0 to i16*
  %19 = bitcast %union.MMXReg* %0 to [4 x i16]*
  store i16 %17, i16* %18, align 8
  %20 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 1
  %21 = load i16, i16* %20, align 2
  %22 = icmp sgt i16 %21, -1
  br i1 %22, label %23, label %28

23:                                               ; preds = %16
  %24 = icmp eq i16 %21, 0
  br i1 %24, label %32, label %25

25:                                               ; preds = %23
  %26 = getelementptr inbounds [4 x i16], [4 x i16]* %19, i64 0, i64 1
  %27 = load i16, i16* %26, align 2
  br label %32

28:                                               ; preds = %16
  %29 = getelementptr inbounds [4 x i16], [4 x i16]* %19, i64 0, i64 1
  %30 = load i16, i16* %29, align 2
  %31 = sub i16 0, %30
  br label %32

32:                                               ; preds = %25, %23, %28
  %33 = phi i16 [ %31, %28 ], [ %27, %25 ], [ 0, %23 ]
  %34 = getelementptr inbounds [4 x i16], [4 x i16]* %19, i64 0, i64 1
  store i16 %33, i16* %34, align 2
  %35 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 2
  %36 = load i16, i16* %35, align 4
  %37 = icmp sgt i16 %36, -1
  br i1 %37, label %38, label %43

38:                                               ; preds = %32
  %39 = icmp eq i16 %36, 0
  br i1 %39, label %47, label %40

40:                                               ; preds = %38
  %41 = getelementptr inbounds [4 x i16], [4 x i16]* %19, i64 0, i64 2
  %42 = load i16, i16* %41, align 4
  br label %47

43:                                               ; preds = %32
  %44 = getelementptr inbounds [4 x i16], [4 x i16]* %19, i64 0, i64 2
  %45 = load i16, i16* %44, align 4
  %46 = sub i16 0, %45
  br label %47

47:                                               ; preds = %40, %38, %43
  %48 = phi i16 [ %46, %43 ], [ %42, %40 ], [ 0, %38 ]
  %49 = getelementptr inbounds [4 x i16], [4 x i16]* %19, i64 0, i64 2
  store i16 %48, i16* %49, align 4
  %50 = getelementptr inbounds [4 x i16], [4 x i16]* %3, i64 0, i64 3
  %51 = load i16, i16* %50, align 2
  %52 = icmp sgt i16 %51, -1
  br i1 %52, label %53, label %58

53:                                               ; preds = %47
  %54 = icmp eq i16 %51, 0
  br i1 %54, label %62, label %55

55:                                               ; preds = %53
  %56 = getelementptr inbounds [4 x i16], [4 x i16]* %19, i64 0, i64 3
  %57 = load i16, i16* %56, align 2
  br label %62

58:                                               ; preds = %47
  %59 = getelementptr inbounds [4 x i16], [4 x i16]* %19, i64 0, i64 3
  %60 = load i16, i16* %59, align 2
  %61 = sub i16 0, %60
  br label %62

62:                                               ; preds = %55, %53, %58
  %63 = phi i16 [ %61, %58 ], [ %57, %55 ], [ 0, %53 ]
  %64 = getelementptr inbounds [4 x i16], [4 x i16]* %19, i64 0, i64 3
  store i16 %63, i16* %64, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_psignd_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = icmp sgt i32 %5, -1
  br i1 %6, label %7, label %12

7:                                                ; preds = %2
  %8 = icmp eq i32 %5, 0
  br i1 %8, label %16, label %9

9:                                                ; preds = %7
  %10 = bitcast %union.MMXReg* %0 to i32*
  %11 = load i32, i32* %10, align 8
  br label %16

12:                                               ; preds = %2
  %13 = bitcast %union.MMXReg* %0 to i32*
  %14 = load i32, i32* %13, align 8
  %15 = sub nsw i32 0, %14
  br label %16

16:                                               ; preds = %7, %9, %12
  %17 = phi i32 [ %15, %12 ], [ %11, %9 ], [ 0, %7 ]
  %18 = bitcast %union.MMXReg* %0 to i32*
  %19 = bitcast %union.MMXReg* %0 to [2 x i32]*
  store i32 %17, i32* %18, align 8
  %20 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %21 = load i32, i32* %20, align 4
  %22 = icmp sgt i32 %21, -1
  br i1 %22, label %23, label %28

23:                                               ; preds = %16
  %24 = icmp eq i32 %21, 0
  br i1 %24, label %32, label %25

25:                                               ; preds = %23
  %26 = getelementptr inbounds [2 x i32], [2 x i32]* %19, i64 0, i64 1
  %27 = load i32, i32* %26, align 4
  br label %32

28:                                               ; preds = %16
  %29 = getelementptr inbounds [2 x i32], [2 x i32]* %19, i64 0, i64 1
  %30 = load i32, i32* %29, align 4
  %31 = sub nsw i32 0, %30
  br label %32

32:                                               ; preds = %25, %23, %28
  %33 = phi i32 [ %31, %28 ], [ %27, %25 ], [ 0, %23 ]
  %34 = getelementptr inbounds [2 x i32], [2 x i32]* %19, i64 0, i64 1
  store i32 %33, i32* %34, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_palignr_mmx(%union.MMXReg* nocapture noundef %0, %union.MMXReg* nocapture noundef readonly %1, i32 noundef %2) local_unnamed_addr #2 {
  %4 = icmp sgt i32 %2, 15
  br i1 %4, label %42, label %5

5:                                                ; preds = %3
  %6 = shl i32 %2, 3
  %7 = add i32 %6, 63
  %8 = icmp ult i32 %7, 127
  br i1 %8, label %9, label %20

9:                                                ; preds = %5
  %10 = icmp sgt i32 %6, 0
  %11 = getelementptr %union.MMXReg, %union.MMXReg* %1, i64 0, i32 0
  %12 = load i64, i64* %11, align 8
  br i1 %10, label %13, label %16

13:                                               ; preds = %9
  %14 = zext i32 %6 to i64
  %15 = lshr i64 %12, %14
  br label %31

16:                                               ; preds = %9
  %17 = sub nsw i32 0, %6
  %18 = zext i32 %17 to i64
  %19 = shl i64 %12, %18
  br label %38

20:                                               ; preds = %5
  %21 = add nsw i32 %6, -64
  %22 = add i32 %6, -1
  %23 = icmp ult i32 %22, 127
  br i1 %23, label %24, label %38

24:                                               ; preds = %20
  %25 = icmp ugt i32 %6, 64
  br i1 %25, label %26, label %31

26:                                               ; preds = %24
  %27 = getelementptr %union.MMXReg, %union.MMXReg* %0, i64 0, i32 0
  %28 = load i64, i64* %27, align 8
  %29 = zext i32 %21 to i64
  %30 = lshr i64 %28, %29
  br label %38

31:                                               ; preds = %13, %24
  %32 = phi i64 [ %15, %13 ], [ 0, %24 ]
  %33 = getelementptr %union.MMXReg, %union.MMXReg* %0, i64 0, i32 0
  %34 = load i64, i64* %33, align 8
  %35 = sub nuw nsw i32 64, %6
  %36 = zext i32 %35 to i64
  %37 = shl i64 %34, %36
  br label %38

38:                                               ; preds = %16, %20, %26, %31
  %39 = phi i64 [ 0, %26 ], [ %32, %31 ], [ 0, %20 ], [ %19, %16 ]
  %40 = phi i64 [ %30, %26 ], [ %37, %31 ], [ 0, %20 ], [ 0, %16 ]
  %41 = or i64 %40, %39
  br label %42

42:                                               ; preds = %3, %38
  %43 = phi i64 [ %41, %38 ], [ 0, %3 ]
  %44 = getelementptr inbounds %union.MMXReg, %union.MMXReg* %0, i64 0, i32 0
  store i64 %43, i64* %44, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_psrlw_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp ugt i64 %4, 15
  br i1 %5, label %6, label %9

6:                                                ; preds = %2
  %7 = bitcast %union.XMMReg* %0 to i8*
  %8 = call i8* @memset(i8* %7, i32 0, i64 16)
  br label %53

9:                                                ; preds = %2
  %10 = trunc i64 %4 to i32
  %11 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %12 = bitcast %union.XMMReg* %0 to i16*
  %13 = load i16, i16* %12, align 8
  %14 = zext i16 %13 to i32
  %15 = lshr i32 %14, %10
  %16 = trunc i32 %15 to i16
  store i16 %16, i16* %12, align 8
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %11, i64 0, i64 1
  %18 = load i16, i16* %17, align 2
  %19 = zext i16 %18 to i32
  %20 = lshr i32 %19, %10
  %21 = trunc i32 %20 to i16
  store i16 %21, i16* %17, align 2
  %22 = getelementptr inbounds [8 x i16], [8 x i16]* %11, i64 0, i64 2
  %23 = load i16, i16* %22, align 4
  %24 = zext i16 %23 to i32
  %25 = lshr i32 %24, %10
  %26 = trunc i32 %25 to i16
  store i16 %26, i16* %22, align 4
  %27 = getelementptr inbounds [8 x i16], [8 x i16]* %11, i64 0, i64 3
  %28 = load i16, i16* %27, align 2
  %29 = zext i16 %28 to i32
  %30 = lshr i32 %29, %10
  %31 = trunc i32 %30 to i16
  store i16 %31, i16* %27, align 2
  %32 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %33 = bitcast i64* %32 to i16*
  %34 = load i16, i16* %33, align 8
  %35 = zext i16 %34 to i32
  %36 = lshr i32 %35, %10
  %37 = trunc i32 %36 to i16
  store i16 %37, i16* %33, align 8
  %38 = getelementptr inbounds [8 x i16], [8 x i16]* %11, i64 0, i64 5
  %39 = load i16, i16* %38, align 2
  %40 = zext i16 %39 to i32
  %41 = lshr i32 %40, %10
  %42 = trunc i32 %41 to i16
  store i16 %42, i16* %38, align 2
  %43 = getelementptr inbounds [8 x i16], [8 x i16]* %11, i64 0, i64 6
  %44 = load i16, i16* %43, align 4
  %45 = zext i16 %44 to i32
  %46 = lshr i32 %45, %10
  %47 = trunc i32 %46 to i16
  store i16 %47, i16* %43, align 4
  %48 = getelementptr inbounds [8 x i16], [8 x i16]* %11, i64 0, i64 7
  %49 = load i16, i16* %48, align 2
  %50 = zext i16 %49 to i32
  %51 = lshr i32 %50, %10
  %52 = trunc i32 %51 to i16
  store i16 %52, i16* %48, align 2
  br label %53

53:                                               ; preds = %9, %6
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_psraw_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp ult i64 %4, 15
  %6 = select i1 %5, i64 %4, i64 15
  %7 = trunc i64 %6 to i32
  %8 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %9 = bitcast %union.XMMReg* %0 to i16*
  %10 = load i16, i16* %9, align 8
  %11 = sext i16 %10 to i32
  %12 = ashr i32 %11, %7
  %13 = trunc i32 %12 to i16
  store i16 %13, i16* %9, align 8
  %14 = getelementptr inbounds [8 x i16], [8 x i16]* %8, i64 0, i64 1
  %15 = load i16, i16* %14, align 2
  %16 = sext i16 %15 to i32
  %17 = ashr i32 %16, %7
  %18 = trunc i32 %17 to i16
  store i16 %18, i16* %14, align 2
  %19 = getelementptr inbounds [8 x i16], [8 x i16]* %8, i64 0, i64 2
  %20 = load i16, i16* %19, align 4
  %21 = sext i16 %20 to i32
  %22 = ashr i32 %21, %7
  %23 = trunc i32 %22 to i16
  store i16 %23, i16* %19, align 4
  %24 = getelementptr inbounds [8 x i16], [8 x i16]* %8, i64 0, i64 3
  %25 = load i16, i16* %24, align 2
  %26 = sext i16 %25 to i32
  %27 = ashr i32 %26, %7
  %28 = trunc i32 %27 to i16
  store i16 %28, i16* %24, align 2
  %29 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %30 = bitcast i64* %29 to i16*
  %31 = load i16, i16* %30, align 8
  %32 = sext i16 %31 to i32
  %33 = ashr i32 %32, %7
  %34 = trunc i32 %33 to i16
  store i16 %34, i16* %30, align 8
  %35 = getelementptr inbounds [8 x i16], [8 x i16]* %8, i64 0, i64 5
  %36 = load i16, i16* %35, align 2
  %37 = sext i16 %36 to i32
  %38 = ashr i32 %37, %7
  %39 = trunc i32 %38 to i16
  store i16 %39, i16* %35, align 2
  %40 = getelementptr inbounds [8 x i16], [8 x i16]* %8, i64 0, i64 6
  %41 = load i16, i16* %40, align 4
  %42 = sext i16 %41 to i32
  %43 = ashr i32 %42, %7
  %44 = trunc i32 %43 to i16
  store i16 %44, i16* %40, align 4
  %45 = getelementptr inbounds [8 x i16], [8 x i16]* %8, i64 0, i64 7
  %46 = load i16, i16* %45, align 2
  %47 = sext i16 %46 to i32
  %48 = ashr i32 %47, %7
  %49 = trunc i32 %48 to i16
  store i16 %49, i16* %45, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_psllw_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp ugt i64 %4, 15
  br i1 %5, label %6, label %9

6:                                                ; preds = %2
  %7 = bitcast %union.XMMReg* %0 to i8*
  %8 = call i8* @memset(i8* %7, i32 0, i64 16)
  br label %53

9:                                                ; preds = %2
  %10 = trunc i64 %4 to i32
  %11 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %12 = bitcast %union.XMMReg* %0 to i16*
  %13 = load i16, i16* %12, align 8
  %14 = zext i16 %13 to i32
  %15 = shl nuw nsw i32 %14, %10
  %16 = trunc i32 %15 to i16
  store i16 %16, i16* %12, align 8
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %11, i64 0, i64 1
  %18 = load i16, i16* %17, align 2
  %19 = zext i16 %18 to i32
  %20 = shl nuw nsw i32 %19, %10
  %21 = trunc i32 %20 to i16
  store i16 %21, i16* %17, align 2
  %22 = getelementptr inbounds [8 x i16], [8 x i16]* %11, i64 0, i64 2
  %23 = load i16, i16* %22, align 4
  %24 = zext i16 %23 to i32
  %25 = shl nuw nsw i32 %24, %10
  %26 = trunc i32 %25 to i16
  store i16 %26, i16* %22, align 4
  %27 = getelementptr inbounds [8 x i16], [8 x i16]* %11, i64 0, i64 3
  %28 = load i16, i16* %27, align 2
  %29 = zext i16 %28 to i32
  %30 = shl nuw nsw i32 %29, %10
  %31 = trunc i32 %30 to i16
  store i16 %31, i16* %27, align 2
  %32 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %33 = bitcast i64* %32 to i16*
  %34 = load i16, i16* %33, align 8
  %35 = zext i16 %34 to i32
  %36 = shl nuw nsw i32 %35, %10
  %37 = trunc i32 %36 to i16
  store i16 %37, i16* %33, align 8
  %38 = getelementptr inbounds [8 x i16], [8 x i16]* %11, i64 0, i64 5
  %39 = load i16, i16* %38, align 2
  %40 = zext i16 %39 to i32
  %41 = shl nuw nsw i32 %40, %10
  %42 = trunc i32 %41 to i16
  store i16 %42, i16* %38, align 2
  %43 = getelementptr inbounds [8 x i16], [8 x i16]* %11, i64 0, i64 6
  %44 = load i16, i16* %43, align 4
  %45 = zext i16 %44 to i32
  %46 = shl nuw nsw i32 %45, %10
  %47 = trunc i32 %46 to i16
  store i16 %47, i16* %43, align 4
  %48 = getelementptr inbounds [8 x i16], [8 x i16]* %11, i64 0, i64 7
  %49 = load i16, i16* %48, align 2
  %50 = zext i16 %49 to i32
  %51 = shl nuw nsw i32 %50, %10
  %52 = trunc i32 %51 to i16
  store i16 %52, i16* %48, align 2
  br label %53

53:                                               ; preds = %9, %6
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_psrld_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp ugt i64 %4, 31
  br i1 %5, label %6, label %9

6:                                                ; preds = %2
  %7 = bitcast %union.XMMReg* %0 to i8*
  %8 = call i8* @memset(i8* %7, i32 0, i64 16)
  br label %25

9:                                                ; preds = %2
  %10 = trunc i64 %4 to i32
  %11 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %12 = bitcast %union.XMMReg* %0 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = lshr i32 %13, %10
  store i32 %14, i32* %12, align 8
  %15 = getelementptr inbounds [4 x i32], [4 x i32]* %11, i64 0, i64 1
  %16 = load i32, i32* %15, align 4
  %17 = lshr i32 %16, %10
  store i32 %17, i32* %15, align 4
  %18 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %19 = bitcast i64* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = lshr i32 %20, %10
  store i32 %21, i32* %19, align 8
  %22 = getelementptr inbounds [4 x i32], [4 x i32]* %11, i64 0, i64 3
  %23 = load i32, i32* %22, align 4
  %24 = lshr i32 %23, %10
  store i32 %24, i32* %22, align 4
  br label %25

25:                                               ; preds = %9, %6
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_psrad_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp ult i64 %4, 31
  %6 = select i1 %5, i64 %4, i64 31
  %7 = trunc i64 %6 to i32
  %8 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %9 = bitcast %union.XMMReg* %0 to i32*
  %10 = load i32, i32* %9, align 8
  %11 = ashr i32 %10, %7
  store i32 %11, i32* %9, align 8
  %12 = getelementptr inbounds [4 x i32], [4 x i32]* %8, i64 0, i64 1
  %13 = load i32, i32* %12, align 4
  %14 = ashr i32 %13, %7
  store i32 %14, i32* %12, align 4
  %15 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %16 = bitcast i64* %15 to i32*
  %17 = load i32, i32* %16, align 8
  %18 = ashr i32 %17, %7
  store i32 %18, i32* %16, align 8
  %19 = getelementptr inbounds [4 x i32], [4 x i32]* %8, i64 0, i64 3
  %20 = load i32, i32* %19, align 4
  %21 = ashr i32 %20, %7
  store i32 %21, i32* %19, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pslld_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp ugt i64 %4, 31
  br i1 %5, label %6, label %9

6:                                                ; preds = %2
  %7 = bitcast %union.XMMReg* %0 to i8*
  %8 = call i8* @memset(i8* %7, i32 0, i64 16)
  br label %25

9:                                                ; preds = %2
  %10 = trunc i64 %4 to i32
  %11 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %12 = bitcast %union.XMMReg* %0 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = shl i32 %13, %10
  store i32 %14, i32* %12, align 8
  %15 = getelementptr inbounds [4 x i32], [4 x i32]* %11, i64 0, i64 1
  %16 = load i32, i32* %15, align 4
  %17 = shl i32 %16, %10
  store i32 %17, i32* %15, align 4
  %18 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %19 = bitcast i64* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = shl i32 %20, %10
  store i32 %21, i32* %19, align 8
  %22 = getelementptr inbounds [4 x i32], [4 x i32]* %11, i64 0, i64 3
  %23 = load i32, i32* %22, align 4
  %24 = shl i32 %23, %10
  store i32 %24, i32* %22, align 4
  br label %25

25:                                               ; preds = %9, %6
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_psrlq_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp ugt i64 %4, 63
  %6 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  br i1 %5, label %7, label %10

7:                                                ; preds = %2
  %8 = bitcast %union.XMMReg* %0 to i8*
  %9 = call i8* @memset(i8* %8, i32 0, i64 16)
  br label %16

10:                                               ; preds = %2
  %11 = load i64, i64* %6, align 8
  %12 = lshr i64 %11, %4
  store i64 %12, i64* %6, align 8
  %13 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %14 = load i64, i64* %13, align 8
  %15 = lshr i64 %14, %4
  store i64 %15, i64* %13, align 8
  br label %16

16:                                               ; preds = %10, %7
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_psllq_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp ugt i64 %4, 63
  %6 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  br i1 %5, label %7, label %10

7:                                                ; preds = %2
  %8 = bitcast %union.XMMReg* %0 to i8*
  %9 = call i8* @memset(i8* %8, i32 0, i64 16)
  br label %16

10:                                               ; preds = %2
  %11 = load i64, i64* %6, align 8
  %12 = shl i64 %11, %4
  store i64 %12, i64* %6, align 8
  %13 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %14 = load i64, i64* %13, align 8
  %15 = shl i64 %14, %4
  store i64 %15, i64* %13, align 8
  br label %16

16:                                               ; preds = %10, %7
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind uwtable
define void @helper_psrldq_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #19 {
  %3 = bitcast %union.XMMReg* %1 to i32*
  %4 = bitcast %union.XMMReg* %0 to i8*
  %5 = load i32, i32* %3, align 8
  %6 = icmp slt i32 %5, 16
  %7 = select i1 %6, i32 %5, i32 16
  %8 = sub i32 16, %7
  br i1 %6, label %9, label %34

9:                                                ; preds = %2
  %10 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %11 = sext i32 %7 to i64
  %12 = call i32 @llvm.smax.i32(i32 %8, i32 1)
  %13 = zext i32 %12 to i64
  %14 = add nsw i64 %13, -1
  %15 = and i64 %13, 3
  %16 = icmp ult i64 %14, 3
  br i1 %16, label %19, label %17

17:                                               ; preds = %9
  %18 = and i64 %13, 2147483644
  br label %43

19:                                               ; preds = %43, %9
  %20 = phi i64 [ 0, %9 ], [ %65, %43 ]
  %21 = icmp eq i64 %15, 0
  br i1 %21, label %32, label %22

22:                                               ; preds = %19, %22
  %23 = phi i64 [ %29, %22 ], [ %20, %19 ]
  %24 = phi i64 [ %30, %22 ], [ 0, %19 ]
  %25 = add nsw i64 %23, %11
  %26 = getelementptr inbounds [16 x i8], [16 x i8]* %10, i64 0, i64 %25
  %27 = load i8, i8* %26, align 1
  %28 = getelementptr inbounds [16 x i8], [16 x i8]* %10, i64 0, i64 %23
  store i8 %27, i8* %28, align 1
  %29 = add nuw nsw i64 %23, 1
  %30 = add i64 %24, 1
  %31 = icmp eq i64 %30, %15
  br i1 %31, label %32, label %22, !llvm.loop !20

32:                                               ; preds = %22, %19
  %33 = icmp sgt i32 %5, 0
  br i1 %33, label %34, label %68

34:                                               ; preds = %2, %32
  %35 = sext i32 %8 to i64
  %36 = getelementptr i8, i8* %4, i64 %35
  %37 = call i32 @llvm.smax.i32(i32 %8, i32 15)
  %38 = add i32 %7, %37
  %39 = add i32 %38, -16
  %40 = zext i32 %39 to i64
  %41 = add nuw nsw i64 %40, 1
  %42 = call i8* @memset(i8* %36, i32 0, i64 %41)
  br label %68

43:                                               ; preds = %43, %17
  %44 = phi i64 [ 0, %17 ], [ %65, %43 ]
  %45 = phi i64 [ 0, %17 ], [ %66, %43 ]
  %46 = add nsw i64 %44, %11
  %47 = getelementptr inbounds [16 x i8], [16 x i8]* %10, i64 0, i64 %46
  %48 = load i8, i8* %47, align 1
  %49 = getelementptr inbounds [16 x i8], [16 x i8]* %10, i64 0, i64 %44
  store i8 %48, i8* %49, align 1
  %50 = or i64 %44, 1
  %51 = add nsw i64 %50, %11
  %52 = getelementptr inbounds [16 x i8], [16 x i8]* %10, i64 0, i64 %51
  %53 = load i8, i8* %52, align 1
  %54 = getelementptr inbounds [16 x i8], [16 x i8]* %10, i64 0, i64 %50
  store i8 %53, i8* %54, align 1
  %55 = or i64 %44, 2
  %56 = add nsw i64 %55, %11
  %57 = getelementptr inbounds [16 x i8], [16 x i8]* %10, i64 0, i64 %56
  %58 = load i8, i8* %57, align 1
  %59 = getelementptr inbounds [16 x i8], [16 x i8]* %10, i64 0, i64 %55
  store i8 %58, i8* %59, align 1
  %60 = or i64 %44, 3
  %61 = add nsw i64 %60, %11
  %62 = getelementptr inbounds [16 x i8], [16 x i8]* %10, i64 0, i64 %61
  %63 = load i8, i8* %62, align 1
  %64 = getelementptr inbounds [16 x i8], [16 x i8]* %10, i64 0, i64 %60
  store i8 %63, i8* %64, align 1
  %65 = add nuw nsw i64 %44, 4
  %66 = add i64 %45, 4
  %67 = icmp eq i64 %66, %18
  br i1 %67, label %19, label %43, !llvm.loop !22

68:                                               ; preds = %34, %32
  ret void
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.smax.i32(i32, i32) #11

; Function Attrs: nofree norecurse nosync nounwind uwtable
define void @helper_pslldq_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #19 {
  %3 = bitcast %union.XMMReg* %1 to i32*
  %4 = bitcast %union.XMMReg* %0 to i8*
  %5 = load i32, i32* %3, align 8
  %6 = icmp slt i32 %5, 16
  %7 = select i1 %6, i32 %5, i32 16
  %8 = icmp sgt i32 %7, 15
  br i1 %8, label %31, label %9

9:                                                ; preds = %2
  %10 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %11 = sext i32 %7 to i64
  %12 = sub nsw i64 16, %11
  %13 = and i64 %12, 3
  %14 = add nsw i64 %11, -13
  %15 = icmp ult i64 %14, 3
  br i1 %15, label %18, label %16

16:                                               ; preds = %9
  %17 = and i64 %12, -4
  br label %37

18:                                               ; preds = %37, %9
  %19 = phi i64 [ 15, %9 ], [ %59, %37 ]
  %20 = icmp eq i64 %13, 0
  br i1 %20, label %31, label %21

21:                                               ; preds = %18, %21
  %22 = phi i64 [ %28, %21 ], [ %19, %18 ]
  %23 = phi i64 [ %29, %21 ], [ 0, %18 ]
  %24 = sub nsw i64 %22, %11
  %25 = getelementptr inbounds [16 x i8], [16 x i8]* %10, i64 0, i64 %24
  %26 = load i8, i8* %25, align 1
  %27 = getelementptr inbounds [16 x i8], [16 x i8]* %10, i64 0, i64 %22
  store i8 %26, i8* %27, align 1
  %28 = add nsw i64 %22, -1
  %29 = add i64 %23, 1
  %30 = icmp eq i64 %29, %13
  br i1 %30, label %31, label %21, !llvm.loop !23

31:                                               ; preds = %18, %21, %2
  %32 = icmp sgt i32 %5, 0
  br i1 %32, label %33, label %62

33:                                               ; preds = %31
  %34 = call i32 @llvm.smax.i32(i32 %7, i32 1)
  %35 = zext i32 %34 to i64
  %36 = call i8* @memset(i8* %4, i32 0, i64 %35)
  br label %62

37:                                               ; preds = %37, %16
  %38 = phi i64 [ 15, %16 ], [ %59, %37 ]
  %39 = phi i64 [ 0, %16 ], [ %60, %37 ]
  %40 = sub nsw i64 %38, %11
  %41 = getelementptr inbounds [16 x i8], [16 x i8]* %10, i64 0, i64 %40
  %42 = load i8, i8* %41, align 1
  %43 = getelementptr inbounds [16 x i8], [16 x i8]* %10, i64 0, i64 %38
  store i8 %42, i8* %43, align 1
  %44 = add nsw i64 %38, -1
  %45 = sub nsw i64 %44, %11
  %46 = getelementptr inbounds [16 x i8], [16 x i8]* %10, i64 0, i64 %45
  %47 = load i8, i8* %46, align 1
  %48 = getelementptr inbounds [16 x i8], [16 x i8]* %10, i64 0, i64 %44
  store i8 %47, i8* %48, align 1
  %49 = add nsw i64 %38, -2
  %50 = sub nsw i64 %49, %11
  %51 = getelementptr inbounds [16 x i8], [16 x i8]* %10, i64 0, i64 %50
  %52 = load i8, i8* %51, align 1
  %53 = getelementptr inbounds [16 x i8], [16 x i8]* %10, i64 0, i64 %49
  store i8 %52, i8* %53, align 1
  %54 = add nsw i64 %38, -3
  %55 = sub nsw i64 %54, %11
  %56 = getelementptr inbounds [16 x i8], [16 x i8]* %10, i64 0, i64 %55
  %57 = load i8, i8* %56, align 1
  %58 = getelementptr inbounds [16 x i8], [16 x i8]* %10, i64 0, i64 %54
  store i8 %57, i8* %58, align 1
  %59 = add nsw i64 %38, -4
  %60 = add i64 %39, 4
  %61 = icmp eq i64 %60, %17
  br i1 %61, label %18, label %37, !llvm.loop !24

62:                                               ; preds = %33, %31
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_paddb_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %4 = bitcast %union.XMMReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %7 = bitcast %union.XMMReg* %1 to i8*
  %8 = load i8, i8* %7, align 8
  %9 = add i8 %8, %5
  store i8 %9, i8* %4, align 8
  %10 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 1
  %11 = load i8, i8* %10, align 1
  %12 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 1
  %13 = load i8, i8* %12, align 1
  %14 = add i8 %13, %11
  store i8 %14, i8* %10, align 1
  %15 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 2
  %16 = load i8, i8* %15, align 2
  %17 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 2
  %18 = load i8, i8* %17, align 2
  %19 = add i8 %18, %16
  store i8 %19, i8* %15, align 2
  %20 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 3
  %21 = load i8, i8* %20, align 1
  %22 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 3
  %23 = load i8, i8* %22, align 1
  %24 = add i8 %23, %21
  store i8 %24, i8* %20, align 1
  %25 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 4
  %26 = load i8, i8* %25, align 4
  %27 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 4
  %28 = load i8, i8* %27, align 4
  %29 = add i8 %28, %26
  store i8 %29, i8* %25, align 4
  %30 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 5
  %31 = load i8, i8* %30, align 1
  %32 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 5
  %33 = load i8, i8* %32, align 1
  %34 = add i8 %33, %31
  store i8 %34, i8* %30, align 1
  %35 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 6
  %36 = load i8, i8* %35, align 2
  %37 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 6
  %38 = load i8, i8* %37, align 2
  %39 = add i8 %38, %36
  store i8 %39, i8* %35, align 2
  %40 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 7
  %41 = load i8, i8* %40, align 1
  %42 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 7
  %43 = load i8, i8* %42, align 1
  %44 = add i8 %43, %41
  store i8 %44, i8* %40, align 1
  %45 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %46 = bitcast i64* %45 to i8*
  %47 = load i8, i8* %46, align 8
  %48 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %49 = bitcast i64* %48 to i8*
  %50 = load i8, i8* %49, align 8
  %51 = add i8 %50, %47
  store i8 %51, i8* %46, align 8
  %52 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 9
  %53 = load i8, i8* %52, align 1
  %54 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 9
  %55 = load i8, i8* %54, align 1
  %56 = add i8 %55, %53
  store i8 %56, i8* %52, align 1
  %57 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 10
  %58 = load i8, i8* %57, align 2
  %59 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 10
  %60 = load i8, i8* %59, align 2
  %61 = add i8 %60, %58
  store i8 %61, i8* %57, align 2
  %62 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 11
  %63 = load i8, i8* %62, align 1
  %64 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 11
  %65 = load i8, i8* %64, align 1
  %66 = add i8 %65, %63
  store i8 %66, i8* %62, align 1
  %67 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 12
  %68 = load i8, i8* %67, align 4
  %69 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 12
  %70 = load i8, i8* %69, align 4
  %71 = add i8 %70, %68
  store i8 %71, i8* %67, align 4
  %72 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 13
  %73 = load i8, i8* %72, align 1
  %74 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 13
  %75 = load i8, i8* %74, align 1
  %76 = add i8 %75, %73
  store i8 %76, i8* %72, align 1
  %77 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 14
  %78 = load i8, i8* %77, align 2
  %79 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 14
  %80 = load i8, i8* %79, align 2
  %81 = add i8 %80, %78
  store i8 %81, i8* %77, align 2
  %82 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 15
  %83 = load i8, i8* %82, align 1
  %84 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 15
  %85 = load i8, i8* %84, align 1
  %86 = add i8 %85, %83
  store i8 %86, i8* %82, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_paddw_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %7 = bitcast %union.XMMReg* %1 to i16*
  %8 = load i16, i16* %7, align 8
  %9 = add i16 %8, %5
  store i16 %9, i16* %4, align 8
  %10 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %11 = load i16, i16* %10, align 2
  %12 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 1
  %13 = load i16, i16* %12, align 2
  %14 = add i16 %13, %11
  store i16 %14, i16* %10, align 2
  %15 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %16 = load i16, i16* %15, align 4
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 2
  %18 = load i16, i16* %17, align 4
  %19 = add i16 %18, %16
  store i16 %19, i16* %15, align 4
  %20 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %21 = load i16, i16* %20, align 2
  %22 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 3
  %23 = load i16, i16* %22, align 2
  %24 = add i16 %23, %21
  store i16 %24, i16* %20, align 2
  %25 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %26 = bitcast i64* %25 to i16*
  %27 = load i16, i16* %26, align 8
  %28 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %29 = bitcast i64* %28 to i16*
  %30 = load i16, i16* %29, align 8
  %31 = add i16 %30, %27
  store i16 %31, i16* %26, align 8
  %32 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %33 = load i16, i16* %32, align 2
  %34 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 5
  %35 = load i16, i16* %34, align 2
  %36 = add i16 %35, %33
  store i16 %36, i16* %32, align 2
  %37 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %38 = load i16, i16* %37, align 4
  %39 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 6
  %40 = load i16, i16* %39, align 4
  %41 = add i16 %40, %38
  store i16 %41, i16* %37, align 4
  %42 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %43 = load i16, i16* %42, align 2
  %44 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 7
  %45 = load i16, i16* %44, align 2
  %46 = add i16 %45, %43
  store i16 %46, i16* %42, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_paddl_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %7 = bitcast %union.XMMReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = add i32 %8, %5
  store i32 %9, i32* %4, align 8
  %10 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %13 = load i32, i32* %12, align 4
  %14 = add i32 %13, %11
  store i32 %14, i32* %10, align 4
  %15 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %16 = bitcast i64* %15 to i32*
  %17 = load i32, i32* %16, align 8
  %18 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %19 = bitcast i64* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = add i32 %20, %17
  store i32 %21, i32* %16, align 8
  %22 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %25 = load i32, i32* %24, align 4
  %26 = add i32 %25, %23
  store i32 %26, i32* %22, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_paddq_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, %4
  store i64 %7, i64* %3, align 8
  %8 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %11 = load i64, i64* %10, align 8
  %12 = add i64 %11, %9
  store i64 %12, i64* %8, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_psubb_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %4 = bitcast %union.XMMReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %7 = bitcast %union.XMMReg* %1 to i8*
  %8 = load i8, i8* %7, align 8
  %9 = sub i8 %5, %8
  store i8 %9, i8* %4, align 8
  %10 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 1
  %11 = load i8, i8* %10, align 1
  %12 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 1
  %13 = load i8, i8* %12, align 1
  %14 = sub i8 %11, %13
  store i8 %14, i8* %10, align 1
  %15 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 2
  %16 = load i8, i8* %15, align 2
  %17 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 2
  %18 = load i8, i8* %17, align 2
  %19 = sub i8 %16, %18
  store i8 %19, i8* %15, align 2
  %20 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 3
  %21 = load i8, i8* %20, align 1
  %22 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 3
  %23 = load i8, i8* %22, align 1
  %24 = sub i8 %21, %23
  store i8 %24, i8* %20, align 1
  %25 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 4
  %26 = load i8, i8* %25, align 4
  %27 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 4
  %28 = load i8, i8* %27, align 4
  %29 = sub i8 %26, %28
  store i8 %29, i8* %25, align 4
  %30 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 5
  %31 = load i8, i8* %30, align 1
  %32 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 5
  %33 = load i8, i8* %32, align 1
  %34 = sub i8 %31, %33
  store i8 %34, i8* %30, align 1
  %35 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 6
  %36 = load i8, i8* %35, align 2
  %37 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 6
  %38 = load i8, i8* %37, align 2
  %39 = sub i8 %36, %38
  store i8 %39, i8* %35, align 2
  %40 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 7
  %41 = load i8, i8* %40, align 1
  %42 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 7
  %43 = load i8, i8* %42, align 1
  %44 = sub i8 %41, %43
  store i8 %44, i8* %40, align 1
  %45 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %46 = bitcast i64* %45 to i8*
  %47 = load i8, i8* %46, align 8
  %48 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %49 = bitcast i64* %48 to i8*
  %50 = load i8, i8* %49, align 8
  %51 = sub i8 %47, %50
  store i8 %51, i8* %46, align 8
  %52 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 9
  %53 = load i8, i8* %52, align 1
  %54 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 9
  %55 = load i8, i8* %54, align 1
  %56 = sub i8 %53, %55
  store i8 %56, i8* %52, align 1
  %57 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 10
  %58 = load i8, i8* %57, align 2
  %59 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 10
  %60 = load i8, i8* %59, align 2
  %61 = sub i8 %58, %60
  store i8 %61, i8* %57, align 2
  %62 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 11
  %63 = load i8, i8* %62, align 1
  %64 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 11
  %65 = load i8, i8* %64, align 1
  %66 = sub i8 %63, %65
  store i8 %66, i8* %62, align 1
  %67 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 12
  %68 = load i8, i8* %67, align 4
  %69 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 12
  %70 = load i8, i8* %69, align 4
  %71 = sub i8 %68, %70
  store i8 %71, i8* %67, align 4
  %72 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 13
  %73 = load i8, i8* %72, align 1
  %74 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 13
  %75 = load i8, i8* %74, align 1
  %76 = sub i8 %73, %75
  store i8 %76, i8* %72, align 1
  %77 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 14
  %78 = load i8, i8* %77, align 2
  %79 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 14
  %80 = load i8, i8* %79, align 2
  %81 = sub i8 %78, %80
  store i8 %81, i8* %77, align 2
  %82 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 15
  %83 = load i8, i8* %82, align 1
  %84 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 15
  %85 = load i8, i8* %84, align 1
  %86 = sub i8 %83, %85
  store i8 %86, i8* %82, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_psubw_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %7 = bitcast %union.XMMReg* %1 to i16*
  %8 = load i16, i16* %7, align 8
  %9 = sub i16 %5, %8
  store i16 %9, i16* %4, align 8
  %10 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %11 = load i16, i16* %10, align 2
  %12 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 1
  %13 = load i16, i16* %12, align 2
  %14 = sub i16 %11, %13
  store i16 %14, i16* %10, align 2
  %15 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %16 = load i16, i16* %15, align 4
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 2
  %18 = load i16, i16* %17, align 4
  %19 = sub i16 %16, %18
  store i16 %19, i16* %15, align 4
  %20 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %21 = load i16, i16* %20, align 2
  %22 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 3
  %23 = load i16, i16* %22, align 2
  %24 = sub i16 %21, %23
  store i16 %24, i16* %20, align 2
  %25 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %26 = bitcast i64* %25 to i16*
  %27 = load i16, i16* %26, align 8
  %28 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %29 = bitcast i64* %28 to i16*
  %30 = load i16, i16* %29, align 8
  %31 = sub i16 %27, %30
  store i16 %31, i16* %26, align 8
  %32 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %33 = load i16, i16* %32, align 2
  %34 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 5
  %35 = load i16, i16* %34, align 2
  %36 = sub i16 %33, %35
  store i16 %36, i16* %32, align 2
  %37 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %38 = load i16, i16* %37, align 4
  %39 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 6
  %40 = load i16, i16* %39, align 4
  %41 = sub i16 %38, %40
  store i16 %41, i16* %37, align 4
  %42 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %43 = load i16, i16* %42, align 2
  %44 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 7
  %45 = load i16, i16* %44, align 2
  %46 = sub i16 %43, %45
  store i16 %46, i16* %42, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_psubl_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %7 = bitcast %union.XMMReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = sub i32 %5, %8
  store i32 %9, i32* %4, align 8
  %10 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %13 = load i32, i32* %12, align 4
  %14 = sub i32 %11, %13
  store i32 %14, i32* %10, align 4
  %15 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %16 = bitcast i64* %15 to i32*
  %17 = load i32, i32* %16, align 8
  %18 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %19 = bitcast i64* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sub i32 %17, %20
  store i32 %21, i32* %16, align 8
  %22 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %25 = load i32, i32* %24, align 4
  %26 = sub i32 %23, %25
  store i32 %26, i32* %22, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_psubq_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = sub i64 %4, %6
  store i64 %7, i64* %3, align 8
  %8 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %9, %11
  store i64 %12, i64* %8, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_paddusb_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %4 = bitcast %union.XMMReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = zext i8 %5 to i32
  %7 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %8 = bitcast %union.XMMReg* %1 to i8*
  %9 = load i8, i8* %8, align 8
  %10 = zext i8 %9 to i32
  %11 = add nuw nsw i32 %10, %6
  %12 = icmp ult i32 %11, 255
  %13 = select i1 %12, i32 %11, i32 255
  %14 = trunc i32 %13 to i8
  store i8 %14, i8* %4, align 8
  %15 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 1
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 1
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = add nuw nsw i32 %20, %17
  %22 = icmp ult i32 %21, 255
  %23 = select i1 %22, i32 %21, i32 255
  %24 = trunc i32 %23 to i8
  store i8 %24, i8* %15, align 1
  %25 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 2
  %26 = load i8, i8* %25, align 2
  %27 = zext i8 %26 to i32
  %28 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 2
  %29 = load i8, i8* %28, align 2
  %30 = zext i8 %29 to i32
  %31 = add nuw nsw i32 %30, %27
  %32 = icmp ult i32 %31, 255
  %33 = select i1 %32, i32 %31, i32 255
  %34 = trunc i32 %33 to i8
  store i8 %34, i8* %25, align 2
  %35 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 3
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 3
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = add nuw nsw i32 %40, %37
  %42 = icmp ult i32 %41, 255
  %43 = select i1 %42, i32 %41, i32 255
  %44 = trunc i32 %43 to i8
  store i8 %44, i8* %35, align 1
  %45 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 4
  %46 = load i8, i8* %45, align 4
  %47 = zext i8 %46 to i32
  %48 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 4
  %49 = load i8, i8* %48, align 4
  %50 = zext i8 %49 to i32
  %51 = add nuw nsw i32 %50, %47
  %52 = icmp ult i32 %51, 255
  %53 = select i1 %52, i32 %51, i32 255
  %54 = trunc i32 %53 to i8
  store i8 %54, i8* %45, align 4
  %55 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 5
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 5
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i32
  %61 = add nuw nsw i32 %60, %57
  %62 = icmp ult i32 %61, 255
  %63 = select i1 %62, i32 %61, i32 255
  %64 = trunc i32 %63 to i8
  store i8 %64, i8* %55, align 1
  %65 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 6
  %66 = load i8, i8* %65, align 2
  %67 = zext i8 %66 to i32
  %68 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 6
  %69 = load i8, i8* %68, align 2
  %70 = zext i8 %69 to i32
  %71 = add nuw nsw i32 %70, %67
  %72 = icmp ult i32 %71, 255
  %73 = select i1 %72, i32 %71, i32 255
  %74 = trunc i32 %73 to i8
  store i8 %74, i8* %65, align 2
  %75 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 7
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i32
  %78 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 7
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i32
  %81 = add nuw nsw i32 %80, %77
  %82 = icmp ult i32 %81, 255
  %83 = select i1 %82, i32 %81, i32 255
  %84 = trunc i32 %83 to i8
  store i8 %84, i8* %75, align 1
  %85 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %86 = bitcast i64* %85 to i8*
  %87 = load i8, i8* %86, align 8
  %88 = zext i8 %87 to i32
  %89 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %90 = bitcast i64* %89 to i8*
  %91 = load i8, i8* %90, align 8
  %92 = zext i8 %91 to i32
  %93 = add nuw nsw i32 %92, %88
  %94 = icmp ult i32 %93, 255
  %95 = select i1 %94, i32 %93, i32 255
  %96 = trunc i32 %95 to i8
  store i8 %96, i8* %86, align 8
  %97 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 9
  %98 = load i8, i8* %97, align 1
  %99 = zext i8 %98 to i32
  %100 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 9
  %101 = load i8, i8* %100, align 1
  %102 = zext i8 %101 to i32
  %103 = add nuw nsw i32 %102, %99
  %104 = icmp ult i32 %103, 255
  %105 = select i1 %104, i32 %103, i32 255
  %106 = trunc i32 %105 to i8
  store i8 %106, i8* %97, align 1
  %107 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 10
  %108 = load i8, i8* %107, align 2
  %109 = zext i8 %108 to i32
  %110 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 10
  %111 = load i8, i8* %110, align 2
  %112 = zext i8 %111 to i32
  %113 = add nuw nsw i32 %112, %109
  %114 = icmp ult i32 %113, 255
  %115 = select i1 %114, i32 %113, i32 255
  %116 = trunc i32 %115 to i8
  store i8 %116, i8* %107, align 2
  %117 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 11
  %118 = load i8, i8* %117, align 1
  %119 = zext i8 %118 to i32
  %120 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 11
  %121 = load i8, i8* %120, align 1
  %122 = zext i8 %121 to i32
  %123 = add nuw nsw i32 %122, %119
  %124 = icmp ult i32 %123, 255
  %125 = select i1 %124, i32 %123, i32 255
  %126 = trunc i32 %125 to i8
  store i8 %126, i8* %117, align 1
  %127 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 12
  %128 = load i8, i8* %127, align 4
  %129 = zext i8 %128 to i32
  %130 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 12
  %131 = load i8, i8* %130, align 4
  %132 = zext i8 %131 to i32
  %133 = add nuw nsw i32 %132, %129
  %134 = icmp ult i32 %133, 255
  %135 = select i1 %134, i32 %133, i32 255
  %136 = trunc i32 %135 to i8
  store i8 %136, i8* %127, align 4
  %137 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 13
  %138 = load i8, i8* %137, align 1
  %139 = zext i8 %138 to i32
  %140 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 13
  %141 = load i8, i8* %140, align 1
  %142 = zext i8 %141 to i32
  %143 = add nuw nsw i32 %142, %139
  %144 = icmp ult i32 %143, 255
  %145 = select i1 %144, i32 %143, i32 255
  %146 = trunc i32 %145 to i8
  store i8 %146, i8* %137, align 1
  %147 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 14
  %148 = load i8, i8* %147, align 2
  %149 = zext i8 %148 to i32
  %150 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 14
  %151 = load i8, i8* %150, align 2
  %152 = zext i8 %151 to i32
  %153 = add nuw nsw i32 %152, %149
  %154 = icmp ult i32 %153, 255
  %155 = select i1 %154, i32 %153, i32 255
  %156 = trunc i32 %155 to i8
  store i8 %156, i8* %147, align 2
  %157 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 15
  %158 = load i8, i8* %157, align 1
  %159 = zext i8 %158 to i32
  %160 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 15
  %161 = load i8, i8* %160, align 1
  %162 = zext i8 %161 to i32
  %163 = add nuw nsw i32 %162, %159
  %164 = icmp ult i32 %163, 255
  %165 = select i1 %164, i32 %163, i32 255
  %166 = trunc i32 %165 to i8
  store i8 %166, i8* %157, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_paddsb_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %4 = bitcast %union.XMMReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %7 = bitcast %union.XMMReg* %1 to i8*
  %8 = load i8, i8* %7, align 8
  %9 = add i8 %5, %8
  %10 = icmp slt i8 %5, 0
  %11 = icmp slt i8 %8, 0
  %12 = icmp slt i8 %9, 0
  %13 = select i1 %11, i8 -128, i8 127
  %14 = xor i1 %10, %12
  %15 = xor i1 %10, %11
  %16 = xor i1 %15, true
  %17 = and i1 %14, %16
  %18 = select i1 %17, i8 %13, i8 %9
  store i8 %18, i8* %4, align 8
  %19 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 1
  %20 = load i8, i8* %19, align 1
  %21 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 1
  %22 = load i8, i8* %21, align 1
  %23 = add i8 %20, %22
  %24 = icmp slt i8 %20, 0
  %25 = icmp slt i8 %22, 0
  %26 = icmp slt i8 %23, 0
  %27 = select i1 %25, i8 -128, i8 127
  %28 = xor i1 %24, %26
  %29 = xor i1 %24, %25
  %30 = xor i1 %29, true
  %31 = and i1 %28, %30
  %32 = select i1 %31, i8 %27, i8 %23
  store i8 %32, i8* %19, align 1
  %33 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 2
  %34 = load i8, i8* %33, align 2
  %35 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 2
  %36 = load i8, i8* %35, align 2
  %37 = add i8 %34, %36
  %38 = icmp slt i8 %34, 0
  %39 = icmp slt i8 %36, 0
  %40 = icmp slt i8 %37, 0
  %41 = select i1 %39, i8 -128, i8 127
  %42 = xor i1 %38, %40
  %43 = xor i1 %38, %39
  %44 = xor i1 %43, true
  %45 = and i1 %42, %44
  %46 = select i1 %45, i8 %41, i8 %37
  store i8 %46, i8* %33, align 2
  %47 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 3
  %48 = load i8, i8* %47, align 1
  %49 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 3
  %50 = load i8, i8* %49, align 1
  %51 = add i8 %48, %50
  %52 = icmp slt i8 %48, 0
  %53 = icmp slt i8 %50, 0
  %54 = icmp slt i8 %51, 0
  %55 = select i1 %53, i8 -128, i8 127
  %56 = xor i1 %52, %54
  %57 = xor i1 %52, %53
  %58 = xor i1 %57, true
  %59 = and i1 %56, %58
  %60 = select i1 %59, i8 %55, i8 %51
  store i8 %60, i8* %47, align 1
  %61 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 4
  %62 = load i8, i8* %61, align 4
  %63 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 4
  %64 = load i8, i8* %63, align 4
  %65 = add i8 %62, %64
  %66 = icmp slt i8 %62, 0
  %67 = icmp slt i8 %64, 0
  %68 = icmp slt i8 %65, 0
  %69 = select i1 %67, i8 -128, i8 127
  %70 = xor i1 %66, %68
  %71 = xor i1 %66, %67
  %72 = xor i1 %71, true
  %73 = and i1 %70, %72
  %74 = select i1 %73, i8 %69, i8 %65
  store i8 %74, i8* %61, align 4
  %75 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 5
  %76 = load i8, i8* %75, align 1
  %77 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 5
  %78 = load i8, i8* %77, align 1
  %79 = add i8 %76, %78
  %80 = icmp slt i8 %76, 0
  %81 = icmp slt i8 %78, 0
  %82 = icmp slt i8 %79, 0
  %83 = select i1 %81, i8 -128, i8 127
  %84 = xor i1 %80, %82
  %85 = xor i1 %80, %81
  %86 = xor i1 %85, true
  %87 = and i1 %84, %86
  %88 = select i1 %87, i8 %83, i8 %79
  store i8 %88, i8* %75, align 1
  %89 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 6
  %90 = load i8, i8* %89, align 2
  %91 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 6
  %92 = load i8, i8* %91, align 2
  %93 = add i8 %90, %92
  %94 = icmp slt i8 %90, 0
  %95 = icmp slt i8 %92, 0
  %96 = icmp slt i8 %93, 0
  %97 = select i1 %95, i8 -128, i8 127
  %98 = xor i1 %94, %96
  %99 = xor i1 %94, %95
  %100 = xor i1 %99, true
  %101 = and i1 %98, %100
  %102 = select i1 %101, i8 %97, i8 %93
  store i8 %102, i8* %89, align 2
  %103 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 7
  %104 = load i8, i8* %103, align 1
  %105 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 7
  %106 = load i8, i8* %105, align 1
  %107 = add i8 %104, %106
  %108 = icmp slt i8 %104, 0
  %109 = icmp slt i8 %106, 0
  %110 = icmp slt i8 %107, 0
  %111 = select i1 %109, i8 -128, i8 127
  %112 = xor i1 %108, %110
  %113 = xor i1 %108, %109
  %114 = xor i1 %113, true
  %115 = and i1 %112, %114
  %116 = select i1 %115, i8 %111, i8 %107
  store i8 %116, i8* %103, align 1
  %117 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %118 = bitcast i64* %117 to i8*
  %119 = load i8, i8* %118, align 8
  %120 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %121 = bitcast i64* %120 to i8*
  %122 = load i8, i8* %121, align 8
  %123 = add i8 %119, %122
  %124 = icmp slt i8 %119, 0
  %125 = icmp slt i8 %122, 0
  %126 = icmp slt i8 %123, 0
  %127 = select i1 %125, i8 -128, i8 127
  %128 = xor i1 %124, %126
  %129 = xor i1 %124, %125
  %130 = xor i1 %129, true
  %131 = and i1 %128, %130
  %132 = select i1 %131, i8 %127, i8 %123
  store i8 %132, i8* %118, align 8
  %133 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 9
  %134 = load i8, i8* %133, align 1
  %135 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 9
  %136 = load i8, i8* %135, align 1
  %137 = add i8 %134, %136
  %138 = icmp slt i8 %134, 0
  %139 = icmp slt i8 %136, 0
  %140 = icmp slt i8 %137, 0
  %141 = select i1 %139, i8 -128, i8 127
  %142 = xor i1 %138, %140
  %143 = xor i1 %138, %139
  %144 = xor i1 %143, true
  %145 = and i1 %142, %144
  %146 = select i1 %145, i8 %141, i8 %137
  store i8 %146, i8* %133, align 1
  %147 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 10
  %148 = load i8, i8* %147, align 2
  %149 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 10
  %150 = load i8, i8* %149, align 2
  %151 = add i8 %148, %150
  %152 = icmp slt i8 %148, 0
  %153 = icmp slt i8 %150, 0
  %154 = icmp slt i8 %151, 0
  %155 = select i1 %153, i8 -128, i8 127
  %156 = xor i1 %152, %154
  %157 = xor i1 %152, %153
  %158 = xor i1 %157, true
  %159 = and i1 %156, %158
  %160 = select i1 %159, i8 %155, i8 %151
  store i8 %160, i8* %147, align 2
  %161 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 11
  %162 = load i8, i8* %161, align 1
  %163 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 11
  %164 = load i8, i8* %163, align 1
  %165 = add i8 %162, %164
  %166 = icmp slt i8 %162, 0
  %167 = icmp slt i8 %164, 0
  %168 = icmp slt i8 %165, 0
  %169 = select i1 %167, i8 -128, i8 127
  %170 = xor i1 %166, %168
  %171 = xor i1 %166, %167
  %172 = xor i1 %171, true
  %173 = and i1 %170, %172
  %174 = select i1 %173, i8 %169, i8 %165
  store i8 %174, i8* %161, align 1
  %175 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 12
  %176 = load i8, i8* %175, align 4
  %177 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 12
  %178 = load i8, i8* %177, align 4
  %179 = add i8 %176, %178
  %180 = icmp slt i8 %176, 0
  %181 = icmp slt i8 %178, 0
  %182 = icmp slt i8 %179, 0
  %183 = select i1 %181, i8 -128, i8 127
  %184 = xor i1 %180, %182
  %185 = xor i1 %180, %181
  %186 = xor i1 %185, true
  %187 = and i1 %184, %186
  %188 = select i1 %187, i8 %183, i8 %179
  store i8 %188, i8* %175, align 4
  %189 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 13
  %190 = load i8, i8* %189, align 1
  %191 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 13
  %192 = load i8, i8* %191, align 1
  %193 = add i8 %190, %192
  %194 = icmp slt i8 %190, 0
  %195 = icmp slt i8 %192, 0
  %196 = icmp slt i8 %193, 0
  %197 = select i1 %195, i8 -128, i8 127
  %198 = xor i1 %194, %196
  %199 = xor i1 %194, %195
  %200 = xor i1 %199, true
  %201 = and i1 %198, %200
  %202 = select i1 %201, i8 %197, i8 %193
  store i8 %202, i8* %189, align 1
  %203 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 14
  %204 = load i8, i8* %203, align 2
  %205 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 14
  %206 = load i8, i8* %205, align 2
  %207 = add i8 %204, %206
  %208 = icmp slt i8 %204, 0
  %209 = icmp slt i8 %206, 0
  %210 = icmp slt i8 %207, 0
  %211 = select i1 %209, i8 -128, i8 127
  %212 = xor i1 %208, %210
  %213 = xor i1 %208, %209
  %214 = xor i1 %213, true
  %215 = and i1 %212, %214
  %216 = select i1 %215, i8 %211, i8 %207
  store i8 %216, i8* %203, align 2
  %217 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 15
  %218 = load i8, i8* %217, align 1
  %219 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 15
  %220 = load i8, i8* %219, align 1
  %221 = add i8 %218, %220
  %222 = icmp slt i8 %218, 0
  %223 = icmp slt i8 %220, 0
  %224 = icmp slt i8 %221, 0
  %225 = select i1 %223, i8 -128, i8 127
  %226 = xor i1 %222, %224
  %227 = xor i1 %222, %223
  %228 = xor i1 %227, true
  %229 = and i1 %226, %228
  %230 = select i1 %229, i8 %225, i8 %221
  store i8 %230, i8* %217, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_psubusb_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %4 = bitcast %union.XMMReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = zext i8 %5 to i32
  %7 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %8 = bitcast %union.XMMReg* %1 to i8*
  %9 = load i8, i8* %8, align 8
  %10 = zext i8 %9 to i32
  %11 = sub nsw i32 %6, %10
  %12 = icmp slt i32 %11, 255
  %13 = select i1 %12, i32 %11, i32 255
  %14 = icmp sgt i32 %13, 0
  %15 = select i1 %14, i32 %13, i32 0
  %16 = trunc i32 %15 to i8
  store i8 %16, i8* %4, align 8
  %17 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 1
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 1
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = sub nsw i32 %19, %22
  %24 = icmp slt i32 %23, 255
  %25 = select i1 %24, i32 %23, i32 255
  %26 = icmp sgt i32 %25, 0
  %27 = select i1 %26, i32 %25, i32 0
  %28 = trunc i32 %27 to i8
  store i8 %28, i8* %17, align 1
  %29 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 2
  %30 = load i8, i8* %29, align 2
  %31 = zext i8 %30 to i32
  %32 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 2
  %33 = load i8, i8* %32, align 2
  %34 = zext i8 %33 to i32
  %35 = sub nsw i32 %31, %34
  %36 = icmp slt i32 %35, 255
  %37 = select i1 %36, i32 %35, i32 255
  %38 = icmp sgt i32 %37, 0
  %39 = select i1 %38, i32 %37, i32 0
  %40 = trunc i32 %39 to i8
  store i8 %40, i8* %29, align 2
  %41 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 3
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 3
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i32
  %47 = sub nsw i32 %43, %46
  %48 = icmp slt i32 %47, 255
  %49 = select i1 %48, i32 %47, i32 255
  %50 = icmp sgt i32 %49, 0
  %51 = select i1 %50, i32 %49, i32 0
  %52 = trunc i32 %51 to i8
  store i8 %52, i8* %41, align 1
  %53 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 4
  %54 = load i8, i8* %53, align 4
  %55 = zext i8 %54 to i32
  %56 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 4
  %57 = load i8, i8* %56, align 4
  %58 = zext i8 %57 to i32
  %59 = sub nsw i32 %55, %58
  %60 = icmp slt i32 %59, 255
  %61 = select i1 %60, i32 %59, i32 255
  %62 = icmp sgt i32 %61, 0
  %63 = select i1 %62, i32 %61, i32 0
  %64 = trunc i32 %63 to i8
  store i8 %64, i8* %53, align 4
  %65 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 5
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 5
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = sub nsw i32 %67, %70
  %72 = icmp slt i32 %71, 255
  %73 = select i1 %72, i32 %71, i32 255
  %74 = icmp sgt i32 %73, 0
  %75 = select i1 %74, i32 %73, i32 0
  %76 = trunc i32 %75 to i8
  store i8 %76, i8* %65, align 1
  %77 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 6
  %78 = load i8, i8* %77, align 2
  %79 = zext i8 %78 to i32
  %80 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 6
  %81 = load i8, i8* %80, align 2
  %82 = zext i8 %81 to i32
  %83 = sub nsw i32 %79, %82
  %84 = icmp slt i32 %83, 255
  %85 = select i1 %84, i32 %83, i32 255
  %86 = icmp sgt i32 %85, 0
  %87 = select i1 %86, i32 %85, i32 0
  %88 = trunc i32 %87 to i8
  store i8 %88, i8* %77, align 2
  %89 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 7
  %90 = load i8, i8* %89, align 1
  %91 = zext i8 %90 to i32
  %92 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 7
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i32
  %95 = sub nsw i32 %91, %94
  %96 = icmp slt i32 %95, 255
  %97 = select i1 %96, i32 %95, i32 255
  %98 = icmp sgt i32 %97, 0
  %99 = select i1 %98, i32 %97, i32 0
  %100 = trunc i32 %99 to i8
  store i8 %100, i8* %89, align 1
  %101 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %102 = bitcast i64* %101 to i8*
  %103 = load i8, i8* %102, align 8
  %104 = zext i8 %103 to i32
  %105 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %106 = bitcast i64* %105 to i8*
  %107 = load i8, i8* %106, align 8
  %108 = zext i8 %107 to i32
  %109 = sub nsw i32 %104, %108
  %110 = icmp slt i32 %109, 255
  %111 = select i1 %110, i32 %109, i32 255
  %112 = icmp sgt i32 %111, 0
  %113 = select i1 %112, i32 %111, i32 0
  %114 = trunc i32 %113 to i8
  store i8 %114, i8* %102, align 8
  %115 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 9
  %116 = load i8, i8* %115, align 1
  %117 = zext i8 %116 to i32
  %118 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 9
  %119 = load i8, i8* %118, align 1
  %120 = zext i8 %119 to i32
  %121 = sub nsw i32 %117, %120
  %122 = icmp slt i32 %121, 255
  %123 = select i1 %122, i32 %121, i32 255
  %124 = icmp sgt i32 %123, 0
  %125 = select i1 %124, i32 %123, i32 0
  %126 = trunc i32 %125 to i8
  store i8 %126, i8* %115, align 1
  %127 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 10
  %128 = load i8, i8* %127, align 2
  %129 = zext i8 %128 to i32
  %130 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 10
  %131 = load i8, i8* %130, align 2
  %132 = zext i8 %131 to i32
  %133 = sub nsw i32 %129, %132
  %134 = icmp slt i32 %133, 255
  %135 = select i1 %134, i32 %133, i32 255
  %136 = icmp sgt i32 %135, 0
  %137 = select i1 %136, i32 %135, i32 0
  %138 = trunc i32 %137 to i8
  store i8 %138, i8* %127, align 2
  %139 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 11
  %140 = load i8, i8* %139, align 1
  %141 = zext i8 %140 to i32
  %142 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 11
  %143 = load i8, i8* %142, align 1
  %144 = zext i8 %143 to i32
  %145 = sub nsw i32 %141, %144
  %146 = icmp slt i32 %145, 255
  %147 = select i1 %146, i32 %145, i32 255
  %148 = icmp sgt i32 %147, 0
  %149 = select i1 %148, i32 %147, i32 0
  %150 = trunc i32 %149 to i8
  store i8 %150, i8* %139, align 1
  %151 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 12
  %152 = load i8, i8* %151, align 4
  %153 = zext i8 %152 to i32
  %154 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 12
  %155 = load i8, i8* %154, align 4
  %156 = zext i8 %155 to i32
  %157 = sub nsw i32 %153, %156
  %158 = icmp slt i32 %157, 255
  %159 = select i1 %158, i32 %157, i32 255
  %160 = icmp sgt i32 %159, 0
  %161 = select i1 %160, i32 %159, i32 0
  %162 = trunc i32 %161 to i8
  store i8 %162, i8* %151, align 4
  %163 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 13
  %164 = load i8, i8* %163, align 1
  %165 = zext i8 %164 to i32
  %166 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 13
  %167 = load i8, i8* %166, align 1
  %168 = zext i8 %167 to i32
  %169 = sub nsw i32 %165, %168
  %170 = icmp slt i32 %169, 255
  %171 = select i1 %170, i32 %169, i32 255
  %172 = icmp sgt i32 %171, 0
  %173 = select i1 %172, i32 %171, i32 0
  %174 = trunc i32 %173 to i8
  store i8 %174, i8* %163, align 1
  %175 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 14
  %176 = load i8, i8* %175, align 2
  %177 = zext i8 %176 to i32
  %178 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 14
  %179 = load i8, i8* %178, align 2
  %180 = zext i8 %179 to i32
  %181 = sub nsw i32 %177, %180
  %182 = icmp slt i32 %181, 255
  %183 = select i1 %182, i32 %181, i32 255
  %184 = icmp sgt i32 %183, 0
  %185 = select i1 %184, i32 %183, i32 0
  %186 = trunc i32 %185 to i8
  store i8 %186, i8* %175, align 2
  %187 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 15
  %188 = load i8, i8* %187, align 1
  %189 = zext i8 %188 to i32
  %190 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 15
  %191 = load i8, i8* %190, align 1
  %192 = zext i8 %191 to i32
  %193 = sub nsw i32 %189, %192
  %194 = icmp slt i32 %193, 255
  %195 = select i1 %194, i32 %193, i32 255
  %196 = icmp sgt i32 %195, 0
  %197 = select i1 %196, i32 %195, i32 0
  %198 = trunc i32 %197 to i8
  store i8 %198, i8* %187, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_psubsb_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %4 = bitcast %union.XMMReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %7 = bitcast %union.XMMReg* %1 to i8*
  %8 = load i8, i8* %7, align 8
  %9 = sub i8 %5, %8
  %10 = icmp slt i8 %5, 0
  %11 = icmp slt i8 %8, 0
  %12 = icmp slt i8 %9, 0
  %13 = select i1 %11, i8 127, i8 -128
  %14 = xor i1 %10, %12
  %15 = xor i1 %10, %11
  %16 = and i1 %14, %15
  %17 = select i1 %16, i8 %13, i8 %9
  store i8 %17, i8* %4, align 8
  %18 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 1
  %19 = load i8, i8* %18, align 1
  %20 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 1
  %21 = load i8, i8* %20, align 1
  %22 = sub i8 %19, %21
  %23 = icmp slt i8 %19, 0
  %24 = icmp slt i8 %21, 0
  %25 = icmp slt i8 %22, 0
  %26 = select i1 %24, i8 127, i8 -128
  %27 = xor i1 %23, %25
  %28 = xor i1 %23, %24
  %29 = and i1 %27, %28
  %30 = select i1 %29, i8 %26, i8 %22
  store i8 %30, i8* %18, align 1
  %31 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 2
  %32 = load i8, i8* %31, align 2
  %33 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 2
  %34 = load i8, i8* %33, align 2
  %35 = sub i8 %32, %34
  %36 = icmp slt i8 %32, 0
  %37 = icmp slt i8 %34, 0
  %38 = icmp slt i8 %35, 0
  %39 = select i1 %37, i8 127, i8 -128
  %40 = xor i1 %36, %38
  %41 = xor i1 %36, %37
  %42 = and i1 %40, %41
  %43 = select i1 %42, i8 %39, i8 %35
  store i8 %43, i8* %31, align 2
  %44 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 3
  %45 = load i8, i8* %44, align 1
  %46 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 3
  %47 = load i8, i8* %46, align 1
  %48 = sub i8 %45, %47
  %49 = icmp slt i8 %45, 0
  %50 = icmp slt i8 %47, 0
  %51 = icmp slt i8 %48, 0
  %52 = select i1 %50, i8 127, i8 -128
  %53 = xor i1 %49, %51
  %54 = xor i1 %49, %50
  %55 = and i1 %53, %54
  %56 = select i1 %55, i8 %52, i8 %48
  store i8 %56, i8* %44, align 1
  %57 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 4
  %58 = load i8, i8* %57, align 4
  %59 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 4
  %60 = load i8, i8* %59, align 4
  %61 = sub i8 %58, %60
  %62 = icmp slt i8 %58, 0
  %63 = icmp slt i8 %60, 0
  %64 = icmp slt i8 %61, 0
  %65 = select i1 %63, i8 127, i8 -128
  %66 = xor i1 %62, %64
  %67 = xor i1 %62, %63
  %68 = and i1 %66, %67
  %69 = select i1 %68, i8 %65, i8 %61
  store i8 %69, i8* %57, align 4
  %70 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 5
  %71 = load i8, i8* %70, align 1
  %72 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 5
  %73 = load i8, i8* %72, align 1
  %74 = sub i8 %71, %73
  %75 = icmp slt i8 %71, 0
  %76 = icmp slt i8 %73, 0
  %77 = icmp slt i8 %74, 0
  %78 = select i1 %76, i8 127, i8 -128
  %79 = xor i1 %75, %77
  %80 = xor i1 %75, %76
  %81 = and i1 %79, %80
  %82 = select i1 %81, i8 %78, i8 %74
  store i8 %82, i8* %70, align 1
  %83 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 6
  %84 = load i8, i8* %83, align 2
  %85 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 6
  %86 = load i8, i8* %85, align 2
  %87 = sub i8 %84, %86
  %88 = icmp slt i8 %84, 0
  %89 = icmp slt i8 %86, 0
  %90 = icmp slt i8 %87, 0
  %91 = select i1 %89, i8 127, i8 -128
  %92 = xor i1 %88, %90
  %93 = xor i1 %88, %89
  %94 = and i1 %92, %93
  %95 = select i1 %94, i8 %91, i8 %87
  store i8 %95, i8* %83, align 2
  %96 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 7
  %97 = load i8, i8* %96, align 1
  %98 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 7
  %99 = load i8, i8* %98, align 1
  %100 = sub i8 %97, %99
  %101 = icmp slt i8 %97, 0
  %102 = icmp slt i8 %99, 0
  %103 = icmp slt i8 %100, 0
  %104 = select i1 %102, i8 127, i8 -128
  %105 = xor i1 %101, %103
  %106 = xor i1 %101, %102
  %107 = and i1 %105, %106
  %108 = select i1 %107, i8 %104, i8 %100
  store i8 %108, i8* %96, align 1
  %109 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %110 = bitcast i64* %109 to i8*
  %111 = load i8, i8* %110, align 8
  %112 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %113 = bitcast i64* %112 to i8*
  %114 = load i8, i8* %113, align 8
  %115 = sub i8 %111, %114
  %116 = icmp slt i8 %111, 0
  %117 = icmp slt i8 %114, 0
  %118 = icmp slt i8 %115, 0
  %119 = select i1 %117, i8 127, i8 -128
  %120 = xor i1 %116, %118
  %121 = xor i1 %116, %117
  %122 = and i1 %120, %121
  %123 = select i1 %122, i8 %119, i8 %115
  store i8 %123, i8* %110, align 8
  %124 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 9
  %125 = load i8, i8* %124, align 1
  %126 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 9
  %127 = load i8, i8* %126, align 1
  %128 = sub i8 %125, %127
  %129 = icmp slt i8 %125, 0
  %130 = icmp slt i8 %127, 0
  %131 = icmp slt i8 %128, 0
  %132 = select i1 %130, i8 127, i8 -128
  %133 = xor i1 %129, %131
  %134 = xor i1 %129, %130
  %135 = and i1 %133, %134
  %136 = select i1 %135, i8 %132, i8 %128
  store i8 %136, i8* %124, align 1
  %137 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 10
  %138 = load i8, i8* %137, align 2
  %139 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 10
  %140 = load i8, i8* %139, align 2
  %141 = sub i8 %138, %140
  %142 = icmp slt i8 %138, 0
  %143 = icmp slt i8 %140, 0
  %144 = icmp slt i8 %141, 0
  %145 = select i1 %143, i8 127, i8 -128
  %146 = xor i1 %142, %144
  %147 = xor i1 %142, %143
  %148 = and i1 %146, %147
  %149 = select i1 %148, i8 %145, i8 %141
  store i8 %149, i8* %137, align 2
  %150 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 11
  %151 = load i8, i8* %150, align 1
  %152 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 11
  %153 = load i8, i8* %152, align 1
  %154 = sub i8 %151, %153
  %155 = icmp slt i8 %151, 0
  %156 = icmp slt i8 %153, 0
  %157 = icmp slt i8 %154, 0
  %158 = select i1 %156, i8 127, i8 -128
  %159 = xor i1 %155, %157
  %160 = xor i1 %155, %156
  %161 = and i1 %159, %160
  %162 = select i1 %161, i8 %158, i8 %154
  store i8 %162, i8* %150, align 1
  %163 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 12
  %164 = load i8, i8* %163, align 4
  %165 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 12
  %166 = load i8, i8* %165, align 4
  %167 = sub i8 %164, %166
  %168 = icmp slt i8 %164, 0
  %169 = icmp slt i8 %166, 0
  %170 = icmp slt i8 %167, 0
  %171 = select i1 %169, i8 127, i8 -128
  %172 = xor i1 %168, %170
  %173 = xor i1 %168, %169
  %174 = and i1 %172, %173
  %175 = select i1 %174, i8 %171, i8 %167
  store i8 %175, i8* %163, align 4
  %176 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 13
  %177 = load i8, i8* %176, align 1
  %178 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 13
  %179 = load i8, i8* %178, align 1
  %180 = sub i8 %177, %179
  %181 = icmp slt i8 %177, 0
  %182 = icmp slt i8 %179, 0
  %183 = icmp slt i8 %180, 0
  %184 = select i1 %182, i8 127, i8 -128
  %185 = xor i1 %181, %183
  %186 = xor i1 %181, %182
  %187 = and i1 %185, %186
  %188 = select i1 %187, i8 %184, i8 %180
  store i8 %188, i8* %176, align 1
  %189 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 14
  %190 = load i8, i8* %189, align 2
  %191 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 14
  %192 = load i8, i8* %191, align 2
  %193 = sub i8 %190, %192
  %194 = icmp slt i8 %190, 0
  %195 = icmp slt i8 %192, 0
  %196 = icmp slt i8 %193, 0
  %197 = select i1 %195, i8 127, i8 -128
  %198 = xor i1 %194, %196
  %199 = xor i1 %194, %195
  %200 = and i1 %198, %199
  %201 = select i1 %200, i8 %197, i8 %193
  store i8 %201, i8* %189, align 2
  %202 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 15
  %203 = load i8, i8* %202, align 1
  %204 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 15
  %205 = load i8, i8* %204, align 1
  %206 = sub i8 %203, %205
  %207 = icmp slt i8 %203, 0
  %208 = icmp slt i8 %205, 0
  %209 = icmp slt i8 %206, 0
  %210 = select i1 %208, i8 127, i8 -128
  %211 = xor i1 %207, %209
  %212 = xor i1 %207, %208
  %213 = and i1 %211, %212
  %214 = select i1 %213, i8 %210, i8 %206
  store i8 %214, i8* %202, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_paddusw_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = zext i16 %5 to i32
  %7 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %8 = bitcast %union.XMMReg* %1 to i16*
  %9 = load i16, i16* %8, align 8
  %10 = zext i16 %9 to i32
  %11 = add nuw nsw i32 %10, %6
  %12 = icmp ult i32 %11, 65535
  %13 = select i1 %12, i32 %11, i32 65535
  %14 = trunc i32 %13 to i16
  store i16 %14, i16* %4, align 8
  %15 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 1
  %19 = load i16, i16* %18, align 2
  %20 = zext i16 %19 to i32
  %21 = add nuw nsw i32 %20, %17
  %22 = icmp ult i32 %21, 65535
  %23 = select i1 %22, i32 %21, i32 65535
  %24 = trunc i32 %23 to i16
  store i16 %24, i16* %15, align 2
  %25 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %26 = load i16, i16* %25, align 4
  %27 = zext i16 %26 to i32
  %28 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 2
  %29 = load i16, i16* %28, align 4
  %30 = zext i16 %29 to i32
  %31 = add nuw nsw i32 %30, %27
  %32 = icmp ult i32 %31, 65535
  %33 = select i1 %32, i32 %31, i32 65535
  %34 = trunc i32 %33 to i16
  store i16 %34, i16* %25, align 4
  %35 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 3
  %39 = load i16, i16* %38, align 2
  %40 = zext i16 %39 to i32
  %41 = add nuw nsw i32 %40, %37
  %42 = icmp ult i32 %41, 65535
  %43 = select i1 %42, i32 %41, i32 65535
  %44 = trunc i32 %43 to i16
  store i16 %44, i16* %35, align 2
  %45 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %46 = bitcast i64* %45 to i16*
  %47 = load i16, i16* %46, align 8
  %48 = zext i16 %47 to i32
  %49 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %50 = bitcast i64* %49 to i16*
  %51 = load i16, i16* %50, align 8
  %52 = zext i16 %51 to i32
  %53 = add nuw nsw i32 %52, %48
  %54 = icmp ult i32 %53, 65535
  %55 = select i1 %54, i32 %53, i32 65535
  %56 = trunc i32 %55 to i16
  store i16 %56, i16* %46, align 8
  %57 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %58 = load i16, i16* %57, align 2
  %59 = zext i16 %58 to i32
  %60 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 5
  %61 = load i16, i16* %60, align 2
  %62 = zext i16 %61 to i32
  %63 = add nuw nsw i32 %62, %59
  %64 = icmp ult i32 %63, 65535
  %65 = select i1 %64, i32 %63, i32 65535
  %66 = trunc i32 %65 to i16
  store i16 %66, i16* %57, align 2
  %67 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %68 = load i16, i16* %67, align 4
  %69 = zext i16 %68 to i32
  %70 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 6
  %71 = load i16, i16* %70, align 4
  %72 = zext i16 %71 to i32
  %73 = add nuw nsw i32 %72, %69
  %74 = icmp ult i32 %73, 65535
  %75 = select i1 %74, i32 %73, i32 65535
  %76 = trunc i32 %75 to i16
  store i16 %76, i16* %67, align 4
  %77 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %78 = load i16, i16* %77, align 2
  %79 = zext i16 %78 to i32
  %80 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 7
  %81 = load i16, i16* %80, align 2
  %82 = zext i16 %81 to i32
  %83 = add nuw nsw i32 %82, %79
  %84 = icmp ult i32 %83, 65535
  %85 = select i1 %84, i32 %83, i32 65535
  %86 = trunc i32 %85 to i16
  store i16 %86, i16* %77, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_paddsw_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %7 = bitcast %union.XMMReg* %1 to i16*
  %8 = load i16, i16* %7, align 8
  %9 = add i16 %5, %8
  %10 = icmp slt i16 %5, 0
  %11 = icmp slt i16 %8, 0
  %12 = icmp slt i16 %9, 0
  %13 = select i1 %11, i16 -32768, i16 32767
  %14 = xor i1 %10, %12
  %15 = xor i1 %10, %11
  %16 = xor i1 %15, true
  %17 = and i1 %14, %16
  %18 = select i1 %17, i16 %13, i16 %9
  store i16 %18, i16* %4, align 8
  %19 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %20 = load i16, i16* %19, align 2
  %21 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 1
  %22 = load i16, i16* %21, align 2
  %23 = add i16 %20, %22
  %24 = icmp slt i16 %20, 0
  %25 = icmp slt i16 %22, 0
  %26 = icmp slt i16 %23, 0
  %27 = select i1 %25, i16 -32768, i16 32767
  %28 = xor i1 %24, %26
  %29 = xor i1 %24, %25
  %30 = xor i1 %29, true
  %31 = and i1 %28, %30
  %32 = select i1 %31, i16 %27, i16 %23
  store i16 %32, i16* %19, align 2
  %33 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %34 = load i16, i16* %33, align 4
  %35 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 2
  %36 = load i16, i16* %35, align 4
  %37 = add i16 %34, %36
  %38 = icmp slt i16 %34, 0
  %39 = icmp slt i16 %36, 0
  %40 = icmp slt i16 %37, 0
  %41 = select i1 %39, i16 -32768, i16 32767
  %42 = xor i1 %38, %40
  %43 = xor i1 %38, %39
  %44 = xor i1 %43, true
  %45 = and i1 %42, %44
  %46 = select i1 %45, i16 %41, i16 %37
  store i16 %46, i16* %33, align 4
  %47 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %48 = load i16, i16* %47, align 2
  %49 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 3
  %50 = load i16, i16* %49, align 2
  %51 = add i16 %48, %50
  %52 = icmp slt i16 %48, 0
  %53 = icmp slt i16 %50, 0
  %54 = icmp slt i16 %51, 0
  %55 = select i1 %53, i16 -32768, i16 32767
  %56 = xor i1 %52, %54
  %57 = xor i1 %52, %53
  %58 = xor i1 %57, true
  %59 = and i1 %56, %58
  %60 = select i1 %59, i16 %55, i16 %51
  store i16 %60, i16* %47, align 2
  %61 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %62 = bitcast i64* %61 to i16*
  %63 = load i16, i16* %62, align 8
  %64 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %65 = bitcast i64* %64 to i16*
  %66 = load i16, i16* %65, align 8
  %67 = add i16 %63, %66
  %68 = icmp slt i16 %63, 0
  %69 = icmp slt i16 %66, 0
  %70 = icmp slt i16 %67, 0
  %71 = select i1 %69, i16 -32768, i16 32767
  %72 = xor i1 %68, %70
  %73 = xor i1 %68, %69
  %74 = xor i1 %73, true
  %75 = and i1 %72, %74
  %76 = select i1 %75, i16 %71, i16 %67
  store i16 %76, i16* %62, align 8
  %77 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %78 = load i16, i16* %77, align 2
  %79 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 5
  %80 = load i16, i16* %79, align 2
  %81 = add i16 %78, %80
  %82 = icmp slt i16 %78, 0
  %83 = icmp slt i16 %80, 0
  %84 = icmp slt i16 %81, 0
  %85 = select i1 %83, i16 -32768, i16 32767
  %86 = xor i1 %82, %84
  %87 = xor i1 %82, %83
  %88 = xor i1 %87, true
  %89 = and i1 %86, %88
  %90 = select i1 %89, i16 %85, i16 %81
  store i16 %90, i16* %77, align 2
  %91 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %92 = load i16, i16* %91, align 4
  %93 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 6
  %94 = load i16, i16* %93, align 4
  %95 = add i16 %92, %94
  %96 = icmp slt i16 %92, 0
  %97 = icmp slt i16 %94, 0
  %98 = icmp slt i16 %95, 0
  %99 = select i1 %97, i16 -32768, i16 32767
  %100 = xor i1 %96, %98
  %101 = xor i1 %96, %97
  %102 = xor i1 %101, true
  %103 = and i1 %100, %102
  %104 = select i1 %103, i16 %99, i16 %95
  store i16 %104, i16* %91, align 4
  %105 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %106 = load i16, i16* %105, align 2
  %107 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 7
  %108 = load i16, i16* %107, align 2
  %109 = add i16 %106, %108
  %110 = icmp slt i16 %106, 0
  %111 = icmp slt i16 %108, 0
  %112 = icmp slt i16 %109, 0
  %113 = select i1 %111, i16 -32768, i16 32767
  %114 = xor i1 %110, %112
  %115 = xor i1 %110, %111
  %116 = xor i1 %115, true
  %117 = and i1 %114, %116
  %118 = select i1 %117, i16 %113, i16 %109
  store i16 %118, i16* %105, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_psubusw_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = zext i16 %5 to i32
  %7 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %8 = bitcast %union.XMMReg* %1 to i16*
  %9 = load i16, i16* %8, align 8
  %10 = zext i16 %9 to i32
  %11 = sub nsw i32 %6, %10
  %12 = icmp slt i32 %11, 65535
  %13 = select i1 %12, i32 %11, i32 65535
  %14 = icmp sgt i32 %13, 0
  %15 = select i1 %14, i32 %13, i32 0
  %16 = trunc i32 %15 to i16
  store i16 %16, i16* %4, align 8
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %18 = load i16, i16* %17, align 2
  %19 = zext i16 %18 to i32
  %20 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 1
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = sub nsw i32 %19, %22
  %24 = icmp slt i32 %23, 65535
  %25 = select i1 %24, i32 %23, i32 65535
  %26 = icmp sgt i32 %25, 0
  %27 = select i1 %26, i32 %25, i32 0
  %28 = trunc i32 %27 to i16
  store i16 %28, i16* %17, align 2
  %29 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %30 = load i16, i16* %29, align 4
  %31 = zext i16 %30 to i32
  %32 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 2
  %33 = load i16, i16* %32, align 4
  %34 = zext i16 %33 to i32
  %35 = sub nsw i32 %31, %34
  %36 = icmp slt i32 %35, 65535
  %37 = select i1 %36, i32 %35, i32 65535
  %38 = icmp sgt i32 %37, 0
  %39 = select i1 %38, i32 %37, i32 0
  %40 = trunc i32 %39 to i16
  store i16 %40, i16* %29, align 4
  %41 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %42 = load i16, i16* %41, align 2
  %43 = zext i16 %42 to i32
  %44 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 3
  %45 = load i16, i16* %44, align 2
  %46 = zext i16 %45 to i32
  %47 = sub nsw i32 %43, %46
  %48 = icmp slt i32 %47, 65535
  %49 = select i1 %48, i32 %47, i32 65535
  %50 = icmp sgt i32 %49, 0
  %51 = select i1 %50, i32 %49, i32 0
  %52 = trunc i32 %51 to i16
  store i16 %52, i16* %41, align 2
  %53 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %54 = bitcast i64* %53 to i16*
  %55 = load i16, i16* %54, align 8
  %56 = zext i16 %55 to i32
  %57 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %58 = bitcast i64* %57 to i16*
  %59 = load i16, i16* %58, align 8
  %60 = zext i16 %59 to i32
  %61 = sub nsw i32 %56, %60
  %62 = icmp slt i32 %61, 65535
  %63 = select i1 %62, i32 %61, i32 65535
  %64 = icmp sgt i32 %63, 0
  %65 = select i1 %64, i32 %63, i32 0
  %66 = trunc i32 %65 to i16
  store i16 %66, i16* %54, align 8
  %67 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %68 = load i16, i16* %67, align 2
  %69 = zext i16 %68 to i32
  %70 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 5
  %71 = load i16, i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = sub nsw i32 %69, %72
  %74 = icmp slt i32 %73, 65535
  %75 = select i1 %74, i32 %73, i32 65535
  %76 = icmp sgt i32 %75, 0
  %77 = select i1 %76, i32 %75, i32 0
  %78 = trunc i32 %77 to i16
  store i16 %78, i16* %67, align 2
  %79 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %80 = load i16, i16* %79, align 4
  %81 = zext i16 %80 to i32
  %82 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 6
  %83 = load i16, i16* %82, align 4
  %84 = zext i16 %83 to i32
  %85 = sub nsw i32 %81, %84
  %86 = icmp slt i32 %85, 65535
  %87 = select i1 %86, i32 %85, i32 65535
  %88 = icmp sgt i32 %87, 0
  %89 = select i1 %88, i32 %87, i32 0
  %90 = trunc i32 %89 to i16
  store i16 %90, i16* %79, align 4
  %91 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %92 = load i16, i16* %91, align 2
  %93 = zext i16 %92 to i32
  %94 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 7
  %95 = load i16, i16* %94, align 2
  %96 = zext i16 %95 to i32
  %97 = sub nsw i32 %93, %96
  %98 = icmp slt i32 %97, 65535
  %99 = select i1 %98, i32 %97, i32 65535
  %100 = icmp sgt i32 %99, 0
  %101 = select i1 %100, i32 %99, i32 0
  %102 = trunc i32 %101 to i16
  store i16 %102, i16* %91, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_psubsw_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %7 = bitcast %union.XMMReg* %1 to i16*
  %8 = load i16, i16* %7, align 8
  %9 = sub i16 %5, %8
  %10 = icmp slt i16 %5, 0
  %11 = icmp slt i16 %8, 0
  %12 = icmp slt i16 %9, 0
  %13 = select i1 %11, i16 32767, i16 -32768
  %14 = xor i1 %10, %12
  %15 = xor i1 %10, %11
  %16 = and i1 %14, %15
  %17 = select i1 %16, i16 %13, i16 %9
  store i16 %17, i16* %4, align 8
  %18 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %19 = load i16, i16* %18, align 2
  %20 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 1
  %21 = load i16, i16* %20, align 2
  %22 = sub i16 %19, %21
  %23 = icmp slt i16 %19, 0
  %24 = icmp slt i16 %21, 0
  %25 = icmp slt i16 %22, 0
  %26 = select i1 %24, i16 32767, i16 -32768
  %27 = xor i1 %23, %25
  %28 = xor i1 %23, %24
  %29 = and i1 %27, %28
  %30 = select i1 %29, i16 %26, i16 %22
  store i16 %30, i16* %18, align 2
  %31 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %32 = load i16, i16* %31, align 4
  %33 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 2
  %34 = load i16, i16* %33, align 4
  %35 = sub i16 %32, %34
  %36 = icmp slt i16 %32, 0
  %37 = icmp slt i16 %34, 0
  %38 = icmp slt i16 %35, 0
  %39 = select i1 %37, i16 32767, i16 -32768
  %40 = xor i1 %36, %38
  %41 = xor i1 %36, %37
  %42 = and i1 %40, %41
  %43 = select i1 %42, i16 %39, i16 %35
  store i16 %43, i16* %31, align 4
  %44 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %45 = load i16, i16* %44, align 2
  %46 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 3
  %47 = load i16, i16* %46, align 2
  %48 = sub i16 %45, %47
  %49 = icmp slt i16 %45, 0
  %50 = icmp slt i16 %47, 0
  %51 = icmp slt i16 %48, 0
  %52 = select i1 %50, i16 32767, i16 -32768
  %53 = xor i1 %49, %51
  %54 = xor i1 %49, %50
  %55 = and i1 %53, %54
  %56 = select i1 %55, i16 %52, i16 %48
  store i16 %56, i16* %44, align 2
  %57 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %58 = bitcast i64* %57 to i16*
  %59 = load i16, i16* %58, align 8
  %60 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %61 = bitcast i64* %60 to i16*
  %62 = load i16, i16* %61, align 8
  %63 = sub i16 %59, %62
  %64 = icmp slt i16 %59, 0
  %65 = icmp slt i16 %62, 0
  %66 = icmp slt i16 %63, 0
  %67 = select i1 %65, i16 32767, i16 -32768
  %68 = xor i1 %64, %66
  %69 = xor i1 %64, %65
  %70 = and i1 %68, %69
  %71 = select i1 %70, i16 %67, i16 %63
  store i16 %71, i16* %58, align 8
  %72 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %73 = load i16, i16* %72, align 2
  %74 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 5
  %75 = load i16, i16* %74, align 2
  %76 = sub i16 %73, %75
  %77 = icmp slt i16 %73, 0
  %78 = icmp slt i16 %75, 0
  %79 = icmp slt i16 %76, 0
  %80 = select i1 %78, i16 32767, i16 -32768
  %81 = xor i1 %77, %79
  %82 = xor i1 %77, %78
  %83 = and i1 %81, %82
  %84 = select i1 %83, i16 %80, i16 %76
  store i16 %84, i16* %72, align 2
  %85 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %86 = load i16, i16* %85, align 4
  %87 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 6
  %88 = load i16, i16* %87, align 4
  %89 = sub i16 %86, %88
  %90 = icmp slt i16 %86, 0
  %91 = icmp slt i16 %88, 0
  %92 = icmp slt i16 %89, 0
  %93 = select i1 %91, i16 32767, i16 -32768
  %94 = xor i1 %90, %92
  %95 = xor i1 %90, %91
  %96 = and i1 %94, %95
  %97 = select i1 %96, i16 %93, i16 %89
  store i16 %97, i16* %85, align 4
  %98 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %99 = load i16, i16* %98, align 2
  %100 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 7
  %101 = load i16, i16* %100, align 2
  %102 = sub i16 %99, %101
  %103 = icmp slt i16 %99, 0
  %104 = icmp slt i16 %101, 0
  %105 = icmp slt i16 %102, 0
  %106 = select i1 %104, i16 32767, i16 -32768
  %107 = xor i1 %103, %105
  %108 = xor i1 %103, %104
  %109 = and i1 %107, %108
  %110 = select i1 %109, i16 %106, i16 %102
  store i16 %110, i16* %98, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pminub_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %4 = bitcast %union.XMMReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %7 = bitcast %union.XMMReg* %1 to i8*
  %8 = load i8, i8* %7, align 8
  %9 = icmp ult i8 %5, %8
  %10 = select i1 %9, i8 %5, i8 %8
  store i8 %10, i8* %4, align 8
  %11 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 1
  %12 = load i8, i8* %11, align 1
  %13 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 1
  %14 = load i8, i8* %13, align 1
  %15 = icmp ult i8 %12, %14
  %16 = select i1 %15, i8 %12, i8 %14
  store i8 %16, i8* %11, align 1
  %17 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 2
  %18 = load i8, i8* %17, align 2
  %19 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 2
  %20 = load i8, i8* %19, align 2
  %21 = icmp ult i8 %18, %20
  %22 = select i1 %21, i8 %18, i8 %20
  store i8 %22, i8* %17, align 2
  %23 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 3
  %24 = load i8, i8* %23, align 1
  %25 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 3
  %26 = load i8, i8* %25, align 1
  %27 = icmp ult i8 %24, %26
  %28 = select i1 %27, i8 %24, i8 %26
  store i8 %28, i8* %23, align 1
  %29 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 4
  %30 = load i8, i8* %29, align 4
  %31 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 4
  %32 = load i8, i8* %31, align 4
  %33 = icmp ult i8 %30, %32
  %34 = select i1 %33, i8 %30, i8 %32
  store i8 %34, i8* %29, align 4
  %35 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 5
  %36 = load i8, i8* %35, align 1
  %37 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 5
  %38 = load i8, i8* %37, align 1
  %39 = icmp ult i8 %36, %38
  %40 = select i1 %39, i8 %36, i8 %38
  store i8 %40, i8* %35, align 1
  %41 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 6
  %42 = load i8, i8* %41, align 2
  %43 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 6
  %44 = load i8, i8* %43, align 2
  %45 = icmp ult i8 %42, %44
  %46 = select i1 %45, i8 %42, i8 %44
  store i8 %46, i8* %41, align 2
  %47 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 7
  %48 = load i8, i8* %47, align 1
  %49 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 7
  %50 = load i8, i8* %49, align 1
  %51 = icmp ult i8 %48, %50
  %52 = select i1 %51, i8 %48, i8 %50
  store i8 %52, i8* %47, align 1
  %53 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %54 = bitcast i64* %53 to i8*
  %55 = load i8, i8* %54, align 8
  %56 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %57 = bitcast i64* %56 to i8*
  %58 = load i8, i8* %57, align 8
  %59 = icmp ult i8 %55, %58
  %60 = select i1 %59, i8 %55, i8 %58
  store i8 %60, i8* %54, align 8
  %61 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 9
  %62 = load i8, i8* %61, align 1
  %63 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 9
  %64 = load i8, i8* %63, align 1
  %65 = icmp ult i8 %62, %64
  %66 = select i1 %65, i8 %62, i8 %64
  store i8 %66, i8* %61, align 1
  %67 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 10
  %68 = load i8, i8* %67, align 2
  %69 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 10
  %70 = load i8, i8* %69, align 2
  %71 = icmp ult i8 %68, %70
  %72 = select i1 %71, i8 %68, i8 %70
  store i8 %72, i8* %67, align 2
  %73 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 11
  %74 = load i8, i8* %73, align 1
  %75 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 11
  %76 = load i8, i8* %75, align 1
  %77 = icmp ult i8 %74, %76
  %78 = select i1 %77, i8 %74, i8 %76
  store i8 %78, i8* %73, align 1
  %79 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 12
  %80 = load i8, i8* %79, align 4
  %81 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 12
  %82 = load i8, i8* %81, align 4
  %83 = icmp ult i8 %80, %82
  %84 = select i1 %83, i8 %80, i8 %82
  store i8 %84, i8* %79, align 4
  %85 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 13
  %86 = load i8, i8* %85, align 1
  %87 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 13
  %88 = load i8, i8* %87, align 1
  %89 = icmp ult i8 %86, %88
  %90 = select i1 %89, i8 %86, i8 %88
  store i8 %90, i8* %85, align 1
  %91 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 14
  %92 = load i8, i8* %91, align 2
  %93 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 14
  %94 = load i8, i8* %93, align 2
  %95 = icmp ult i8 %92, %94
  %96 = select i1 %95, i8 %92, i8 %94
  store i8 %96, i8* %91, align 2
  %97 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 15
  %98 = load i8, i8* %97, align 1
  %99 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 15
  %100 = load i8, i8* %99, align 1
  %101 = icmp ult i8 %98, %100
  %102 = select i1 %101, i8 %98, i8 %100
  store i8 %102, i8* %97, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pmaxub_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %4 = bitcast %union.XMMReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %7 = bitcast %union.XMMReg* %1 to i8*
  %8 = load i8, i8* %7, align 8
  %9 = icmp ugt i8 %5, %8
  %10 = select i1 %9, i8 %5, i8 %8
  store i8 %10, i8* %4, align 8
  %11 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 1
  %12 = load i8, i8* %11, align 1
  %13 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 1
  %14 = load i8, i8* %13, align 1
  %15 = icmp ugt i8 %12, %14
  %16 = select i1 %15, i8 %12, i8 %14
  store i8 %16, i8* %11, align 1
  %17 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 2
  %18 = load i8, i8* %17, align 2
  %19 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 2
  %20 = load i8, i8* %19, align 2
  %21 = icmp ugt i8 %18, %20
  %22 = select i1 %21, i8 %18, i8 %20
  store i8 %22, i8* %17, align 2
  %23 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 3
  %24 = load i8, i8* %23, align 1
  %25 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 3
  %26 = load i8, i8* %25, align 1
  %27 = icmp ugt i8 %24, %26
  %28 = select i1 %27, i8 %24, i8 %26
  store i8 %28, i8* %23, align 1
  %29 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 4
  %30 = load i8, i8* %29, align 4
  %31 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 4
  %32 = load i8, i8* %31, align 4
  %33 = icmp ugt i8 %30, %32
  %34 = select i1 %33, i8 %30, i8 %32
  store i8 %34, i8* %29, align 4
  %35 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 5
  %36 = load i8, i8* %35, align 1
  %37 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 5
  %38 = load i8, i8* %37, align 1
  %39 = icmp ugt i8 %36, %38
  %40 = select i1 %39, i8 %36, i8 %38
  store i8 %40, i8* %35, align 1
  %41 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 6
  %42 = load i8, i8* %41, align 2
  %43 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 6
  %44 = load i8, i8* %43, align 2
  %45 = icmp ugt i8 %42, %44
  %46 = select i1 %45, i8 %42, i8 %44
  store i8 %46, i8* %41, align 2
  %47 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 7
  %48 = load i8, i8* %47, align 1
  %49 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 7
  %50 = load i8, i8* %49, align 1
  %51 = icmp ugt i8 %48, %50
  %52 = select i1 %51, i8 %48, i8 %50
  store i8 %52, i8* %47, align 1
  %53 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %54 = bitcast i64* %53 to i8*
  %55 = load i8, i8* %54, align 8
  %56 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %57 = bitcast i64* %56 to i8*
  %58 = load i8, i8* %57, align 8
  %59 = icmp ugt i8 %55, %58
  %60 = select i1 %59, i8 %55, i8 %58
  store i8 %60, i8* %54, align 8
  %61 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 9
  %62 = load i8, i8* %61, align 1
  %63 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 9
  %64 = load i8, i8* %63, align 1
  %65 = icmp ugt i8 %62, %64
  %66 = select i1 %65, i8 %62, i8 %64
  store i8 %66, i8* %61, align 1
  %67 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 10
  %68 = load i8, i8* %67, align 2
  %69 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 10
  %70 = load i8, i8* %69, align 2
  %71 = icmp ugt i8 %68, %70
  %72 = select i1 %71, i8 %68, i8 %70
  store i8 %72, i8* %67, align 2
  %73 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 11
  %74 = load i8, i8* %73, align 1
  %75 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 11
  %76 = load i8, i8* %75, align 1
  %77 = icmp ugt i8 %74, %76
  %78 = select i1 %77, i8 %74, i8 %76
  store i8 %78, i8* %73, align 1
  %79 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 12
  %80 = load i8, i8* %79, align 4
  %81 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 12
  %82 = load i8, i8* %81, align 4
  %83 = icmp ugt i8 %80, %82
  %84 = select i1 %83, i8 %80, i8 %82
  store i8 %84, i8* %79, align 4
  %85 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 13
  %86 = load i8, i8* %85, align 1
  %87 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 13
  %88 = load i8, i8* %87, align 1
  %89 = icmp ugt i8 %86, %88
  %90 = select i1 %89, i8 %86, i8 %88
  store i8 %90, i8* %85, align 1
  %91 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 14
  %92 = load i8, i8* %91, align 2
  %93 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 14
  %94 = load i8, i8* %93, align 2
  %95 = icmp ugt i8 %92, %94
  %96 = select i1 %95, i8 %92, i8 %94
  store i8 %96, i8* %91, align 2
  %97 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 15
  %98 = load i8, i8* %97, align 1
  %99 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 15
  %100 = load i8, i8* %99, align 1
  %101 = icmp ugt i8 %98, %100
  %102 = select i1 %101, i8 %98, i8 %100
  store i8 %102, i8* %97, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pminsw_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %7 = bitcast %union.XMMReg* %1 to i16*
  %8 = load i16, i16* %7, align 8
  %9 = icmp slt i16 %5, %8
  %10 = select i1 %9, i16 %5, i16 %8
  store i16 %10, i16* %4, align 8
  %11 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %12 = load i16, i16* %11, align 2
  %13 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 1
  %14 = load i16, i16* %13, align 2
  %15 = icmp slt i16 %12, %14
  %16 = select i1 %15, i16 %12, i16 %14
  store i16 %16, i16* %11, align 2
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %18 = load i16, i16* %17, align 4
  %19 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 2
  %20 = load i16, i16* %19, align 4
  %21 = icmp slt i16 %18, %20
  %22 = select i1 %21, i16 %18, i16 %20
  store i16 %22, i16* %17, align 4
  %23 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %24 = load i16, i16* %23, align 2
  %25 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 3
  %26 = load i16, i16* %25, align 2
  %27 = icmp slt i16 %24, %26
  %28 = select i1 %27, i16 %24, i16 %26
  store i16 %28, i16* %23, align 2
  %29 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %30 = bitcast i64* %29 to i16*
  %31 = load i16, i16* %30, align 8
  %32 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %33 = bitcast i64* %32 to i16*
  %34 = load i16, i16* %33, align 8
  %35 = icmp slt i16 %31, %34
  %36 = select i1 %35, i16 %31, i16 %34
  store i16 %36, i16* %30, align 8
  %37 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %38 = load i16, i16* %37, align 2
  %39 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 5
  %40 = load i16, i16* %39, align 2
  %41 = icmp slt i16 %38, %40
  %42 = select i1 %41, i16 %38, i16 %40
  store i16 %42, i16* %37, align 2
  %43 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %44 = load i16, i16* %43, align 4
  %45 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 6
  %46 = load i16, i16* %45, align 4
  %47 = icmp slt i16 %44, %46
  %48 = select i1 %47, i16 %44, i16 %46
  store i16 %48, i16* %43, align 4
  %49 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %50 = load i16, i16* %49, align 2
  %51 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 7
  %52 = load i16, i16* %51, align 2
  %53 = icmp slt i16 %50, %52
  %54 = select i1 %53, i16 %50, i16 %52
  store i16 %54, i16* %49, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pmaxsw_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %7 = bitcast %union.XMMReg* %1 to i16*
  %8 = load i16, i16* %7, align 8
  %9 = icmp sgt i16 %5, %8
  %10 = select i1 %9, i16 %5, i16 %8
  store i16 %10, i16* %4, align 8
  %11 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %12 = load i16, i16* %11, align 2
  %13 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 1
  %14 = load i16, i16* %13, align 2
  %15 = icmp sgt i16 %12, %14
  %16 = select i1 %15, i16 %12, i16 %14
  store i16 %16, i16* %11, align 2
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %18 = load i16, i16* %17, align 4
  %19 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 2
  %20 = load i16, i16* %19, align 4
  %21 = icmp sgt i16 %18, %20
  %22 = select i1 %21, i16 %18, i16 %20
  store i16 %22, i16* %17, align 4
  %23 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %24 = load i16, i16* %23, align 2
  %25 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 3
  %26 = load i16, i16* %25, align 2
  %27 = icmp sgt i16 %24, %26
  %28 = select i1 %27, i16 %24, i16 %26
  store i16 %28, i16* %23, align 2
  %29 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %30 = bitcast i64* %29 to i16*
  %31 = load i16, i16* %30, align 8
  %32 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %33 = bitcast i64* %32 to i16*
  %34 = load i16, i16* %33, align 8
  %35 = icmp sgt i16 %31, %34
  %36 = select i1 %35, i16 %31, i16 %34
  store i16 %36, i16* %30, align 8
  %37 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %38 = load i16, i16* %37, align 2
  %39 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 5
  %40 = load i16, i16* %39, align 2
  %41 = icmp sgt i16 %38, %40
  %42 = select i1 %41, i16 %38, i16 %40
  store i16 %42, i16* %37, align 2
  %43 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %44 = load i16, i16* %43, align 4
  %45 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 6
  %46 = load i16, i16* %45, align 4
  %47 = icmp sgt i16 %44, %46
  %48 = select i1 %47, i16 %44, i16 %46
  store i16 %48, i16* %43, align 4
  %49 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %50 = load i16, i16* %49, align 2
  %51 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 7
  %52 = load i16, i16* %51, align 2
  %53 = icmp sgt i16 %50, %52
  %54 = select i1 %53, i16 %50, i16 %52
  store i16 %54, i16* %49, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pand_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = and i64 %6, %4
  store i64 %7, i64* %3, align 8
  %8 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %11 = load i64, i64* %10, align 8
  %12 = and i64 %11, %9
  store i64 %12, i64* %8, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pandn_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = xor i64 %4, -1
  %6 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %7 = load i64, i64* %6, align 8
  %8 = and i64 %7, %5
  store i64 %8, i64* %3, align 8
  %9 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %10 = load i64, i64* %9, align 8
  %11 = xor i64 %10, -1
  %12 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %13 = load i64, i64* %12, align 8
  %14 = and i64 %13, %11
  store i64 %14, i64* %9, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_por_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = or i64 %6, %4
  store i64 %7, i64* %3, align 8
  %8 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %11 = load i64, i64* %10, align 8
  %12 = or i64 %11, %9
  store i64 %12, i64* %8, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pxor_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = xor i64 %6, %4
  store i64 %7, i64* %3, align 8
  %8 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %11 = load i64, i64* %10, align 8
  %12 = xor i64 %11, %9
  store i64 %12, i64* %8, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pcmpgtb_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %4 = bitcast %union.XMMReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %7 = bitcast %union.XMMReg* %1 to i8*
  %8 = load i8, i8* %7, align 8
  %9 = icmp sgt i8 %5, %8
  %10 = sext i1 %9 to i8
  store i8 %10, i8* %4, align 8
  %11 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 1
  %12 = load i8, i8* %11, align 1
  %13 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 1
  %14 = load i8, i8* %13, align 1
  %15 = icmp sgt i8 %12, %14
  %16 = sext i1 %15 to i8
  store i8 %16, i8* %11, align 1
  %17 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 2
  %18 = load i8, i8* %17, align 2
  %19 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 2
  %20 = load i8, i8* %19, align 2
  %21 = icmp sgt i8 %18, %20
  %22 = sext i1 %21 to i8
  store i8 %22, i8* %17, align 2
  %23 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 3
  %24 = load i8, i8* %23, align 1
  %25 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 3
  %26 = load i8, i8* %25, align 1
  %27 = icmp sgt i8 %24, %26
  %28 = sext i1 %27 to i8
  store i8 %28, i8* %23, align 1
  %29 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 4
  %30 = load i8, i8* %29, align 4
  %31 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 4
  %32 = load i8, i8* %31, align 4
  %33 = icmp sgt i8 %30, %32
  %34 = sext i1 %33 to i8
  store i8 %34, i8* %29, align 4
  %35 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 5
  %36 = load i8, i8* %35, align 1
  %37 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 5
  %38 = load i8, i8* %37, align 1
  %39 = icmp sgt i8 %36, %38
  %40 = sext i1 %39 to i8
  store i8 %40, i8* %35, align 1
  %41 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 6
  %42 = load i8, i8* %41, align 2
  %43 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 6
  %44 = load i8, i8* %43, align 2
  %45 = icmp sgt i8 %42, %44
  %46 = sext i1 %45 to i8
  store i8 %46, i8* %41, align 2
  %47 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 7
  %48 = load i8, i8* %47, align 1
  %49 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 7
  %50 = load i8, i8* %49, align 1
  %51 = icmp sgt i8 %48, %50
  %52 = sext i1 %51 to i8
  store i8 %52, i8* %47, align 1
  %53 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %54 = bitcast i64* %53 to i8*
  %55 = load i8, i8* %54, align 8
  %56 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %57 = bitcast i64* %56 to i8*
  %58 = load i8, i8* %57, align 8
  %59 = icmp sgt i8 %55, %58
  %60 = sext i1 %59 to i8
  store i8 %60, i8* %54, align 8
  %61 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 9
  %62 = load i8, i8* %61, align 1
  %63 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 9
  %64 = load i8, i8* %63, align 1
  %65 = icmp sgt i8 %62, %64
  %66 = sext i1 %65 to i8
  store i8 %66, i8* %61, align 1
  %67 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 10
  %68 = load i8, i8* %67, align 2
  %69 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 10
  %70 = load i8, i8* %69, align 2
  %71 = icmp sgt i8 %68, %70
  %72 = sext i1 %71 to i8
  store i8 %72, i8* %67, align 2
  %73 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 11
  %74 = load i8, i8* %73, align 1
  %75 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 11
  %76 = load i8, i8* %75, align 1
  %77 = icmp sgt i8 %74, %76
  %78 = sext i1 %77 to i8
  store i8 %78, i8* %73, align 1
  %79 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 12
  %80 = load i8, i8* %79, align 4
  %81 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 12
  %82 = load i8, i8* %81, align 4
  %83 = icmp sgt i8 %80, %82
  %84 = sext i1 %83 to i8
  store i8 %84, i8* %79, align 4
  %85 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 13
  %86 = load i8, i8* %85, align 1
  %87 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 13
  %88 = load i8, i8* %87, align 1
  %89 = icmp sgt i8 %86, %88
  %90 = sext i1 %89 to i8
  store i8 %90, i8* %85, align 1
  %91 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 14
  %92 = load i8, i8* %91, align 2
  %93 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 14
  %94 = load i8, i8* %93, align 2
  %95 = icmp sgt i8 %92, %94
  %96 = sext i1 %95 to i8
  store i8 %96, i8* %91, align 2
  %97 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 15
  %98 = load i8, i8* %97, align 1
  %99 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 15
  %100 = load i8, i8* %99, align 1
  %101 = icmp sgt i8 %98, %100
  %102 = sext i1 %101 to i8
  store i8 %102, i8* %97, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pcmpgtw_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %7 = bitcast %union.XMMReg* %1 to i16*
  %8 = load i16, i16* %7, align 8
  %9 = icmp sgt i16 %5, %8
  %10 = sext i1 %9 to i16
  store i16 %10, i16* %4, align 8
  %11 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %12 = load i16, i16* %11, align 2
  %13 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 1
  %14 = load i16, i16* %13, align 2
  %15 = icmp sgt i16 %12, %14
  %16 = sext i1 %15 to i16
  store i16 %16, i16* %11, align 2
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %18 = load i16, i16* %17, align 4
  %19 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 2
  %20 = load i16, i16* %19, align 4
  %21 = icmp sgt i16 %18, %20
  %22 = sext i1 %21 to i16
  store i16 %22, i16* %17, align 4
  %23 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %24 = load i16, i16* %23, align 2
  %25 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 3
  %26 = load i16, i16* %25, align 2
  %27 = icmp sgt i16 %24, %26
  %28 = sext i1 %27 to i16
  store i16 %28, i16* %23, align 2
  %29 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %30 = bitcast i64* %29 to i16*
  %31 = load i16, i16* %30, align 8
  %32 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %33 = bitcast i64* %32 to i16*
  %34 = load i16, i16* %33, align 8
  %35 = icmp sgt i16 %31, %34
  %36 = sext i1 %35 to i16
  store i16 %36, i16* %30, align 8
  %37 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %38 = load i16, i16* %37, align 2
  %39 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 5
  %40 = load i16, i16* %39, align 2
  %41 = icmp sgt i16 %38, %40
  %42 = sext i1 %41 to i16
  store i16 %42, i16* %37, align 2
  %43 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %44 = load i16, i16* %43, align 4
  %45 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 6
  %46 = load i16, i16* %45, align 4
  %47 = icmp sgt i16 %44, %46
  %48 = sext i1 %47 to i16
  store i16 %48, i16* %43, align 4
  %49 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %50 = load i16, i16* %49, align 2
  %51 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 7
  %52 = load i16, i16* %51, align 2
  %53 = icmp sgt i16 %50, %52
  %54 = sext i1 %53 to i16
  store i16 %54, i16* %49, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pcmpgtl_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %7 = bitcast %union.XMMReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = icmp sgt i32 %5, %8
  %10 = sext i1 %9 to i32
  store i32 %10, i32* %4, align 8
  %11 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %14 = load i32, i32* %13, align 4
  %15 = icmp sgt i32 %12, %14
  %16 = sext i1 %15 to i32
  store i32 %16, i32* %11, align 4
  %17 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %18 = bitcast i64* %17 to i32*
  %19 = load i32, i32* %18, align 8
  %20 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %21 = bitcast i64* %20 to i32*
  %22 = load i32, i32* %21, align 8
  %23 = icmp sgt i32 %19, %22
  %24 = sext i1 %23 to i32
  store i32 %24, i32* %18, align 8
  %25 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %28 = load i32, i32* %27, align 4
  %29 = icmp sgt i32 %26, %28
  %30 = sext i1 %29 to i32
  store i32 %30, i32* %25, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pcmpeqb_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %4 = bitcast %union.XMMReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %7 = bitcast %union.XMMReg* %1 to i8*
  %8 = load i8, i8* %7, align 8
  %9 = icmp eq i8 %5, %8
  %10 = sext i1 %9 to i8
  store i8 %10, i8* %4, align 8
  %11 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 1
  %12 = load i8, i8* %11, align 1
  %13 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 1
  %14 = load i8, i8* %13, align 1
  %15 = icmp eq i8 %12, %14
  %16 = sext i1 %15 to i8
  store i8 %16, i8* %11, align 1
  %17 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 2
  %18 = load i8, i8* %17, align 2
  %19 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 2
  %20 = load i8, i8* %19, align 2
  %21 = icmp eq i8 %18, %20
  %22 = sext i1 %21 to i8
  store i8 %22, i8* %17, align 2
  %23 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 3
  %24 = load i8, i8* %23, align 1
  %25 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 3
  %26 = load i8, i8* %25, align 1
  %27 = icmp eq i8 %24, %26
  %28 = sext i1 %27 to i8
  store i8 %28, i8* %23, align 1
  %29 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 4
  %30 = load i8, i8* %29, align 4
  %31 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 4
  %32 = load i8, i8* %31, align 4
  %33 = icmp eq i8 %30, %32
  %34 = sext i1 %33 to i8
  store i8 %34, i8* %29, align 4
  %35 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 5
  %36 = load i8, i8* %35, align 1
  %37 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 5
  %38 = load i8, i8* %37, align 1
  %39 = icmp eq i8 %36, %38
  %40 = sext i1 %39 to i8
  store i8 %40, i8* %35, align 1
  %41 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 6
  %42 = load i8, i8* %41, align 2
  %43 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 6
  %44 = load i8, i8* %43, align 2
  %45 = icmp eq i8 %42, %44
  %46 = sext i1 %45 to i8
  store i8 %46, i8* %41, align 2
  %47 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 7
  %48 = load i8, i8* %47, align 1
  %49 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 7
  %50 = load i8, i8* %49, align 1
  %51 = icmp eq i8 %48, %50
  %52 = sext i1 %51 to i8
  store i8 %52, i8* %47, align 1
  %53 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %54 = bitcast i64* %53 to i8*
  %55 = load i8, i8* %54, align 8
  %56 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %57 = bitcast i64* %56 to i8*
  %58 = load i8, i8* %57, align 8
  %59 = icmp eq i8 %55, %58
  %60 = sext i1 %59 to i8
  store i8 %60, i8* %54, align 8
  %61 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 9
  %62 = load i8, i8* %61, align 1
  %63 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 9
  %64 = load i8, i8* %63, align 1
  %65 = icmp eq i8 %62, %64
  %66 = sext i1 %65 to i8
  store i8 %66, i8* %61, align 1
  %67 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 10
  %68 = load i8, i8* %67, align 2
  %69 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 10
  %70 = load i8, i8* %69, align 2
  %71 = icmp eq i8 %68, %70
  %72 = sext i1 %71 to i8
  store i8 %72, i8* %67, align 2
  %73 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 11
  %74 = load i8, i8* %73, align 1
  %75 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 11
  %76 = load i8, i8* %75, align 1
  %77 = icmp eq i8 %74, %76
  %78 = sext i1 %77 to i8
  store i8 %78, i8* %73, align 1
  %79 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 12
  %80 = load i8, i8* %79, align 4
  %81 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 12
  %82 = load i8, i8* %81, align 4
  %83 = icmp eq i8 %80, %82
  %84 = sext i1 %83 to i8
  store i8 %84, i8* %79, align 4
  %85 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 13
  %86 = load i8, i8* %85, align 1
  %87 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 13
  %88 = load i8, i8* %87, align 1
  %89 = icmp eq i8 %86, %88
  %90 = sext i1 %89 to i8
  store i8 %90, i8* %85, align 1
  %91 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 14
  %92 = load i8, i8* %91, align 2
  %93 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 14
  %94 = load i8, i8* %93, align 2
  %95 = icmp eq i8 %92, %94
  %96 = sext i1 %95 to i8
  store i8 %96, i8* %91, align 2
  %97 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 15
  %98 = load i8, i8* %97, align 1
  %99 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 15
  %100 = load i8, i8* %99, align 1
  %101 = icmp eq i8 %98, %100
  %102 = sext i1 %101 to i8
  store i8 %102, i8* %97, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pcmpeqw_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %7 = bitcast %union.XMMReg* %1 to i16*
  %8 = load i16, i16* %7, align 8
  %9 = icmp eq i16 %5, %8
  %10 = sext i1 %9 to i16
  store i16 %10, i16* %4, align 8
  %11 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %12 = load i16, i16* %11, align 2
  %13 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 1
  %14 = load i16, i16* %13, align 2
  %15 = icmp eq i16 %12, %14
  %16 = sext i1 %15 to i16
  store i16 %16, i16* %11, align 2
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %18 = load i16, i16* %17, align 4
  %19 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 2
  %20 = load i16, i16* %19, align 4
  %21 = icmp eq i16 %18, %20
  %22 = sext i1 %21 to i16
  store i16 %22, i16* %17, align 4
  %23 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %24 = load i16, i16* %23, align 2
  %25 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 3
  %26 = load i16, i16* %25, align 2
  %27 = icmp eq i16 %24, %26
  %28 = sext i1 %27 to i16
  store i16 %28, i16* %23, align 2
  %29 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %30 = bitcast i64* %29 to i16*
  %31 = load i16, i16* %30, align 8
  %32 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %33 = bitcast i64* %32 to i16*
  %34 = load i16, i16* %33, align 8
  %35 = icmp eq i16 %31, %34
  %36 = sext i1 %35 to i16
  store i16 %36, i16* %30, align 8
  %37 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %38 = load i16, i16* %37, align 2
  %39 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 5
  %40 = load i16, i16* %39, align 2
  %41 = icmp eq i16 %38, %40
  %42 = sext i1 %41 to i16
  store i16 %42, i16* %37, align 2
  %43 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %44 = load i16, i16* %43, align 4
  %45 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 6
  %46 = load i16, i16* %45, align 4
  %47 = icmp eq i16 %44, %46
  %48 = sext i1 %47 to i16
  store i16 %48, i16* %43, align 4
  %49 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %50 = load i16, i16* %49, align 2
  %51 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 7
  %52 = load i16, i16* %51, align 2
  %53 = icmp eq i16 %50, %52
  %54 = sext i1 %53 to i16
  store i16 %54, i16* %49, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pcmpeql_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %7 = bitcast %union.XMMReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %5, %8
  %10 = sext i1 %9 to i32
  store i32 %10, i32* %4, align 8
  %11 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %12, %14
  %16 = sext i1 %15 to i32
  store i32 %16, i32* %11, align 4
  %17 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %18 = bitcast i64* %17 to i32*
  %19 = load i32, i32* %18, align 8
  %20 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %21 = bitcast i64* %20 to i32*
  %22 = load i32, i32* %21, align 8
  %23 = icmp eq i32 %19, %22
  %24 = sext i1 %23 to i32
  store i32 %24, i32* %18, align 8
  %25 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %28 = load i32, i32* %27, align 4
  %29 = icmp eq i32 %26, %28
  %30 = sext i1 %29 to i32
  store i32 %30, i32* %25, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pmullw_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %7 = bitcast %union.XMMReg* %1 to i16*
  %8 = load i16, i16* %7, align 8
  %9 = mul i16 %8, %5
  store i16 %9, i16* %4, align 8
  %10 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %11 = load i16, i16* %10, align 2
  %12 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 1
  %13 = load i16, i16* %12, align 2
  %14 = mul i16 %13, %11
  store i16 %14, i16* %10, align 2
  %15 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %16 = load i16, i16* %15, align 4
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 2
  %18 = load i16, i16* %17, align 4
  %19 = mul i16 %18, %16
  store i16 %19, i16* %15, align 4
  %20 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %21 = load i16, i16* %20, align 2
  %22 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 3
  %23 = load i16, i16* %22, align 2
  %24 = mul i16 %23, %21
  store i16 %24, i16* %20, align 2
  %25 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %26 = bitcast i64* %25 to i16*
  %27 = load i16, i16* %26, align 8
  %28 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %29 = bitcast i64* %28 to i16*
  %30 = load i16, i16* %29, align 8
  %31 = mul i16 %30, %27
  store i16 %31, i16* %26, align 8
  %32 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %33 = load i16, i16* %32, align 2
  %34 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 5
  %35 = load i16, i16* %34, align 2
  %36 = mul i16 %35, %33
  store i16 %36, i16* %32, align 2
  %37 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %38 = load i16, i16* %37, align 4
  %39 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 6
  %40 = load i16, i16* %39, align 4
  %41 = mul i16 %40, %38
  store i16 %41, i16* %37, align 4
  %42 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %43 = load i16, i16* %42, align 2
  %44 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 7
  %45 = load i16, i16* %44, align 2
  %46 = mul i16 %45, %43
  store i16 %46, i16* %42, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pmulhuw_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = zext i16 %5 to i32
  %7 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %8 = bitcast %union.XMMReg* %1 to i16*
  %9 = load i16, i16* %8, align 8
  %10 = zext i16 %9 to i32
  %11 = mul nuw nsw i32 %10, %6
  %12 = lshr i32 %11, 16
  %13 = trunc i32 %12 to i16
  store i16 %13, i16* %4, align 8
  %14 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %15 = load i16, i16* %14, align 2
  %16 = zext i16 %15 to i32
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 1
  %18 = load i16, i16* %17, align 2
  %19 = zext i16 %18 to i32
  %20 = mul nuw nsw i32 %19, %16
  %21 = lshr i32 %20, 16
  %22 = trunc i32 %21 to i16
  store i16 %22, i16* %14, align 2
  %23 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %24 = load i16, i16* %23, align 4
  %25 = zext i16 %24 to i32
  %26 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 2
  %27 = load i16, i16* %26, align 4
  %28 = zext i16 %27 to i32
  %29 = mul nuw nsw i32 %28, %25
  %30 = lshr i32 %29, 16
  %31 = trunc i32 %30 to i16
  store i16 %31, i16* %23, align 4
  %32 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %33 = load i16, i16* %32, align 2
  %34 = zext i16 %33 to i32
  %35 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 3
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = mul nuw nsw i32 %37, %34
  %39 = lshr i32 %38, 16
  %40 = trunc i32 %39 to i16
  store i16 %40, i16* %32, align 2
  %41 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %42 = bitcast i64* %41 to i16*
  %43 = load i16, i16* %42, align 8
  %44 = zext i16 %43 to i32
  %45 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %46 = bitcast i64* %45 to i16*
  %47 = load i16, i16* %46, align 8
  %48 = zext i16 %47 to i32
  %49 = mul nuw nsw i32 %48, %44
  %50 = lshr i32 %49, 16
  %51 = trunc i32 %50 to i16
  store i16 %51, i16* %42, align 8
  %52 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %53 = load i16, i16* %52, align 2
  %54 = zext i16 %53 to i32
  %55 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 5
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i32
  %58 = mul nuw nsw i32 %57, %54
  %59 = lshr i32 %58, 16
  %60 = trunc i32 %59 to i16
  store i16 %60, i16* %52, align 2
  %61 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %62 = load i16, i16* %61, align 4
  %63 = zext i16 %62 to i32
  %64 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 6
  %65 = load i16, i16* %64, align 4
  %66 = zext i16 %65 to i32
  %67 = mul nuw nsw i32 %66, %63
  %68 = lshr i32 %67, 16
  %69 = trunc i32 %68 to i16
  store i16 %69, i16* %61, align 4
  %70 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %71 = load i16, i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 7
  %74 = load i16, i16* %73, align 2
  %75 = zext i16 %74 to i32
  %76 = mul nuw nsw i32 %75, %72
  %77 = lshr i32 %76, 16
  %78 = trunc i32 %77 to i16
  store i16 %78, i16* %70, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pmulhw_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = sext i16 %5 to i32
  %7 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %8 = bitcast %union.XMMReg* %1 to i16*
  %9 = load i16, i16* %8, align 8
  %10 = sext i16 %9 to i32
  %11 = mul nsw i32 %10, %6
  %12 = lshr i32 %11, 16
  %13 = trunc i32 %12 to i16
  store i16 %13, i16* %4, align 8
  %14 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %15 = load i16, i16* %14, align 2
  %16 = sext i16 %15 to i32
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 1
  %18 = load i16, i16* %17, align 2
  %19 = sext i16 %18 to i32
  %20 = mul nsw i32 %19, %16
  %21 = lshr i32 %20, 16
  %22 = trunc i32 %21 to i16
  store i16 %22, i16* %14, align 2
  %23 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %24 = load i16, i16* %23, align 4
  %25 = sext i16 %24 to i32
  %26 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 2
  %27 = load i16, i16* %26, align 4
  %28 = sext i16 %27 to i32
  %29 = mul nsw i32 %28, %25
  %30 = lshr i32 %29, 16
  %31 = trunc i32 %30 to i16
  store i16 %31, i16* %23, align 4
  %32 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %33 = load i16, i16* %32, align 2
  %34 = sext i16 %33 to i32
  %35 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 3
  %36 = load i16, i16* %35, align 2
  %37 = sext i16 %36 to i32
  %38 = mul nsw i32 %37, %34
  %39 = lshr i32 %38, 16
  %40 = trunc i32 %39 to i16
  store i16 %40, i16* %32, align 2
  %41 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %42 = bitcast i64* %41 to i16*
  %43 = load i16, i16* %42, align 8
  %44 = sext i16 %43 to i32
  %45 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %46 = bitcast i64* %45 to i16*
  %47 = load i16, i16* %46, align 8
  %48 = sext i16 %47 to i32
  %49 = mul nsw i32 %48, %44
  %50 = lshr i32 %49, 16
  %51 = trunc i32 %50 to i16
  store i16 %51, i16* %42, align 8
  %52 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %53 = load i16, i16* %52, align 2
  %54 = sext i16 %53 to i32
  %55 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 5
  %56 = load i16, i16* %55, align 2
  %57 = sext i16 %56 to i32
  %58 = mul nsw i32 %57, %54
  %59 = lshr i32 %58, 16
  %60 = trunc i32 %59 to i16
  store i16 %60, i16* %52, align 2
  %61 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %62 = load i16, i16* %61, align 4
  %63 = sext i16 %62 to i32
  %64 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 6
  %65 = load i16, i16* %64, align 4
  %66 = sext i16 %65 to i32
  %67 = mul nsw i32 %66, %63
  %68 = lshr i32 %67, 16
  %69 = trunc i32 %68 to i16
  store i16 %69, i16* %61, align 4
  %70 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %71 = load i16, i16* %70, align 2
  %72 = sext i16 %71 to i32
  %73 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 7
  %74 = load i16, i16* %73, align 2
  %75 = sext i16 %74 to i32
  %76 = mul nsw i32 %75, %72
  %77 = lshr i32 %76, 16
  %78 = trunc i32 %77 to i16
  store i16 %78, i16* %70, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pavgb_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %4 = bitcast %union.XMMReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = zext i8 %5 to i16
  %7 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %8 = bitcast %union.XMMReg* %1 to i8*
  %9 = load i8, i8* %8, align 8
  %10 = zext i8 %9 to i16
  %11 = add nuw nsw i16 %6, 1
  %12 = add nuw nsw i16 %11, %10
  %13 = lshr i16 %12, 1
  %14 = trunc i16 %13 to i8
  store i8 %14, i8* %4, align 8
  %15 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 1
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i16
  %18 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 1
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i16
  %21 = add nuw nsw i16 %17, 1
  %22 = add nuw nsw i16 %21, %20
  %23 = lshr i16 %22, 1
  %24 = trunc i16 %23 to i8
  store i8 %24, i8* %15, align 1
  %25 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 2
  %26 = load i8, i8* %25, align 2
  %27 = zext i8 %26 to i16
  %28 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 2
  %29 = load i8, i8* %28, align 2
  %30 = zext i8 %29 to i16
  %31 = add nuw nsw i16 %27, 1
  %32 = add nuw nsw i16 %31, %30
  %33 = lshr i16 %32, 1
  %34 = trunc i16 %33 to i8
  store i8 %34, i8* %25, align 2
  %35 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 3
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i16
  %38 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 3
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i16
  %41 = add nuw nsw i16 %37, 1
  %42 = add nuw nsw i16 %41, %40
  %43 = lshr i16 %42, 1
  %44 = trunc i16 %43 to i8
  store i8 %44, i8* %35, align 1
  %45 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 4
  %46 = load i8, i8* %45, align 4
  %47 = zext i8 %46 to i16
  %48 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 4
  %49 = load i8, i8* %48, align 4
  %50 = zext i8 %49 to i16
  %51 = add nuw nsw i16 %47, 1
  %52 = add nuw nsw i16 %51, %50
  %53 = lshr i16 %52, 1
  %54 = trunc i16 %53 to i8
  store i8 %54, i8* %45, align 4
  %55 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 5
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i16
  %58 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 5
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i16
  %61 = add nuw nsw i16 %57, 1
  %62 = add nuw nsw i16 %61, %60
  %63 = lshr i16 %62, 1
  %64 = trunc i16 %63 to i8
  store i8 %64, i8* %55, align 1
  %65 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 6
  %66 = load i8, i8* %65, align 2
  %67 = zext i8 %66 to i16
  %68 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 6
  %69 = load i8, i8* %68, align 2
  %70 = zext i8 %69 to i16
  %71 = add nuw nsw i16 %67, 1
  %72 = add nuw nsw i16 %71, %70
  %73 = lshr i16 %72, 1
  %74 = trunc i16 %73 to i8
  store i8 %74, i8* %65, align 2
  %75 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 7
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i16
  %78 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 7
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i16
  %81 = add nuw nsw i16 %77, 1
  %82 = add nuw nsw i16 %81, %80
  %83 = lshr i16 %82, 1
  %84 = trunc i16 %83 to i8
  store i8 %84, i8* %75, align 1
  %85 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %86 = bitcast i64* %85 to i8*
  %87 = load i8, i8* %86, align 8
  %88 = zext i8 %87 to i16
  %89 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %90 = bitcast i64* %89 to i8*
  %91 = load i8, i8* %90, align 8
  %92 = zext i8 %91 to i16
  %93 = add nuw nsw i16 %88, 1
  %94 = add nuw nsw i16 %93, %92
  %95 = lshr i16 %94, 1
  %96 = trunc i16 %95 to i8
  store i8 %96, i8* %86, align 8
  %97 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 9
  %98 = load i8, i8* %97, align 1
  %99 = zext i8 %98 to i16
  %100 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 9
  %101 = load i8, i8* %100, align 1
  %102 = zext i8 %101 to i16
  %103 = add nuw nsw i16 %99, 1
  %104 = add nuw nsw i16 %103, %102
  %105 = lshr i16 %104, 1
  %106 = trunc i16 %105 to i8
  store i8 %106, i8* %97, align 1
  %107 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 10
  %108 = load i8, i8* %107, align 2
  %109 = zext i8 %108 to i16
  %110 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 10
  %111 = load i8, i8* %110, align 2
  %112 = zext i8 %111 to i16
  %113 = add nuw nsw i16 %109, 1
  %114 = add nuw nsw i16 %113, %112
  %115 = lshr i16 %114, 1
  %116 = trunc i16 %115 to i8
  store i8 %116, i8* %107, align 2
  %117 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 11
  %118 = load i8, i8* %117, align 1
  %119 = zext i8 %118 to i16
  %120 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 11
  %121 = load i8, i8* %120, align 1
  %122 = zext i8 %121 to i16
  %123 = add nuw nsw i16 %119, 1
  %124 = add nuw nsw i16 %123, %122
  %125 = lshr i16 %124, 1
  %126 = trunc i16 %125 to i8
  store i8 %126, i8* %117, align 1
  %127 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 12
  %128 = load i8, i8* %127, align 4
  %129 = zext i8 %128 to i16
  %130 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 12
  %131 = load i8, i8* %130, align 4
  %132 = zext i8 %131 to i16
  %133 = add nuw nsw i16 %129, 1
  %134 = add nuw nsw i16 %133, %132
  %135 = lshr i16 %134, 1
  %136 = trunc i16 %135 to i8
  store i8 %136, i8* %127, align 4
  %137 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 13
  %138 = load i8, i8* %137, align 1
  %139 = zext i8 %138 to i16
  %140 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 13
  %141 = load i8, i8* %140, align 1
  %142 = zext i8 %141 to i16
  %143 = add nuw nsw i16 %139, 1
  %144 = add nuw nsw i16 %143, %142
  %145 = lshr i16 %144, 1
  %146 = trunc i16 %145 to i8
  store i8 %146, i8* %137, align 1
  %147 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 14
  %148 = load i8, i8* %147, align 2
  %149 = zext i8 %148 to i16
  %150 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 14
  %151 = load i8, i8* %150, align 2
  %152 = zext i8 %151 to i16
  %153 = add nuw nsw i16 %149, 1
  %154 = add nuw nsw i16 %153, %152
  %155 = lshr i16 %154, 1
  %156 = trunc i16 %155 to i8
  store i8 %156, i8* %147, align 2
  %157 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 15
  %158 = load i8, i8* %157, align 1
  %159 = zext i8 %158 to i16
  %160 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 15
  %161 = load i8, i8* %160, align 1
  %162 = zext i8 %161 to i16
  %163 = add nuw nsw i16 %159, 1
  %164 = add nuw nsw i16 %163, %162
  %165 = lshr i16 %164, 1
  %166 = trunc i16 %165 to i8
  store i8 %166, i8* %157, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pavgw_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = zext i16 %5 to i32
  %7 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %8 = bitcast %union.XMMReg* %1 to i16*
  %9 = load i16, i16* %8, align 8
  %10 = zext i16 %9 to i32
  %11 = add nuw nsw i32 %6, 1
  %12 = add nuw nsw i32 %11, %10
  %13 = lshr i32 %12, 1
  %14 = trunc i32 %13 to i16
  store i16 %14, i16* %4, align 8
  %15 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 1
  %19 = load i16, i16* %18, align 2
  %20 = zext i16 %19 to i32
  %21 = add nuw nsw i32 %17, 1
  %22 = add nuw nsw i32 %21, %20
  %23 = lshr i32 %22, 1
  %24 = trunc i32 %23 to i16
  store i16 %24, i16* %15, align 2
  %25 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %26 = load i16, i16* %25, align 4
  %27 = zext i16 %26 to i32
  %28 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 2
  %29 = load i16, i16* %28, align 4
  %30 = zext i16 %29 to i32
  %31 = add nuw nsw i32 %27, 1
  %32 = add nuw nsw i32 %31, %30
  %33 = lshr i32 %32, 1
  %34 = trunc i32 %33 to i16
  store i16 %34, i16* %25, align 4
  %35 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 3
  %39 = load i16, i16* %38, align 2
  %40 = zext i16 %39 to i32
  %41 = add nuw nsw i32 %37, 1
  %42 = add nuw nsw i32 %41, %40
  %43 = lshr i32 %42, 1
  %44 = trunc i32 %43 to i16
  store i16 %44, i16* %35, align 2
  %45 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %46 = bitcast i64* %45 to i16*
  %47 = load i16, i16* %46, align 8
  %48 = zext i16 %47 to i32
  %49 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %50 = bitcast i64* %49 to i16*
  %51 = load i16, i16* %50, align 8
  %52 = zext i16 %51 to i32
  %53 = add nuw nsw i32 %48, 1
  %54 = add nuw nsw i32 %53, %52
  %55 = lshr i32 %54, 1
  %56 = trunc i32 %55 to i16
  store i16 %56, i16* %46, align 8
  %57 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %58 = load i16, i16* %57, align 2
  %59 = zext i16 %58 to i32
  %60 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 5
  %61 = load i16, i16* %60, align 2
  %62 = zext i16 %61 to i32
  %63 = add nuw nsw i32 %59, 1
  %64 = add nuw nsw i32 %63, %62
  %65 = lshr i32 %64, 1
  %66 = trunc i32 %65 to i16
  store i16 %66, i16* %57, align 2
  %67 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %68 = load i16, i16* %67, align 4
  %69 = zext i16 %68 to i32
  %70 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 6
  %71 = load i16, i16* %70, align 4
  %72 = zext i16 %71 to i32
  %73 = add nuw nsw i32 %69, 1
  %74 = add nuw nsw i32 %73, %72
  %75 = lshr i32 %74, 1
  %76 = trunc i32 %75 to i16
  store i16 %76, i16* %67, align 4
  %77 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %78 = load i16, i16* %77, align 2
  %79 = zext i16 %78 to i32
  %80 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 7
  %81 = load i16, i16* %80, align 2
  %82 = zext i16 %81 to i32
  %83 = add nuw nsw i32 %79, 1
  %84 = add nuw nsw i32 %83, %82
  %85 = lshr i32 %84, 1
  %86 = trunc i32 %85 to i16
  store i16 %86, i16* %77, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pmuludq_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %1 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = zext i32 %4 to i64
  %6 = bitcast %union.XMMReg* %0 to i32*
  %7 = load i32, i32* %6, align 8
  %8 = zext i32 %7 to i64
  %9 = mul nuw i64 %8, %5
  %10 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %9, i64* %10, align 8
  %11 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %12 = bitcast i64* %11 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = zext i32 %13 to i64
  %15 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %16 = bitcast i64* %15 to i32*
  %17 = load i32, i32* %16, align 8
  %18 = zext i32 %17 to i64
  %19 = mul nuw i64 %18, %14
  store i64 %19, i64* %15, align 8
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind uwtable
define void @helper_pmaddwd_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #19 {
  %3 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %5 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %6 = bitcast %union.XMMReg* %1 to i16*
  %7 = load i16, i16* %6, align 2
  %8 = bitcast %union.XMMReg* %0 to i16*
  %9 = load i16, i16* %8, align 2
  %10 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %11 = load i16, i16* %10, align 2
  %12 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 0, i64 1
  %13 = load i16, i16* %12, align 2
  %14 = sext i16 %7 to i32
  %15 = sext i16 %9 to i32
  %16 = mul nsw i32 %15, %14
  %17 = sext i16 %11 to i32
  %18 = sext i16 %13 to i32
  %19 = mul nsw i32 %18, %17
  %20 = add nsw i32 %19, %16
  %21 = bitcast %union.XMMReg* %0 to i32*
  store i32 %20, i32* %21, align 4
  %22 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %23 = load i16, i16* %22, align 2
  %24 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 0, i64 2
  %25 = load i16, i16* %24, align 2
  %26 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %27 = load i16, i16* %26, align 2
  %28 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 0, i64 3
  %29 = load i16, i16* %28, align 2
  %30 = sext i16 %23 to i32
  %31 = sext i16 %25 to i32
  %32 = mul nsw i32 %31, %30
  %33 = sext i16 %27 to i32
  %34 = sext i16 %29 to i32
  %35 = mul nsw i32 %34, %33
  %36 = add nsw i32 %35, %32
  %37 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 1
  store i32 %36, i32* %37, align 4
  %38 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %39 = bitcast i64* %38 to i16*
  %40 = load i16, i16* %39, align 2
  %41 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %42 = bitcast i64* %41 to i16*
  %43 = load i16, i16* %42, align 2
  %44 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %45 = load i16, i16* %44, align 2
  %46 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 0, i64 5
  %47 = load i16, i16* %46, align 2
  %48 = sext i16 %40 to i32
  %49 = sext i16 %43 to i32
  %50 = mul nsw i32 %49, %48
  %51 = sext i16 %45 to i32
  %52 = sext i16 %47 to i32
  %53 = mul nsw i32 %52, %51
  %54 = add nsw i32 %53, %50
  %55 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %56 = bitcast i64* %55 to i32*
  store i32 %54, i32* %56, align 4
  %57 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %58 = load i16, i16* %57, align 2
  %59 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 0, i64 6
  %60 = load i16, i16* %59, align 2
  %61 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %62 = load i16, i16* %61, align 2
  %63 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 0, i64 7
  %64 = load i16, i16* %63, align 2
  %65 = sext i16 %58 to i32
  %66 = sext i16 %60 to i32
  %67 = mul nsw i32 %66, %65
  %68 = sext i16 %62 to i32
  %69 = sext i16 %64 to i32
  %70 = mul nsw i32 %69, %68
  %71 = add nsw i32 %70, %67
  %72 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 3
  store i32 %71, i32* %72, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define void @helper_psadbw_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #14 {
  %3 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %4 = bitcast %union.XMMReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = zext i8 %5 to i32
  %7 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %8 = bitcast %union.XMMReg* %1 to i8*
  %9 = load i8, i8* %8, align 8
  %10 = zext i8 %9 to i32
  %11 = sub nsw i32 %6, %10
  %12 = tail call i32 @llvm.abs.i32(i32 %11, i1 true) #30
  %13 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 1
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 1
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = sub nsw i32 %15, %18
  %20 = tail call i32 @llvm.abs.i32(i32 %19, i1 true) #30
  %21 = add nuw nsw i32 %20, %12
  %22 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 2
  %23 = load i8, i8* %22, align 2
  %24 = zext i8 %23 to i32
  %25 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 2
  %26 = load i8, i8* %25, align 2
  %27 = zext i8 %26 to i32
  %28 = sub nsw i32 %24, %27
  %29 = tail call i32 @llvm.abs.i32(i32 %28, i1 true) #30
  %30 = add nuw nsw i32 %21, %29
  %31 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 3
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 3
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i32
  %37 = sub nsw i32 %33, %36
  %38 = tail call i32 @llvm.abs.i32(i32 %37, i1 true) #30
  %39 = add nuw nsw i32 %30, %38
  %40 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 4
  %41 = load i8, i8* %40, align 4
  %42 = zext i8 %41 to i32
  %43 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 4
  %44 = load i8, i8* %43, align 4
  %45 = zext i8 %44 to i32
  %46 = sub nsw i32 %42, %45
  %47 = tail call i32 @llvm.abs.i32(i32 %46, i1 true) #30
  %48 = add nuw nsw i32 %39, %47
  %49 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 5
  %50 = load i8, i8* %49, align 1
  %51 = zext i8 %50 to i32
  %52 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 5
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i32
  %55 = sub nsw i32 %51, %54
  %56 = tail call i32 @llvm.abs.i32(i32 %55, i1 true) #30
  %57 = add nuw nsw i32 %48, %56
  %58 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 6
  %59 = load i8, i8* %58, align 2
  %60 = zext i8 %59 to i32
  %61 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 6
  %62 = load i8, i8* %61, align 2
  %63 = zext i8 %62 to i32
  %64 = sub nsw i32 %60, %63
  %65 = tail call i32 @llvm.abs.i32(i32 %64, i1 true) #30
  %66 = add nuw nsw i32 %57, %65
  %67 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 7
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i32
  %70 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 7
  %71 = load i8, i8* %70, align 1
  %72 = zext i8 %71 to i32
  %73 = sub nsw i32 %69, %72
  %74 = tail call i32 @llvm.abs.i32(i32 %73, i1 true) #30
  %75 = add nuw nsw i32 %66, %74
  %76 = zext i32 %75 to i64
  %77 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %76, i64* %77, align 8
  %78 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %79 = bitcast i64* %78 to i8*
  %80 = load i8, i8* %79, align 8
  %81 = zext i8 %80 to i32
  %82 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %83 = bitcast i64* %82 to i8*
  %84 = load i8, i8* %83, align 8
  %85 = zext i8 %84 to i32
  %86 = sub nsw i32 %81, %85
  %87 = tail call i32 @llvm.abs.i32(i32 %86, i1 true) #30
  %88 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 9
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i32
  %91 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 9
  %92 = load i8, i8* %91, align 1
  %93 = zext i8 %92 to i32
  %94 = sub nsw i32 %90, %93
  %95 = tail call i32 @llvm.abs.i32(i32 %94, i1 true) #30
  %96 = add nuw nsw i32 %95, %87
  %97 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 10
  %98 = load i8, i8* %97, align 2
  %99 = zext i8 %98 to i32
  %100 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 10
  %101 = load i8, i8* %100, align 2
  %102 = zext i8 %101 to i32
  %103 = sub nsw i32 %99, %102
  %104 = tail call i32 @llvm.abs.i32(i32 %103, i1 true) #30
  %105 = add nuw nsw i32 %96, %104
  %106 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 11
  %107 = load i8, i8* %106, align 1
  %108 = zext i8 %107 to i32
  %109 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 11
  %110 = load i8, i8* %109, align 1
  %111 = zext i8 %110 to i32
  %112 = sub nsw i32 %108, %111
  %113 = tail call i32 @llvm.abs.i32(i32 %112, i1 true) #30
  %114 = add nuw nsw i32 %105, %113
  %115 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 12
  %116 = load i8, i8* %115, align 4
  %117 = zext i8 %116 to i32
  %118 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 12
  %119 = load i8, i8* %118, align 4
  %120 = zext i8 %119 to i32
  %121 = sub nsw i32 %117, %120
  %122 = tail call i32 @llvm.abs.i32(i32 %121, i1 true) #30
  %123 = add nuw nsw i32 %114, %122
  %124 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 13
  %125 = load i8, i8* %124, align 1
  %126 = zext i8 %125 to i32
  %127 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 13
  %128 = load i8, i8* %127, align 1
  %129 = zext i8 %128 to i32
  %130 = sub nsw i32 %126, %129
  %131 = tail call i32 @llvm.abs.i32(i32 %130, i1 true) #30
  %132 = add nuw nsw i32 %123, %131
  %133 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 14
  %134 = load i8, i8* %133, align 2
  %135 = zext i8 %134 to i32
  %136 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 14
  %137 = load i8, i8* %136, align 2
  %138 = zext i8 %137 to i32
  %139 = sub nsw i32 %135, %138
  %140 = tail call i32 @llvm.abs.i32(i32 %139, i1 true) #30
  %141 = add nuw nsw i32 %132, %140
  %142 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 15
  %143 = load i8, i8* %142, align 1
  %144 = zext i8 %143 to i32
  %145 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 15
  %146 = load i8, i8* %145, align 1
  %147 = zext i8 %146 to i32
  %148 = sub nsw i32 %144, %147
  %149 = tail call i32 @llvm.abs.i32(i32 %148, i1 true) #30
  %150 = add nuw nsw i32 %141, %149
  %151 = zext i32 %150 to i64
  store i64 %151, i64* %78, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_maskmov_xmm(%union.XMMReg* nocapture noundef readonly %0, %union.XMMReg* nocapture noundef readonly %1, i64 noundef %2) local_unnamed_addr #3 {
  %4 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %5 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %6 = bitcast %union.XMMReg* %1 to i8*
  %7 = load i8, i8* %6, align 1
  %8 = icmp sgt i8 %7, -1
  br i1 %8, label %14, label %9

9:                                                ; preds = %3
  %10 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %11 = bitcast %union.XMMReg* %0 to i8*
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* noundef %10, i64 noundef %2, i32 noundef %13)
  br label %14

14:                                               ; preds = %3, %9
  %15 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 1
  %16 = load i8, i8* %15, align 1
  %17 = icmp sgt i8 %16, -1
  br i1 %17, label %24, label %18

18:                                               ; preds = %14
  %19 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %20 = add i64 %2, 1
  %21 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 1
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* noundef %19, i64 noundef %20, i32 noundef %23)
  br label %24

24:                                               ; preds = %18, %14
  %25 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 2
  %26 = load i8, i8* %25, align 1
  %27 = icmp sgt i8 %26, -1
  br i1 %27, label %34, label %28

28:                                               ; preds = %24
  %29 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %30 = add i64 %2, 2
  %31 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 2
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* noundef %29, i64 noundef %30, i32 noundef %33)
  br label %34

34:                                               ; preds = %28, %24
  %35 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 3
  %36 = load i8, i8* %35, align 1
  %37 = icmp sgt i8 %36, -1
  br i1 %37, label %44, label %38

38:                                               ; preds = %34
  %39 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %40 = add i64 %2, 3
  %41 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 3
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* noundef %39, i64 noundef %40, i32 noundef %43)
  br label %44

44:                                               ; preds = %38, %34
  %45 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 4
  %46 = load i8, i8* %45, align 1
  %47 = icmp sgt i8 %46, -1
  br i1 %47, label %54, label %48

48:                                               ; preds = %44
  %49 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %50 = add i64 %2, 4
  %51 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 4
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i32
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* noundef %49, i64 noundef %50, i32 noundef %53)
  br label %54

54:                                               ; preds = %48, %44
  %55 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 5
  %56 = load i8, i8* %55, align 1
  %57 = icmp sgt i8 %56, -1
  br i1 %57, label %64, label %58

58:                                               ; preds = %54
  %59 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %60 = add i64 %2, 5
  %61 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 5
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* noundef %59, i64 noundef %60, i32 noundef %63)
  br label %64

64:                                               ; preds = %58, %54
  %65 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 6
  %66 = load i8, i8* %65, align 1
  %67 = icmp sgt i8 %66, -1
  br i1 %67, label %74, label %68

68:                                               ; preds = %64
  %69 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %70 = add i64 %2, 6
  %71 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 6
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i32
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* noundef %69, i64 noundef %70, i32 noundef %73)
  br label %74

74:                                               ; preds = %68, %64
  %75 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 7
  %76 = load i8, i8* %75, align 1
  %77 = icmp sgt i8 %76, -1
  br i1 %77, label %84, label %78

78:                                               ; preds = %74
  %79 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %80 = add i64 %2, 7
  %81 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 7
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i32
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* noundef %79, i64 noundef %80, i32 noundef %83)
  br label %84

84:                                               ; preds = %78, %74
  %85 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %86 = bitcast i64* %85 to i8*
  %87 = load i8, i8* %86, align 1
  %88 = icmp sgt i8 %87, -1
  br i1 %88, label %96, label %89

89:                                               ; preds = %84
  %90 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %91 = add i64 %2, 8
  %92 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %93 = bitcast i64* %92 to i8*
  %94 = load i8, i8* %93, align 1
  %95 = zext i8 %94 to i32
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* noundef %90, i64 noundef %91, i32 noundef %95)
  br label %96

96:                                               ; preds = %89, %84
  %97 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 9
  %98 = load i8, i8* %97, align 1
  %99 = icmp sgt i8 %98, -1
  br i1 %99, label %106, label %100

100:                                              ; preds = %96
  %101 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %102 = add i64 %2, 9
  %103 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 9
  %104 = load i8, i8* %103, align 1
  %105 = zext i8 %104 to i32
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* noundef %101, i64 noundef %102, i32 noundef %105)
  br label %106

106:                                              ; preds = %100, %96
  %107 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 10
  %108 = load i8, i8* %107, align 1
  %109 = icmp sgt i8 %108, -1
  br i1 %109, label %116, label %110

110:                                              ; preds = %106
  %111 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %112 = add i64 %2, 10
  %113 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 10
  %114 = load i8, i8* %113, align 1
  %115 = zext i8 %114 to i32
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* noundef %111, i64 noundef %112, i32 noundef %115)
  br label %116

116:                                              ; preds = %110, %106
  %117 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 11
  %118 = load i8, i8* %117, align 1
  %119 = icmp sgt i8 %118, -1
  br i1 %119, label %126, label %120

120:                                              ; preds = %116
  %121 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %122 = add i64 %2, 11
  %123 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 11
  %124 = load i8, i8* %123, align 1
  %125 = zext i8 %124 to i32
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* noundef %121, i64 noundef %122, i32 noundef %125)
  br label %126

126:                                              ; preds = %120, %116
  %127 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 12
  %128 = load i8, i8* %127, align 1
  %129 = icmp sgt i8 %128, -1
  br i1 %129, label %136, label %130

130:                                              ; preds = %126
  %131 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %132 = add i64 %2, 12
  %133 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 12
  %134 = load i8, i8* %133, align 1
  %135 = zext i8 %134 to i32
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* noundef %131, i64 noundef %132, i32 noundef %135)
  br label %136

136:                                              ; preds = %130, %126
  %137 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 13
  %138 = load i8, i8* %137, align 1
  %139 = icmp sgt i8 %138, -1
  br i1 %139, label %146, label %140

140:                                              ; preds = %136
  %141 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %142 = add i64 %2, 13
  %143 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 13
  %144 = load i8, i8* %143, align 1
  %145 = zext i8 %144 to i32
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* noundef %141, i64 noundef %142, i32 noundef %145)
  br label %146

146:                                              ; preds = %140, %136
  %147 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 14
  %148 = load i8, i8* %147, align 1
  %149 = icmp sgt i8 %148, -1
  br i1 %149, label %156, label %150

150:                                              ; preds = %146
  %151 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %152 = add i64 %2, 14
  %153 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 14
  %154 = load i8, i8* %153, align 1
  %155 = zext i8 %154 to i32
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* noundef %151, i64 noundef %152, i32 noundef %155)
  br label %156

156:                                              ; preds = %150, %146
  %157 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 15
  %158 = load i8, i8* %157, align 1
  %159 = icmp sgt i8 %158, -1
  br i1 %159, label %166, label %160

160:                                              ; preds = %156
  %161 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %162 = add i64 %2, 15
  %163 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 15
  %164 = load i8, i8* %163, align 1
  %165 = zext i8 %164 to i32
  tail call fastcc void @cpu_stb_data(%struct.CPUX86State* noundef %161, i64 noundef %162, i32 noundef %165)
  br label %166

166:                                              ; preds = %160, %156
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn writeonly
define void @helper_movl_mm_T0_xmm(%union.XMMReg* nocapture noundef writeonly %0, i32 noundef %1) local_unnamed_addr #1 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  store i32 %1, i32* %4, align 8
  %5 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  store i32 0, i32* %5, align 4
  %6 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  store i64 0, i64* %6, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn writeonly
define void @helper_movq_mm_T0_xmm(%union.XMMReg* nocapture noundef writeonly %0, i64 noundef %1) local_unnamed_addr #1 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %1, i64* %3, align 8
  %4 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  store i64 0, i64* %4, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_shufps(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1, i32 noundef %2) local_unnamed_addr #2 {
  %4 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %5 = and i32 %2, 3
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 %6
  %8 = load i32, i32* %7, align 4
  %9 = lshr i32 %2, 2
  %10 = and i32 %9, 3
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 %11
  %13 = load i32, i32* %12, align 4
  %14 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %15 = lshr i32 %2, 4
  %16 = and i32 %15, 3
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds [4 x i32], [4 x i32]* %14, i64 0, i64 %17
  %19 = load i32, i32* %18, align 4
  %20 = lshr i32 %2, 6
  %21 = and i32 %20, 3
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds [4 x i32], [4 x i32]* %14, i64 0, i64 %22
  %24 = load i32, i32* %23, align 4
  %25 = bitcast %union.XMMReg* %0 to i8*
  %26 = bitcast %union.XMMReg* %0 to i32*
  store i32 %8, i32* %26, align 8
  %27 = getelementptr inbounds i8, i8* %25, i64 4
  %28 = bitcast i8* %27 to i32*
  store i32 %13, i32* %28, align 4
  %29 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %30 = bitcast i64* %29 to i32*
  store i32 %19, i32* %30, align 8
  %31 = getelementptr inbounds i8, i8* %25, i64 12
  %32 = bitcast i8* %31 to i32*
  store i32 %24, i32* %32, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_shufpd(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1, i32 noundef %2) local_unnamed_addr #2 {
  %4 = and i32 %2, 1
  %5 = zext i32 %4 to i64
  %6 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 %5
  %7 = load i64, i64* %6, align 8
  %8 = lshr i32 %2, 1
  %9 = and i32 %8, 1
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 %10
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %7, i64* %13, align 8
  %14 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  store i64 %12, i64* %14, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pshufd_xmm(%union.XMMReg* nocapture noundef writeonly %0, %union.XMMReg* nocapture noundef readonly %1, i32 noundef %2) local_unnamed_addr #2 {
  %4 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %5 = and i32 %2, 3
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 %6
  %8 = load i32, i32* %7, align 4
  %9 = lshr i32 %2, 2
  %10 = and i32 %9, 3
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 %11
  %13 = load i32, i32* %12, align 4
  %14 = lshr i32 %2, 4
  %15 = and i32 %14, 3
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 %16
  %18 = load i32, i32* %17, align 4
  %19 = lshr i32 %2, 6
  %20 = and i32 %19, 3
  %21 = zext i32 %20 to i64
  %22 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 %21
  %23 = load i32, i32* %22, align 4
  %24 = bitcast %union.XMMReg* %0 to i8*
  %25 = bitcast %union.XMMReg* %0 to i32*
  store i32 %8, i32* %25, align 8
  %26 = getelementptr inbounds i8, i8* %24, i64 4
  %27 = bitcast i8* %26 to i32*
  store i32 %13, i32* %27, align 4
  %28 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %29 = bitcast i64* %28 to i32*
  store i32 %18, i32* %29, align 8
  %30 = getelementptr inbounds i8, i8* %24, i64 12
  %31 = bitcast i8* %30 to i32*
  store i32 %23, i32* %31, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pshuflw_xmm(%union.XMMReg* nocapture noundef writeonly %0, %union.XMMReg* nocapture noundef readonly %1, i32 noundef %2) local_unnamed_addr #2 {
  %4 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %5 = and i32 %2, 3
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 0, i64 %6
  %8 = load i16, i16* %7, align 2
  %9 = lshr i32 %2, 2
  %10 = and i32 %9, 3
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 0, i64 %11
  %13 = load i16, i16* %12, align 2
  %14 = lshr i32 %2, 4
  %15 = and i32 %14, 3
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 0, i64 %16
  %18 = load i16, i16* %17, align 2
  %19 = lshr i32 %2, 6
  %20 = and i32 %19, 3
  %21 = zext i32 %20 to i64
  %22 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 0, i64 %21
  %23 = load i16, i16* %22, align 2
  %24 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %25 = load i64, i64* %24, align 8
  %26 = bitcast %union.XMMReg* %0 to i8*
  %27 = bitcast %union.XMMReg* %0 to i16*
  store i16 %8, i16* %27, align 8
  %28 = getelementptr inbounds i8, i8* %26, i64 2
  %29 = bitcast i8* %28 to i16*
  store i16 %13, i16* %29, align 2
  %30 = getelementptr inbounds i8, i8* %26, i64 4
  %31 = bitcast i8* %30 to i16*
  store i16 %18, i16* %31, align 4
  %32 = getelementptr inbounds i8, i8* %26, i64 6
  %33 = bitcast i8* %32 to i16*
  store i16 %23, i16* %33, align 2
  %34 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  store i64 %25, i64* %34, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pshufhw_xmm(%union.XMMReg* nocapture noundef writeonly %0, %union.XMMReg* nocapture noundef readonly %1, i32 noundef %2) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %7 = and i32 %2, 3
  %8 = or i32 %7, 4
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 %9
  %11 = load i16, i16* %10, align 2
  %12 = lshr i32 %2, 2
  %13 = and i32 %12, 3
  %14 = or i32 %13, 4
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 %15
  %17 = load i16, i16* %16, align 2
  %18 = lshr i32 %2, 4
  %19 = and i32 %18, 3
  %20 = or i32 %19, 4
  %21 = zext i32 %20 to i64
  %22 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 %21
  %23 = load i16, i16* %22, align 2
  %24 = lshr i32 %2, 6
  %25 = and i32 %24, 3
  %26 = or i32 %25, 4
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 %27
  %29 = load i16, i16* %28, align 2
  %30 = bitcast %union.XMMReg* %0 to i8*
  %31 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %5, i64* %31, align 8
  %32 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %33 = bitcast i64* %32 to i16*
  store i16 %11, i16* %33, align 8
  %34 = getelementptr inbounds i8, i8* %30, i64 10
  %35 = bitcast i8* %34 to i16*
  store i16 %17, i16* %35, align 2
  %36 = getelementptr inbounds i8, i8* %30, i64 12
  %37 = bitcast i8* %36 to i16*
  store i16 %23, i16* %37, align 4
  %38 = getelementptr inbounds i8, i8* %30, i64 14
  %39 = bitcast i8* %38 to i16*
  store i16 %29, i16* %39, align 2
  ret void
}

; Function Attrs: uwtable
define void @helper_addps(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %7 = bitcast %union.XMMReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 13
  %11 = tail call i32 @float32_add(i32 noundef %5, i32 noundef %8, %struct.float_status* noundef nonnull %10)
  store i32 %11, i32* %4, align 8
  %12 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 13
  %18 = tail call i32 @float32_add(i32 noundef %13, i32 noundef %15, %struct.float_status* noundef nonnull %17)
  store i32 %18, i32* %12, align 4
  %19 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %20 = bitcast i64* %19 to i32*
  %21 = load i32, i32* %20, align 8
  %22 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %23 = bitcast i64* %22 to i32*
  %24 = load i32, i32* %23, align 8
  %25 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %26 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %25, i64 0, i32 13
  %27 = tail call i32 @float32_add(i32 noundef %21, i32 noundef %24, %struct.float_status* noundef nonnull %26)
  store i32 %27, i32* %20, align 8
  %28 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %31 = load i32, i32* %30, align 4
  %32 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %33 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %32, i64 0, i32 13
  %34 = tail call i32 @float32_add(i32 noundef %29, i32 noundef %31, %struct.float_status* noundef nonnull %33)
  store i32 %34, i32* %28, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_addss(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = bitcast %union.XMMReg* %1 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float32_add(i32 noundef %4, i32 noundef %6, %struct.float_status* noundef nonnull %8)
  store i32 %9, i32* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_addpd(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i64 @float64_add(i64 noundef %4, i64 noundef %6, %struct.float_status* noundef nonnull %8)
  store i64 %9, i64* %3, align 8
  %10 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %13 = load i64, i64* %12, align 8
  %14 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 13
  %16 = tail call i64 @float64_add(i64 noundef %11, i64 noundef %13, %struct.float_status* noundef nonnull %15)
  store i64 %16, i64* %10, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_addsd(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i64 @float64_add(i64 noundef %4, i64 noundef %6, %struct.float_status* noundef nonnull %8)
  store i64 %9, i64* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_subps(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %7 = bitcast %union.XMMReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 13
  %11 = tail call i32 @float32_sub(i32 noundef %5, i32 noundef %8, %struct.float_status* noundef nonnull %10)
  store i32 %11, i32* %4, align 8
  %12 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 13
  %18 = tail call i32 @float32_sub(i32 noundef %13, i32 noundef %15, %struct.float_status* noundef nonnull %17)
  store i32 %18, i32* %12, align 4
  %19 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %20 = bitcast i64* %19 to i32*
  %21 = load i32, i32* %20, align 8
  %22 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %23 = bitcast i64* %22 to i32*
  %24 = load i32, i32* %23, align 8
  %25 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %26 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %25, i64 0, i32 13
  %27 = tail call i32 @float32_sub(i32 noundef %21, i32 noundef %24, %struct.float_status* noundef nonnull %26)
  store i32 %27, i32* %20, align 8
  %28 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %31 = load i32, i32* %30, align 4
  %32 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %33 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %32, i64 0, i32 13
  %34 = tail call i32 @float32_sub(i32 noundef %29, i32 noundef %31, %struct.float_status* noundef nonnull %33)
  store i32 %34, i32* %28, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_subss(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = bitcast %union.XMMReg* %1 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float32_sub(i32 noundef %4, i32 noundef %6, %struct.float_status* noundef nonnull %8)
  store i32 %9, i32* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_subpd(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i64 @float64_sub(i64 noundef %4, i64 noundef %6, %struct.float_status* noundef nonnull %8)
  store i64 %9, i64* %3, align 8
  %10 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %13 = load i64, i64* %12, align 8
  %14 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 13
  %16 = tail call i64 @float64_sub(i64 noundef %11, i64 noundef %13, %struct.float_status* noundef nonnull %15)
  store i64 %16, i64* %10, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_subsd(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i64 @float64_sub(i64 noundef %4, i64 noundef %6, %struct.float_status* noundef nonnull %8)
  store i64 %9, i64* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_mulps(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %7 = bitcast %union.XMMReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 13
  %11 = tail call i32 @float32_mul(i32 noundef %5, i32 noundef %8, %struct.float_status* noundef nonnull %10)
  store i32 %11, i32* %4, align 8
  %12 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 13
  %18 = tail call i32 @float32_mul(i32 noundef %13, i32 noundef %15, %struct.float_status* noundef nonnull %17)
  store i32 %18, i32* %12, align 4
  %19 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %20 = bitcast i64* %19 to i32*
  %21 = load i32, i32* %20, align 8
  %22 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %23 = bitcast i64* %22 to i32*
  %24 = load i32, i32* %23, align 8
  %25 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %26 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %25, i64 0, i32 13
  %27 = tail call i32 @float32_mul(i32 noundef %21, i32 noundef %24, %struct.float_status* noundef nonnull %26)
  store i32 %27, i32* %20, align 8
  %28 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %31 = load i32, i32* %30, align 4
  %32 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %33 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %32, i64 0, i32 13
  %34 = tail call i32 @float32_mul(i32 noundef %29, i32 noundef %31, %struct.float_status* noundef nonnull %33)
  store i32 %34, i32* %28, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_mulss(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = bitcast %union.XMMReg* %1 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float32_mul(i32 noundef %4, i32 noundef %6, %struct.float_status* noundef nonnull %8)
  store i32 %9, i32* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_mulpd(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i64 @float64_mul(i64 noundef %4, i64 noundef %6, %struct.float_status* noundef nonnull %8)
  store i64 %9, i64* %3, align 8
  %10 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %13 = load i64, i64* %12, align 8
  %14 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 13
  %16 = tail call i64 @float64_mul(i64 noundef %11, i64 noundef %13, %struct.float_status* noundef nonnull %15)
  store i64 %16, i64* %10, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_mulsd(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i64 @float64_mul(i64 noundef %4, i64 noundef %6, %struct.float_status* noundef nonnull %8)
  store i64 %9, i64* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_divps(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %7 = bitcast %union.XMMReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 13
  %11 = tail call i32 @float32_div(i32 noundef %5, i32 noundef %8, %struct.float_status* noundef nonnull %10)
  store i32 %11, i32* %4, align 8
  %12 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 13
  %18 = tail call i32 @float32_div(i32 noundef %13, i32 noundef %15, %struct.float_status* noundef nonnull %17)
  store i32 %18, i32* %12, align 4
  %19 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %20 = bitcast i64* %19 to i32*
  %21 = load i32, i32* %20, align 8
  %22 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %23 = bitcast i64* %22 to i32*
  %24 = load i32, i32* %23, align 8
  %25 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %26 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %25, i64 0, i32 13
  %27 = tail call i32 @float32_div(i32 noundef %21, i32 noundef %24, %struct.float_status* noundef nonnull %26)
  store i32 %27, i32* %20, align 8
  %28 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %31 = load i32, i32* %30, align 4
  %32 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %33 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %32, i64 0, i32 13
  %34 = tail call i32 @float32_div(i32 noundef %29, i32 noundef %31, %struct.float_status* noundef nonnull %33)
  store i32 %34, i32* %28, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_divss(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = bitcast %union.XMMReg* %1 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float32_div(i32 noundef %4, i32 noundef %6, %struct.float_status* noundef nonnull %8)
  store i32 %9, i32* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_divpd(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i64 @float64_div(i64 noundef %4, i64 noundef %6, %struct.float_status* noundef nonnull %8)
  store i64 %9, i64* %3, align 8
  %10 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %13 = load i64, i64* %12, align 8
  %14 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 13
  %16 = tail call i64 @float64_div(i64 noundef %11, i64 noundef %13, %struct.float_status* noundef nonnull %15)
  store i64 %16, i64* %10, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_divsd(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i64 @float64_div(i64 noundef %4, i64 noundef %6, %struct.float_status* noundef nonnull %8)
  store i64 %9, i64* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_minps(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %7 = bitcast %union.XMMReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 13
  %11 = tail call i32 @float32_lt(i32 noundef %5, i32 noundef %8, %struct.float_status* noundef nonnull %10)
  %12 = icmp eq i32 %11, 0
  %13 = select i1 %12, i32* %7, i32* %4
  %14 = load i32, i32* %13, align 8
  store i32 %14, i32* %4, align 8
  %15 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %18 = load i32, i32* %17, align 4
  %19 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %20 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %19, i64 0, i32 13
  %21 = tail call i32 @float32_lt(i32 noundef %16, i32 noundef %18, %struct.float_status* noundef nonnull %20)
  %22 = icmp eq i32 %21, 0
  %23 = select i1 %22, i32* %17, i32* %15
  %24 = load i32, i32* %23, align 4
  store i32 %24, i32* %15, align 4
  %25 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %26 = bitcast i64* %25 to i32*
  %27 = load i32, i32* %26, align 8
  %28 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %29 = bitcast i64* %28 to i32*
  %30 = load i32, i32* %29, align 8
  %31 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %32 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %31, i64 0, i32 13
  %33 = tail call i32 @float32_lt(i32 noundef %27, i32 noundef %30, %struct.float_status* noundef nonnull %32)
  %34 = icmp eq i32 %33, 0
  %35 = select i1 %34, i32* %29, i32* %26
  %36 = load i32, i32* %35, align 8
  store i32 %36, i32* %26, align 8
  %37 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %40 = load i32, i32* %39, align 4
  %41 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %42 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %41, i64 0, i32 13
  %43 = tail call i32 @float32_lt(i32 noundef %38, i32 noundef %40, %struct.float_status* noundef nonnull %42)
  %44 = icmp eq i32 %43, 0
  %45 = select i1 %44, i32* %39, i32* %37
  %46 = load i32, i32* %45, align 4
  store i32 %46, i32* %37, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_minss(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = bitcast %union.XMMReg* %1 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float32_lt(i32 noundef %4, i32 noundef %6, %struct.float_status* noundef nonnull %8)
  %10 = icmp eq i32 %9, 0
  %11 = select i1 %10, i32* %5, i32* %3
  %12 = load i32, i32* %11, align 8
  store i32 %12, i32* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_minpd(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float64_lt(i64 noundef %4, i64 noundef %6, %struct.float_status* noundef nonnull %8)
  %10 = icmp eq i32 %9, 0
  %11 = select i1 %10, i64* %5, i64* %3
  %12 = load i64, i64* %11, align 8
  store i64 %12, i64* %3, align 8
  %13 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %16 = load i64, i64* %15, align 8
  %17 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %18 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %17, i64 0, i32 13
  %19 = tail call i32 @float64_lt(i64 noundef %14, i64 noundef %16, %struct.float_status* noundef nonnull %18)
  %20 = icmp eq i32 %19, 0
  %21 = select i1 %20, i64* %15, i64* %13
  %22 = load i64, i64* %21, align 8
  store i64 %22, i64* %13, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_minsd(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float64_lt(i64 noundef %4, i64 noundef %6, %struct.float_status* noundef nonnull %8)
  %10 = icmp eq i32 %9, 0
  %11 = select i1 %10, i64* %5, i64* %3
  %12 = load i64, i64* %11, align 8
  store i64 %12, i64* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_maxps(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %7 = bitcast %union.XMMReg* %0 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 13
  %11 = tail call i32 @float32_lt(i32 noundef %5, i32 noundef %8, %struct.float_status* noundef nonnull %10)
  %12 = icmp eq i32 %11, 0
  %13 = select i1 %12, i32* %4, i32* %7
  %14 = load i32, i32* %13, align 8
  store i32 %14, i32* %7, align 8
  %15 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %18 = load i32, i32* %17, align 4
  %19 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %20 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %19, i64 0, i32 13
  %21 = tail call i32 @float32_lt(i32 noundef %16, i32 noundef %18, %struct.float_status* noundef nonnull %20)
  %22 = icmp eq i32 %21, 0
  %23 = select i1 %22, i32* %15, i32* %17
  %24 = load i32, i32* %23, align 4
  store i32 %24, i32* %17, align 4
  %25 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %26 = bitcast i64* %25 to i32*
  %27 = load i32, i32* %26, align 8
  %28 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %29 = bitcast i64* %28 to i32*
  %30 = load i32, i32* %29, align 8
  %31 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %32 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %31, i64 0, i32 13
  %33 = tail call i32 @float32_lt(i32 noundef %27, i32 noundef %30, %struct.float_status* noundef nonnull %32)
  %34 = icmp eq i32 %33, 0
  %35 = select i1 %34, i32* %26, i32* %29
  %36 = load i32, i32* %35, align 8
  store i32 %36, i32* %29, align 8
  %37 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %40 = load i32, i32* %39, align 4
  %41 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %42 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %41, i64 0, i32 13
  %43 = tail call i32 @float32_lt(i32 noundef %38, i32 noundef %40, %struct.float_status* noundef nonnull %42)
  %44 = icmp eq i32 %43, 0
  %45 = select i1 %44, i32* %37, i32* %39
  %46 = load i32, i32* %45, align 4
  store i32 %46, i32* %39, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_maxss(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %1 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = bitcast %union.XMMReg* %0 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float32_lt(i32 noundef %4, i32 noundef %6, %struct.float_status* noundef nonnull %8)
  %10 = icmp eq i32 %9, 0
  %11 = select i1 %10, i32* %3, i32* %5
  %12 = load i32, i32* %11, align 8
  store i32 %12, i32* %5, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_maxpd(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float64_lt(i64 noundef %4, i64 noundef %6, %struct.float_status* noundef nonnull %8)
  %10 = icmp eq i32 %9, 0
  %11 = select i1 %10, i64* %3, i64* %5
  %12 = load i64, i64* %11, align 8
  store i64 %12, i64* %5, align 8
  %13 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %16 = load i64, i64* %15, align 8
  %17 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %18 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %17, i64 0, i32 13
  %19 = tail call i32 @float64_lt(i64 noundef %14, i64 noundef %16, %struct.float_status* noundef nonnull %18)
  %20 = icmp eq i32 %19, 0
  %21 = select i1 %20, i64* %13, i64* %15
  %22 = load i64, i64* %21, align 8
  store i64 %22, i64* %15, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_maxsd(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float64_lt(i64 noundef %4, i64 noundef %6, %struct.float_status* noundef nonnull %8)
  %10 = icmp eq i32 %9, 0
  %11 = select i1 %10, i64* %3, i64* %5
  %12 = load i64, i64* %11, align 8
  store i64 %12, i64* %5, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_sqrtps(%union.XMMReg* nocapture noundef writeonly %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %6, i64 0, i32 13
  %8 = tail call i32 @float32_sqrt(i32 noundef %5, %struct.float_status* noundef nonnull %7)
  %9 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %10 = bitcast %union.XMMReg* %0 to i32*
  store i32 %8, i32* %10, align 8
  %11 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %13, i64 0, i32 13
  %15 = tail call i32 @float32_sqrt(i32 noundef %12, %struct.float_status* noundef nonnull %14)
  %16 = getelementptr inbounds [4 x i32], [4 x i32]* %9, i64 0, i64 1
  store i32 %15, i32* %16, align 4
  %17 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %18 = bitcast i64* %17 to i32*
  %19 = load i32, i32* %18, align 8
  %20 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %21 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %20, i64 0, i32 13
  %22 = tail call i32 @float32_sqrt(i32 noundef %19, %struct.float_status* noundef nonnull %21)
  %23 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %24 = bitcast i64* %23 to i32*
  store i32 %22, i32* %24, align 8
  %25 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %26 = load i32, i32* %25, align 4
  %27 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %28 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %27, i64 0, i32 13
  %29 = tail call i32 @float32_sqrt(i32 noundef %26, %struct.float_status* noundef nonnull %28)
  %30 = getelementptr inbounds [4 x i32], [4 x i32]* %9, i64 0, i64 3
  store i32 %29, i32* %30, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_sqrtss(%union.XMMReg* nocapture noundef writeonly %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %1 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 13
  %7 = tail call i32 @float32_sqrt(i32 noundef %4, %struct.float_status* noundef nonnull %6)
  %8 = bitcast %union.XMMReg* %0 to i32*
  store i32 %7, i32* %8, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_sqrtpd(%union.XMMReg* nocapture noundef writeonly %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 13
  %7 = tail call i64 @float64_sqrt(i64 noundef %4, %struct.float_status* noundef nonnull %6)
  %8 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %7, i64* %8, align 8
  %9 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %10 = load i64, i64* %9, align 8
  %11 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %11, i64 0, i32 13
  %13 = tail call i64 @float64_sqrt(i64 noundef %10, %struct.float_status* noundef nonnull %12)
  %14 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  store i64 %13, i64* %14, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_sqrtsd(%union.XMMReg* nocapture noundef writeonly %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 13
  %7 = tail call i64 @float64_sqrt(i64 noundef %4, %struct.float_status* noundef nonnull %6)
  %8 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %7, i64* %8, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cvtps2pd(%union.XMMReg* nocapture noundef writeonly %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %8, i64 0, i32 13
  %10 = tail call i64 @float32_to_float64(i32 noundef %5, %struct.float_status* noundef nonnull %9)
  %11 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %10, i64* %11, align 8
  %12 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %12, i64 0, i32 13
  %14 = tail call i64 @float32_to_float64(i32 noundef %7, %struct.float_status* noundef nonnull %13)
  %15 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  store i64 %14, i64* %15, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cvtpd2ps(%union.XMMReg* nocapture noundef writeonly %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 13
  %7 = tail call i32 @float64_to_float32(i64 noundef %4, %struct.float_status* noundef nonnull %6)
  %8 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %9 = bitcast %union.XMMReg* %0 to i32*
  store i32 %7, i32* %9, align 8
  %10 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %11 = load i64, i64* %10, align 8
  %12 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %12, i64 0, i32 13
  %14 = tail call i32 @float64_to_float32(i64 noundef %11, %struct.float_status* noundef nonnull %13)
  %15 = getelementptr inbounds [4 x i32], [4 x i32]* %8, i64 0, i64 1
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  store i64 0, i64* %16, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cvtss2sd(%union.XMMReg* nocapture noundef writeonly %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %1 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 13
  %7 = tail call i64 @float32_to_float64(i32 noundef %4, %struct.float_status* noundef nonnull %6)
  %8 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %7, i64* %8, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cvtsd2ss(%union.XMMReg* nocapture noundef writeonly %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 13
  %7 = tail call i32 @float64_to_float32(i64 noundef %4, %struct.float_status* noundef nonnull %6)
  %8 = bitcast %union.XMMReg* %0 to i32*
  store i32 %7, i32* %8, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cvtdq2ps(%union.XMMReg* nocapture noundef writeonly %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %6, i64 0, i32 13
  %8 = tail call i32 @int32_to_float32(i32 noundef %5, %struct.float_status* noundef nonnull %7)
  %9 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %10 = bitcast %union.XMMReg* %0 to i32*
  store i32 %8, i32* %10, align 8
  %11 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %13, i64 0, i32 13
  %15 = tail call i32 @int32_to_float32(i32 noundef %12, %struct.float_status* noundef nonnull %14)
  %16 = getelementptr inbounds [4 x i32], [4 x i32]* %9, i64 0, i64 1
  store i32 %15, i32* %16, align 4
  %17 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %18 = bitcast i64* %17 to i32*
  %19 = load i32, i32* %18, align 8
  %20 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %21 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %20, i64 0, i32 13
  %22 = tail call i32 @int32_to_float32(i32 noundef %19, %struct.float_status* noundef nonnull %21)
  %23 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %24 = bitcast i64* %23 to i32*
  store i32 %22, i32* %24, align 8
  %25 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %26 = load i32, i32* %25, align 4
  %27 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %28 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %27, i64 0, i32 13
  %29 = tail call i32 @int32_to_float32(i32 noundef %26, %struct.float_status* noundef nonnull %28)
  %30 = getelementptr inbounds [4 x i32], [4 x i32]* %9, i64 0, i64 3
  store i32 %29, i32* %30, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_cvtdq2pd(%union.XMMReg* nocapture noundef writeonly %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %8, i64 0, i32 13
  %10 = tail call i64 @int32_to_float64(i32 noundef %5, %struct.float_status* noundef nonnull %9)
  %11 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %10, i64* %11, align 8
  %12 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %12, i64 0, i32 13
  %14 = tail call i64 @int32_to_float64(i32 noundef %7, %struct.float_status* noundef nonnull %13)
  %15 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  store i64 %14, i64* %15, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cvtpi2ps(%union.XMMReg* nocapture noundef writeonly %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %6, i64 0, i32 13
  %8 = tail call i32 @int32_to_float32(i32 noundef %5, %struct.float_status* noundef nonnull %7)
  %9 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %10 = bitcast %union.XMMReg* %0 to i32*
  store i32 %8, i32* %10, align 8
  %11 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %13, i64 0, i32 13
  %15 = tail call i32 @int32_to_float32(i32 noundef %12, %struct.float_status* noundef nonnull %14)
  %16 = getelementptr inbounds [4 x i32], [4 x i32]* %9, i64 0, i64 1
  store i32 %15, i32* %16, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_cvtpi2pd(%union.XMMReg* nocapture noundef writeonly %0, %union.MMXReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.MMXReg* %1 to [2 x i32]*
  %4 = bitcast %union.MMXReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %6, i64 0, i32 13
  %8 = tail call i64 @int32_to_float64(i32 noundef %5, %struct.float_status* noundef nonnull %7)
  %9 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %8, i64* %9, align 8
  %10 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %11 = load i32, i32* %10, align 4
  %12 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %12, i64 0, i32 13
  %14 = tail call i64 @int32_to_float64(i32 noundef %11, %struct.float_status* noundef nonnull %13)
  %15 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  store i64 %14, i64* %15, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cvtsi2ss(%union.XMMReg* nocapture noundef writeonly %0, i32 noundef %1) local_unnamed_addr #3 {
  %3 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %4 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 13
  %5 = tail call i32 @int32_to_float32(i32 noundef %1, %struct.float_status* noundef nonnull %4)
  %6 = bitcast %union.XMMReg* %0 to i32*
  store i32 %5, i32* %6, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cvtsi2sd(%union.XMMReg* nocapture noundef writeonly %0, i32 noundef %1) local_unnamed_addr #3 {
  %3 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %4 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 13
  %5 = tail call i64 @int32_to_float64(i32 noundef %1, %struct.float_status* noundef nonnull %4)
  %6 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %5, i64* %6, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cvtsq2ss(%union.XMMReg* nocapture noundef writeonly %0, i64 noundef %1) local_unnamed_addr #3 {
  %3 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %4 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 13
  %5 = tail call i32 @int64_to_float32(i64 noundef %1, %struct.float_status* noundef nonnull %4)
  %6 = bitcast %union.XMMReg* %0 to i32*
  store i32 %5, i32* %6, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cvtsq2sd(%union.XMMReg* nocapture noundef writeonly %0, i64 noundef %1) local_unnamed_addr #3 {
  %3 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %4 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 13
  %5 = tail call i64 @int64_to_float64(i64 noundef %1, %struct.float_status* noundef nonnull %4)
  %6 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %5, i64* %6, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cvtps2dq(%union.XMMReg* nocapture noundef writeonly %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %6, i64 0, i32 13
  %8 = tail call i32 @float32_to_int32(i32 noundef %5, %struct.float_status* noundef nonnull %7)
  %9 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %10 = bitcast %union.XMMReg* %0 to i32*
  store i32 %8, i32* %10, align 8
  %11 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %13, i64 0, i32 13
  %15 = tail call i32 @float32_to_int32(i32 noundef %12, %struct.float_status* noundef nonnull %14)
  %16 = getelementptr inbounds [4 x i32], [4 x i32]* %9, i64 0, i64 1
  store i32 %15, i32* %16, align 4
  %17 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %18 = bitcast i64* %17 to i32*
  %19 = load i32, i32* %18, align 8
  %20 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %21 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %20, i64 0, i32 13
  %22 = tail call i32 @float32_to_int32(i32 noundef %19, %struct.float_status* noundef nonnull %21)
  %23 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %24 = bitcast i64* %23 to i32*
  store i32 %22, i32* %24, align 8
  %25 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %26 = load i32, i32* %25, align 4
  %27 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %28 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %27, i64 0, i32 13
  %29 = tail call i32 @float32_to_int32(i32 noundef %26, %struct.float_status* noundef nonnull %28)
  %30 = getelementptr inbounds [4 x i32], [4 x i32]* %9, i64 0, i64 3
  store i32 %29, i32* %30, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_cvtpd2dq(%union.XMMReg* nocapture noundef writeonly %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 13
  %7 = tail call i32 @float64_to_int32(i64 noundef %4, %struct.float_status* noundef nonnull %6)
  %8 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %9 = bitcast %union.XMMReg* %0 to i32*
  store i32 %7, i32* %9, align 8
  %10 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %11 = load i64, i64* %10, align 8
  %12 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %12, i64 0, i32 13
  %14 = tail call i32 @float64_to_int32(i64 noundef %11, %struct.float_status* noundef nonnull %13)
  %15 = getelementptr inbounds [4 x i32], [4 x i32]* %8, i64 0, i64 1
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  store i64 0, i64* %16, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cvtps2pi(%union.MMXReg* nocapture noundef writeonly %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %6, i64 0, i32 13
  %8 = tail call i32 @float32_to_int32(i32 noundef %5, %struct.float_status* noundef nonnull %7)
  %9 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %10 = bitcast %union.MMXReg* %0 to i32*
  store i32 %8, i32* %10, align 8
  %11 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %13, i64 0, i32 13
  %15 = tail call i32 @float32_to_int32(i32 noundef %12, %struct.float_status* noundef nonnull %14)
  %16 = getelementptr inbounds [2 x i32], [2 x i32]* %9, i64 0, i64 1
  store i32 %15, i32* %16, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_cvtpd2pi(%union.MMXReg* nocapture noundef writeonly %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 13
  %7 = tail call i32 @float64_to_int32(i64 noundef %4, %struct.float_status* noundef nonnull %6)
  %8 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %9 = bitcast %union.MMXReg* %0 to i32*
  store i32 %7, i32* %9, align 8
  %10 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %11 = load i64, i64* %10, align 8
  %12 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %12, i64 0, i32 13
  %14 = tail call i32 @float64_to_int32(i64 noundef %11, %struct.float_status* noundef nonnull %13)
  %15 = getelementptr inbounds [2 x i32], [2 x i32]* %8, i64 0, i64 1
  store i32 %14, i32* %15, align 4
  ret void
}

; Function Attrs: uwtable
define i32 @helper_cvtss2si(%union.XMMReg* nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = bitcast %union.XMMReg* %0 to i32*
  %3 = load i32, i32* %2, align 8
  %4 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 13
  %6 = tail call i32 @float32_to_int32(i32 noundef %3, %struct.float_status* noundef nonnull %5)
  ret i32 %6
}

; Function Attrs: uwtable
define i32 @helper_cvtsd2si(%union.XMMReg* nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %3 = load i64, i64* %2, align 8
  %4 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 13
  %6 = tail call i32 @float64_to_int32(i64 noundef %3, %struct.float_status* noundef nonnull %5)
  ret i32 %6
}

; Function Attrs: uwtable
define i64 @helper_cvtss2sq(%union.XMMReg* nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = bitcast %union.XMMReg* %0 to i32*
  %3 = load i32, i32* %2, align 8
  %4 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 13
  %6 = tail call i64 @float32_to_int64(i32 noundef %3, %struct.float_status* noundef nonnull %5)
  ret i64 %6
}

; Function Attrs: uwtable
define i64 @helper_cvtsd2sq(%union.XMMReg* nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %3 = load i64, i64* %2, align 8
  %4 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 13
  %6 = tail call i64 @float64_to_int64(i64 noundef %3, %struct.float_status* noundef nonnull %5)
  ret i64 %6
}

; Function Attrs: uwtable
define void @helper_cvttps2dq(%union.XMMReg* nocapture noundef writeonly %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %6, i64 0, i32 13
  %8 = tail call i32 @float32_to_int32_round_to_zero(i32 noundef %5, %struct.float_status* noundef nonnull %7)
  %9 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %10 = bitcast %union.XMMReg* %0 to i32*
  store i32 %8, i32* %10, align 8
  %11 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %13, i64 0, i32 13
  %15 = tail call i32 @float32_to_int32_round_to_zero(i32 noundef %12, %struct.float_status* noundef nonnull %14)
  %16 = getelementptr inbounds [4 x i32], [4 x i32]* %9, i64 0, i64 1
  store i32 %15, i32* %16, align 4
  %17 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %18 = bitcast i64* %17 to i32*
  %19 = load i32, i32* %18, align 8
  %20 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %21 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %20, i64 0, i32 13
  %22 = tail call i32 @float32_to_int32_round_to_zero(i32 noundef %19, %struct.float_status* noundef nonnull %21)
  %23 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %24 = bitcast i64* %23 to i32*
  store i32 %22, i32* %24, align 8
  %25 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %26 = load i32, i32* %25, align 4
  %27 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %28 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %27, i64 0, i32 13
  %29 = tail call i32 @float32_to_int32_round_to_zero(i32 noundef %26, %struct.float_status* noundef nonnull %28)
  %30 = getelementptr inbounds [4 x i32], [4 x i32]* %9, i64 0, i64 3
  store i32 %29, i32* %30, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_cvttpd2dq(%union.XMMReg* nocapture noundef writeonly %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 13
  %7 = tail call i32 @float64_to_int32_round_to_zero(i64 noundef %4, %struct.float_status* noundef nonnull %6)
  %8 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %9 = bitcast %union.XMMReg* %0 to i32*
  store i32 %7, i32* %9, align 8
  %10 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %11 = load i64, i64* %10, align 8
  %12 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %12, i64 0, i32 13
  %14 = tail call i32 @float64_to_int32_round_to_zero(i64 noundef %11, %struct.float_status* noundef nonnull %13)
  %15 = getelementptr inbounds [4 x i32], [4 x i32]* %8, i64 0, i64 1
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  store i64 0, i64* %16, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cvttps2pi(%union.MMXReg* nocapture noundef writeonly %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %6, i64 0, i32 13
  %8 = tail call i32 @float32_to_int32_round_to_zero(i32 noundef %5, %struct.float_status* noundef nonnull %7)
  %9 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %10 = bitcast %union.MMXReg* %0 to i32*
  store i32 %8, i32* %10, align 8
  %11 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %13, i64 0, i32 13
  %15 = tail call i32 @float32_to_int32_round_to_zero(i32 noundef %12, %struct.float_status* noundef nonnull %14)
  %16 = getelementptr inbounds [2 x i32], [2 x i32]* %9, i64 0, i64 1
  store i32 %15, i32* %16, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_cvttpd2pi(%union.MMXReg* nocapture noundef writeonly %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 13
  %7 = tail call i32 @float64_to_int32_round_to_zero(i64 noundef %4, %struct.float_status* noundef nonnull %6)
  %8 = bitcast %union.MMXReg* %0 to [2 x i32]*
  %9 = bitcast %union.MMXReg* %0 to i32*
  store i32 %7, i32* %9, align 8
  %10 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %11 = load i64, i64* %10, align 8
  %12 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %13 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %12, i64 0, i32 13
  %14 = tail call i32 @float64_to_int32_round_to_zero(i64 noundef %11, %struct.float_status* noundef nonnull %13)
  %15 = getelementptr inbounds [2 x i32], [2 x i32]* %8, i64 0, i64 1
  store i32 %14, i32* %15, align 4
  ret void
}

; Function Attrs: uwtable
define i32 @helper_cvttss2si(%union.XMMReg* nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = bitcast %union.XMMReg* %0 to i32*
  %3 = load i32, i32* %2, align 8
  %4 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 13
  %6 = tail call i32 @float32_to_int32_round_to_zero(i32 noundef %3, %struct.float_status* noundef nonnull %5)
  ret i32 %6
}

; Function Attrs: uwtable
define i32 @helper_cvttsd2si(%union.XMMReg* nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %3 = load i64, i64* %2, align 8
  %4 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 13
  %6 = tail call i32 @float64_to_int32_round_to_zero(i64 noundef %3, %struct.float_status* noundef nonnull %5)
  ret i32 %6
}

; Function Attrs: uwtable
define i64 @helper_cvttss2sq(%union.XMMReg* nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = bitcast %union.XMMReg* %0 to i32*
  %3 = load i32, i32* %2, align 8
  %4 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 13
  %6 = tail call i64 @float32_to_int64_round_to_zero(i32 noundef %3, %struct.float_status* noundef nonnull %5)
  ret i64 %6
}

; Function Attrs: uwtable
define i64 @helper_cvttsd2sq(%union.XMMReg* nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %3 = load i64, i64* %2, align 8
  %4 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 13
  %6 = tail call i64 @float64_to_int64_round_to_zero(i64 noundef %3, %struct.float_status* noundef nonnull %5)
  ret i64 %6
}

; Function Attrs: uwtable
define void @helper_rsqrtps(%union.XMMReg* nocapture noundef writeonly %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %6, i64 0, i32 13
  %8 = tail call i32 @float32_sqrt(i32 noundef %5, %struct.float_status* noundef nonnull %7)
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 13
  %11 = tail call i32 @float32_div(i32 noundef 1065353216, i32 noundef %8, %struct.float_status* noundef nonnull %10)
  %12 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %13 = bitcast %union.XMMReg* %0 to i32*
  store i32 %11, i32* %13, align 8
  %14 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 13
  %18 = tail call i32 @float32_sqrt(i32 noundef %15, %struct.float_status* noundef nonnull %17)
  %19 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %20 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %19, i64 0, i32 13
  %21 = tail call i32 @float32_div(i32 noundef 1065353216, i32 noundef %18, %struct.float_status* noundef nonnull %20)
  %22 = getelementptr inbounds [4 x i32], [4 x i32]* %12, i64 0, i64 1
  store i32 %21, i32* %22, align 4
  %23 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %24 = bitcast i64* %23 to i32*
  %25 = load i32, i32* %24, align 8
  %26 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %27 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %26, i64 0, i32 13
  %28 = tail call i32 @float32_sqrt(i32 noundef %25, %struct.float_status* noundef nonnull %27)
  %29 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %30 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %29, i64 0, i32 13
  %31 = tail call i32 @float32_div(i32 noundef 1065353216, i32 noundef %28, %struct.float_status* noundef nonnull %30)
  %32 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %33 = bitcast i64* %32 to i32*
  store i32 %31, i32* %33, align 8
  %34 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %35 = load i32, i32* %34, align 4
  %36 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %37 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %36, i64 0, i32 13
  %38 = tail call i32 @float32_sqrt(i32 noundef %35, %struct.float_status* noundef nonnull %37)
  %39 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %40 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %39, i64 0, i32 13
  %41 = tail call i32 @float32_div(i32 noundef 1065353216, i32 noundef %38, %struct.float_status* noundef nonnull %40)
  %42 = getelementptr inbounds [4 x i32], [4 x i32]* %12, i64 0, i64 3
  store i32 %41, i32* %42, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_rsqrtss(%union.XMMReg* nocapture noundef writeonly %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %1 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 13
  %7 = tail call i32 @float32_sqrt(i32 noundef %4, %struct.float_status* noundef nonnull %6)
  %8 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %8, i64 0, i32 13
  %10 = tail call i32 @float32_div(i32 noundef 1065353216, i32 noundef %7, %struct.float_status* noundef nonnull %9)
  %11 = bitcast %union.XMMReg* %0 to i32*
  store i32 %10, i32* %11, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_rcpps(%union.XMMReg* nocapture noundef writeonly %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %6, i64 0, i32 13
  %8 = tail call i32 @float32_div(i32 noundef 1065353216, i32 noundef %5, %struct.float_status* noundef nonnull %7)
  %9 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %10 = bitcast %union.XMMReg* %0 to i32*
  store i32 %8, i32* %10, align 8
  %11 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %13, i64 0, i32 13
  %15 = tail call i32 @float32_div(i32 noundef 1065353216, i32 noundef %12, %struct.float_status* noundef nonnull %14)
  %16 = getelementptr inbounds [4 x i32], [4 x i32]* %9, i64 0, i64 1
  store i32 %15, i32* %16, align 4
  %17 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %18 = bitcast i64* %17 to i32*
  %19 = load i32, i32* %18, align 8
  %20 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %21 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %20, i64 0, i32 13
  %22 = tail call i32 @float32_div(i32 noundef 1065353216, i32 noundef %19, %struct.float_status* noundef nonnull %21)
  %23 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %24 = bitcast i64* %23 to i32*
  store i32 %22, i32* %24, align 8
  %25 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %26 = load i32, i32* %25, align 4
  %27 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %28 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %27, i64 0, i32 13
  %29 = tail call i32 @float32_div(i32 noundef 1065353216, i32 noundef %26, %struct.float_status* noundef nonnull %28)
  %30 = getelementptr inbounds [4 x i32], [4 x i32]* %9, i64 0, i64 3
  store i32 %29, i32* %30, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_rcpss(%union.XMMReg* nocapture noundef writeonly %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %1 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 13
  %7 = tail call i32 @float32_div(i32 noundef 1065353216, i32 noundef %4, %struct.float_status* noundef nonnull %6)
  %8 = bitcast %union.XMMReg* %0 to i32*
  store i32 %7, i32* %8, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_extrq_r(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %6 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 1
  %7 = load i8, i8* %6, align 1
  %8 = bitcast %union.XMMReg* %1 to i8*
  %9 = load i8, i8* %8, align 8
  %10 = icmp eq i8 %9, 0
  %11 = zext i8 %9 to i64
  %12 = shl nsw i64 -1, %11
  %13 = xor i64 %12, -1
  %14 = select i1 %10, i64 -1, i64 %13
  %15 = zext i8 %7 to i64
  %16 = lshr i64 %4, %15
  %17 = and i64 %14, %16
  store i64 %17, i64* %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_extrq_i(%union.XMMReg* nocapture noundef %0, i32 noundef %1, i32 noundef %2) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i32 %2, 0
  %7 = zext i32 %2 to i64
  %8 = shl nsw i64 -1, %7
  %9 = xor i64 %8, -1
  %10 = select i1 %6, i64 -1, i64 %9
  %11 = zext i32 %1 to i64
  %12 = lshr i64 %5, %11
  %13 = and i64 %12, %10
  store i64 %13, i64* %4, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_insertq_r(%union.XMMReg* nocapture noundef writeonly %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %6 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 9
  %7 = load i8, i8* %6, align 1
  %8 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %9 = bitcast i64* %8 to i8*
  %10 = load i8, i8* %9, align 8
  %11 = icmp eq i8 %10, 0
  %12 = zext i8 %10 to i64
  %13 = shl nsw i64 -1, %12
  %14 = xor i64 %13, -1
  %15 = select i1 %11, i64 -1, i64 %14
  %16 = zext i8 %7 to i64
  %17 = shl i64 %15, %16
  %18 = xor i64 %17, -1
  %19 = and i64 %4, %18
  %20 = and i64 %15, %4
  %21 = shl i64 %20, %16
  %22 = or i64 %19, %21
  %23 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %22, i64* %23, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_insertq_i(%union.XMMReg* nocapture noundef %0, i32 noundef %1, i32 noundef %2) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i32 %2, 0
  %7 = zext i32 %2 to i64
  %8 = shl nsw i64 -1, %7
  %9 = xor i64 %8, -1
  %10 = select i1 %6, i64 -1, i64 %9
  %11 = zext i32 %1 to i64
  %12 = shl i64 %10, %11
  %13 = xor i64 %12, -1
  %14 = and i64 %5, %13
  %15 = and i64 %5, %10
  %16 = shl i64 %15, %11
  %17 = or i64 %16, %14
  store i64 %17, i64* %4, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_haddps(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %8, i64 0, i32 13
  %10 = tail call i32 @float32_add(i32 noundef %5, i32 noundef %7, %struct.float_status* noundef nonnull %9)
  %11 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %12 = bitcast i64* %11 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %15 = load i32, i32* %14, align 4
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 13
  %18 = tail call i32 @float32_add(i32 noundef %13, i32 noundef %15, %struct.float_status* noundef nonnull %17)
  %19 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %20 = bitcast %union.XMMReg* %1 to i32*
  %21 = load i32, i32* %20, align 8
  %22 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 1
  %23 = load i32, i32* %22, align 4
  %24 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %25 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %24, i64 0, i32 13
  %26 = tail call i32 @float32_add(i32 noundef %21, i32 noundef %23, %struct.float_status* noundef nonnull %25)
  %27 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %28 = bitcast i64* %27 to i32*
  %29 = load i32, i32* %28, align 8
  %30 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 3
  %31 = load i32, i32* %30, align 4
  %32 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %33 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %32, i64 0, i32 13
  %34 = tail call i32 @float32_add(i32 noundef %29, i32 noundef %31, %struct.float_status* noundef nonnull %33)
  %35 = bitcast %union.XMMReg* %0 to i8*
  store i32 %10, i32* %4, align 8
  %36 = getelementptr inbounds i8, i8* %35, i64 4
  %37 = bitcast i8* %36 to i32*
  store i32 %18, i32* %37, align 4
  store i32 %26, i32* %12, align 8
  %38 = getelementptr inbounds i8, i8* %35, i64 12
  %39 = bitcast i8* %38 to i32*
  store i32 %34, i32* %39, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_haddpd(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i64 @float64_add(i64 noundef %4, i64 noundef %6, %struct.float_status* noundef nonnull %8)
  %10 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %13 = load i64, i64* %12, align 8
  %14 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 13
  %16 = tail call i64 @float64_add(i64 noundef %11, i64 noundef %13, %struct.float_status* noundef nonnull %15)
  store i64 %9, i64* %3, align 8
  store i64 %16, i64* %5, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_hsubps(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %9 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %8, i64 0, i32 13
  %10 = tail call i32 @float32_sub(i32 noundef %5, i32 noundef %7, %struct.float_status* noundef nonnull %9)
  %11 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %12 = bitcast i64* %11 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %15 = load i32, i32* %14, align 4
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 13
  %18 = tail call i32 @float32_sub(i32 noundef %13, i32 noundef %15, %struct.float_status* noundef nonnull %17)
  %19 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %20 = bitcast %union.XMMReg* %1 to i32*
  %21 = load i32, i32* %20, align 8
  %22 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 1
  %23 = load i32, i32* %22, align 4
  %24 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %25 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %24, i64 0, i32 13
  %26 = tail call i32 @float32_sub(i32 noundef %21, i32 noundef %23, %struct.float_status* noundef nonnull %25)
  %27 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %28 = bitcast i64* %27 to i32*
  %29 = load i32, i32* %28, align 8
  %30 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 3
  %31 = load i32, i32* %30, align 4
  %32 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %33 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %32, i64 0, i32 13
  %34 = tail call i32 @float32_sub(i32 noundef %29, i32 noundef %31, %struct.float_status* noundef nonnull %33)
  %35 = bitcast %union.XMMReg* %0 to i8*
  store i32 %10, i32* %4, align 8
  %36 = getelementptr inbounds i8, i8* %35, i64 4
  %37 = bitcast i8* %36 to i32*
  store i32 %18, i32* %37, align 4
  store i32 %26, i32* %12, align 8
  %38 = getelementptr inbounds i8, i8* %35, i64 12
  %39 = bitcast i8* %38 to i32*
  store i32 %34, i32* %39, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_hsubpd(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i64 @float64_sub(i64 noundef %4, i64 noundef %6, %struct.float_status* noundef nonnull %8)
  %10 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %13 = load i64, i64* %12, align 8
  %14 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 13
  %16 = tail call i64 @float64_sub(i64 noundef %11, i64 noundef %13, %struct.float_status* noundef nonnull %15)
  store i64 %9, i64* %3, align 8
  store i64 %16, i64* %5, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_addsubps(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %7 = bitcast %union.XMMReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 13
  %11 = tail call i32 @float32_sub(i32 noundef %5, i32 noundef %8, %struct.float_status* noundef nonnull %10)
  store i32 %11, i32* %4, align 8
  %12 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 13
  %18 = tail call i32 @float32_add(i32 noundef %13, i32 noundef %15, %struct.float_status* noundef nonnull %17)
  store i32 %18, i32* %12, align 4
  %19 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %20 = bitcast i64* %19 to i32*
  %21 = load i32, i32* %20, align 8
  %22 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %23 = bitcast i64* %22 to i32*
  %24 = load i32, i32* %23, align 8
  %25 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %26 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %25, i64 0, i32 13
  %27 = tail call i32 @float32_sub(i32 noundef %21, i32 noundef %24, %struct.float_status* noundef nonnull %26)
  store i32 %27, i32* %20, align 8
  %28 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %31 = load i32, i32* %30, align 4
  %32 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %33 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %32, i64 0, i32 13
  %34 = tail call i32 @float32_add(i32 noundef %29, i32 noundef %31, %struct.float_status* noundef nonnull %33)
  store i32 %34, i32* %28, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_addsubpd(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i64 @float64_sub(i64 noundef %4, i64 noundef %6, %struct.float_status* noundef nonnull %8)
  store i64 %9, i64* %3, align 8
  %10 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %13 = load i64, i64* %12, align 8
  %14 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 13
  %16 = tail call i64 @float64_add(i64 noundef %11, i64 noundef %13, %struct.float_status* noundef nonnull %15)
  store i64 %16, i64* %10, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpeqps(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %7 = bitcast %union.XMMReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 13
  %11 = tail call i32 @float32_eq_quiet(i32 noundef %5, i32 noundef %8, %struct.float_status* noundef nonnull %10)
  %12 = icmp ne i32 %11, 0
  %13 = sext i1 %12 to i32
  store i32 %13, i32* %4, align 8
  %14 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %17 = load i32, i32* %16, align 4
  %18 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %19 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 13
  %20 = tail call i32 @float32_eq_quiet(i32 noundef %15, i32 noundef %17, %struct.float_status* noundef nonnull %19)
  %21 = icmp ne i32 %20, 0
  %22 = sext i1 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %24 = bitcast i64* %23 to i32*
  %25 = load i32, i32* %24, align 8
  %26 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %27 = bitcast i64* %26 to i32*
  %28 = load i32, i32* %27, align 8
  %29 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %30 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %29, i64 0, i32 13
  %31 = tail call i32 @float32_eq_quiet(i32 noundef %25, i32 noundef %28, %struct.float_status* noundef nonnull %30)
  %32 = icmp ne i32 %31, 0
  %33 = sext i1 %32 to i32
  store i32 %33, i32* %24, align 8
  %34 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %37 = load i32, i32* %36, align 4
  %38 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %39 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %38, i64 0, i32 13
  %40 = tail call i32 @float32_eq_quiet(i32 noundef %35, i32 noundef %37, %struct.float_status* noundef nonnull %39)
  %41 = icmp ne i32 %40, 0
  %42 = sext i1 %41 to i32
  store i32 %42, i32* %34, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpeqss(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = bitcast %union.XMMReg* %1 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float32_eq_quiet(i32 noundef %4, i32 noundef %6, %struct.float_status* noundef nonnull %8)
  %10 = icmp ne i32 %9, 0
  %11 = sext i1 %10 to i32
  store i32 %11, i32* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpeqpd(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float64_eq_quiet(i64 noundef %4, i64 noundef %6, %struct.float_status* noundef nonnull %8)
  %10 = icmp ne i32 %9, 0
  %11 = sext i1 %10 to i64
  store i64 %11, i64* %3, align 8
  %12 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %15 = load i64, i64* %14, align 8
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 13
  %18 = tail call i32 @float64_eq_quiet(i64 noundef %13, i64 noundef %15, %struct.float_status* noundef nonnull %17)
  %19 = icmp ne i32 %18, 0
  %20 = sext i1 %19 to i64
  store i64 %20, i64* %12, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpeqsd(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float64_eq_quiet(i64 noundef %4, i64 noundef %6, %struct.float_status* noundef nonnull %8)
  %10 = icmp ne i32 %9, 0
  %11 = sext i1 %10 to i64
  store i64 %11, i64* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpltps(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %7 = bitcast %union.XMMReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 13
  %11 = tail call i32 @float32_lt(i32 noundef %5, i32 noundef %8, %struct.float_status* noundef nonnull %10)
  %12 = icmp ne i32 %11, 0
  %13 = sext i1 %12 to i32
  store i32 %13, i32* %4, align 8
  %14 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %17 = load i32, i32* %16, align 4
  %18 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %19 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 13
  %20 = tail call i32 @float32_lt(i32 noundef %15, i32 noundef %17, %struct.float_status* noundef nonnull %19)
  %21 = icmp ne i32 %20, 0
  %22 = sext i1 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %24 = bitcast i64* %23 to i32*
  %25 = load i32, i32* %24, align 8
  %26 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %27 = bitcast i64* %26 to i32*
  %28 = load i32, i32* %27, align 8
  %29 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %30 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %29, i64 0, i32 13
  %31 = tail call i32 @float32_lt(i32 noundef %25, i32 noundef %28, %struct.float_status* noundef nonnull %30)
  %32 = icmp ne i32 %31, 0
  %33 = sext i1 %32 to i32
  store i32 %33, i32* %24, align 8
  %34 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %37 = load i32, i32* %36, align 4
  %38 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %39 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %38, i64 0, i32 13
  %40 = tail call i32 @float32_lt(i32 noundef %35, i32 noundef %37, %struct.float_status* noundef nonnull %39)
  %41 = icmp ne i32 %40, 0
  %42 = sext i1 %41 to i32
  store i32 %42, i32* %34, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpltss(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = bitcast %union.XMMReg* %1 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float32_lt(i32 noundef %4, i32 noundef %6, %struct.float_status* noundef nonnull %8)
  %10 = icmp ne i32 %9, 0
  %11 = sext i1 %10 to i32
  store i32 %11, i32* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpltpd(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float64_lt(i64 noundef %4, i64 noundef %6, %struct.float_status* noundef nonnull %8)
  %10 = icmp ne i32 %9, 0
  %11 = sext i1 %10 to i64
  store i64 %11, i64* %3, align 8
  %12 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %15 = load i64, i64* %14, align 8
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 13
  %18 = tail call i32 @float64_lt(i64 noundef %13, i64 noundef %15, %struct.float_status* noundef nonnull %17)
  %19 = icmp ne i32 %18, 0
  %20 = sext i1 %19 to i64
  store i64 %20, i64* %12, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpltsd(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float64_lt(i64 noundef %4, i64 noundef %6, %struct.float_status* noundef nonnull %8)
  %10 = icmp ne i32 %9, 0
  %11 = sext i1 %10 to i64
  store i64 %11, i64* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpleps(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %7 = bitcast %union.XMMReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 13
  %11 = tail call i32 @float32_le(i32 noundef %5, i32 noundef %8, %struct.float_status* noundef nonnull %10)
  %12 = icmp ne i32 %11, 0
  %13 = sext i1 %12 to i32
  store i32 %13, i32* %4, align 8
  %14 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %17 = load i32, i32* %16, align 4
  %18 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %19 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 13
  %20 = tail call i32 @float32_le(i32 noundef %15, i32 noundef %17, %struct.float_status* noundef nonnull %19)
  %21 = icmp ne i32 %20, 0
  %22 = sext i1 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %24 = bitcast i64* %23 to i32*
  %25 = load i32, i32* %24, align 8
  %26 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %27 = bitcast i64* %26 to i32*
  %28 = load i32, i32* %27, align 8
  %29 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %30 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %29, i64 0, i32 13
  %31 = tail call i32 @float32_le(i32 noundef %25, i32 noundef %28, %struct.float_status* noundef nonnull %30)
  %32 = icmp ne i32 %31, 0
  %33 = sext i1 %32 to i32
  store i32 %33, i32* %24, align 8
  %34 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %37 = load i32, i32* %36, align 4
  %38 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %39 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %38, i64 0, i32 13
  %40 = tail call i32 @float32_le(i32 noundef %35, i32 noundef %37, %struct.float_status* noundef nonnull %39)
  %41 = icmp ne i32 %40, 0
  %42 = sext i1 %41 to i32
  store i32 %42, i32* %34, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpless(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = bitcast %union.XMMReg* %1 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float32_le(i32 noundef %4, i32 noundef %6, %struct.float_status* noundef nonnull %8)
  %10 = icmp ne i32 %9, 0
  %11 = sext i1 %10 to i32
  store i32 %11, i32* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cmplepd(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float64_le(i64 noundef %4, i64 noundef %6, %struct.float_status* noundef nonnull %8)
  %10 = icmp ne i32 %9, 0
  %11 = sext i1 %10 to i64
  store i64 %11, i64* %3, align 8
  %12 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %15 = load i64, i64* %14, align 8
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 13
  %18 = tail call i32 @float64_le(i64 noundef %13, i64 noundef %15, %struct.float_status* noundef nonnull %17)
  %19 = icmp ne i32 %18, 0
  %20 = sext i1 %19 to i64
  store i64 %20, i64* %12, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cmplesd(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float64_le(i64 noundef %4, i64 noundef %6, %struct.float_status* noundef nonnull %8)
  %10 = icmp ne i32 %9, 0
  %11 = sext i1 %10 to i64
  store i64 %11, i64* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpunordps(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %7 = bitcast %union.XMMReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 13
  %11 = tail call i32 @float32_unordered_quiet(i32 noundef %5, i32 noundef %8, %struct.float_status* noundef nonnull %10)
  %12 = icmp ne i32 %11, 0
  %13 = sext i1 %12 to i32
  store i32 %13, i32* %4, align 8
  %14 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %17 = load i32, i32* %16, align 4
  %18 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %19 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 13
  %20 = tail call i32 @float32_unordered_quiet(i32 noundef %15, i32 noundef %17, %struct.float_status* noundef nonnull %19)
  %21 = icmp ne i32 %20, 0
  %22 = sext i1 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %24 = bitcast i64* %23 to i32*
  %25 = load i32, i32* %24, align 8
  %26 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %27 = bitcast i64* %26 to i32*
  %28 = load i32, i32* %27, align 8
  %29 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %30 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %29, i64 0, i32 13
  %31 = tail call i32 @float32_unordered_quiet(i32 noundef %25, i32 noundef %28, %struct.float_status* noundef nonnull %30)
  %32 = icmp ne i32 %31, 0
  %33 = sext i1 %32 to i32
  store i32 %33, i32* %24, align 8
  %34 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %37 = load i32, i32* %36, align 4
  %38 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %39 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %38, i64 0, i32 13
  %40 = tail call i32 @float32_unordered_quiet(i32 noundef %35, i32 noundef %37, %struct.float_status* noundef nonnull %39)
  %41 = icmp ne i32 %40, 0
  %42 = sext i1 %41 to i32
  store i32 %42, i32* %34, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpunordss(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = bitcast %union.XMMReg* %1 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float32_unordered_quiet(i32 noundef %4, i32 noundef %6, %struct.float_status* noundef nonnull %8)
  %10 = icmp ne i32 %9, 0
  %11 = sext i1 %10 to i32
  store i32 %11, i32* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpunordpd(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float64_unordered_quiet(i64 noundef %4, i64 noundef %6, %struct.float_status* noundef nonnull %8)
  %10 = icmp ne i32 %9, 0
  %11 = sext i1 %10 to i64
  store i64 %11, i64* %3, align 8
  %12 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %15 = load i64, i64* %14, align 8
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 13
  %18 = tail call i32 @float64_unordered_quiet(i64 noundef %13, i64 noundef %15, %struct.float_status* noundef nonnull %17)
  %19 = icmp ne i32 %18, 0
  %20 = sext i1 %19 to i64
  store i64 %20, i64* %12, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpunordsd(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float64_unordered_quiet(i64 noundef %4, i64 noundef %6, %struct.float_status* noundef nonnull %8)
  %10 = icmp ne i32 %9, 0
  %11 = sext i1 %10 to i64
  store i64 %11, i64* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpneqps(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %7 = bitcast %union.XMMReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 13
  %11 = tail call i32 @float32_eq_quiet(i32 noundef %5, i32 noundef %8, %struct.float_status* noundef nonnull %10)
  %12 = icmp eq i32 %11, 0
  %13 = sext i1 %12 to i32
  store i32 %13, i32* %4, align 8
  %14 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %17 = load i32, i32* %16, align 4
  %18 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %19 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 13
  %20 = tail call i32 @float32_eq_quiet(i32 noundef %15, i32 noundef %17, %struct.float_status* noundef nonnull %19)
  %21 = icmp eq i32 %20, 0
  %22 = sext i1 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %24 = bitcast i64* %23 to i32*
  %25 = load i32, i32* %24, align 8
  %26 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %27 = bitcast i64* %26 to i32*
  %28 = load i32, i32* %27, align 8
  %29 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %30 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %29, i64 0, i32 13
  %31 = tail call i32 @float32_eq_quiet(i32 noundef %25, i32 noundef %28, %struct.float_status* noundef nonnull %30)
  %32 = icmp eq i32 %31, 0
  %33 = sext i1 %32 to i32
  store i32 %33, i32* %24, align 8
  %34 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %37 = load i32, i32* %36, align 4
  %38 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %39 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %38, i64 0, i32 13
  %40 = tail call i32 @float32_eq_quiet(i32 noundef %35, i32 noundef %37, %struct.float_status* noundef nonnull %39)
  %41 = icmp eq i32 %40, 0
  %42 = sext i1 %41 to i32
  store i32 %42, i32* %34, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpneqss(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = bitcast %union.XMMReg* %1 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float32_eq_quiet(i32 noundef %4, i32 noundef %6, %struct.float_status* noundef nonnull %8)
  %10 = icmp eq i32 %9, 0
  %11 = sext i1 %10 to i32
  store i32 %11, i32* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpneqpd(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float64_eq_quiet(i64 noundef %4, i64 noundef %6, %struct.float_status* noundef nonnull %8)
  %10 = icmp eq i32 %9, 0
  %11 = sext i1 %10 to i64
  store i64 %11, i64* %3, align 8
  %12 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %15 = load i64, i64* %14, align 8
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 13
  %18 = tail call i32 @float64_eq_quiet(i64 noundef %13, i64 noundef %15, %struct.float_status* noundef nonnull %17)
  %19 = icmp eq i32 %18, 0
  %20 = sext i1 %19 to i64
  store i64 %20, i64* %12, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpneqsd(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float64_eq_quiet(i64 noundef %4, i64 noundef %6, %struct.float_status* noundef nonnull %8)
  %10 = icmp eq i32 %9, 0
  %11 = sext i1 %10 to i64
  store i64 %11, i64* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpnltps(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %7 = bitcast %union.XMMReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 13
  %11 = tail call i32 @float32_lt(i32 noundef %5, i32 noundef %8, %struct.float_status* noundef nonnull %10)
  %12 = icmp eq i32 %11, 0
  %13 = sext i1 %12 to i32
  store i32 %13, i32* %4, align 8
  %14 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %17 = load i32, i32* %16, align 4
  %18 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %19 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 13
  %20 = tail call i32 @float32_lt(i32 noundef %15, i32 noundef %17, %struct.float_status* noundef nonnull %19)
  %21 = icmp eq i32 %20, 0
  %22 = sext i1 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %24 = bitcast i64* %23 to i32*
  %25 = load i32, i32* %24, align 8
  %26 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %27 = bitcast i64* %26 to i32*
  %28 = load i32, i32* %27, align 8
  %29 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %30 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %29, i64 0, i32 13
  %31 = tail call i32 @float32_lt(i32 noundef %25, i32 noundef %28, %struct.float_status* noundef nonnull %30)
  %32 = icmp eq i32 %31, 0
  %33 = sext i1 %32 to i32
  store i32 %33, i32* %24, align 8
  %34 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %37 = load i32, i32* %36, align 4
  %38 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %39 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %38, i64 0, i32 13
  %40 = tail call i32 @float32_lt(i32 noundef %35, i32 noundef %37, %struct.float_status* noundef nonnull %39)
  %41 = icmp eq i32 %40, 0
  %42 = sext i1 %41 to i32
  store i32 %42, i32* %34, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpnltss(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = bitcast %union.XMMReg* %1 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float32_lt(i32 noundef %4, i32 noundef %6, %struct.float_status* noundef nonnull %8)
  %10 = icmp eq i32 %9, 0
  %11 = sext i1 %10 to i32
  store i32 %11, i32* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpnltpd(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float64_lt(i64 noundef %4, i64 noundef %6, %struct.float_status* noundef nonnull %8)
  %10 = icmp eq i32 %9, 0
  %11 = sext i1 %10 to i64
  store i64 %11, i64* %3, align 8
  %12 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %15 = load i64, i64* %14, align 8
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 13
  %18 = tail call i32 @float64_lt(i64 noundef %13, i64 noundef %15, %struct.float_status* noundef nonnull %17)
  %19 = icmp eq i32 %18, 0
  %20 = sext i1 %19 to i64
  store i64 %20, i64* %12, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpnltsd(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float64_lt(i64 noundef %4, i64 noundef %6, %struct.float_status* noundef nonnull %8)
  %10 = icmp eq i32 %9, 0
  %11 = sext i1 %10 to i64
  store i64 %11, i64* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpnleps(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %7 = bitcast %union.XMMReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 13
  %11 = tail call i32 @float32_le(i32 noundef %5, i32 noundef %8, %struct.float_status* noundef nonnull %10)
  %12 = icmp eq i32 %11, 0
  %13 = sext i1 %12 to i32
  store i32 %13, i32* %4, align 8
  %14 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %17 = load i32, i32* %16, align 4
  %18 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %19 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 13
  %20 = tail call i32 @float32_le(i32 noundef %15, i32 noundef %17, %struct.float_status* noundef nonnull %19)
  %21 = icmp eq i32 %20, 0
  %22 = sext i1 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %24 = bitcast i64* %23 to i32*
  %25 = load i32, i32* %24, align 8
  %26 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %27 = bitcast i64* %26 to i32*
  %28 = load i32, i32* %27, align 8
  %29 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %30 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %29, i64 0, i32 13
  %31 = tail call i32 @float32_le(i32 noundef %25, i32 noundef %28, %struct.float_status* noundef nonnull %30)
  %32 = icmp eq i32 %31, 0
  %33 = sext i1 %32 to i32
  store i32 %33, i32* %24, align 8
  %34 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %37 = load i32, i32* %36, align 4
  %38 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %39 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %38, i64 0, i32 13
  %40 = tail call i32 @float32_le(i32 noundef %35, i32 noundef %37, %struct.float_status* noundef nonnull %39)
  %41 = icmp eq i32 %40, 0
  %42 = sext i1 %41 to i32
  store i32 %42, i32* %34, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpnless(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = bitcast %union.XMMReg* %1 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float32_le(i32 noundef %4, i32 noundef %6, %struct.float_status* noundef nonnull %8)
  %10 = icmp eq i32 %9, 0
  %11 = sext i1 %10 to i32
  store i32 %11, i32* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpnlepd(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float64_le(i64 noundef %4, i64 noundef %6, %struct.float_status* noundef nonnull %8)
  %10 = icmp eq i32 %9, 0
  %11 = sext i1 %10 to i64
  store i64 %11, i64* %3, align 8
  %12 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %15 = load i64, i64* %14, align 8
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 13
  %18 = tail call i32 @float64_le(i64 noundef %13, i64 noundef %15, %struct.float_status* noundef nonnull %17)
  %19 = icmp eq i32 %18, 0
  %20 = sext i1 %19 to i64
  store i64 %20, i64* %12, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpnlesd(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float64_le(i64 noundef %4, i64 noundef %6, %struct.float_status* noundef nonnull %8)
  %10 = icmp eq i32 %9, 0
  %11 = sext i1 %10 to i64
  store i64 %11, i64* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpordps(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %7 = bitcast %union.XMMReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 13
  %11 = tail call i32 @float32_unordered_quiet(i32 noundef %5, i32 noundef %8, %struct.float_status* noundef nonnull %10)
  %12 = icmp eq i32 %11, 0
  %13 = sext i1 %12 to i32
  store i32 %13, i32* %4, align 8
  %14 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %17 = load i32, i32* %16, align 4
  %18 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %19 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %18, i64 0, i32 13
  %20 = tail call i32 @float32_unordered_quiet(i32 noundef %15, i32 noundef %17, %struct.float_status* noundef nonnull %19)
  %21 = icmp eq i32 %20, 0
  %22 = sext i1 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %24 = bitcast i64* %23 to i32*
  %25 = load i32, i32* %24, align 8
  %26 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %27 = bitcast i64* %26 to i32*
  %28 = load i32, i32* %27, align 8
  %29 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %30 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %29, i64 0, i32 13
  %31 = tail call i32 @float32_unordered_quiet(i32 noundef %25, i32 noundef %28, %struct.float_status* noundef nonnull %30)
  %32 = icmp eq i32 %31, 0
  %33 = sext i1 %32 to i32
  store i32 %33, i32* %24, align 8
  %34 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %37 = load i32, i32* %36, align 4
  %38 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %39 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %38, i64 0, i32 13
  %40 = tail call i32 @float32_unordered_quiet(i32 noundef %35, i32 noundef %37, %struct.float_status* noundef nonnull %39)
  %41 = icmp eq i32 %40, 0
  %42 = sext i1 %41 to i32
  store i32 %42, i32* %34, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpordss(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = bitcast %union.XMMReg* %1 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float32_unordered_quiet(i32 noundef %4, i32 noundef %6, %struct.float_status* noundef nonnull %8)
  %10 = icmp eq i32 %9, 0
  %11 = sext i1 %10 to i32
  store i32 %11, i32* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpordpd(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float64_unordered_quiet(i64 noundef %4, i64 noundef %6, %struct.float_status* noundef nonnull %8)
  %10 = icmp eq i32 %9, 0
  %11 = sext i1 %10 to i64
  store i64 %11, i64* %3, align 8
  %12 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %15 = load i64, i64* %14, align 8
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 13
  %18 = tail call i32 @float64_unordered_quiet(i64 noundef %13, i64 noundef %15, %struct.float_status* noundef nonnull %17)
  %19 = icmp eq i32 %18, 0
  %20 = sext i1 %19 to i64
  store i64 %20, i64* %12, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_cmpordsd(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float64_unordered_quiet(i64 noundef %4, i64 noundef %6, %struct.float_status* noundef nonnull %8)
  %10 = icmp eq i32 %9, 0
  %11 = sext i1 %10 to i64
  store i64 %11, i64* %3, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_ucomiss(%union.XMMReg* nocapture noundef readonly %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = bitcast %union.XMMReg* %1 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float32_compare_quiet(i32 noundef %4, i32 noundef %6, %struct.float_status* noundef nonnull %8)
  %10 = add nsw i32 %9, 1
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds [4 x i32], [4 x i32]* @comis_eflags, i64 0, i64 %11
  %13 = load i32, i32* %12, align 4
  %14 = sext i32 %13 to i64
  %15 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 2
  store i64 %14, i64* %16, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_comiss(%union.XMMReg* nocapture noundef readonly %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = bitcast %union.XMMReg* %0 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = bitcast %union.XMMReg* %1 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float32_compare(i32 noundef %4, i32 noundef %6, %struct.float_status* noundef nonnull %8)
  %10 = add nsw i32 %9, 1
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds [4 x i32], [4 x i32]* @comis_eflags, i64 0, i64 %11
  %13 = load i32, i32* %12, align 4
  %14 = sext i32 %13 to i64
  %15 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 2
  store i64 %14, i64* %16, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_ucomisd(%union.XMMReg* nocapture noundef readonly %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float64_compare_quiet(i64 noundef %4, i64 noundef %6, %struct.float_status* noundef nonnull %8)
  %10 = add nsw i32 %9, 1
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds [4 x i32], [4 x i32]* @comis_eflags, i64 0, i64 %11
  %13 = load i32, i32* %12, align 4
  %14 = sext i32 %13 to i64
  %15 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 2
  store i64 %14, i64* %16, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_comisd(%union.XMMReg* nocapture noundef readonly %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %7, i64 0, i32 13
  %9 = tail call i32 @float64_compare(i64 noundef %4, i64 noundef %6, %struct.float_status* noundef nonnull %8)
  %10 = add nsw i32 %9, 1
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds [4 x i32], [4 x i32]* @comis_eflags, i64 0, i64 %11
  %13 = load i32, i32* %12, align 4
  %14 = sext i32 %13 to i64
  %15 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 2
  store i64 %14, i64* %16, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn
define i32 @helper_movmskps(%union.XMMReg* nocapture noundef readonly %0) local_unnamed_addr #0 {
  %2 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %3 = bitcast %union.XMMReg* %0 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = lshr i32 %4, 31
  %6 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %9 = bitcast i64* %8 to i32*
  %10 = load i32, i32* %9, align 8
  %11 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 3
  %12 = load i32, i32* %11, align 4
  %13 = lshr i32 %7, 30
  %14 = and i32 %13, 2
  %15 = or i32 %14, %5
  %16 = lshr i32 %10, 29
  %17 = and i32 %16, 4
  %18 = or i32 %15, %17
  %19 = lshr i32 %12, 28
  %20 = and i32 %19, 8
  %21 = or i32 %18, %20
  ret i32 %21
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn
define i32 @helper_movmskpd(%union.XMMReg* nocapture noundef readonly %0) local_unnamed_addr #0 {
  %2 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %3 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 1
  %4 = load i32, i32* %3, align 4
  %5 = lshr i32 %4, 31
  %6 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 3
  %7 = load i32, i32* %6, align 4
  %8 = lshr i32 %7, 30
  %9 = and i32 %8, 2
  %10 = or i32 %9, %5
  ret i32 %10
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn
define i32 @helper_pmovmskb_xmm(%union.XMMReg* nocapture noundef readonly %0) local_unnamed_addr #0 {
  %2 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %3 = bitcast %union.XMMReg* %0 to i8*
  %4 = load i8, i8* %3, align 8
  %5 = lshr i8 %4, 7
  %6 = getelementptr inbounds [16 x i8], [16 x i8]* %2, i64 0, i64 1
  %7 = load i8, i8* %6, align 1
  %8 = lshr i8 %7, 6
  %9 = and i8 %8, 2
  %10 = or i8 %9, %5
  %11 = getelementptr inbounds [16 x i8], [16 x i8]* %2, i64 0, i64 2
  %12 = load i8, i8* %11, align 2
  %13 = lshr i8 %12, 5
  %14 = and i8 %13, 4
  %15 = or i8 %10, %14
  %16 = getelementptr inbounds [16 x i8], [16 x i8]* %2, i64 0, i64 3
  %17 = load i8, i8* %16, align 1
  %18 = lshr i8 %17, 4
  %19 = and i8 %18, 8
  %20 = or i8 %15, %19
  %21 = getelementptr inbounds [16 x i8], [16 x i8]* %2, i64 0, i64 4
  %22 = load i8, i8* %21, align 4
  %23 = lshr i8 %22, 3
  %24 = and i8 %23, 16
  %25 = or i8 %20, %24
  %26 = getelementptr inbounds [16 x i8], [16 x i8]* %2, i64 0, i64 5
  %27 = load i8, i8* %26, align 1
  %28 = lshr i8 %27, 2
  %29 = and i8 %28, 32
  %30 = or i8 %25, %29
  %31 = getelementptr inbounds [16 x i8], [16 x i8]* %2, i64 0, i64 6
  %32 = load i8, i8* %31, align 2
  %33 = lshr i8 %32, 1
  %34 = and i8 %33, 64
  %35 = or i8 %30, %34
  %36 = getelementptr inbounds [16 x i8], [16 x i8]* %2, i64 0, i64 7
  %37 = load i8, i8* %36, align 1
  %38 = and i8 %37, -128
  %39 = or i8 %35, %38
  %40 = zext i8 %39 to i32
  %41 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %42 = bitcast i64* %41 to i8*
  %43 = load i8, i8* %42, align 8
  %44 = zext i8 %43 to i32
  %45 = shl nuw nsw i32 %44, 1
  %46 = and i32 %45, 256
  %47 = or i32 %46, %40
  %48 = getelementptr inbounds [16 x i8], [16 x i8]* %2, i64 0, i64 9
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = shl nuw nsw i32 %50, 2
  %52 = and i32 %51, 512
  %53 = or i32 %47, %52
  %54 = getelementptr inbounds [16 x i8], [16 x i8]* %2, i64 0, i64 10
  %55 = load i8, i8* %54, align 2
  %56 = zext i8 %55 to i32
  %57 = shl nuw nsw i32 %56, 3
  %58 = and i32 %57, 1024
  %59 = or i32 %53, %58
  %60 = getelementptr inbounds [16 x i8], [16 x i8]* %2, i64 0, i64 11
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i32
  %63 = shl nuw nsw i32 %62, 4
  %64 = and i32 %63, 2048
  %65 = or i32 %59, %64
  %66 = getelementptr inbounds [16 x i8], [16 x i8]* %2, i64 0, i64 12
  %67 = load i8, i8* %66, align 4
  %68 = zext i8 %67 to i32
  %69 = shl nuw nsw i32 %68, 5
  %70 = and i32 %69, 4096
  %71 = or i32 %65, %70
  %72 = getelementptr inbounds [16 x i8], [16 x i8]* %2, i64 0, i64 13
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %73 to i32
  %75 = shl nuw nsw i32 %74, 6
  %76 = and i32 %75, 8192
  %77 = or i32 %71, %76
  %78 = getelementptr inbounds [16 x i8], [16 x i8]* %2, i64 0, i64 14
  %79 = load i8, i8* %78, align 2
  %80 = zext i8 %79 to i32
  %81 = shl nuw nsw i32 %80, 7
  %82 = and i32 %81, 16384
  %83 = or i32 %77, %82
  %84 = getelementptr inbounds [16 x i8], [16 x i8]* %2, i64 0, i64 15
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i32
  %87 = shl nuw nsw i32 %86, 8
  %88 = and i32 %87, 32768
  %89 = or i32 %83, %88
  ret i32 %89
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_packsswb_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = sext i16 %5 to i32
  %7 = icmp slt i32 %6, 127
  %8 = select i1 %7, i32 %6, i32 127
  %9 = icmp sgt i32 %8, -128
  %10 = select i1 %9, i32 %8, i32 -128
  %11 = trunc i32 %10 to i8
  %12 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %13 = load i16, i16* %12, align 2
  %14 = sext i16 %13 to i32
  %15 = icmp slt i32 %14, 127
  %16 = select i1 %15, i32 %14, i32 127
  %17 = icmp sgt i32 %16, -128
  %18 = select i1 %17, i32 %16, i32 -128
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %21 = load i16, i16* %20, align 4
  %22 = sext i16 %21 to i32
  %23 = icmp slt i32 %22, 127
  %24 = select i1 %23, i32 %22, i32 127
  %25 = icmp sgt i32 %24, -128
  %26 = select i1 %25, i32 %24, i32 -128
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %29 = load i16, i16* %28, align 2
  %30 = sext i16 %29 to i32
  %31 = icmp slt i32 %30, 127
  %32 = select i1 %31, i32 %30, i32 127
  %33 = icmp sgt i32 %32, -128
  %34 = select i1 %33, i32 %32, i32 -128
  %35 = trunc i32 %34 to i8
  %36 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %37 = bitcast i64* %36 to i16*
  %38 = load i16, i16* %37, align 8
  %39 = sext i16 %38 to i32
  %40 = icmp slt i32 %39, 127
  %41 = select i1 %40, i32 %39, i32 127
  %42 = icmp sgt i32 %41, -128
  %43 = select i1 %42, i32 %41, i32 -128
  %44 = trunc i32 %43 to i8
  %45 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %46 = load i16, i16* %45, align 2
  %47 = sext i16 %46 to i32
  %48 = icmp slt i32 %47, 127
  %49 = select i1 %48, i32 %47, i32 127
  %50 = icmp sgt i32 %49, -128
  %51 = select i1 %50, i32 %49, i32 -128
  %52 = trunc i32 %51 to i8
  %53 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %54 = load i16, i16* %53, align 4
  %55 = sext i16 %54 to i32
  %56 = icmp slt i32 %55, 127
  %57 = select i1 %56, i32 %55, i32 127
  %58 = icmp sgt i32 %57, -128
  %59 = select i1 %58, i32 %57, i32 -128
  %60 = trunc i32 %59 to i8
  %61 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %62 = load i16, i16* %61, align 2
  %63 = sext i16 %62 to i32
  %64 = icmp slt i32 %63, 127
  %65 = select i1 %64, i32 %63, i32 127
  %66 = icmp sgt i32 %65, -128
  %67 = select i1 %66, i32 %65, i32 -128
  %68 = trunc i32 %67 to i8
  %69 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %70 = bitcast %union.XMMReg* %1 to i16*
  %71 = load i16, i16* %70, align 8
  %72 = sext i16 %71 to i32
  %73 = icmp slt i32 %72, 127
  %74 = select i1 %73, i32 %72, i32 127
  %75 = icmp sgt i32 %74, -128
  %76 = select i1 %75, i32 %74, i32 -128
  %77 = trunc i32 %76 to i8
  %78 = getelementptr inbounds [8 x i16], [8 x i16]* %69, i64 0, i64 1
  %79 = load i16, i16* %78, align 2
  %80 = sext i16 %79 to i32
  %81 = icmp slt i32 %80, 127
  %82 = select i1 %81, i32 %80, i32 127
  %83 = icmp sgt i32 %82, -128
  %84 = select i1 %83, i32 %82, i32 -128
  %85 = trunc i32 %84 to i8
  %86 = getelementptr inbounds [8 x i16], [8 x i16]* %69, i64 0, i64 2
  %87 = load i16, i16* %86, align 4
  %88 = sext i16 %87 to i32
  %89 = icmp slt i32 %88, 127
  %90 = select i1 %89, i32 %88, i32 127
  %91 = icmp sgt i32 %90, -128
  %92 = select i1 %91, i32 %90, i32 -128
  %93 = trunc i32 %92 to i8
  %94 = getelementptr inbounds [8 x i16], [8 x i16]* %69, i64 0, i64 3
  %95 = load i16, i16* %94, align 2
  %96 = sext i16 %95 to i32
  %97 = icmp slt i32 %96, 127
  %98 = select i1 %97, i32 %96, i32 127
  %99 = icmp sgt i32 %98, -128
  %100 = select i1 %99, i32 %98, i32 -128
  %101 = trunc i32 %100 to i8
  %102 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %103 = bitcast i64* %102 to i16*
  %104 = load i16, i16* %103, align 8
  %105 = sext i16 %104 to i32
  %106 = icmp slt i32 %105, 127
  %107 = select i1 %106, i32 %105, i32 127
  %108 = icmp sgt i32 %107, -128
  %109 = select i1 %108, i32 %107, i32 -128
  %110 = trunc i32 %109 to i8
  %111 = getelementptr inbounds [8 x i16], [8 x i16]* %69, i64 0, i64 5
  %112 = load i16, i16* %111, align 2
  %113 = sext i16 %112 to i32
  %114 = icmp slt i32 %113, 127
  %115 = select i1 %114, i32 %113, i32 127
  %116 = icmp sgt i32 %115, -128
  %117 = select i1 %116, i32 %115, i32 -128
  %118 = trunc i32 %117 to i8
  %119 = getelementptr inbounds [8 x i16], [8 x i16]* %69, i64 0, i64 6
  %120 = load i16, i16* %119, align 4
  %121 = sext i16 %120 to i32
  %122 = icmp slt i32 %121, 127
  %123 = select i1 %122, i32 %121, i32 127
  %124 = icmp sgt i32 %123, -128
  %125 = select i1 %124, i32 %123, i32 -128
  %126 = trunc i32 %125 to i8
  %127 = getelementptr inbounds [8 x i16], [8 x i16]* %69, i64 0, i64 7
  %128 = load i16, i16* %127, align 2
  %129 = sext i16 %128 to i32
  %130 = icmp slt i32 %129, 127
  %131 = select i1 %130, i32 %129, i32 127
  %132 = icmp sgt i32 %131, -128
  %133 = select i1 %132, i32 %131, i32 -128
  %134 = trunc i32 %133 to i8
  %135 = bitcast %union.XMMReg* %0 to i8*
  store i8 %11, i8* %135, align 8
  %136 = getelementptr inbounds i8, i8* %135, i64 1
  store i8 %19, i8* %136, align 1
  %137 = getelementptr inbounds i8, i8* %135, i64 2
  store i8 %27, i8* %137, align 2
  %138 = getelementptr inbounds i8, i8* %135, i64 3
  store i8 %35, i8* %138, align 1
  %139 = getelementptr inbounds i8, i8* %135, i64 4
  store i8 %44, i8* %139, align 4
  %140 = getelementptr inbounds i8, i8* %135, i64 5
  store i8 %52, i8* %140, align 1
  %141 = getelementptr inbounds i8, i8* %135, i64 6
  store i8 %60, i8* %141, align 2
  %142 = getelementptr inbounds i8, i8* %135, i64 7
  store i8 %68, i8* %142, align 1
  %143 = bitcast i64* %36 to i8*
  store i8 %77, i8* %143, align 8
  %144 = getelementptr inbounds i8, i8* %135, i64 9
  store i8 %85, i8* %144, align 1
  %145 = getelementptr inbounds i8, i8* %135, i64 10
  store i8 %93, i8* %145, align 2
  %146 = getelementptr inbounds i8, i8* %135, i64 11
  store i8 %101, i8* %146, align 1
  %147 = getelementptr inbounds i8, i8* %135, i64 12
  store i8 %110, i8* %147, align 4
  %148 = getelementptr inbounds i8, i8* %135, i64 13
  store i8 %118, i8* %148, align 1
  %149 = getelementptr inbounds i8, i8* %135, i64 14
  store i8 %126, i8* %149, align 2
  %150 = getelementptr inbounds i8, i8* %135, i64 15
  store i8 %134, i8* %150, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_packuswb_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = sext i16 %5 to i32
  %7 = icmp slt i32 %6, 255
  %8 = select i1 %7, i32 %6, i32 255
  %9 = icmp sgt i32 %8, 0
  %10 = select i1 %9, i32 %8, i32 0
  %11 = trunc i32 %10 to i8
  %12 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %13 = load i16, i16* %12, align 2
  %14 = sext i16 %13 to i32
  %15 = icmp slt i32 %14, 255
  %16 = select i1 %15, i32 %14, i32 255
  %17 = icmp sgt i32 %16, 0
  %18 = select i1 %17, i32 %16, i32 0
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %21 = load i16, i16* %20, align 4
  %22 = sext i16 %21 to i32
  %23 = icmp slt i32 %22, 255
  %24 = select i1 %23, i32 %22, i32 255
  %25 = icmp sgt i32 %24, 0
  %26 = select i1 %25, i32 %24, i32 0
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %29 = load i16, i16* %28, align 2
  %30 = sext i16 %29 to i32
  %31 = icmp slt i32 %30, 255
  %32 = select i1 %31, i32 %30, i32 255
  %33 = icmp sgt i32 %32, 0
  %34 = select i1 %33, i32 %32, i32 0
  %35 = trunc i32 %34 to i8
  %36 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %37 = bitcast i64* %36 to i16*
  %38 = load i16, i16* %37, align 8
  %39 = sext i16 %38 to i32
  %40 = icmp slt i32 %39, 255
  %41 = select i1 %40, i32 %39, i32 255
  %42 = icmp sgt i32 %41, 0
  %43 = select i1 %42, i32 %41, i32 0
  %44 = trunc i32 %43 to i8
  %45 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %46 = load i16, i16* %45, align 2
  %47 = sext i16 %46 to i32
  %48 = icmp slt i32 %47, 255
  %49 = select i1 %48, i32 %47, i32 255
  %50 = icmp sgt i32 %49, 0
  %51 = select i1 %50, i32 %49, i32 0
  %52 = trunc i32 %51 to i8
  %53 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %54 = load i16, i16* %53, align 4
  %55 = sext i16 %54 to i32
  %56 = icmp slt i32 %55, 255
  %57 = select i1 %56, i32 %55, i32 255
  %58 = icmp sgt i32 %57, 0
  %59 = select i1 %58, i32 %57, i32 0
  %60 = trunc i32 %59 to i8
  %61 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %62 = load i16, i16* %61, align 2
  %63 = sext i16 %62 to i32
  %64 = icmp slt i32 %63, 255
  %65 = select i1 %64, i32 %63, i32 255
  %66 = icmp sgt i32 %65, 0
  %67 = select i1 %66, i32 %65, i32 0
  %68 = trunc i32 %67 to i8
  %69 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %70 = bitcast %union.XMMReg* %1 to i16*
  %71 = load i16, i16* %70, align 8
  %72 = sext i16 %71 to i32
  %73 = icmp slt i32 %72, 255
  %74 = select i1 %73, i32 %72, i32 255
  %75 = icmp sgt i32 %74, 0
  %76 = select i1 %75, i32 %74, i32 0
  %77 = trunc i32 %76 to i8
  %78 = getelementptr inbounds [8 x i16], [8 x i16]* %69, i64 0, i64 1
  %79 = load i16, i16* %78, align 2
  %80 = sext i16 %79 to i32
  %81 = icmp slt i32 %80, 255
  %82 = select i1 %81, i32 %80, i32 255
  %83 = icmp sgt i32 %82, 0
  %84 = select i1 %83, i32 %82, i32 0
  %85 = trunc i32 %84 to i8
  %86 = getelementptr inbounds [8 x i16], [8 x i16]* %69, i64 0, i64 2
  %87 = load i16, i16* %86, align 4
  %88 = sext i16 %87 to i32
  %89 = icmp slt i32 %88, 255
  %90 = select i1 %89, i32 %88, i32 255
  %91 = icmp sgt i32 %90, 0
  %92 = select i1 %91, i32 %90, i32 0
  %93 = trunc i32 %92 to i8
  %94 = getelementptr inbounds [8 x i16], [8 x i16]* %69, i64 0, i64 3
  %95 = load i16, i16* %94, align 2
  %96 = sext i16 %95 to i32
  %97 = icmp slt i32 %96, 255
  %98 = select i1 %97, i32 %96, i32 255
  %99 = icmp sgt i32 %98, 0
  %100 = select i1 %99, i32 %98, i32 0
  %101 = trunc i32 %100 to i8
  %102 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %103 = bitcast i64* %102 to i16*
  %104 = load i16, i16* %103, align 8
  %105 = sext i16 %104 to i32
  %106 = icmp slt i32 %105, 255
  %107 = select i1 %106, i32 %105, i32 255
  %108 = icmp sgt i32 %107, 0
  %109 = select i1 %108, i32 %107, i32 0
  %110 = trunc i32 %109 to i8
  %111 = getelementptr inbounds [8 x i16], [8 x i16]* %69, i64 0, i64 5
  %112 = load i16, i16* %111, align 2
  %113 = sext i16 %112 to i32
  %114 = icmp slt i32 %113, 255
  %115 = select i1 %114, i32 %113, i32 255
  %116 = icmp sgt i32 %115, 0
  %117 = select i1 %116, i32 %115, i32 0
  %118 = trunc i32 %117 to i8
  %119 = getelementptr inbounds [8 x i16], [8 x i16]* %69, i64 0, i64 6
  %120 = load i16, i16* %119, align 4
  %121 = sext i16 %120 to i32
  %122 = icmp slt i32 %121, 255
  %123 = select i1 %122, i32 %121, i32 255
  %124 = icmp sgt i32 %123, 0
  %125 = select i1 %124, i32 %123, i32 0
  %126 = trunc i32 %125 to i8
  %127 = getelementptr inbounds [8 x i16], [8 x i16]* %69, i64 0, i64 7
  %128 = load i16, i16* %127, align 2
  %129 = sext i16 %128 to i32
  %130 = icmp slt i32 %129, 255
  %131 = select i1 %130, i32 %129, i32 255
  %132 = icmp sgt i32 %131, 0
  %133 = select i1 %132, i32 %131, i32 0
  %134 = trunc i32 %133 to i8
  %135 = bitcast %union.XMMReg* %0 to i8*
  store i8 %11, i8* %135, align 8
  %136 = getelementptr inbounds i8, i8* %135, i64 1
  store i8 %19, i8* %136, align 1
  %137 = getelementptr inbounds i8, i8* %135, i64 2
  store i8 %27, i8* %137, align 2
  %138 = getelementptr inbounds i8, i8* %135, i64 3
  store i8 %35, i8* %138, align 1
  %139 = getelementptr inbounds i8, i8* %135, i64 4
  store i8 %44, i8* %139, align 4
  %140 = getelementptr inbounds i8, i8* %135, i64 5
  store i8 %52, i8* %140, align 1
  %141 = getelementptr inbounds i8, i8* %135, i64 6
  store i8 %60, i8* %141, align 2
  %142 = getelementptr inbounds i8, i8* %135, i64 7
  store i8 %68, i8* %142, align 1
  %143 = bitcast i64* %36 to i8*
  store i8 %77, i8* %143, align 8
  %144 = getelementptr inbounds i8, i8* %135, i64 9
  store i8 %85, i8* %144, align 1
  %145 = getelementptr inbounds i8, i8* %135, i64 10
  store i8 %93, i8* %145, align 2
  %146 = getelementptr inbounds i8, i8* %135, i64 11
  store i8 %101, i8* %146, align 1
  %147 = getelementptr inbounds i8, i8* %135, i64 12
  store i8 %110, i8* %147, align 4
  %148 = getelementptr inbounds i8, i8* %135, i64 13
  store i8 %118, i8* %148, align 1
  %149 = getelementptr inbounds i8, i8* %135, i64 14
  store i8 %126, i8* %149, align 2
  %150 = getelementptr inbounds i8, i8* %135, i64 15
  store i8 %134, i8* %150, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_packssdw_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = icmp slt i32 %5, 32767
  %7 = select i1 %6, i32 %5, i32 32767
  %8 = icmp sgt i32 %7, -32768
  %9 = select i1 %8, i32 %7, i32 -32768
  %10 = trunc i32 %9 to i16
  %11 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = icmp slt i32 %12, 32767
  %14 = select i1 %13, i32 %12, i32 32767
  %15 = icmp sgt i32 %14, -32768
  %16 = select i1 %15, i32 %14, i32 -32768
  %17 = trunc i32 %16 to i16
  %18 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %19 = bitcast i64* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = icmp slt i32 %20, 32767
  %22 = select i1 %21, i32 %20, i32 32767
  %23 = icmp sgt i32 %22, -32768
  %24 = select i1 %23, i32 %22, i32 -32768
  %25 = trunc i32 %24 to i16
  %26 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %27 = load i32, i32* %26, align 4
  %28 = icmp slt i32 %27, 32767
  %29 = select i1 %28, i32 %27, i32 32767
  %30 = icmp sgt i32 %29, -32768
  %31 = select i1 %30, i32 %29, i32 -32768
  %32 = trunc i32 %31 to i16
  %33 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %34 = bitcast %union.XMMReg* %1 to i32*
  %35 = load i32, i32* %34, align 8
  %36 = icmp slt i32 %35, 32767
  %37 = select i1 %36, i32 %35, i32 32767
  %38 = icmp sgt i32 %37, -32768
  %39 = select i1 %38, i32 %37, i32 -32768
  %40 = trunc i32 %39 to i16
  %41 = getelementptr inbounds [4 x i32], [4 x i32]* %33, i64 0, i64 1
  %42 = load i32, i32* %41, align 4
  %43 = icmp slt i32 %42, 32767
  %44 = select i1 %43, i32 %42, i32 32767
  %45 = icmp sgt i32 %44, -32768
  %46 = select i1 %45, i32 %44, i32 -32768
  %47 = trunc i32 %46 to i16
  %48 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %49 = bitcast i64* %48 to i32*
  %50 = load i32, i32* %49, align 8
  %51 = icmp slt i32 %50, 32767
  %52 = select i1 %51, i32 %50, i32 32767
  %53 = icmp sgt i32 %52, -32768
  %54 = select i1 %53, i32 %52, i32 -32768
  %55 = trunc i32 %54 to i16
  %56 = getelementptr inbounds [4 x i32], [4 x i32]* %33, i64 0, i64 3
  %57 = load i32, i32* %56, align 4
  %58 = icmp slt i32 %57, 32767
  %59 = select i1 %58, i32 %57, i32 32767
  %60 = icmp sgt i32 %59, -32768
  %61 = select i1 %60, i32 %59, i32 -32768
  %62 = trunc i32 %61 to i16
  %63 = bitcast %union.XMMReg* %0 to i8*
  %64 = bitcast %union.XMMReg* %0 to i16*
  store i16 %10, i16* %64, align 8
  %65 = getelementptr inbounds i8, i8* %63, i64 2
  %66 = bitcast i8* %65 to i16*
  store i16 %17, i16* %66, align 2
  %67 = getelementptr inbounds i8, i8* %63, i64 4
  %68 = bitcast i8* %67 to i16*
  store i16 %25, i16* %68, align 4
  %69 = getelementptr inbounds i8, i8* %63, i64 6
  %70 = bitcast i8* %69 to i16*
  store i16 %32, i16* %70, align 2
  %71 = bitcast i64* %18 to i16*
  store i16 %40, i16* %71, align 8
  %72 = getelementptr inbounds i8, i8* %63, i64 10
  %73 = bitcast i8* %72 to i16*
  store i16 %47, i16* %73, align 2
  %74 = getelementptr inbounds i8, i8* %63, i64 12
  %75 = bitcast i8* %74 to i16*
  store i16 %55, i16* %75, align 4
  %76 = getelementptr inbounds i8, i8* %63, i64 14
  %77 = bitcast i8* %76 to i16*
  store i16 %62, i16* %77, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_punpcklbw_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %4 = bitcast %union.XMMReg* %0 to i8*
  %5 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %6 = bitcast %union.XMMReg* %1 to i8*
  %7 = load i8, i8* %6, align 8
  %8 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 1
  %9 = load i8, i8* %8, align 1
  %10 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 1
  %11 = load i8, i8* %10, align 1
  %12 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 2
  %13 = load i8, i8* %12, align 2
  %14 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 2
  %15 = load i8, i8* %14, align 2
  %16 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 3
  %17 = load i8, i8* %16, align 1
  %18 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 3
  %19 = load i8, i8* %18, align 1
  %20 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 4
  %21 = load i8, i8* %20, align 4
  %22 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 4
  %23 = load i8, i8* %22, align 4
  %24 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 5
  %25 = load i8, i8* %24, align 1
  %26 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 5
  %27 = load i8, i8* %26, align 1
  %28 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 6
  %29 = load i8, i8* %28, align 2
  %30 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 6
  %31 = load i8, i8* %30, align 2
  %32 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 7
  %33 = load i8, i8* %32, align 1
  %34 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 7
  %35 = load i8, i8* %34, align 1
  %36 = getelementptr inbounds i8, i8* %4, i64 1
  store i8 %7, i8* %36, align 1
  %37 = getelementptr inbounds i8, i8* %4, i64 2
  store i8 %9, i8* %37, align 2
  %38 = getelementptr inbounds i8, i8* %4, i64 3
  store i8 %11, i8* %38, align 1
  %39 = getelementptr inbounds i8, i8* %4, i64 4
  store i8 %13, i8* %39, align 4
  %40 = getelementptr inbounds i8, i8* %4, i64 5
  store i8 %15, i8* %40, align 1
  %41 = getelementptr inbounds i8, i8* %4, i64 6
  store i8 %17, i8* %41, align 2
  %42 = getelementptr inbounds i8, i8* %4, i64 7
  store i8 %19, i8* %42, align 1
  %43 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %44 = bitcast i64* %43 to i8*
  store i8 %21, i8* %44, align 8
  %45 = getelementptr inbounds i8, i8* %4, i64 9
  store i8 %23, i8* %45, align 1
  %46 = getelementptr inbounds i8, i8* %4, i64 10
  store i8 %25, i8* %46, align 2
  %47 = getelementptr inbounds i8, i8* %4, i64 11
  store i8 %27, i8* %47, align 1
  %48 = getelementptr inbounds i8, i8* %4, i64 12
  store i8 %29, i8* %48, align 4
  %49 = getelementptr inbounds i8, i8* %4, i64 13
  store i8 %31, i8* %49, align 1
  %50 = getelementptr inbounds i8, i8* %4, i64 14
  store i8 %33, i8* %50, align 2
  %51 = getelementptr inbounds i8, i8* %4, i64 15
  store i8 %35, i8* %51, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_punpcklwd_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %5 = bitcast %union.XMMReg* %1 to i16*
  %6 = load i16, i16* %5, align 8
  %7 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %8 = load i16, i16* %7, align 2
  %9 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 0, i64 1
  %10 = load i16, i16* %9, align 2
  %11 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %12 = load i16, i16* %11, align 4
  %13 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 0, i64 2
  %14 = load i16, i16* %13, align 4
  %15 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %16 = load i16, i16* %15, align 2
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 0, i64 3
  %18 = load i16, i16* %17, align 2
  %19 = bitcast %union.XMMReg* %0 to i8*
  %20 = getelementptr inbounds i8, i8* %19, i64 2
  %21 = bitcast i8* %20 to i16*
  store i16 %6, i16* %21, align 2
  %22 = getelementptr inbounds i8, i8* %19, i64 4
  %23 = bitcast i8* %22 to i16*
  store i16 %8, i16* %23, align 4
  %24 = getelementptr inbounds i8, i8* %19, i64 6
  %25 = bitcast i8* %24 to i16*
  store i16 %10, i16* %25, align 2
  %26 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %27 = bitcast i64* %26 to i16*
  store i16 %12, i16* %27, align 8
  %28 = getelementptr inbounds i8, i8* %19, i64 10
  %29 = bitcast i8* %28 to i16*
  store i16 %14, i16* %29, align 2
  %30 = getelementptr inbounds i8, i8* %19, i64 12
  %31 = bitcast i8* %30 to i16*
  store i16 %16, i16* %31, align 4
  %32 = getelementptr inbounds i8, i8* %19, i64 14
  %33 = bitcast i8* %32 to i16*
  store i16 %18, i16* %33, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_punpckldq_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %5 = bitcast %union.XMMReg* %1 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 1
  %10 = load i32, i32* %9, align 4
  %11 = bitcast %union.XMMReg* %0 to i8*
  %12 = getelementptr inbounds i8, i8* %11, i64 4
  %13 = bitcast i8* %12 to i32*
  store i32 %6, i32* %13, align 4
  %14 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %15 = bitcast i64* %14 to i32*
  store i32 %8, i32* %15, align 8
  %16 = getelementptr inbounds i8, i8* %11, i64 12
  %17 = bitcast i8* %16 to i32*
  store i32 %10, i32* %17, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_punpcklqdq_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  store i64 %4, i64* %5, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_punpckhbw_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %4 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %5 = bitcast i64* %4 to i8*
  %6 = load i8, i8* %5, align 8
  %7 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %8 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %9 = bitcast i64* %8 to i8*
  %10 = load i8, i8* %9, align 8
  %11 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 9
  %12 = load i8, i8* %11, align 1
  %13 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 9
  %14 = load i8, i8* %13, align 1
  %15 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 10
  %16 = load i8, i8* %15, align 2
  %17 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 10
  %18 = load i8, i8* %17, align 2
  %19 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 11
  %20 = load i8, i8* %19, align 1
  %21 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 11
  %22 = load i8, i8* %21, align 1
  %23 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 12
  %24 = load i8, i8* %23, align 4
  %25 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 12
  %26 = load i8, i8* %25, align 4
  %27 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 13
  %28 = load i8, i8* %27, align 1
  %29 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 13
  %30 = load i8, i8* %29, align 1
  %31 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 14
  %32 = load i8, i8* %31, align 2
  %33 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 14
  %34 = load i8, i8* %33, align 2
  %35 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 15
  %36 = load i8, i8* %35, align 1
  %37 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 15
  %38 = load i8, i8* %37, align 1
  %39 = bitcast %union.XMMReg* %0 to i8*
  store i8 %6, i8* %39, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 1
  store i8 %10, i8* %40, align 1
  %41 = getelementptr inbounds i8, i8* %39, i64 2
  store i8 %12, i8* %41, align 2
  %42 = getelementptr inbounds i8, i8* %39, i64 3
  store i8 %14, i8* %42, align 1
  %43 = getelementptr inbounds i8, i8* %39, i64 4
  store i8 %16, i8* %43, align 4
  %44 = getelementptr inbounds i8, i8* %39, i64 5
  store i8 %18, i8* %44, align 1
  %45 = getelementptr inbounds i8, i8* %39, i64 6
  store i8 %20, i8* %45, align 2
  %46 = getelementptr inbounds i8, i8* %39, i64 7
  store i8 %22, i8* %46, align 1
  store i8 %24, i8* %5, align 8
  %47 = getelementptr inbounds i8, i8* %39, i64 9
  store i8 %26, i8* %47, align 1
  %48 = getelementptr inbounds i8, i8* %39, i64 10
  store i8 %28, i8* %48, align 2
  %49 = getelementptr inbounds i8, i8* %39, i64 11
  store i8 %30, i8* %49, align 1
  %50 = getelementptr inbounds i8, i8* %39, i64 12
  store i8 %32, i8* %50, align 4
  %51 = getelementptr inbounds i8, i8* %39, i64 13
  store i8 %34, i8* %51, align 1
  %52 = getelementptr inbounds i8, i8* %39, i64 14
  store i8 %36, i8* %52, align 2
  %53 = getelementptr inbounds i8, i8* %39, i64 15
  store i8 %38, i8* %53, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_punpckhwd_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %4 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %5 = bitcast i64* %4 to i16*
  %6 = load i16, i16* %5, align 8
  %7 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %8 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %9 = bitcast i64* %8 to i16*
  %10 = load i16, i16* %9, align 8
  %11 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %12 = load i16, i16* %11, align 2
  %13 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 5
  %14 = load i16, i16* %13, align 2
  %15 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %16 = load i16, i16* %15, align 4
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 6
  %18 = load i16, i16* %17, align 4
  %19 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %20 = load i16, i16* %19, align 2
  %21 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 7
  %22 = load i16, i16* %21, align 2
  %23 = bitcast %union.XMMReg* %0 to i8*
  %24 = bitcast %union.XMMReg* %0 to i16*
  store i16 %6, i16* %24, align 8
  %25 = getelementptr inbounds i8, i8* %23, i64 2
  %26 = bitcast i8* %25 to i16*
  store i16 %10, i16* %26, align 2
  %27 = getelementptr inbounds i8, i8* %23, i64 4
  %28 = bitcast i8* %27 to i16*
  store i16 %12, i16* %28, align 4
  %29 = getelementptr inbounds i8, i8* %23, i64 6
  %30 = bitcast i8* %29 to i16*
  store i16 %14, i16* %30, align 2
  store i16 %16, i16* %5, align 8
  %31 = getelementptr inbounds i8, i8* %23, i64 10
  %32 = bitcast i8* %31 to i16*
  store i16 %18, i16* %32, align 2
  %33 = getelementptr inbounds i8, i8* %23, i64 12
  %34 = bitcast i8* %33 to i16*
  store i16 %20, i16* %34, align 4
  %35 = getelementptr inbounds i8, i8* %23, i64 14
  %36 = bitcast i8* %35 to i16*
  store i16 %22, i16* %36, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_punpckhdq_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %5 = bitcast i64* %4 to i32*
  %6 = load i32, i32* %5, align 8
  %7 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %8 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %9 = bitcast i64* %8 to i32*
  %10 = load i32, i32* %9, align 8
  %11 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 3
  %14 = load i32, i32* %13, align 4
  %15 = bitcast %union.XMMReg* %0 to i8*
  %16 = bitcast %union.XMMReg* %0 to i32*
  store i32 %6, i32* %16, align 8
  %17 = getelementptr inbounds i8, i8* %15, i64 4
  %18 = bitcast i8* %17 to i32*
  store i32 %10, i32* %18, align 4
  store i32 %12, i32* %5, align 8
  %19 = getelementptr inbounds i8, i8* %15, i64 12
  %20 = bitcast i8* %19 to i32*
  store i32 %14, i32* %20, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_punpckhqdq_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %4, i64* %7, align 8
  store i64 %6, i64* %3, align 8
  ret void
}

; Function Attrs: nofree nosync nounwind uwtable
define void @helper_pshufb_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #20 {
  %3 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %4 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %5 = bitcast %union.XMMReg* %1 to i8*
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = and i32 %7, 128
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %15

10:                                               ; preds = %2
  %11 = and i32 %7, 15
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 %12
  %14 = load i8, i8* %13, align 1
  br label %15

15:                                               ; preds = %2, %10
  %16 = phi i8 [ %14, %10 ], [ 0, %2 ]
  %17 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 1
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = and i32 %19, 128
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %27

22:                                               ; preds = %15
  %23 = and i32 %19, 15
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 %24
  %26 = load i8, i8* %25, align 1
  br label %27

27:                                               ; preds = %22, %15
  %28 = phi i8 [ %26, %22 ], [ 0, %15 ]
  %29 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 2
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = and i32 %31, 128
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %39

34:                                               ; preds = %27
  %35 = and i32 %31, 15
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 %36
  %38 = load i8, i8* %37, align 1
  br label %39

39:                                               ; preds = %34, %27
  %40 = phi i8 [ %38, %34 ], [ 0, %27 ]
  %41 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 3
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = and i32 %43, 128
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %51

46:                                               ; preds = %39
  %47 = and i32 %43, 15
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 %48
  %50 = load i8, i8* %49, align 1
  br label %51

51:                                               ; preds = %46, %39
  %52 = phi i8 [ %50, %46 ], [ 0, %39 ]
  %53 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 4
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i32
  %56 = and i32 %55, 128
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %63

58:                                               ; preds = %51
  %59 = and i32 %55, 15
  %60 = zext i32 %59 to i64
  %61 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 %60
  %62 = load i8, i8* %61, align 1
  br label %63

63:                                               ; preds = %58, %51
  %64 = phi i8 [ %62, %58 ], [ 0, %51 ]
  %65 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 5
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = and i32 %67, 128
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %75

70:                                               ; preds = %63
  %71 = and i32 %67, 15
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 %72
  %74 = load i8, i8* %73, align 1
  br label %75

75:                                               ; preds = %70, %63
  %76 = phi i8 [ %74, %70 ], [ 0, %63 ]
  %77 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 6
  %78 = load i8, i8* %77, align 1
  %79 = zext i8 %78 to i32
  %80 = and i32 %79, 128
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %87

82:                                               ; preds = %75
  %83 = and i32 %79, 15
  %84 = zext i32 %83 to i64
  %85 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 %84
  %86 = load i8, i8* %85, align 1
  br label %87

87:                                               ; preds = %82, %75
  %88 = phi i8 [ %86, %82 ], [ 0, %75 ]
  %89 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 7
  %90 = load i8, i8* %89, align 1
  %91 = zext i8 %90 to i32
  %92 = and i32 %91, 128
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %94, label %99

94:                                               ; preds = %87
  %95 = and i32 %91, 15
  %96 = zext i32 %95 to i64
  %97 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 %96
  %98 = load i8, i8* %97, align 1
  br label %99

99:                                               ; preds = %94, %87
  %100 = phi i8 [ %98, %94 ], [ 0, %87 ]
  %101 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %102 = bitcast i64* %101 to i8*
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i32
  %105 = and i32 %104, 128
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %107, label %112

107:                                              ; preds = %99
  %108 = and i32 %104, 15
  %109 = zext i32 %108 to i64
  %110 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 %109
  %111 = load i8, i8* %110, align 1
  br label %112

112:                                              ; preds = %107, %99
  %113 = phi i8 [ %111, %107 ], [ 0, %99 ]
  %114 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 9
  %115 = load i8, i8* %114, align 1
  %116 = zext i8 %115 to i32
  %117 = and i32 %116, 128
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %119, label %124

119:                                              ; preds = %112
  %120 = and i32 %116, 15
  %121 = zext i32 %120 to i64
  %122 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 %121
  %123 = load i8, i8* %122, align 1
  br label %124

124:                                              ; preds = %119, %112
  %125 = phi i8 [ %123, %119 ], [ 0, %112 ]
  %126 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 10
  %127 = load i8, i8* %126, align 1
  %128 = zext i8 %127 to i32
  %129 = and i32 %128, 128
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %131, label %136

131:                                              ; preds = %124
  %132 = and i32 %128, 15
  %133 = zext i32 %132 to i64
  %134 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 %133
  %135 = load i8, i8* %134, align 1
  br label %136

136:                                              ; preds = %131, %124
  %137 = phi i8 [ %135, %131 ], [ 0, %124 ]
  %138 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 11
  %139 = load i8, i8* %138, align 1
  %140 = zext i8 %139 to i32
  %141 = and i32 %140, 128
  %142 = icmp eq i32 %141, 0
  br i1 %142, label %143, label %148

143:                                              ; preds = %136
  %144 = and i32 %140, 15
  %145 = zext i32 %144 to i64
  %146 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 %145
  %147 = load i8, i8* %146, align 1
  br label %148

148:                                              ; preds = %143, %136
  %149 = phi i8 [ %147, %143 ], [ 0, %136 ]
  %150 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 12
  %151 = load i8, i8* %150, align 1
  %152 = zext i8 %151 to i32
  %153 = and i32 %152, 128
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %155, label %160

155:                                              ; preds = %148
  %156 = and i32 %152, 15
  %157 = zext i32 %156 to i64
  %158 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 %157
  %159 = load i8, i8* %158, align 1
  br label %160

160:                                              ; preds = %155, %148
  %161 = phi i8 [ %159, %155 ], [ 0, %148 ]
  %162 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 13
  %163 = load i8, i8* %162, align 1
  %164 = zext i8 %163 to i32
  %165 = and i32 %164, 128
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %167, label %172

167:                                              ; preds = %160
  %168 = and i32 %164, 15
  %169 = zext i32 %168 to i64
  %170 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 %169
  %171 = load i8, i8* %170, align 1
  br label %172

172:                                              ; preds = %167, %160
  %173 = phi i8 [ %171, %167 ], [ 0, %160 ]
  %174 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 14
  %175 = load i8, i8* %174, align 1
  %176 = zext i8 %175 to i32
  %177 = and i32 %176, 128
  %178 = icmp eq i32 %177, 0
  br i1 %178, label %179, label %184

179:                                              ; preds = %172
  %180 = and i32 %176, 15
  %181 = zext i32 %180 to i64
  %182 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 %181
  %183 = load i8, i8* %182, align 1
  br label %184

184:                                              ; preds = %179, %172
  %185 = phi i8 [ %183, %179 ], [ 0, %172 ]
  %186 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 15
  %187 = load i8, i8* %186, align 1
  %188 = zext i8 %187 to i32
  %189 = and i32 %188, 128
  %190 = icmp eq i32 %189, 0
  br i1 %190, label %191, label %196

191:                                              ; preds = %184
  %192 = and i32 %188, 15
  %193 = zext i32 %192 to i64
  %194 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 %193
  %195 = load i8, i8* %194, align 1
  br label %196

196:                                              ; preds = %191, %184
  %197 = phi i8 [ %195, %191 ], [ 0, %184 ]
  %198 = bitcast %union.XMMReg* %0 to i8*
  store i8 %16, i8* %198, align 8
  %199 = getelementptr inbounds i8, i8* %198, i64 1
  store i8 %28, i8* %199, align 1
  %200 = getelementptr inbounds i8, i8* %198, i64 2
  store i8 %40, i8* %200, align 2
  %201 = getelementptr inbounds i8, i8* %198, i64 3
  store i8 %52, i8* %201, align 1
  %202 = getelementptr inbounds i8, i8* %198, i64 4
  store i8 %64, i8* %202, align 4
  %203 = getelementptr inbounds i8, i8* %198, i64 5
  store i8 %76, i8* %203, align 1
  %204 = getelementptr inbounds i8, i8* %198, i64 6
  store i8 %88, i8* %204, align 2
  %205 = getelementptr inbounds i8, i8* %198, i64 7
  store i8 %100, i8* %205, align 1
  %206 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %207 = bitcast i64* %206 to i8*
  store i8 %113, i8* %207, align 8
  %208 = getelementptr inbounds i8, i8* %198, i64 9
  store i8 %125, i8* %208, align 1
  %209 = getelementptr inbounds i8, i8* %198, i64 10
  store i8 %137, i8* %209, align 2
  %210 = getelementptr inbounds i8, i8* %198, i64 11
  store i8 %149, i8* %210, align 1
  %211 = getelementptr inbounds i8, i8* %198, i64 12
  store i8 %161, i8* %211, align 4
  %212 = getelementptr inbounds i8, i8* %198, i64 13
  store i8 %173, i8* %212, align 1
  %213 = getelementptr inbounds i8, i8* %198, i64 14
  store i8 %185, i8* %213, align 2
  %214 = getelementptr inbounds i8, i8* %198, i64 15
  store i8 %197, i8* %214, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_phaddw_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %7 = load i16, i16* %6, align 2
  %8 = add i16 %7, %5
  store i16 %8, i16* %4, align 8
  %9 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %10 = load i16, i16* %9, align 4
  %11 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %12 = load i16, i16* %11, align 2
  %13 = add i16 %12, %10
  store i16 %13, i16* %6, align 2
  %14 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %15 = bitcast i64* %14 to i16*
  %16 = load i16, i16* %15, align 8
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %18 = load i16, i16* %17, align 2
  %19 = add i16 %18, %16
  store i16 %19, i16* %9, align 4
  %20 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %21 = load i16, i16* %20, align 4
  %22 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %23 = load i16, i16* %22, align 2
  %24 = add i16 %23, %21
  store i16 %24, i16* %11, align 2
  %25 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %26 = bitcast %union.XMMReg* %1 to i16*
  %27 = load i16, i16* %26, align 8
  %28 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 1
  %29 = load i16, i16* %28, align 2
  %30 = add i16 %29, %27
  store i16 %30, i16* %15, align 8
  %31 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 2
  %32 = load i16, i16* %31, align 4
  %33 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 3
  %34 = load i16, i16* %33, align 2
  %35 = add i16 %34, %32
  store i16 %35, i16* %17, align 2
  %36 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %37 = bitcast i64* %36 to i16*
  %38 = load i16, i16* %37, align 8
  %39 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 5
  %40 = load i16, i16* %39, align 2
  %41 = add i16 %40, %38
  store i16 %41, i16* %20, align 4
  %42 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 6
  %43 = load i16, i16* %42, align 4
  %44 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 7
  %45 = load i16, i16* %44, align 2
  %46 = add i16 %45, %43
  store i16 %46, i16* %22, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_phaddd_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = add nsw i32 %7, %5
  store i32 %8, i32* %4, align 8
  %9 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %10 = bitcast i64* %9 to i32*
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = add nsw i32 %13, %11
  store i32 %14, i32* %6, align 4
  %15 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %16 = bitcast %union.XMMReg* %1 to i32*
  %17 = load i32, i32* %16, align 8
  %18 = getelementptr inbounds [4 x i32], [4 x i32]* %15, i64 0, i64 1
  %19 = load i32, i32* %18, align 4
  %20 = add nsw i32 %19, %17
  store i32 %20, i32* %10, align 8
  %21 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %22 = bitcast i64* %21 to i32*
  %23 = load i32, i32* %22, align 8
  %24 = getelementptr inbounds [4 x i32], [4 x i32]* %15, i64 0, i64 3
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, %23
  store i32 %26, i32* %12, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_phaddsw_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %7 = load i16, i16* %6, align 2
  %8 = add i16 %5, %7
  %9 = icmp slt i16 %5, 0
  %10 = icmp slt i16 %7, 0
  %11 = icmp slt i16 %8, 0
  %12 = select i1 %10, i16 -32768, i16 32767
  %13 = xor i1 %9, %11
  %14 = xor i1 %9, %10
  %15 = xor i1 %14, true
  %16 = and i1 %13, %15
  %17 = select i1 %16, i16 %12, i16 %8
  store i16 %17, i16* %4, align 8
  %18 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %19 = load i16, i16* %18, align 4
  %20 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %21 = load i16, i16* %20, align 2
  %22 = add i16 %19, %21
  %23 = icmp slt i16 %19, 0
  %24 = icmp slt i16 %21, 0
  %25 = icmp slt i16 %22, 0
  %26 = select i1 %24, i16 -32768, i16 32767
  %27 = xor i1 %23, %25
  %28 = xor i1 %23, %24
  %29 = xor i1 %28, true
  %30 = and i1 %27, %29
  %31 = select i1 %30, i16 %26, i16 %22
  store i16 %31, i16* %6, align 2
  %32 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %33 = bitcast i64* %32 to i16*
  %34 = load i16, i16* %33, align 8
  %35 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %36 = load i16, i16* %35, align 2
  %37 = add i16 %34, %36
  %38 = icmp slt i16 %34, 0
  %39 = icmp slt i16 %36, 0
  %40 = icmp slt i16 %37, 0
  %41 = select i1 %39, i16 -32768, i16 32767
  %42 = xor i1 %38, %40
  %43 = xor i1 %38, %39
  %44 = xor i1 %43, true
  %45 = and i1 %42, %44
  %46 = select i1 %45, i16 %41, i16 %37
  store i16 %46, i16* %18, align 4
  %47 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %48 = load i16, i16* %47, align 4
  %49 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %50 = load i16, i16* %49, align 2
  %51 = add i16 %48, %50
  %52 = icmp slt i16 %48, 0
  %53 = icmp slt i16 %50, 0
  %54 = icmp slt i16 %51, 0
  %55 = select i1 %53, i16 -32768, i16 32767
  %56 = xor i1 %52, %54
  %57 = xor i1 %52, %53
  %58 = xor i1 %57, true
  %59 = and i1 %56, %58
  %60 = select i1 %59, i16 %55, i16 %51
  store i16 %60, i16* %20, align 2
  %61 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %62 = bitcast %union.XMMReg* %1 to i16*
  %63 = load i16, i16* %62, align 8
  %64 = getelementptr inbounds [8 x i16], [8 x i16]* %61, i64 0, i64 1
  %65 = load i16, i16* %64, align 2
  %66 = add i16 %63, %65
  %67 = icmp slt i16 %63, 0
  %68 = icmp slt i16 %65, 0
  %69 = icmp slt i16 %66, 0
  %70 = select i1 %68, i16 -32768, i16 32767
  %71 = xor i1 %67, %69
  %72 = xor i1 %67, %68
  %73 = xor i1 %72, true
  %74 = and i1 %71, %73
  %75 = select i1 %74, i16 %70, i16 %66
  store i16 %75, i16* %33, align 8
  %76 = getelementptr inbounds [8 x i16], [8 x i16]* %61, i64 0, i64 2
  %77 = load i16, i16* %76, align 4
  %78 = getelementptr inbounds [8 x i16], [8 x i16]* %61, i64 0, i64 3
  %79 = load i16, i16* %78, align 2
  %80 = add i16 %77, %79
  %81 = icmp slt i16 %77, 0
  %82 = icmp slt i16 %79, 0
  %83 = icmp slt i16 %80, 0
  %84 = select i1 %82, i16 -32768, i16 32767
  %85 = xor i1 %81, %83
  %86 = xor i1 %81, %82
  %87 = xor i1 %86, true
  %88 = and i1 %85, %87
  %89 = select i1 %88, i16 %84, i16 %80
  store i16 %89, i16* %35, align 2
  %90 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %91 = bitcast i64* %90 to i16*
  %92 = load i16, i16* %91, align 8
  %93 = getelementptr inbounds [8 x i16], [8 x i16]* %61, i64 0, i64 5
  %94 = load i16, i16* %93, align 2
  %95 = add i16 %92, %94
  %96 = icmp slt i16 %92, 0
  %97 = icmp slt i16 %94, 0
  %98 = icmp slt i16 %95, 0
  %99 = select i1 %97, i16 -32768, i16 32767
  %100 = xor i1 %96, %98
  %101 = xor i1 %96, %97
  %102 = xor i1 %101, true
  %103 = and i1 %100, %102
  %104 = select i1 %103, i16 %99, i16 %95
  store i16 %104, i16* %47, align 4
  %105 = getelementptr inbounds [8 x i16], [8 x i16]* %61, i64 0, i64 6
  %106 = load i16, i16* %105, align 4
  %107 = getelementptr inbounds [8 x i16], [8 x i16]* %61, i64 0, i64 7
  %108 = load i16, i16* %107, align 2
  %109 = add i16 %106, %108
  %110 = icmp slt i16 %106, 0
  %111 = icmp slt i16 %108, 0
  %112 = icmp slt i16 %109, 0
  %113 = select i1 %111, i16 -32768, i16 32767
  %114 = xor i1 %110, %112
  %115 = xor i1 %110, %111
  %116 = xor i1 %115, true
  %117 = and i1 %114, %116
  %118 = select i1 %117, i16 %113, i16 %109
  store i16 %118, i16* %49, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pmaddubsw_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %4 = bitcast %union.XMMReg* %1 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = sext i8 %5 to i32
  %7 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %8 = bitcast %union.XMMReg* %0 to i8*
  %9 = load i8, i8* %8, align 8
  %10 = zext i8 %9 to i32
  %11 = mul nsw i32 %10, %6
  %12 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 1
  %13 = load i8, i8* %12, align 1
  %14 = sext i8 %13 to i32
  %15 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 1
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = mul nsw i32 %17, %14
  %19 = add nsw i32 %18, %11
  %20 = icmp slt i32 %19, 32767
  %21 = select i1 %20, i32 %19, i32 32767
  %22 = icmp sgt i32 %21, -32768
  %23 = select i1 %22, i32 %21, i32 -32768
  %24 = trunc i32 %23 to i16
  %25 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %26 = bitcast %union.XMMReg* %0 to i16*
  store i16 %24, i16* %26, align 8
  %27 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 2
  %28 = load i8, i8* %27, align 2
  %29 = sext i8 %28 to i32
  %30 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 2
  %31 = load i8, i8* %30, align 2
  %32 = zext i8 %31 to i32
  %33 = mul nsw i32 %32, %29
  %34 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 3
  %35 = load i8, i8* %34, align 1
  %36 = sext i8 %35 to i32
  %37 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 3
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i32
  %40 = mul nsw i32 %39, %36
  %41 = add nsw i32 %40, %33
  %42 = icmp slt i32 %41, 32767
  %43 = select i1 %42, i32 %41, i32 32767
  %44 = icmp sgt i32 %43, -32768
  %45 = select i1 %44, i32 %43, i32 -32768
  %46 = trunc i32 %45 to i16
  %47 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 1
  store i16 %46, i16* %47, align 2
  %48 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 4
  %49 = load i8, i8* %48, align 4
  %50 = sext i8 %49 to i32
  %51 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 4
  %52 = load i8, i8* %51, align 4
  %53 = zext i8 %52 to i32
  %54 = mul nsw i32 %53, %50
  %55 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 5
  %56 = load i8, i8* %55, align 1
  %57 = sext i8 %56 to i32
  %58 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 5
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i32
  %61 = mul nsw i32 %60, %57
  %62 = add nsw i32 %61, %54
  %63 = icmp slt i32 %62, 32767
  %64 = select i1 %63, i32 %62, i32 32767
  %65 = icmp sgt i32 %64, -32768
  %66 = select i1 %65, i32 %64, i32 -32768
  %67 = trunc i32 %66 to i16
  %68 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 2
  store i16 %67, i16* %68, align 4
  %69 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 6
  %70 = load i8, i8* %69, align 2
  %71 = sext i8 %70 to i32
  %72 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 6
  %73 = load i8, i8* %72, align 2
  %74 = zext i8 %73 to i32
  %75 = mul nsw i32 %74, %71
  %76 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 7
  %77 = load i8, i8* %76, align 1
  %78 = sext i8 %77 to i32
  %79 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 7
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i32
  %82 = mul nsw i32 %81, %78
  %83 = add nsw i32 %82, %75
  %84 = icmp slt i32 %83, 32767
  %85 = select i1 %84, i32 %83, i32 32767
  %86 = icmp sgt i32 %85, -32768
  %87 = select i1 %86, i32 %85, i32 -32768
  %88 = trunc i32 %87 to i16
  %89 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 3
  store i16 %88, i16* %89, align 2
  %90 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %91 = bitcast i64* %90 to i8*
  %92 = load i8, i8* %91, align 8
  %93 = sext i8 %92 to i32
  %94 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %95 = bitcast i64* %94 to i8*
  %96 = load i8, i8* %95, align 8
  %97 = zext i8 %96 to i32
  %98 = mul nsw i32 %97, %93
  %99 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 9
  %100 = load i8, i8* %99, align 1
  %101 = sext i8 %100 to i32
  %102 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 9
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i32
  %105 = mul nsw i32 %104, %101
  %106 = add nsw i32 %105, %98
  %107 = icmp slt i32 %106, 32767
  %108 = select i1 %107, i32 %106, i32 32767
  %109 = icmp sgt i32 %108, -32768
  %110 = select i1 %109, i32 %108, i32 -32768
  %111 = trunc i32 %110 to i16
  %112 = bitcast i64* %94 to i16*
  store i16 %111, i16* %112, align 8
  %113 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 10
  %114 = load i8, i8* %113, align 2
  %115 = sext i8 %114 to i32
  %116 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 10
  %117 = load i8, i8* %116, align 2
  %118 = zext i8 %117 to i32
  %119 = mul nsw i32 %118, %115
  %120 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 11
  %121 = load i8, i8* %120, align 1
  %122 = sext i8 %121 to i32
  %123 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 11
  %124 = load i8, i8* %123, align 1
  %125 = zext i8 %124 to i32
  %126 = mul nsw i32 %125, %122
  %127 = add nsw i32 %126, %119
  %128 = icmp slt i32 %127, 32767
  %129 = select i1 %128, i32 %127, i32 32767
  %130 = icmp sgt i32 %129, -32768
  %131 = select i1 %130, i32 %129, i32 -32768
  %132 = trunc i32 %131 to i16
  %133 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 5
  store i16 %132, i16* %133, align 2
  %134 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 12
  %135 = load i8, i8* %134, align 4
  %136 = sext i8 %135 to i32
  %137 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 12
  %138 = load i8, i8* %137, align 4
  %139 = zext i8 %138 to i32
  %140 = mul nsw i32 %139, %136
  %141 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 13
  %142 = load i8, i8* %141, align 1
  %143 = sext i8 %142 to i32
  %144 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 13
  %145 = load i8, i8* %144, align 1
  %146 = zext i8 %145 to i32
  %147 = mul nsw i32 %146, %143
  %148 = add nsw i32 %147, %140
  %149 = icmp slt i32 %148, 32767
  %150 = select i1 %149, i32 %148, i32 32767
  %151 = icmp sgt i32 %150, -32768
  %152 = select i1 %151, i32 %150, i32 -32768
  %153 = trunc i32 %152 to i16
  %154 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 6
  store i16 %153, i16* %154, align 4
  %155 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 14
  %156 = load i8, i8* %155, align 2
  %157 = sext i8 %156 to i32
  %158 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 14
  %159 = load i8, i8* %158, align 2
  %160 = zext i8 %159 to i32
  %161 = mul nsw i32 %160, %157
  %162 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 15
  %163 = load i8, i8* %162, align 1
  %164 = sext i8 %163 to i32
  %165 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 15
  %166 = load i8, i8* %165, align 1
  %167 = zext i8 %166 to i32
  %168 = mul nsw i32 %167, %164
  %169 = add nsw i32 %168, %161
  %170 = icmp slt i32 %169, 32767
  %171 = select i1 %170, i32 %169, i32 32767
  %172 = icmp sgt i32 %171, -32768
  %173 = select i1 %172, i32 %171, i32 -32768
  %174 = trunc i32 %173 to i16
  %175 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 7
  store i16 %174, i16* %175, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_phsubw_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %7 = load i16, i16* %6, align 2
  %8 = sub i16 %5, %7
  store i16 %8, i16* %4, align 8
  %9 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %10 = load i16, i16* %9, align 4
  %11 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %12 = load i16, i16* %11, align 2
  %13 = sub i16 %10, %12
  store i16 %13, i16* %6, align 2
  %14 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %15 = bitcast i64* %14 to i16*
  %16 = load i16, i16* %15, align 8
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %18 = load i16, i16* %17, align 2
  %19 = sub i16 %16, %18
  store i16 %19, i16* %9, align 4
  %20 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %21 = load i16, i16* %20, align 4
  %22 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %23 = load i16, i16* %22, align 2
  %24 = sub i16 %21, %23
  store i16 %24, i16* %11, align 2
  %25 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %26 = bitcast %union.XMMReg* %1 to i16*
  %27 = load i16, i16* %26, align 8
  %28 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 1
  %29 = load i16, i16* %28, align 2
  %30 = sub i16 %27, %29
  store i16 %30, i16* %15, align 8
  %31 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 2
  %32 = load i16, i16* %31, align 4
  %33 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 3
  %34 = load i16, i16* %33, align 2
  %35 = sub i16 %32, %34
  store i16 %35, i16* %17, align 2
  %36 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %37 = bitcast i64* %36 to i16*
  %38 = load i16, i16* %37, align 8
  %39 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 5
  %40 = load i16, i16* %39, align 2
  %41 = sub i16 %38, %40
  store i16 %41, i16* %20, align 4
  %42 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 6
  %43 = load i16, i16* %42, align 4
  %44 = getelementptr inbounds [8 x i16], [8 x i16]* %25, i64 0, i64 7
  %45 = load i16, i16* %44, align 2
  %46 = sub i16 %43, %45
  store i16 %46, i16* %22, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_phsubd_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = sub nsw i32 %5, %7
  store i32 %8, i32* %4, align 8
  %9 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %10 = bitcast i64* %9 to i32*
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %13 = load i32, i32* %12, align 4
  %14 = sub nsw i32 %11, %13
  store i32 %14, i32* %6, align 4
  %15 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %16 = bitcast %union.XMMReg* %1 to i32*
  %17 = load i32, i32* %16, align 8
  %18 = getelementptr inbounds [4 x i32], [4 x i32]* %15, i64 0, i64 1
  %19 = load i32, i32* %18, align 4
  %20 = sub nsw i32 %17, %19
  store i32 %20, i32* %10, align 8
  %21 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %22 = bitcast i64* %21 to i32*
  %23 = load i32, i32* %22, align 8
  %24 = getelementptr inbounds [4 x i32], [4 x i32]* %15, i64 0, i64 3
  %25 = load i32, i32* %24, align 4
  %26 = sub nsw i32 %23, %25
  store i32 %26, i32* %12, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_phsubsw_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %7 = load i16, i16* %6, align 2
  %8 = sub i16 %5, %7
  %9 = icmp slt i16 %5, 0
  %10 = icmp slt i16 %7, 0
  %11 = icmp slt i16 %8, 0
  %12 = select i1 %10, i16 32767, i16 -32768
  %13 = xor i1 %9, %11
  %14 = xor i1 %9, %10
  %15 = and i1 %13, %14
  %16 = select i1 %15, i16 %12, i16 %8
  store i16 %16, i16* %4, align 8
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %18 = load i16, i16* %17, align 4
  %19 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %20 = load i16, i16* %19, align 2
  %21 = sub i16 %18, %20
  %22 = icmp slt i16 %18, 0
  %23 = icmp slt i16 %20, 0
  %24 = icmp slt i16 %21, 0
  %25 = select i1 %23, i16 32767, i16 -32768
  %26 = xor i1 %22, %24
  %27 = xor i1 %22, %23
  %28 = and i1 %26, %27
  %29 = select i1 %28, i16 %25, i16 %21
  store i16 %29, i16* %6, align 2
  %30 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %31 = bitcast i64* %30 to i16*
  %32 = load i16, i16* %31, align 8
  %33 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %34 = load i16, i16* %33, align 2
  %35 = sub i16 %32, %34
  %36 = icmp slt i16 %32, 0
  %37 = icmp slt i16 %34, 0
  %38 = icmp slt i16 %35, 0
  %39 = select i1 %37, i16 32767, i16 -32768
  %40 = xor i1 %36, %38
  %41 = xor i1 %36, %37
  %42 = and i1 %40, %41
  %43 = select i1 %42, i16 %39, i16 %35
  store i16 %43, i16* %17, align 4
  %44 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %45 = load i16, i16* %44, align 4
  %46 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %47 = load i16, i16* %46, align 2
  %48 = sub i16 %45, %47
  %49 = icmp slt i16 %45, 0
  %50 = icmp slt i16 %47, 0
  %51 = icmp slt i16 %48, 0
  %52 = select i1 %50, i16 32767, i16 -32768
  %53 = xor i1 %49, %51
  %54 = xor i1 %49, %50
  %55 = and i1 %53, %54
  %56 = select i1 %55, i16 %52, i16 %48
  store i16 %56, i16* %19, align 2
  %57 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %58 = bitcast %union.XMMReg* %1 to i16*
  %59 = load i16, i16* %58, align 8
  %60 = getelementptr inbounds [8 x i16], [8 x i16]* %57, i64 0, i64 1
  %61 = load i16, i16* %60, align 2
  %62 = sub i16 %59, %61
  %63 = icmp slt i16 %59, 0
  %64 = icmp slt i16 %61, 0
  %65 = icmp slt i16 %62, 0
  %66 = select i1 %64, i16 32767, i16 -32768
  %67 = xor i1 %63, %65
  %68 = xor i1 %63, %64
  %69 = and i1 %67, %68
  %70 = select i1 %69, i16 %66, i16 %62
  store i16 %70, i16* %31, align 8
  %71 = getelementptr inbounds [8 x i16], [8 x i16]* %57, i64 0, i64 2
  %72 = load i16, i16* %71, align 4
  %73 = getelementptr inbounds [8 x i16], [8 x i16]* %57, i64 0, i64 3
  %74 = load i16, i16* %73, align 2
  %75 = sub i16 %72, %74
  %76 = icmp slt i16 %72, 0
  %77 = icmp slt i16 %74, 0
  %78 = icmp slt i16 %75, 0
  %79 = select i1 %77, i16 32767, i16 -32768
  %80 = xor i1 %76, %78
  %81 = xor i1 %76, %77
  %82 = and i1 %80, %81
  %83 = select i1 %82, i16 %79, i16 %75
  store i16 %83, i16* %33, align 2
  %84 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %85 = bitcast i64* %84 to i16*
  %86 = load i16, i16* %85, align 8
  %87 = getelementptr inbounds [8 x i16], [8 x i16]* %57, i64 0, i64 5
  %88 = load i16, i16* %87, align 2
  %89 = sub i16 %86, %88
  %90 = icmp slt i16 %86, 0
  %91 = icmp slt i16 %88, 0
  %92 = icmp slt i16 %89, 0
  %93 = select i1 %91, i16 32767, i16 -32768
  %94 = xor i1 %90, %92
  %95 = xor i1 %90, %91
  %96 = and i1 %94, %95
  %97 = select i1 %96, i16 %93, i16 %89
  store i16 %97, i16* %44, align 4
  %98 = getelementptr inbounds [8 x i16], [8 x i16]* %57, i64 0, i64 6
  %99 = load i16, i16* %98, align 4
  %100 = getelementptr inbounds [8 x i16], [8 x i16]* %57, i64 0, i64 7
  %101 = load i16, i16* %100, align 2
  %102 = sub i16 %99, %101
  %103 = icmp slt i16 %99, 0
  %104 = icmp slt i16 %101, 0
  %105 = icmp slt i16 %102, 0
  %106 = select i1 %104, i16 32767, i16 -32768
  %107 = xor i1 %103, %105
  %108 = xor i1 %103, %104
  %109 = and i1 %107, %108
  %110 = select i1 %109, i16 %106, i16 %102
  store i16 %110, i16* %46, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pabsb_xmm(%union.XMMReg* nocapture noundef writeonly %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %4 = bitcast %union.XMMReg* %1 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = tail call i8 @llvm.abs.i8(i8 %5, i1 false)
  %7 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %8 = bitcast %union.XMMReg* %0 to i8*
  store i8 %6, i8* %8, align 8
  %9 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 1
  %10 = load i8, i8* %9, align 1
  %11 = tail call i8 @llvm.abs.i8(i8 %10, i1 false)
  %12 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 1
  store i8 %11, i8* %12, align 1
  %13 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 2
  %14 = load i8, i8* %13, align 2
  %15 = tail call i8 @llvm.abs.i8(i8 %14, i1 false)
  %16 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 2
  store i8 %15, i8* %16, align 2
  %17 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 3
  %18 = load i8, i8* %17, align 1
  %19 = tail call i8 @llvm.abs.i8(i8 %18, i1 false)
  %20 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 3
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 4
  %22 = load i8, i8* %21, align 4
  %23 = tail call i8 @llvm.abs.i8(i8 %22, i1 false)
  %24 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 4
  store i8 %23, i8* %24, align 4
  %25 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 5
  %26 = load i8, i8* %25, align 1
  %27 = tail call i8 @llvm.abs.i8(i8 %26, i1 false)
  %28 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 5
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 6
  %30 = load i8, i8* %29, align 2
  %31 = tail call i8 @llvm.abs.i8(i8 %30, i1 false)
  %32 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 6
  store i8 %31, i8* %32, align 2
  %33 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 7
  %34 = load i8, i8* %33, align 1
  %35 = tail call i8 @llvm.abs.i8(i8 %34, i1 false)
  %36 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 7
  store i8 %35, i8* %36, align 1
  %37 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %38 = bitcast i64* %37 to i8*
  %39 = load i8, i8* %38, align 8
  %40 = tail call i8 @llvm.abs.i8(i8 %39, i1 false)
  %41 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %42 = bitcast i64* %41 to i8*
  store i8 %40, i8* %42, align 8
  %43 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 9
  %44 = load i8, i8* %43, align 1
  %45 = tail call i8 @llvm.abs.i8(i8 %44, i1 false)
  %46 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 9
  store i8 %45, i8* %46, align 1
  %47 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 10
  %48 = load i8, i8* %47, align 2
  %49 = tail call i8 @llvm.abs.i8(i8 %48, i1 false)
  %50 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 10
  store i8 %49, i8* %50, align 2
  %51 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 11
  %52 = load i8, i8* %51, align 1
  %53 = tail call i8 @llvm.abs.i8(i8 %52, i1 false)
  %54 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 11
  store i8 %53, i8* %54, align 1
  %55 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 12
  %56 = load i8, i8* %55, align 4
  %57 = tail call i8 @llvm.abs.i8(i8 %56, i1 false)
  %58 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 12
  store i8 %57, i8* %58, align 4
  %59 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 13
  %60 = load i8, i8* %59, align 1
  %61 = tail call i8 @llvm.abs.i8(i8 %60, i1 false)
  %62 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 13
  store i8 %61, i8* %62, align 1
  %63 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 14
  %64 = load i8, i8* %63, align 2
  %65 = tail call i8 @llvm.abs.i8(i8 %64, i1 false)
  %66 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 14
  store i8 %65, i8* %66, align 2
  %67 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 15
  %68 = load i8, i8* %67, align 1
  %69 = tail call i8 @llvm.abs.i8(i8 %68, i1 false)
  %70 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 15
  store i8 %69, i8* %70, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pabsw_xmm(%union.XMMReg* nocapture noundef writeonly %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %1 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = tail call i16 @llvm.abs.i16(i16 %5, i1 false)
  %7 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %8 = bitcast %union.XMMReg* %0 to i16*
  store i16 %6, i16* %8, align 8
  %9 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %10 = load i16, i16* %9, align 2
  %11 = tail call i16 @llvm.abs.i16(i16 %10, i1 false)
  %12 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 1
  store i16 %11, i16* %12, align 2
  %13 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %14 = load i16, i16* %13, align 4
  %15 = tail call i16 @llvm.abs.i16(i16 %14, i1 false)
  %16 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 2
  store i16 %15, i16* %16, align 4
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %18 = load i16, i16* %17, align 2
  %19 = tail call i16 @llvm.abs.i16(i16 %18, i1 false)
  %20 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 3
  store i16 %19, i16* %20, align 2
  %21 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %22 = bitcast i64* %21 to i16*
  %23 = load i16, i16* %22, align 8
  %24 = tail call i16 @llvm.abs.i16(i16 %23, i1 false)
  %25 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %26 = bitcast i64* %25 to i16*
  store i16 %24, i16* %26, align 8
  %27 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %28 = load i16, i16* %27, align 2
  %29 = tail call i16 @llvm.abs.i16(i16 %28, i1 false)
  %30 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 5
  store i16 %29, i16* %30, align 2
  %31 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %32 = load i16, i16* %31, align 4
  %33 = tail call i16 @llvm.abs.i16(i16 %32, i1 false)
  %34 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 6
  store i16 %33, i16* %34, align 4
  %35 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %36 = load i16, i16* %35, align 2
  %37 = tail call i16 @llvm.abs.i16(i16 %36, i1 false)
  %38 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 7
  store i16 %37, i16* %38, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pabsd_xmm(%union.XMMReg* nocapture noundef writeonly %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = tail call i32 @llvm.abs.i32(i32 %5, i1 true)
  %7 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %8 = bitcast %union.XMMReg* %0 to i32*
  store i32 %6, i32* %8, align 8
  %9 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %10 = load i32, i32* %9, align 4
  %11 = tail call i32 @llvm.abs.i32(i32 %10, i1 true)
  %12 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 1
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %14 = bitcast i64* %13 to i32*
  %15 = load i32, i32* %14, align 8
  %16 = tail call i32 @llvm.abs.i32(i32 %15, i1 true)
  %17 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %18 = bitcast i64* %17 to i32*
  store i32 %16, i32* %18, align 8
  %19 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %20 = load i32, i32* %19, align 4
  %21 = tail call i32 @llvm.abs.i32(i32 %20, i1 true)
  %22 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 3
  store i32 %21, i32* %22, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pmulhrsw_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = sext i16 %5 to i32
  %7 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %8 = bitcast %union.XMMReg* %1 to i16*
  %9 = load i16, i16* %8, align 8
  %10 = sext i16 %9 to i32
  %11 = mul nsw i32 %10, %6
  %12 = add nsw i32 %11, 16384
  %13 = lshr i32 %12, 15
  %14 = trunc i32 %13 to i16
  store i16 %14, i16* %4, align 8
  %15 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %16 = load i16, i16* %15, align 2
  %17 = sext i16 %16 to i32
  %18 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 1
  %19 = load i16, i16* %18, align 2
  %20 = sext i16 %19 to i32
  %21 = mul nsw i32 %20, %17
  %22 = add nsw i32 %21, 16384
  %23 = lshr i32 %22, 15
  %24 = trunc i32 %23 to i16
  store i16 %24, i16* %15, align 2
  %25 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %26 = load i16, i16* %25, align 4
  %27 = sext i16 %26 to i32
  %28 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 2
  %29 = load i16, i16* %28, align 4
  %30 = sext i16 %29 to i32
  %31 = mul nsw i32 %30, %27
  %32 = add nsw i32 %31, 16384
  %33 = lshr i32 %32, 15
  %34 = trunc i32 %33 to i16
  store i16 %34, i16* %25, align 4
  %35 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %36 = load i16, i16* %35, align 2
  %37 = sext i16 %36 to i32
  %38 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 3
  %39 = load i16, i16* %38, align 2
  %40 = sext i16 %39 to i32
  %41 = mul nsw i32 %40, %37
  %42 = add nsw i32 %41, 16384
  %43 = lshr i32 %42, 15
  %44 = trunc i32 %43 to i16
  store i16 %44, i16* %35, align 2
  %45 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %46 = bitcast i64* %45 to i16*
  %47 = load i16, i16* %46, align 8
  %48 = sext i16 %47 to i32
  %49 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %50 = bitcast i64* %49 to i16*
  %51 = load i16, i16* %50, align 8
  %52 = sext i16 %51 to i32
  %53 = mul nsw i32 %52, %48
  %54 = add nsw i32 %53, 16384
  %55 = lshr i32 %54, 15
  %56 = trunc i32 %55 to i16
  store i16 %56, i16* %46, align 8
  %57 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %58 = load i16, i16* %57, align 2
  %59 = sext i16 %58 to i32
  %60 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 5
  %61 = load i16, i16* %60, align 2
  %62 = sext i16 %61 to i32
  %63 = mul nsw i32 %62, %59
  %64 = add nsw i32 %63, 16384
  %65 = lshr i32 %64, 15
  %66 = trunc i32 %65 to i16
  store i16 %66, i16* %57, align 2
  %67 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %68 = load i16, i16* %67, align 4
  %69 = sext i16 %68 to i32
  %70 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 6
  %71 = load i16, i16* %70, align 4
  %72 = sext i16 %71 to i32
  %73 = mul nsw i32 %72, %69
  %74 = add nsw i32 %73, 16384
  %75 = lshr i32 %74, 15
  %76 = trunc i32 %75 to i16
  store i16 %76, i16* %67, align 4
  %77 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %78 = load i16, i16* %77, align 2
  %79 = sext i16 %78 to i32
  %80 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 7
  %81 = load i16, i16* %80, align 2
  %82 = sext i16 %81 to i32
  %83 = mul nsw i32 %82, %79
  %84 = add nsw i32 %83, 16384
  %85 = lshr i32 %84, 15
  %86 = trunc i32 %85 to i16
  store i16 %86, i16* %77, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_psignb_xmm(%union.XMMReg* noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %4 = bitcast %union.XMMReg* %1 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = icmp sgt i8 %5, -1
  br i1 %6, label %7, label %12

7:                                                ; preds = %2
  %8 = icmp eq i8 %5, 0
  br i1 %8, label %16, label %9

9:                                                ; preds = %7
  %10 = bitcast %union.XMMReg* %0 to i8*
  %11 = load i8, i8* %10, align 8
  br label %16

12:                                               ; preds = %2
  %13 = bitcast %union.XMMReg* %0 to i8*
  %14 = load i8, i8* %13, align 8
  %15 = sub i8 0, %14
  br label %16

16:                                               ; preds = %7, %9, %12
  %17 = phi i8 [ %15, %12 ], [ %11, %9 ], [ 0, %7 ]
  %18 = bitcast %union.XMMReg* %0 to i8*
  %19 = bitcast %union.XMMReg* %0 to [16 x i8]*
  store i8 %17, i8* %18, align 8
  %20 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 1
  %21 = load i8, i8* %20, align 1
  %22 = icmp sgt i8 %21, -1
  br i1 %22, label %23, label %28

23:                                               ; preds = %16
  %24 = icmp eq i8 %21, 0
  br i1 %24, label %32, label %25

25:                                               ; preds = %23
  %26 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 1
  %27 = load i8, i8* %26, align 1
  br label %32

28:                                               ; preds = %16
  %29 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 1
  %30 = load i8, i8* %29, align 1
  %31 = sub i8 0, %30
  br label %32

32:                                               ; preds = %25, %23, %28
  %33 = phi i8 [ %31, %28 ], [ %27, %25 ], [ 0, %23 ]
  %34 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 1
  store i8 %33, i8* %34, align 1
  %35 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 2
  %36 = load i8, i8* %35, align 2
  %37 = icmp sgt i8 %36, -1
  br i1 %37, label %38, label %43

38:                                               ; preds = %32
  %39 = icmp eq i8 %36, 0
  br i1 %39, label %47, label %40

40:                                               ; preds = %38
  %41 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 2
  %42 = load i8, i8* %41, align 2
  br label %47

43:                                               ; preds = %32
  %44 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 2
  %45 = load i8, i8* %44, align 2
  %46 = sub i8 0, %45
  br label %47

47:                                               ; preds = %40, %38, %43
  %48 = phi i8 [ %46, %43 ], [ %42, %40 ], [ 0, %38 ]
  %49 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 2
  store i8 %48, i8* %49, align 2
  %50 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 3
  %51 = load i8, i8* %50, align 1
  %52 = icmp sgt i8 %51, -1
  br i1 %52, label %53, label %58

53:                                               ; preds = %47
  %54 = icmp eq i8 %51, 0
  br i1 %54, label %62, label %55

55:                                               ; preds = %53
  %56 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 3
  %57 = load i8, i8* %56, align 1
  br label %62

58:                                               ; preds = %47
  %59 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 3
  %60 = load i8, i8* %59, align 1
  %61 = sub i8 0, %60
  br label %62

62:                                               ; preds = %55, %53, %58
  %63 = phi i8 [ %61, %58 ], [ %57, %55 ], [ 0, %53 ]
  %64 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 3
  store i8 %63, i8* %64, align 1
  %65 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 4
  %66 = load i8, i8* %65, align 4
  %67 = icmp sgt i8 %66, -1
  br i1 %67, label %68, label %73

68:                                               ; preds = %62
  %69 = icmp eq i8 %66, 0
  br i1 %69, label %77, label %70

70:                                               ; preds = %68
  %71 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 4
  %72 = load i8, i8* %71, align 4
  br label %77

73:                                               ; preds = %62
  %74 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 4
  %75 = load i8, i8* %74, align 4
  %76 = sub i8 0, %75
  br label %77

77:                                               ; preds = %70, %68, %73
  %78 = phi i8 [ %76, %73 ], [ %72, %70 ], [ 0, %68 ]
  %79 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 4
  store i8 %78, i8* %79, align 4
  %80 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 5
  %81 = load i8, i8* %80, align 1
  %82 = icmp sgt i8 %81, -1
  br i1 %82, label %83, label %88

83:                                               ; preds = %77
  %84 = icmp eq i8 %81, 0
  br i1 %84, label %92, label %85

85:                                               ; preds = %83
  %86 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 5
  %87 = load i8, i8* %86, align 1
  br label %92

88:                                               ; preds = %77
  %89 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 5
  %90 = load i8, i8* %89, align 1
  %91 = sub i8 0, %90
  br label %92

92:                                               ; preds = %85, %83, %88
  %93 = phi i8 [ %91, %88 ], [ %87, %85 ], [ 0, %83 ]
  %94 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 5
  store i8 %93, i8* %94, align 1
  %95 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 6
  %96 = load i8, i8* %95, align 2
  %97 = icmp sgt i8 %96, -1
  br i1 %97, label %98, label %103

98:                                               ; preds = %92
  %99 = icmp eq i8 %96, 0
  br i1 %99, label %107, label %100

100:                                              ; preds = %98
  %101 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 6
  %102 = load i8, i8* %101, align 2
  br label %107

103:                                              ; preds = %92
  %104 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 6
  %105 = load i8, i8* %104, align 2
  %106 = sub i8 0, %105
  br label %107

107:                                              ; preds = %100, %98, %103
  %108 = phi i8 [ %106, %103 ], [ %102, %100 ], [ 0, %98 ]
  %109 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 6
  store i8 %108, i8* %109, align 2
  %110 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 7
  %111 = load i8, i8* %110, align 1
  %112 = icmp sgt i8 %111, -1
  br i1 %112, label %113, label %118

113:                                              ; preds = %107
  %114 = icmp eq i8 %111, 0
  br i1 %114, label %122, label %115

115:                                              ; preds = %113
  %116 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 7
  %117 = load i8, i8* %116, align 1
  br label %122

118:                                              ; preds = %107
  %119 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 7
  %120 = load i8, i8* %119, align 1
  %121 = sub i8 0, %120
  br label %122

122:                                              ; preds = %115, %113, %118
  %123 = phi i8 [ %121, %118 ], [ %117, %115 ], [ 0, %113 ]
  %124 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 7
  store i8 %123, i8* %124, align 1
  %125 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %126 = bitcast i64* %125 to i8*
  %127 = load i8, i8* %126, align 8
  %128 = icmp sgt i8 %127, -1
  br i1 %128, label %129, label %135

129:                                              ; preds = %122
  %130 = icmp eq i8 %127, 0
  br i1 %130, label %140, label %131

131:                                              ; preds = %129
  %132 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %133 = bitcast i64* %132 to i8*
  %134 = load i8, i8* %133, align 8
  br label %140

135:                                              ; preds = %122
  %136 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %137 = bitcast i64* %136 to i8*
  %138 = load i8, i8* %137, align 8
  %139 = sub i8 0, %138
  br label %140

140:                                              ; preds = %129, %131, %135
  %141 = phi i8 [ %139, %135 ], [ %134, %131 ], [ 0, %129 ]
  %142 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %143 = bitcast i64* %142 to i8*
  store i8 %141, i8* %143, align 8
  %144 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 9
  %145 = load i8, i8* %144, align 1
  %146 = icmp sgt i8 %145, -1
  br i1 %146, label %147, label %152

147:                                              ; preds = %140
  %148 = icmp eq i8 %145, 0
  br i1 %148, label %156, label %149

149:                                              ; preds = %147
  %150 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 9
  %151 = load i8, i8* %150, align 1
  br label %156

152:                                              ; preds = %140
  %153 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 9
  %154 = load i8, i8* %153, align 1
  %155 = sub i8 0, %154
  br label %156

156:                                              ; preds = %149, %147, %152
  %157 = phi i8 [ %155, %152 ], [ %151, %149 ], [ 0, %147 ]
  %158 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 9
  store i8 %157, i8* %158, align 1
  %159 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 10
  %160 = load i8, i8* %159, align 2
  %161 = icmp sgt i8 %160, -1
  br i1 %161, label %162, label %167

162:                                              ; preds = %156
  %163 = icmp eq i8 %160, 0
  br i1 %163, label %171, label %164

164:                                              ; preds = %162
  %165 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 10
  %166 = load i8, i8* %165, align 2
  br label %171

167:                                              ; preds = %156
  %168 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 10
  %169 = load i8, i8* %168, align 2
  %170 = sub i8 0, %169
  br label %171

171:                                              ; preds = %164, %162, %167
  %172 = phi i8 [ %170, %167 ], [ %166, %164 ], [ 0, %162 ]
  %173 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 10
  store i8 %172, i8* %173, align 2
  %174 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 11
  %175 = load i8, i8* %174, align 1
  %176 = icmp sgt i8 %175, -1
  br i1 %176, label %177, label %182

177:                                              ; preds = %171
  %178 = icmp eq i8 %175, 0
  br i1 %178, label %186, label %179

179:                                              ; preds = %177
  %180 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 11
  %181 = load i8, i8* %180, align 1
  br label %186

182:                                              ; preds = %171
  %183 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 11
  %184 = load i8, i8* %183, align 1
  %185 = sub i8 0, %184
  br label %186

186:                                              ; preds = %179, %177, %182
  %187 = phi i8 [ %185, %182 ], [ %181, %179 ], [ 0, %177 ]
  %188 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 11
  store i8 %187, i8* %188, align 1
  %189 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 12
  %190 = load i8, i8* %189, align 4
  %191 = icmp sgt i8 %190, -1
  br i1 %191, label %192, label %197

192:                                              ; preds = %186
  %193 = icmp eq i8 %190, 0
  br i1 %193, label %201, label %194

194:                                              ; preds = %192
  %195 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 12
  %196 = load i8, i8* %195, align 4
  br label %201

197:                                              ; preds = %186
  %198 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 12
  %199 = load i8, i8* %198, align 4
  %200 = sub i8 0, %199
  br label %201

201:                                              ; preds = %194, %192, %197
  %202 = phi i8 [ %200, %197 ], [ %196, %194 ], [ 0, %192 ]
  %203 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 12
  store i8 %202, i8* %203, align 4
  %204 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 13
  %205 = load i8, i8* %204, align 1
  %206 = icmp sgt i8 %205, -1
  br i1 %206, label %207, label %212

207:                                              ; preds = %201
  %208 = icmp eq i8 %205, 0
  br i1 %208, label %216, label %209

209:                                              ; preds = %207
  %210 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 13
  %211 = load i8, i8* %210, align 1
  br label %216

212:                                              ; preds = %201
  %213 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 13
  %214 = load i8, i8* %213, align 1
  %215 = sub i8 0, %214
  br label %216

216:                                              ; preds = %209, %207, %212
  %217 = phi i8 [ %215, %212 ], [ %211, %209 ], [ 0, %207 ]
  %218 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 13
  store i8 %217, i8* %218, align 1
  %219 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 14
  %220 = load i8, i8* %219, align 2
  %221 = icmp sgt i8 %220, -1
  br i1 %221, label %222, label %227

222:                                              ; preds = %216
  %223 = icmp eq i8 %220, 0
  br i1 %223, label %231, label %224

224:                                              ; preds = %222
  %225 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 14
  %226 = load i8, i8* %225, align 2
  br label %231

227:                                              ; preds = %216
  %228 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 14
  %229 = load i8, i8* %228, align 2
  %230 = sub i8 0, %229
  br label %231

231:                                              ; preds = %224, %222, %227
  %232 = phi i8 [ %230, %227 ], [ %226, %224 ], [ 0, %222 ]
  %233 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 14
  store i8 %232, i8* %233, align 2
  %234 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 15
  %235 = load i8, i8* %234, align 1
  %236 = icmp sgt i8 %235, -1
  br i1 %236, label %237, label %242

237:                                              ; preds = %231
  %238 = icmp eq i8 %235, 0
  br i1 %238, label %246, label %239

239:                                              ; preds = %237
  %240 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 15
  %241 = load i8, i8* %240, align 1
  br label %246

242:                                              ; preds = %231
  %243 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 15
  %244 = load i8, i8* %243, align 1
  %245 = sub i8 0, %244
  br label %246

246:                                              ; preds = %239, %237, %242
  %247 = phi i8 [ %245, %242 ], [ %241, %239 ], [ 0, %237 ]
  %248 = getelementptr inbounds [16 x i8], [16 x i8]* %19, i64 0, i64 15
  store i8 %247, i8* %248, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_psignw_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %1 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = icmp sgt i16 %5, -1
  br i1 %6, label %7, label %12

7:                                                ; preds = %2
  %8 = icmp eq i16 %5, 0
  br i1 %8, label %16, label %9

9:                                                ; preds = %7
  %10 = bitcast %union.XMMReg* %0 to i16*
  %11 = load i16, i16* %10, align 8
  br label %16

12:                                               ; preds = %2
  %13 = bitcast %union.XMMReg* %0 to i16*
  %14 = load i16, i16* %13, align 8
  %15 = sub i16 0, %14
  br label %16

16:                                               ; preds = %7, %9, %12
  %17 = phi i16 [ %15, %12 ], [ %11, %9 ], [ 0, %7 ]
  %18 = bitcast %union.XMMReg* %0 to i16*
  %19 = bitcast %union.XMMReg* %0 to [8 x i16]*
  store i16 %17, i16* %18, align 8
  %20 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %21 = load i16, i16* %20, align 2
  %22 = icmp sgt i16 %21, -1
  br i1 %22, label %23, label %28

23:                                               ; preds = %16
  %24 = icmp eq i16 %21, 0
  br i1 %24, label %32, label %25

25:                                               ; preds = %23
  %26 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 1
  %27 = load i16, i16* %26, align 2
  br label %32

28:                                               ; preds = %16
  %29 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 1
  %30 = load i16, i16* %29, align 2
  %31 = sub i16 0, %30
  br label %32

32:                                               ; preds = %25, %23, %28
  %33 = phi i16 [ %31, %28 ], [ %27, %25 ], [ 0, %23 ]
  %34 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 1
  store i16 %33, i16* %34, align 2
  %35 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %36 = load i16, i16* %35, align 4
  %37 = icmp sgt i16 %36, -1
  br i1 %37, label %38, label %43

38:                                               ; preds = %32
  %39 = icmp eq i16 %36, 0
  br i1 %39, label %47, label %40

40:                                               ; preds = %38
  %41 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 2
  %42 = load i16, i16* %41, align 4
  br label %47

43:                                               ; preds = %32
  %44 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 2
  %45 = load i16, i16* %44, align 4
  %46 = sub i16 0, %45
  br label %47

47:                                               ; preds = %40, %38, %43
  %48 = phi i16 [ %46, %43 ], [ %42, %40 ], [ 0, %38 ]
  %49 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 2
  store i16 %48, i16* %49, align 4
  %50 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %51 = load i16, i16* %50, align 2
  %52 = icmp sgt i16 %51, -1
  br i1 %52, label %53, label %58

53:                                               ; preds = %47
  %54 = icmp eq i16 %51, 0
  br i1 %54, label %62, label %55

55:                                               ; preds = %53
  %56 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 3
  %57 = load i16, i16* %56, align 2
  br label %62

58:                                               ; preds = %47
  %59 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 3
  %60 = load i16, i16* %59, align 2
  %61 = sub i16 0, %60
  br label %62

62:                                               ; preds = %55, %53, %58
  %63 = phi i16 [ %61, %58 ], [ %57, %55 ], [ 0, %53 ]
  %64 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 3
  store i16 %63, i16* %64, align 2
  %65 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %66 = bitcast i64* %65 to i16*
  %67 = load i16, i16* %66, align 8
  %68 = icmp sgt i16 %67, -1
  br i1 %68, label %69, label %75

69:                                               ; preds = %62
  %70 = icmp eq i16 %67, 0
  br i1 %70, label %80, label %71

71:                                               ; preds = %69
  %72 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %73 = bitcast i64* %72 to i16*
  %74 = load i16, i16* %73, align 8
  br label %80

75:                                               ; preds = %62
  %76 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %77 = bitcast i64* %76 to i16*
  %78 = load i16, i16* %77, align 8
  %79 = sub i16 0, %78
  br label %80

80:                                               ; preds = %69, %71, %75
  %81 = phi i16 [ %79, %75 ], [ %74, %71 ], [ 0, %69 ]
  %82 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %83 = bitcast i64* %82 to i16*
  store i16 %81, i16* %83, align 8
  %84 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %85 = load i16, i16* %84, align 2
  %86 = icmp sgt i16 %85, -1
  br i1 %86, label %87, label %92

87:                                               ; preds = %80
  %88 = icmp eq i16 %85, 0
  br i1 %88, label %96, label %89

89:                                               ; preds = %87
  %90 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 5
  %91 = load i16, i16* %90, align 2
  br label %96

92:                                               ; preds = %80
  %93 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 5
  %94 = load i16, i16* %93, align 2
  %95 = sub i16 0, %94
  br label %96

96:                                               ; preds = %89, %87, %92
  %97 = phi i16 [ %95, %92 ], [ %91, %89 ], [ 0, %87 ]
  %98 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 5
  store i16 %97, i16* %98, align 2
  %99 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %100 = load i16, i16* %99, align 4
  %101 = icmp sgt i16 %100, -1
  br i1 %101, label %102, label %107

102:                                              ; preds = %96
  %103 = icmp eq i16 %100, 0
  br i1 %103, label %111, label %104

104:                                              ; preds = %102
  %105 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 6
  %106 = load i16, i16* %105, align 4
  br label %111

107:                                              ; preds = %96
  %108 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 6
  %109 = load i16, i16* %108, align 4
  %110 = sub i16 0, %109
  br label %111

111:                                              ; preds = %104, %102, %107
  %112 = phi i16 [ %110, %107 ], [ %106, %104 ], [ 0, %102 ]
  %113 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 6
  store i16 %112, i16* %113, align 4
  %114 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %115 = load i16, i16* %114, align 2
  %116 = icmp sgt i16 %115, -1
  br i1 %116, label %117, label %122

117:                                              ; preds = %111
  %118 = icmp eq i16 %115, 0
  br i1 %118, label %126, label %119

119:                                              ; preds = %117
  %120 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 7
  %121 = load i16, i16* %120, align 2
  br label %126

122:                                              ; preds = %111
  %123 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 7
  %124 = load i16, i16* %123, align 2
  %125 = sub i16 0, %124
  br label %126

126:                                              ; preds = %119, %117, %122
  %127 = phi i16 [ %125, %122 ], [ %121, %119 ], [ 0, %117 ]
  %128 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 7
  store i16 %127, i16* %128, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_psignd_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = icmp sgt i32 %5, -1
  br i1 %6, label %7, label %12

7:                                                ; preds = %2
  %8 = icmp eq i32 %5, 0
  br i1 %8, label %16, label %9

9:                                                ; preds = %7
  %10 = bitcast %union.XMMReg* %0 to i32*
  %11 = load i32, i32* %10, align 8
  br label %16

12:                                               ; preds = %2
  %13 = bitcast %union.XMMReg* %0 to i32*
  %14 = load i32, i32* %13, align 8
  %15 = sub nsw i32 0, %14
  br label %16

16:                                               ; preds = %7, %9, %12
  %17 = phi i32 [ %15, %12 ], [ %11, %9 ], [ 0, %7 ]
  %18 = bitcast %union.XMMReg* %0 to i32*
  %19 = bitcast %union.XMMReg* %0 to [4 x i32]*
  store i32 %17, i32* %18, align 8
  %20 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %21 = load i32, i32* %20, align 4
  %22 = icmp sgt i32 %21, -1
  br i1 %22, label %23, label %28

23:                                               ; preds = %16
  %24 = icmp eq i32 %21, 0
  br i1 %24, label %32, label %25

25:                                               ; preds = %23
  %26 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 1
  %27 = load i32, i32* %26, align 4
  br label %32

28:                                               ; preds = %16
  %29 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 1
  %30 = load i32, i32* %29, align 4
  %31 = sub nsw i32 0, %30
  br label %32

32:                                               ; preds = %25, %23, %28
  %33 = phi i32 [ %31, %28 ], [ %27, %25 ], [ 0, %23 ]
  %34 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 1
  store i32 %33, i32* %34, align 4
  %35 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %36 = bitcast i64* %35 to i32*
  %37 = load i32, i32* %36, align 8
  %38 = icmp sgt i32 %37, -1
  br i1 %38, label %39, label %45

39:                                               ; preds = %32
  %40 = icmp eq i32 %37, 0
  br i1 %40, label %50, label %41

41:                                               ; preds = %39
  %42 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %43 = bitcast i64* %42 to i32*
  %44 = load i32, i32* %43, align 8
  br label %50

45:                                               ; preds = %32
  %46 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %47 = bitcast i64* %46 to i32*
  %48 = load i32, i32* %47, align 8
  %49 = sub nsw i32 0, %48
  br label %50

50:                                               ; preds = %39, %41, %45
  %51 = phi i32 [ %49, %45 ], [ %44, %41 ], [ 0, %39 ]
  %52 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %53 = bitcast i64* %52 to i32*
  store i32 %51, i32* %53, align 8
  %54 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %55 = load i32, i32* %54, align 4
  %56 = icmp sgt i32 %55, -1
  br i1 %56, label %57, label %62

57:                                               ; preds = %50
  %58 = icmp eq i32 %55, 0
  br i1 %58, label %66, label %59

59:                                               ; preds = %57
  %60 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 3
  %61 = load i32, i32* %60, align 4
  br label %66

62:                                               ; preds = %50
  %63 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 3
  %64 = load i32, i32* %63, align 4
  %65 = sub nsw i32 0, %64
  br label %66

66:                                               ; preds = %59, %57, %62
  %67 = phi i32 [ %65, %62 ], [ %61, %59 ], [ 0, %57 ]
  %68 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 3
  store i32 %67, i32* %68, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_palignr_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1, i32 noundef %2) local_unnamed_addr #2 {
  %4 = icmp sgt i32 %2, 31
  br i1 %4, label %178, label %5

5:                                                ; preds = %3
  %6 = shl i32 %2, 3
  %7 = icmp sgt i32 %6, -64
  %8 = add i32 %6, 63
  %9 = icmp ult i32 %8, 127
  br i1 %9, label %10, label %23

10:                                               ; preds = %5
  %11 = icmp sgt i32 %6, 0
  %12 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %13 = load i64, i64* %12, align 8
  br i1 %11, label %14, label %18

14:                                               ; preds = %10
  %15 = zext i32 %6 to i64
  %16 = lshr i64 %13, %15
  %17 = add nuw nsw i32 %6, -64
  br label %36

18:                                               ; preds = %10
  %19 = sub nsw i32 0, %6
  %20 = zext i32 %19 to i64
  %21 = shl i64 %13, %20
  %22 = add nsw i32 %6, -64
  br label %45

23:                                               ; preds = %5
  %24 = add nsw i32 %6, -64
  %25 = icmp sgt i32 %6, 0
  %26 = add i32 %6, -1
  %27 = icmp ult i32 %26, 127
  br i1 %27, label %28, label %53

28:                                               ; preds = %23
  %29 = icmp ugt i32 %6, 64
  br i1 %29, label %30, label %36

30:                                               ; preds = %28
  %31 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %32 = load i64, i64* %31, align 8
  %33 = zext i32 %24 to i64
  %34 = lshr i64 %32, %33
  %35 = add nuw nsw i32 %6, -128
  br label %71

36:                                               ; preds = %14, %28
  %37 = phi i64 [ %16, %14 ], [ 0, %28 ]
  %38 = phi i32 [ %17, %14 ], [ %24, %28 ]
  %39 = phi i1 [ true, %14 ], [ %25, %28 ]
  %40 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %41 = load i64, i64* %40, align 8
  %42 = sub nuw nsw i32 64, %6
  %43 = zext i32 %42 to i64
  %44 = shl i64 %41, %43
  br label %45

45:                                               ; preds = %18, %36
  %46 = phi i1 [ false, %18 ], [ true, %36 ]
  %47 = phi i1 [ false, %18 ], [ %39, %36 ]
  %48 = phi i32 [ %22, %18 ], [ %38, %36 ]
  %49 = phi i64 [ %21, %18 ], [ %37, %36 ]
  %50 = phi i64 [ 0, %18 ], [ %44, %36 ]
  %51 = or i64 %50, %49
  %52 = add nsw i32 %6, -128
  br label %80

53:                                               ; preds = %23
  %54 = add nsw i32 %6, -128
  %55 = icmp sgt i32 %6, 64
  %56 = add i32 %6, -65
  %57 = icmp ult i32 %56, 127
  br i1 %57, label %58, label %90

58:                                               ; preds = %53
  %59 = icmp ugt i32 %6, 128
  br i1 %59, label %60, label %71

60:                                               ; preds = %58
  %61 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %62 = load i64, i64* %61, align 8
  %63 = zext i32 %54 to i64
  %64 = lshr i64 %62, %63
  %65 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %66 = load i64, i64* %65, align 8
  %67 = sub nuw nsw i32 192, %6
  %68 = zext i32 %67 to i64
  %69 = shl i64 %66, %68
  %70 = or i64 %69, %64
  br label %159

71:                                               ; preds = %30, %58
  %72 = phi i64 [ %34, %30 ], [ 0, %58 ]
  %73 = phi i32 [ %35, %30 ], [ %54, %58 ]
  %74 = phi i1 [ true, %30 ], [ %55, %58 ]
  %75 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %76 = load i64, i64* %75, align 8
  %77 = sub nuw nsw i32 128, %6
  %78 = zext i32 %77 to i64
  %79 = shl i64 %76, %78
  br label %80

80:                                               ; preds = %45, %71
  %81 = phi i1 [ false, %45 ], [ true, %71 ]
  %82 = phi i1 [ false, %45 ], [ %74, %71 ]
  %83 = phi i32 [ %52, %45 ], [ %73, %71 ]
  %84 = phi i64 [ %51, %45 ], [ %72, %71 ]
  %85 = phi i32 [ %48, %45 ], [ %24, %71 ]
  %86 = phi i1 [ %47, %45 ], [ %25, %71 ]
  %87 = phi i1 [ %46, %45 ], [ %27, %71 ]
  %88 = phi i64 [ 0, %45 ], [ %79, %71 ]
  %89 = or i64 %88, %84
  br label %106

90:                                               ; preds = %53
  %91 = add nsw i32 %6, -192
  %92 = icmp sgt i32 %6, 128
  %93 = add i32 %6, -129
  %94 = icmp ult i32 %93, 127
  br i1 %94, label %95, label %106

95:                                               ; preds = %90
  %96 = icmp ugt i32 %6, 192
  %97 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %98 = load i64, i64* %97, align 8
  br i1 %96, label %99, label %102

99:                                               ; preds = %95
  %100 = zext i32 %91 to i64
  %101 = lshr i64 %98, %100
  br label %173

102:                                              ; preds = %95
  %103 = sub nuw nsw i32 192, %6
  %104 = zext i32 %103 to i64
  %105 = shl nuw nsw i64 %98, %104
  br label %173

106:                                              ; preds = %80, %90
  %107 = phi i1 [ %92, %90 ], [ false, %80 ]
  %108 = phi i64 [ 0, %90 ], [ %89, %80 ]
  %109 = phi i1 [ false, %90 ], [ %87, %80 ]
  %110 = phi i1 [ %25, %90 ], [ %86, %80 ]
  %111 = phi i32 [ %24, %90 ], [ %85, %80 ]
  %112 = phi i32 [ %54, %90 ], [ %83, %80 ]
  %113 = phi i1 [ %55, %90 ], [ %82, %80 ]
  %114 = phi i1 [ false, %90 ], [ %81, %80 ]
  %115 = add nsw i32 %6, 64
  %116 = icmp ugt i32 %6, -128
  br i1 %116, label %117, label %127

117:                                              ; preds = %106
  %118 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %119 = load i64, i64* %118, align 8
  br i1 %7, label %120, label %123

120:                                              ; preds = %117
  %121 = zext i32 %115 to i64
  %122 = lshr i64 %119, %121
  br label %127

123:                                              ; preds = %117
  %124 = sub nuw nsw i32 -64, %6
  %125 = zext i32 %124 to i64
  %126 = shl i64 %119, %125
  br i1 %109, label %142, label %155

127:                                              ; preds = %106, %120
  %128 = phi i64 [ %122, %120 ], [ 0, %106 ]
  br i1 %9, label %129, label %141

129:                                              ; preds = %127
  %130 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %131 = load i64, i64* %130, align 8
  br i1 %110, label %132, label %136

132:                                              ; preds = %129
  %133 = zext i32 %6 to i64
  %134 = lshr i64 %131, %133
  %135 = or i64 %134, %128
  br i1 %109, label %142, label %155

136:                                              ; preds = %129
  %137 = sub nsw i32 0, %6
  %138 = zext i32 %137 to i64
  %139 = shl i64 %131, %138
  %140 = or i64 %139, %128
  br i1 %109, label %142, label %155

141:                                              ; preds = %127
  br i1 %109, label %142, label %155

142:                                              ; preds = %123, %136, %132, %141
  %143 = phi i64 [ %135, %132 ], [ %128, %141 ], [ %140, %136 ], [ %126, %123 ]
  %144 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %145 = load i64, i64* %144, align 8
  br i1 %113, label %146, label %150

146:                                              ; preds = %142
  %147 = zext i32 %111 to i64
  %148 = lshr i64 %145, %147
  %149 = or i64 %148, %143
  br i1 %114, label %157, label %173

150:                                              ; preds = %142
  %151 = sub i32 64, %6
  %152 = zext i32 %151 to i64
  %153 = shl i64 %145, %152
  %154 = or i64 %153, %143
  br i1 %114, label %157, label %173

155:                                              ; preds = %123, %136, %132, %141
  %156 = phi i64 [ %128, %141 ], [ %135, %132 ], [ %140, %136 ], [ %126, %123 ]
  br i1 %114, label %157, label %173

157:                                              ; preds = %150, %146, %155
  %158 = phi i64 [ %149, %146 ], [ %156, %155 ], [ %154, %150 ]
  br i1 %107, label %159, label %167

159:                                              ; preds = %60, %157
  %160 = phi i64 [ %70, %60 ], [ %108, %157 ]
  %161 = phi i32 [ %54, %60 ], [ %112, %157 ]
  %162 = phi i64 [ 0, %60 ], [ %158, %157 ]
  %163 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %164 = load i64, i64* %163, align 8
  %165 = zext i32 %161 to i64
  %166 = lshr i64 %164, %165
  br label %173

167:                                              ; preds = %157
  %168 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %169 = load i64, i64* %168, align 8
  %170 = sub i32 128, %6
  %171 = zext i32 %170 to i64
  %172 = shl i64 %169, %171
  br label %173

173:                                              ; preds = %102, %99, %150, %146, %155, %159, %167
  %174 = phi i64 [ %162, %159 ], [ %158, %167 ], [ %156, %155 ], [ %149, %146 ], [ %154, %150 ], [ 0, %102 ], [ 0, %99 ]
  %175 = phi i64 [ %160, %159 ], [ %108, %167 ], [ %108, %155 ], [ %108, %146 ], [ %108, %150 ], [ %105, %102 ], [ %101, %99 ]
  %176 = phi i64 [ %166, %159 ], [ %172, %167 ], [ 0, %155 ], [ 0, %146 ], [ 0, %150 ], [ 0, %102 ], [ 0, %99 ]
  %177 = or i64 %176, %174
  br label %178

178:                                              ; preds = %3, %173
  %179 = phi i64 [ %177, %173 ], [ 0, %3 ]
  %180 = phi i64 [ %175, %173 ], [ 0, %3 ]
  %181 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %180, i64* %181, align 8
  %182 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  store i64 %179, i64* %182, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pblendvb_xmm(%union.XMMReg* noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %4 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 15, i64 0
  %5 = bitcast %union.XMMReg* %4 to i8*
  %6 = load i8, i8* %5, align 16
  %7 = icmp sgt i8 %6, -1
  %8 = select i1 %7, %union.XMMReg* %0, %union.XMMReg* %1
  %9 = bitcast %union.XMMReg* %8 to i8*
  %10 = load i8, i8* %9, align 8
  %11 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %12 = bitcast %union.XMMReg* %0 to i8*
  store i8 %10, i8* %12, align 8
  %13 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %13, i64 0, i32 15, i64 0
  %15 = bitcast %union.XMMReg* %14 to [16 x i8]*
  %16 = getelementptr inbounds [16 x i8], [16 x i8]* %15, i64 0, i64 1
  %17 = load i8, i8* %16, align 1
  %18 = icmp sgt i8 %17, -1
  %19 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %20 = select i1 %18, [16 x i8]* %11, [16 x i8]* %19
  %21 = getelementptr inbounds [16 x i8], [16 x i8]* %20, i64 0, i64 1
  %22 = load i8, i8* %21, align 1
  %23 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 1
  store i8 %22, i8* %23, align 1
  %24 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %25 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %24, i64 0, i32 15, i64 0
  %26 = bitcast %union.XMMReg* %25 to [16 x i8]*
  %27 = getelementptr inbounds [16 x i8], [16 x i8]* %26, i64 0, i64 2
  %28 = load i8, i8* %27, align 2
  %29 = icmp sgt i8 %28, -1
  %30 = select i1 %29, [16 x i8]* %11, [16 x i8]* %19
  %31 = getelementptr inbounds [16 x i8], [16 x i8]* %30, i64 0, i64 2
  %32 = load i8, i8* %31, align 2
  %33 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 2
  store i8 %32, i8* %33, align 2
  %34 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %35 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %34, i64 0, i32 15, i64 0
  %36 = bitcast %union.XMMReg* %35 to [16 x i8]*
  %37 = getelementptr inbounds [16 x i8], [16 x i8]* %36, i64 0, i64 3
  %38 = load i8, i8* %37, align 1
  %39 = icmp sgt i8 %38, -1
  %40 = select i1 %39, [16 x i8]* %11, [16 x i8]* %19
  %41 = getelementptr inbounds [16 x i8], [16 x i8]* %40, i64 0, i64 3
  %42 = load i8, i8* %41, align 1
  %43 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 3
  store i8 %42, i8* %43, align 1
  %44 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %45 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %44, i64 0, i32 15, i64 0
  %46 = bitcast %union.XMMReg* %45 to [16 x i8]*
  %47 = getelementptr inbounds [16 x i8], [16 x i8]* %46, i64 0, i64 4
  %48 = load i8, i8* %47, align 4
  %49 = icmp sgt i8 %48, -1
  %50 = select i1 %49, [16 x i8]* %11, [16 x i8]* %19
  %51 = getelementptr inbounds [16 x i8], [16 x i8]* %50, i64 0, i64 4
  %52 = load i8, i8* %51, align 4
  %53 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 4
  store i8 %52, i8* %53, align 4
  %54 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %55 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %54, i64 0, i32 15, i64 0
  %56 = bitcast %union.XMMReg* %55 to [16 x i8]*
  %57 = getelementptr inbounds [16 x i8], [16 x i8]* %56, i64 0, i64 5
  %58 = load i8, i8* %57, align 1
  %59 = icmp sgt i8 %58, -1
  %60 = select i1 %59, [16 x i8]* %11, [16 x i8]* %19
  %61 = getelementptr inbounds [16 x i8], [16 x i8]* %60, i64 0, i64 5
  %62 = load i8, i8* %61, align 1
  %63 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 5
  store i8 %62, i8* %63, align 1
  %64 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %65 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %64, i64 0, i32 15, i64 0
  %66 = bitcast %union.XMMReg* %65 to [16 x i8]*
  %67 = getelementptr inbounds [16 x i8], [16 x i8]* %66, i64 0, i64 6
  %68 = load i8, i8* %67, align 2
  %69 = icmp sgt i8 %68, -1
  %70 = select i1 %69, [16 x i8]* %11, [16 x i8]* %19
  %71 = getelementptr inbounds [16 x i8], [16 x i8]* %70, i64 0, i64 6
  %72 = load i8, i8* %71, align 2
  %73 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 6
  store i8 %72, i8* %73, align 2
  %74 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %75 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %74, i64 0, i32 15, i64 0
  %76 = bitcast %union.XMMReg* %75 to [16 x i8]*
  %77 = getelementptr inbounds [16 x i8], [16 x i8]* %76, i64 0, i64 7
  %78 = load i8, i8* %77, align 1
  %79 = icmp sgt i8 %78, -1
  %80 = select i1 %79, [16 x i8]* %11, [16 x i8]* %19
  %81 = getelementptr inbounds [16 x i8], [16 x i8]* %80, i64 0, i64 7
  %82 = load i8, i8* %81, align 1
  %83 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 7
  store i8 %82, i8* %83, align 1
  %84 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %85 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %84, i64 0, i32 15, i64 0, i32 0, i64 1
  %86 = bitcast i64* %85 to i8*
  %87 = load i8, i8* %86, align 8
  %88 = icmp sgt i8 %87, -1
  %89 = select i1 %88, %union.XMMReg* %0, %union.XMMReg* %1
  %90 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %89, i64 0, i32 0, i64 1
  %91 = bitcast i64* %90 to i8*
  %92 = load i8, i8* %91, align 8
  %93 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %94 = bitcast i64* %93 to i8*
  store i8 %92, i8* %94, align 8
  %95 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %84, i64 0, i32 15, i64 0
  %96 = bitcast %union.XMMReg* %95 to [16 x i8]*
  %97 = getelementptr inbounds [16 x i8], [16 x i8]* %96, i64 0, i64 9
  %98 = load i8, i8* %97, align 1
  %99 = icmp sgt i8 %98, -1
  %100 = select i1 %99, [16 x i8]* %11, [16 x i8]* %19
  %101 = getelementptr inbounds [16 x i8], [16 x i8]* %100, i64 0, i64 9
  %102 = load i8, i8* %101, align 1
  %103 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 9
  store i8 %102, i8* %103, align 1
  %104 = getelementptr inbounds [16 x i8], [16 x i8]* %96, i64 0, i64 10
  %105 = load i8, i8* %104, align 2
  %106 = icmp sgt i8 %105, -1
  %107 = select i1 %106, [16 x i8]* %11, [16 x i8]* %19
  %108 = getelementptr inbounds [16 x i8], [16 x i8]* %107, i64 0, i64 10
  %109 = load i8, i8* %108, align 2
  %110 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 10
  store i8 %109, i8* %110, align 2
  %111 = getelementptr inbounds [16 x i8], [16 x i8]* %96, i64 0, i64 11
  %112 = load i8, i8* %111, align 1
  %113 = icmp sgt i8 %112, -1
  %114 = select i1 %113, [16 x i8]* %11, [16 x i8]* %19
  %115 = getelementptr inbounds [16 x i8], [16 x i8]* %114, i64 0, i64 11
  %116 = load i8, i8* %115, align 1
  %117 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 11
  store i8 %116, i8* %117, align 1
  %118 = getelementptr inbounds [16 x i8], [16 x i8]* %96, i64 0, i64 12
  %119 = load i8, i8* %118, align 4
  %120 = icmp sgt i8 %119, -1
  %121 = select i1 %120, [16 x i8]* %11, [16 x i8]* %19
  %122 = getelementptr inbounds [16 x i8], [16 x i8]* %121, i64 0, i64 12
  %123 = load i8, i8* %122, align 4
  %124 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 12
  store i8 %123, i8* %124, align 4
  %125 = getelementptr inbounds [16 x i8], [16 x i8]* %96, i64 0, i64 13
  %126 = load i8, i8* %125, align 1
  %127 = icmp sgt i8 %126, -1
  %128 = select i1 %127, [16 x i8]* %11, [16 x i8]* %19
  %129 = getelementptr inbounds [16 x i8], [16 x i8]* %128, i64 0, i64 13
  %130 = load i8, i8* %129, align 1
  %131 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 13
  store i8 %130, i8* %131, align 1
  %132 = getelementptr inbounds [16 x i8], [16 x i8]* %96, i64 0, i64 14
  %133 = load i8, i8* %132, align 2
  %134 = icmp sgt i8 %133, -1
  %135 = select i1 %134, [16 x i8]* %11, [16 x i8]* %19
  %136 = getelementptr inbounds [16 x i8], [16 x i8]* %135, i64 0, i64 14
  %137 = load i8, i8* %136, align 2
  %138 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 14
  store i8 %137, i8* %138, align 2
  %139 = getelementptr inbounds [16 x i8], [16 x i8]* %96, i64 0, i64 15
  %140 = load i8, i8* %139, align 1
  %141 = icmp sgt i8 %140, -1
  %142 = select i1 %141, [16 x i8]* %11, [16 x i8]* %19
  %143 = getelementptr inbounds [16 x i8], [16 x i8]* %142, i64 0, i64 15
  %144 = load i8, i8* %143, align 1
  %145 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 15
  store i8 %144, i8* %145, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_blendvps_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %4 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 15, i64 0
  %5 = bitcast %union.XMMReg* %4 to i32*
  %6 = load i32, i32* %5, align 16
  %7 = icmp sgt i32 %6, -1
  %8 = select i1 %7, %union.XMMReg* %0, %union.XMMReg* %1
  %9 = bitcast %union.XMMReg* %8 to i32*
  %10 = load i32, i32* %9, align 8
  %11 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %12 = bitcast %union.XMMReg* %0 to i32*
  store i32 %10, i32* %12, align 8
  %13 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %14 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %13, i64 0, i32 15, i64 0
  %15 = bitcast %union.XMMReg* %14 to [4 x i32]*
  %16 = getelementptr inbounds [4 x i32], [4 x i32]* %15, i64 0, i64 1
  %17 = load i32, i32* %16, align 4
  %18 = icmp sgt i32 %17, -1
  %19 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %20 = select i1 %18, [4 x i32]* %11, [4 x i32]* %19
  %21 = getelementptr inbounds [4 x i32], [4 x i32]* %20, i64 0, i64 1
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds [4 x i32], [4 x i32]* %11, i64 0, i64 1
  store i32 %22, i32* %23, align 4
  %24 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %25 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %24, i64 0, i32 15, i64 0, i32 0, i64 1
  %26 = bitcast i64* %25 to i32*
  %27 = load i32, i32* %26, align 8
  %28 = icmp sgt i32 %27, -1
  %29 = select i1 %28, %union.XMMReg* %0, %union.XMMReg* %1
  %30 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %29, i64 0, i32 0, i64 1
  %31 = bitcast i64* %30 to i32*
  %32 = load i32, i32* %31, align 8
  %33 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %34 = bitcast i64* %33 to i32*
  store i32 %32, i32* %34, align 8
  %35 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %24, i64 0, i32 15, i64 0
  %36 = bitcast %union.XMMReg* %35 to [4 x i32]*
  %37 = getelementptr inbounds [4 x i32], [4 x i32]* %36, i64 0, i64 3
  %38 = load i32, i32* %37, align 4
  %39 = icmp sgt i32 %38, -1
  %40 = select i1 %39, [4 x i32]* %11, [4 x i32]* %19
  %41 = getelementptr inbounds [4 x i32], [4 x i32]* %40, i64 0, i64 3
  %42 = load i32, i32* %41, align 4
  %43 = getelementptr inbounds [4 x i32], [4 x i32]* %11, i64 0, i64 3
  store i32 %42, i32* %43, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_blendvpd_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %4 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 15, i64 0, i32 0, i64 0
  %5 = load i64, i64* %4, align 16
  %6 = icmp sgt i64 %5, -1
  %7 = select i1 %6, %union.XMMReg* %0, %union.XMMReg* %1
  %8 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %7, i64 0, i32 0, i64 0
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %9, i64* %10, align 8
  %11 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %11, i64 0, i32 15, i64 0, i32 0, i64 1
  %13 = load i64, i64* %12, align 8
  %14 = icmp sgt i64 %13, -1
  %15 = select i1 %14, %union.XMMReg* %0, %union.XMMReg* %1
  %16 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %15, i64 0, i32 0, i64 1
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  store i64 %17, i64* %18, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_ptest_xmm(%union.XMMReg* nocapture noundef readonly %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = and i64 %6, %4
  %8 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %11 = load i64, i64* %10, align 8
  %12 = and i64 %11, %9
  %13 = or i64 %12, %7
  %14 = xor i64 %6, -1
  %15 = and i64 %4, %14
  %16 = xor i64 %11, -1
  %17 = and i64 %9, %16
  %18 = or i64 %17, %15
  %19 = icmp eq i64 %13, 0
  %20 = select i1 %19, i64 64, i64 0
  %21 = icmp eq i64 %18, 0
  %22 = zext i1 %21 to i64
  %23 = or i64 %20, %22
  %24 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %25 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %24, i64 0, i32 2
  store i64 %23, i64* %25, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pmovsxbw_xmm(%union.XMMReg* nocapture noundef writeonly %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %4 = bitcast %union.XMMReg* %1 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = sext i8 %5 to i16
  %7 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %8 = bitcast %union.XMMReg* %0 to i16*
  store i16 %6, i16* %8, align 8
  %9 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 1
  %10 = load i8, i8* %9, align 1
  %11 = sext i8 %10 to i16
  %12 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 1
  store i16 %11, i16* %12, align 2
  %13 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 2
  %14 = load i8, i8* %13, align 2
  %15 = sext i8 %14 to i16
  %16 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 2
  store i16 %15, i16* %16, align 4
  %17 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 3
  %18 = load i8, i8* %17, align 1
  %19 = sext i8 %18 to i16
  %20 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 3
  store i16 %19, i16* %20, align 2
  %21 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 4
  %22 = load i8, i8* %21, align 4
  %23 = sext i8 %22 to i16
  %24 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %25 = bitcast i64* %24 to i16*
  store i16 %23, i16* %25, align 8
  %26 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 5
  %27 = load i8, i8* %26, align 1
  %28 = sext i8 %27 to i16
  %29 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 5
  store i16 %28, i16* %29, align 2
  %30 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 6
  %31 = load i8, i8* %30, align 2
  %32 = sext i8 %31 to i16
  %33 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 6
  store i16 %32, i16* %33, align 4
  %34 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 7
  %35 = load i8, i8* %34, align 1
  %36 = sext i8 %35 to i16
  %37 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 7
  store i16 %36, i16* %37, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pmovsxbd_xmm(%union.XMMReg* nocapture noundef writeonly %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %4 = bitcast %union.XMMReg* %1 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = sext i8 %5 to i32
  %7 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %8 = bitcast %union.XMMReg* %0 to i32*
  store i32 %6, i32* %8, align 8
  %9 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 1
  %10 = load i8, i8* %9, align 1
  %11 = sext i8 %10 to i32
  %12 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 1
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 2
  %14 = load i8, i8* %13, align 2
  %15 = sext i8 %14 to i32
  %16 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %17 = bitcast i64* %16 to i32*
  store i32 %15, i32* %17, align 8
  %18 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 3
  %19 = load i8, i8* %18, align 1
  %20 = sext i8 %19 to i32
  %21 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 3
  store i32 %20, i32* %21, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pmovsxbq_xmm(%union.XMMReg* nocapture noundef writeonly %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %4 = bitcast %union.XMMReg* %1 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = sext i8 %5 to i64
  %7 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %6, i64* %7, align 8
  %8 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 1
  %9 = load i8, i8* %8, align 1
  %10 = sext i8 %9 to i64
  %11 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  store i64 %10, i64* %11, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pmovsxwd_xmm(%union.XMMReg* nocapture noundef writeonly %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %1 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = sext i16 %5 to i32
  %7 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %8 = bitcast %union.XMMReg* %0 to i32*
  store i32 %6, i32* %8, align 8
  %9 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %10 = load i16, i16* %9, align 2
  %11 = sext i16 %10 to i32
  %12 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 1
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %14 = load i16, i16* %13, align 4
  %15 = sext i16 %14 to i32
  %16 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %17 = bitcast i64* %16 to i32*
  store i32 %15, i32* %17, align 8
  %18 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %19 = load i16, i16* %18, align 2
  %20 = sext i16 %19 to i32
  %21 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 3
  store i32 %20, i32* %21, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pmovsxwq_xmm(%union.XMMReg* nocapture noundef writeonly %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %1 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = sext i16 %5 to i64
  %7 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %6, i64* %7, align 8
  %8 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %9 = load i16, i16* %8, align 2
  %10 = sext i16 %9 to i64
  %11 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  store i64 %10, i64* %11, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pmovsxdq_xmm(%union.XMMReg* nocapture noundef writeonly %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = sext i32 %5 to i64
  %7 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %6, i64* %7, align 8
  %8 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %9 = load i32, i32* %8, align 4
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  store i64 %10, i64* %11, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pmovzxbw_xmm(%union.XMMReg* nocapture noundef writeonly %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %4 = bitcast %union.XMMReg* %1 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = zext i8 %5 to i16
  %7 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %8 = bitcast %union.XMMReg* %0 to i16*
  store i16 %6, i16* %8, align 8
  %9 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 1
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i16
  %12 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 1
  store i16 %11, i16* %12, align 2
  %13 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 2
  %14 = load i8, i8* %13, align 2
  %15 = zext i8 %14 to i16
  %16 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 2
  store i16 %15, i16* %16, align 4
  %17 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 3
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i16
  %20 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 3
  store i16 %19, i16* %20, align 2
  %21 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 4
  %22 = load i8, i8* %21, align 4
  %23 = zext i8 %22 to i16
  %24 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %25 = bitcast i64* %24 to i16*
  store i16 %23, i16* %25, align 8
  %26 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 5
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i16
  %29 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 5
  store i16 %28, i16* %29, align 2
  %30 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 6
  %31 = load i8, i8* %30, align 2
  %32 = zext i8 %31 to i16
  %33 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 6
  store i16 %32, i16* %33, align 4
  %34 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 7
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i16
  %37 = getelementptr inbounds [8 x i16], [8 x i16]* %7, i64 0, i64 7
  store i16 %36, i16* %37, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pmovzxbd_xmm(%union.XMMReg* nocapture noundef writeonly %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %4 = bitcast %union.XMMReg* %1 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = zext i8 %5 to i32
  %7 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %8 = bitcast %union.XMMReg* %0 to i32*
  store i32 %6, i32* %8, align 8
  %9 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 1
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 1
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 2
  %14 = load i8, i8* %13, align 2
  %15 = zext i8 %14 to i32
  %16 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %17 = bitcast i64* %16 to i32*
  store i32 %15, i32* %17, align 8
  %18 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 3
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 3
  store i32 %20, i32* %21, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pmovzxbq_xmm(%union.XMMReg* nocapture noundef writeonly %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %4 = bitcast %union.XMMReg* %1 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = zext i8 %5 to i64
  %7 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %6, i64* %7, align 8
  %8 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 1
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i64
  %11 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  store i64 %10, i64* %11, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pmovzxwd_xmm(%union.XMMReg* nocapture noundef writeonly %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %1 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = zext i16 %5 to i32
  %7 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %8 = bitcast %union.XMMReg* %0 to i32*
  store i32 %6, i32* %8, align 8
  %9 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %10 = load i16, i16* %9, align 2
  %11 = zext i16 %10 to i32
  %12 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 1
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %14 = load i16, i16* %13, align 4
  %15 = zext i16 %14 to i32
  %16 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %17 = bitcast i64* %16 to i32*
  store i32 %15, i32* %17, align 8
  %18 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %19 = load i16, i16* %18, align 2
  %20 = zext i16 %19 to i32
  %21 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 3
  store i32 %20, i32* %21, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pmovzxwq_xmm(%union.XMMReg* nocapture noundef writeonly %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %1 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = zext i16 %5 to i64
  %7 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %6, i64* %7, align 8
  %8 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %9 = load i16, i16* %8, align 2
  %10 = zext i16 %9 to i64
  %11 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  store i64 %10, i64* %11, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pmovzxdq_xmm(%union.XMMReg* nocapture noundef writeonly %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %1 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %6, i64* %7, align 8
  %8 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  store i64 %10, i64* %11, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pmuldq_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to i32*
  %4 = load i32, i32* %3, align 8
  %5 = sext i32 %4 to i64
  %6 = bitcast %union.XMMReg* %1 to i32*
  %7 = load i32, i32* %6, align 8
  %8 = sext i32 %7 to i64
  %9 = mul nsw i64 %8, %5
  %10 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %9, i64* %10, align 8
  %11 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %12 = bitcast i64* %11 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %16 = bitcast i64* %15 to i32*
  %17 = load i32, i32* %16, align 8
  %18 = sext i32 %17 to i64
  %19 = mul nsw i64 %18, %14
  store i64 %19, i64* %11, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pcmpeqq_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = icmp eq i64 %4, %6
  %8 = sext i1 %7 to i64
  store i64 %8, i64* %3, align 8
  %9 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %10, %12
  %14 = sext i1 %13 to i64
  store i64 %14, i64* %9, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_packusdw_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = icmp slt i32 %5, 65535
  %7 = select i1 %6, i32 %5, i32 65535
  %8 = icmp sgt i32 %7, 0
  %9 = select i1 %8, i32 %7, i32 0
  %10 = trunc i32 %9 to i16
  %11 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %12 = bitcast %union.XMMReg* %0 to i16*
  store i16 %10, i16* %12, align 8
  %13 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %14 = load i32, i32* %13, align 4
  %15 = icmp slt i32 %14, 65535
  %16 = select i1 %15, i32 %14, i32 65535
  %17 = icmp sgt i32 %16, 0
  %18 = select i1 %17, i32 %16, i32 0
  %19 = trunc i32 %18 to i16
  %20 = getelementptr inbounds [8 x i16], [8 x i16]* %11, i64 0, i64 1
  store i16 %19, i16* %20, align 2
  %21 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %22 = bitcast i64* %21 to i32*
  %23 = load i32, i32* %22, align 8
  %24 = icmp slt i32 %23, 65535
  %25 = select i1 %24, i32 %23, i32 65535
  %26 = icmp sgt i32 %25, 0
  %27 = select i1 %26, i32 %25, i32 0
  %28 = trunc i32 %27 to i16
  %29 = getelementptr inbounds [8 x i16], [8 x i16]* %11, i64 0, i64 2
  store i16 %28, i16* %29, align 4
  %30 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %31 = load i32, i32* %30, align 4
  %32 = icmp slt i32 %31, 65535
  %33 = select i1 %32, i32 %31, i32 65535
  %34 = icmp sgt i32 %33, 0
  %35 = select i1 %34, i32 %33, i32 0
  %36 = trunc i32 %35 to i16
  %37 = getelementptr inbounds [8 x i16], [8 x i16]* %11, i64 0, i64 3
  store i16 %36, i16* %37, align 2
  %38 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %39 = bitcast %union.XMMReg* %1 to i32*
  %40 = load i32, i32* %39, align 8
  %41 = icmp slt i32 %40, 65535
  %42 = select i1 %41, i32 %40, i32 65535
  %43 = icmp sgt i32 %42, 0
  %44 = select i1 %43, i32 %42, i32 0
  %45 = trunc i32 %44 to i16
  %46 = bitcast i64* %21 to i16*
  store i16 %45, i16* %46, align 8
  %47 = getelementptr inbounds [4 x i32], [4 x i32]* %38, i64 0, i64 1
  %48 = load i32, i32* %47, align 4
  %49 = icmp slt i32 %48, 65535
  %50 = select i1 %49, i32 %48, i32 65535
  %51 = icmp sgt i32 %50, 0
  %52 = select i1 %51, i32 %50, i32 0
  %53 = trunc i32 %52 to i16
  %54 = getelementptr inbounds [8 x i16], [8 x i16]* %11, i64 0, i64 5
  store i16 %53, i16* %54, align 2
  %55 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %56 = bitcast i64* %55 to i32*
  %57 = load i32, i32* %56, align 8
  %58 = icmp slt i32 %57, 65535
  %59 = select i1 %58, i32 %57, i32 65535
  %60 = icmp sgt i32 %59, 0
  %61 = select i1 %60, i32 %59, i32 0
  %62 = trunc i32 %61 to i16
  %63 = getelementptr inbounds [8 x i16], [8 x i16]* %11, i64 0, i64 6
  store i16 %62, i16* %63, align 4
  %64 = getelementptr inbounds [4 x i32], [4 x i32]* %38, i64 0, i64 3
  %65 = load i32, i32* %64, align 4
  %66 = icmp slt i32 %65, 65535
  %67 = select i1 %66, i32 %65, i32 65535
  %68 = icmp sgt i32 %67, 0
  %69 = select i1 %68, i32 %67, i32 0
  %70 = trunc i32 %69 to i16
  %71 = getelementptr inbounds [8 x i16], [8 x i16]* %11, i64 0, i64 7
  store i16 %70, i16* %71, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pminsb_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %4 = bitcast %union.XMMReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %7 = bitcast %union.XMMReg* %1 to i8*
  %8 = load i8, i8* %7, align 8
  %9 = icmp slt i8 %5, %8
  %10 = select i1 %9, i8 %5, i8 %8
  store i8 %10, i8* %4, align 8
  %11 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 1
  %12 = load i8, i8* %11, align 1
  %13 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 1
  %14 = load i8, i8* %13, align 1
  %15 = icmp slt i8 %12, %14
  %16 = select i1 %15, i8 %12, i8 %14
  store i8 %16, i8* %11, align 1
  %17 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 2
  %18 = load i8, i8* %17, align 2
  %19 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 2
  %20 = load i8, i8* %19, align 2
  %21 = icmp slt i8 %18, %20
  %22 = select i1 %21, i8 %18, i8 %20
  store i8 %22, i8* %17, align 2
  %23 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 3
  %24 = load i8, i8* %23, align 1
  %25 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 3
  %26 = load i8, i8* %25, align 1
  %27 = icmp slt i8 %24, %26
  %28 = select i1 %27, i8 %24, i8 %26
  store i8 %28, i8* %23, align 1
  %29 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 4
  %30 = load i8, i8* %29, align 4
  %31 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 4
  %32 = load i8, i8* %31, align 4
  %33 = icmp slt i8 %30, %32
  %34 = select i1 %33, i8 %30, i8 %32
  store i8 %34, i8* %29, align 4
  %35 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 5
  %36 = load i8, i8* %35, align 1
  %37 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 5
  %38 = load i8, i8* %37, align 1
  %39 = icmp slt i8 %36, %38
  %40 = select i1 %39, i8 %36, i8 %38
  store i8 %40, i8* %35, align 1
  %41 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 6
  %42 = load i8, i8* %41, align 2
  %43 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 6
  %44 = load i8, i8* %43, align 2
  %45 = icmp slt i8 %42, %44
  %46 = select i1 %45, i8 %42, i8 %44
  store i8 %46, i8* %41, align 2
  %47 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 7
  %48 = load i8, i8* %47, align 1
  %49 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 7
  %50 = load i8, i8* %49, align 1
  %51 = icmp slt i8 %48, %50
  %52 = select i1 %51, i8 %48, i8 %50
  store i8 %52, i8* %47, align 1
  %53 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %54 = bitcast i64* %53 to i8*
  %55 = load i8, i8* %54, align 8
  %56 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %57 = bitcast i64* %56 to i8*
  %58 = load i8, i8* %57, align 8
  %59 = icmp slt i8 %55, %58
  %60 = select i1 %59, i8 %55, i8 %58
  store i8 %60, i8* %54, align 8
  %61 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 9
  %62 = load i8, i8* %61, align 1
  %63 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 9
  %64 = load i8, i8* %63, align 1
  %65 = icmp slt i8 %62, %64
  %66 = select i1 %65, i8 %62, i8 %64
  store i8 %66, i8* %61, align 1
  %67 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 10
  %68 = load i8, i8* %67, align 2
  %69 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 10
  %70 = load i8, i8* %69, align 2
  %71 = icmp slt i8 %68, %70
  %72 = select i1 %71, i8 %68, i8 %70
  store i8 %72, i8* %67, align 2
  %73 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 11
  %74 = load i8, i8* %73, align 1
  %75 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 11
  %76 = load i8, i8* %75, align 1
  %77 = icmp slt i8 %74, %76
  %78 = select i1 %77, i8 %74, i8 %76
  store i8 %78, i8* %73, align 1
  %79 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 12
  %80 = load i8, i8* %79, align 4
  %81 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 12
  %82 = load i8, i8* %81, align 4
  %83 = icmp slt i8 %80, %82
  %84 = select i1 %83, i8 %80, i8 %82
  store i8 %84, i8* %79, align 4
  %85 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 13
  %86 = load i8, i8* %85, align 1
  %87 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 13
  %88 = load i8, i8* %87, align 1
  %89 = icmp slt i8 %86, %88
  %90 = select i1 %89, i8 %86, i8 %88
  store i8 %90, i8* %85, align 1
  %91 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 14
  %92 = load i8, i8* %91, align 2
  %93 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 14
  %94 = load i8, i8* %93, align 2
  %95 = icmp slt i8 %92, %94
  %96 = select i1 %95, i8 %92, i8 %94
  store i8 %96, i8* %91, align 2
  %97 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 15
  %98 = load i8, i8* %97, align 1
  %99 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 15
  %100 = load i8, i8* %99, align 1
  %101 = icmp slt i8 %98, %100
  %102 = select i1 %101, i8 %98, i8 %100
  store i8 %102, i8* %97, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pminsd_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %7 = bitcast %union.XMMReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = icmp slt i32 %5, %8
  %10 = select i1 %9, i32 %5, i32 %8
  store i32 %10, i32* %4, align 8
  %11 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %14 = load i32, i32* %13, align 4
  %15 = icmp slt i32 %12, %14
  %16 = select i1 %15, i32 %12, i32 %14
  store i32 %16, i32* %11, align 4
  %17 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %18 = bitcast i64* %17 to i32*
  %19 = load i32, i32* %18, align 8
  %20 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %21 = bitcast i64* %20 to i32*
  %22 = load i32, i32* %21, align 8
  %23 = icmp slt i32 %19, %22
  %24 = select i1 %23, i32 %19, i32 %22
  store i32 %24, i32* %18, align 8
  %25 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %28 = load i32, i32* %27, align 4
  %29 = icmp slt i32 %26, %28
  %30 = select i1 %29, i32 %26, i32 %28
  store i32 %30, i32* %25, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pminuw_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %7 = bitcast %union.XMMReg* %1 to i16*
  %8 = load i16, i16* %7, align 8
  %9 = icmp ult i16 %5, %8
  %10 = select i1 %9, i16 %5, i16 %8
  store i16 %10, i16* %4, align 8
  %11 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %12 = load i16, i16* %11, align 2
  %13 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 1
  %14 = load i16, i16* %13, align 2
  %15 = icmp ult i16 %12, %14
  %16 = select i1 %15, i16 %12, i16 %14
  store i16 %16, i16* %11, align 2
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %18 = load i16, i16* %17, align 4
  %19 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 2
  %20 = load i16, i16* %19, align 4
  %21 = icmp ult i16 %18, %20
  %22 = select i1 %21, i16 %18, i16 %20
  store i16 %22, i16* %17, align 4
  %23 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %24 = load i16, i16* %23, align 2
  %25 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 3
  %26 = load i16, i16* %25, align 2
  %27 = icmp ult i16 %24, %26
  %28 = select i1 %27, i16 %24, i16 %26
  store i16 %28, i16* %23, align 2
  %29 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %30 = bitcast i64* %29 to i16*
  %31 = load i16, i16* %30, align 8
  %32 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %33 = bitcast i64* %32 to i16*
  %34 = load i16, i16* %33, align 8
  %35 = icmp ult i16 %31, %34
  %36 = select i1 %35, i16 %31, i16 %34
  store i16 %36, i16* %30, align 8
  %37 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %38 = load i16, i16* %37, align 2
  %39 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 5
  %40 = load i16, i16* %39, align 2
  %41 = icmp ult i16 %38, %40
  %42 = select i1 %41, i16 %38, i16 %40
  store i16 %42, i16* %37, align 2
  %43 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %44 = load i16, i16* %43, align 4
  %45 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 6
  %46 = load i16, i16* %45, align 4
  %47 = icmp ult i16 %44, %46
  %48 = select i1 %47, i16 %44, i16 %46
  store i16 %48, i16* %43, align 4
  %49 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %50 = load i16, i16* %49, align 2
  %51 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 7
  %52 = load i16, i16* %51, align 2
  %53 = icmp ult i16 %50, %52
  %54 = select i1 %53, i16 %50, i16 %52
  store i16 %54, i16* %49, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pminud_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %7 = bitcast %union.XMMReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %5, %8
  %10 = select i1 %9, i32 %5, i32 %8
  store i32 %10, i32* %4, align 8
  %11 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %14 = load i32, i32* %13, align 4
  %15 = icmp ult i32 %12, %14
  %16 = select i1 %15, i32 %12, i32 %14
  store i32 %16, i32* %11, align 4
  %17 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %18 = bitcast i64* %17 to i32*
  %19 = load i32, i32* %18, align 8
  %20 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %21 = bitcast i64* %20 to i32*
  %22 = load i32, i32* %21, align 8
  %23 = icmp ult i32 %19, %22
  %24 = select i1 %23, i32 %19, i32 %22
  store i32 %24, i32* %18, align 8
  %25 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %28 = load i32, i32* %27, align 4
  %29 = icmp ult i32 %26, %28
  %30 = select i1 %29, i32 %26, i32 %28
  store i32 %30, i32* %25, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pmaxsb_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %4 = bitcast %union.XMMReg* %0 to i8*
  %5 = load i8, i8* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %7 = bitcast %union.XMMReg* %1 to i8*
  %8 = load i8, i8* %7, align 8
  %9 = icmp sgt i8 %5, %8
  %10 = select i1 %9, i8 %5, i8 %8
  store i8 %10, i8* %4, align 8
  %11 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 1
  %12 = load i8, i8* %11, align 1
  %13 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 1
  %14 = load i8, i8* %13, align 1
  %15 = icmp sgt i8 %12, %14
  %16 = select i1 %15, i8 %12, i8 %14
  store i8 %16, i8* %11, align 1
  %17 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 2
  %18 = load i8, i8* %17, align 2
  %19 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 2
  %20 = load i8, i8* %19, align 2
  %21 = icmp sgt i8 %18, %20
  %22 = select i1 %21, i8 %18, i8 %20
  store i8 %22, i8* %17, align 2
  %23 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 3
  %24 = load i8, i8* %23, align 1
  %25 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 3
  %26 = load i8, i8* %25, align 1
  %27 = icmp sgt i8 %24, %26
  %28 = select i1 %27, i8 %24, i8 %26
  store i8 %28, i8* %23, align 1
  %29 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 4
  %30 = load i8, i8* %29, align 4
  %31 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 4
  %32 = load i8, i8* %31, align 4
  %33 = icmp sgt i8 %30, %32
  %34 = select i1 %33, i8 %30, i8 %32
  store i8 %34, i8* %29, align 4
  %35 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 5
  %36 = load i8, i8* %35, align 1
  %37 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 5
  %38 = load i8, i8* %37, align 1
  %39 = icmp sgt i8 %36, %38
  %40 = select i1 %39, i8 %36, i8 %38
  store i8 %40, i8* %35, align 1
  %41 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 6
  %42 = load i8, i8* %41, align 2
  %43 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 6
  %44 = load i8, i8* %43, align 2
  %45 = icmp sgt i8 %42, %44
  %46 = select i1 %45, i8 %42, i8 %44
  store i8 %46, i8* %41, align 2
  %47 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 7
  %48 = load i8, i8* %47, align 1
  %49 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 7
  %50 = load i8, i8* %49, align 1
  %51 = icmp sgt i8 %48, %50
  %52 = select i1 %51, i8 %48, i8 %50
  store i8 %52, i8* %47, align 1
  %53 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %54 = bitcast i64* %53 to i8*
  %55 = load i8, i8* %54, align 8
  %56 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %57 = bitcast i64* %56 to i8*
  %58 = load i8, i8* %57, align 8
  %59 = icmp sgt i8 %55, %58
  %60 = select i1 %59, i8 %55, i8 %58
  store i8 %60, i8* %54, align 8
  %61 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 9
  %62 = load i8, i8* %61, align 1
  %63 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 9
  %64 = load i8, i8* %63, align 1
  %65 = icmp sgt i8 %62, %64
  %66 = select i1 %65, i8 %62, i8 %64
  store i8 %66, i8* %61, align 1
  %67 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 10
  %68 = load i8, i8* %67, align 2
  %69 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 10
  %70 = load i8, i8* %69, align 2
  %71 = icmp sgt i8 %68, %70
  %72 = select i1 %71, i8 %68, i8 %70
  store i8 %72, i8* %67, align 2
  %73 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 11
  %74 = load i8, i8* %73, align 1
  %75 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 11
  %76 = load i8, i8* %75, align 1
  %77 = icmp sgt i8 %74, %76
  %78 = select i1 %77, i8 %74, i8 %76
  store i8 %78, i8* %73, align 1
  %79 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 12
  %80 = load i8, i8* %79, align 4
  %81 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 12
  %82 = load i8, i8* %81, align 4
  %83 = icmp sgt i8 %80, %82
  %84 = select i1 %83, i8 %80, i8 %82
  store i8 %84, i8* %79, align 4
  %85 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 13
  %86 = load i8, i8* %85, align 1
  %87 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 13
  %88 = load i8, i8* %87, align 1
  %89 = icmp sgt i8 %86, %88
  %90 = select i1 %89, i8 %86, i8 %88
  store i8 %90, i8* %85, align 1
  %91 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 14
  %92 = load i8, i8* %91, align 2
  %93 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 14
  %94 = load i8, i8* %93, align 2
  %95 = icmp sgt i8 %92, %94
  %96 = select i1 %95, i8 %92, i8 %94
  store i8 %96, i8* %91, align 2
  %97 = getelementptr inbounds [16 x i8], [16 x i8]* %3, i64 0, i64 15
  %98 = load i8, i8* %97, align 1
  %99 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 15
  %100 = load i8, i8* %99, align 1
  %101 = icmp sgt i8 %98, %100
  %102 = select i1 %101, i8 %98, i8 %100
  store i8 %102, i8* %97, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pmaxsd_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %7 = bitcast %union.XMMReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = icmp sgt i32 %5, %8
  %10 = select i1 %9, i32 %5, i32 %8
  store i32 %10, i32* %4, align 8
  %11 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %14 = load i32, i32* %13, align 4
  %15 = icmp sgt i32 %12, %14
  %16 = select i1 %15, i32 %12, i32 %14
  store i32 %16, i32* %11, align 4
  %17 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %18 = bitcast i64* %17 to i32*
  %19 = load i32, i32* %18, align 8
  %20 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %21 = bitcast i64* %20 to i32*
  %22 = load i32, i32* %21, align 8
  %23 = icmp sgt i32 %19, %22
  %24 = select i1 %23, i32 %19, i32 %22
  store i32 %24, i32* %18, align 8
  %25 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %28 = load i32, i32* %27, align 4
  %29 = icmp sgt i32 %26, %28
  %30 = select i1 %29, i32 %26, i32 %28
  store i32 %30, i32* %25, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pmaxuw_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %4 = bitcast %union.XMMReg* %0 to i16*
  %5 = load i16, i16* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %7 = bitcast %union.XMMReg* %1 to i16*
  %8 = load i16, i16* %7, align 8
  %9 = icmp ugt i16 %5, %8
  %10 = select i1 %9, i16 %5, i16 %8
  store i16 %10, i16* %4, align 8
  %11 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %12 = load i16, i16* %11, align 2
  %13 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 1
  %14 = load i16, i16* %13, align 2
  %15 = icmp ugt i16 %12, %14
  %16 = select i1 %15, i16 %12, i16 %14
  store i16 %16, i16* %11, align 2
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %18 = load i16, i16* %17, align 4
  %19 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 2
  %20 = load i16, i16* %19, align 4
  %21 = icmp ugt i16 %18, %20
  %22 = select i1 %21, i16 %18, i16 %20
  store i16 %22, i16* %17, align 4
  %23 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %24 = load i16, i16* %23, align 2
  %25 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 3
  %26 = load i16, i16* %25, align 2
  %27 = icmp ugt i16 %24, %26
  %28 = select i1 %27, i16 %24, i16 %26
  store i16 %28, i16* %23, align 2
  %29 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %30 = bitcast i64* %29 to i16*
  %31 = load i16, i16* %30, align 8
  %32 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %33 = bitcast i64* %32 to i16*
  %34 = load i16, i16* %33, align 8
  %35 = icmp ugt i16 %31, %34
  %36 = select i1 %35, i16 %31, i16 %34
  store i16 %36, i16* %30, align 8
  %37 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %38 = load i16, i16* %37, align 2
  %39 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 5
  %40 = load i16, i16* %39, align 2
  %41 = icmp ugt i16 %38, %40
  %42 = select i1 %41, i16 %38, i16 %40
  store i16 %42, i16* %37, align 2
  %43 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %44 = load i16, i16* %43, align 4
  %45 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 6
  %46 = load i16, i16* %45, align 4
  %47 = icmp ugt i16 %44, %46
  %48 = select i1 %47, i16 %44, i16 %46
  store i16 %48, i16* %43, align 4
  %49 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %50 = load i16, i16* %49, align 2
  %51 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 7
  %52 = load i16, i16* %51, align 2
  %53 = icmp ugt i16 %50, %52
  %54 = select i1 %53, i16 %50, i16 %52
  store i16 %54, i16* %49, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pmaxud_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %7 = bitcast %union.XMMReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = icmp ugt i32 %5, %8
  %10 = select i1 %9, i32 %5, i32 %8
  store i32 %10, i32* %4, align 8
  %11 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %14 = load i32, i32* %13, align 4
  %15 = icmp ugt i32 %12, %14
  %16 = select i1 %15, i32 %12, i32 %14
  store i32 %16, i32* %11, align 4
  %17 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %18 = bitcast i64* %17 to i32*
  %19 = load i32, i32* %18, align 8
  %20 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %21 = bitcast i64* %20 to i32*
  %22 = load i32, i32* %21, align 8
  %23 = icmp ugt i32 %19, %22
  %24 = select i1 %23, i32 %19, i32 %22
  store i32 %24, i32* %18, align 8
  %25 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %28 = load i32, i32* %27, align 4
  %29 = icmp ugt i32 %26, %28
  %30 = select i1 %29, i32 %26, i32 %28
  store i32 %30, i32* %25, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pmulld_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %4 = bitcast %union.XMMReg* %0 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %7 = bitcast %union.XMMReg* %1 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = mul nsw i32 %8, %5
  store i32 %9, i32* %4, align 8
  %10 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %13 = load i32, i32* %12, align 4
  %14 = mul nsw i32 %13, %11
  store i32 %14, i32* %10, align 4
  %15 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %16 = bitcast i64* %15 to i32*
  %17 = load i32, i32* %16, align 8
  %18 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %19 = bitcast i64* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = mul nsw i32 %20, %17
  store i32 %21, i32* %16, align 8
  %22 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %25 = load i32, i32* %24, align 4
  %26 = mul nsw i32 %25, %23
  store i32 %26, i32* %22, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_phminposuw_xmm(%union.XMMReg* nocapture noundef writeonly %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %4 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 1
  %5 = load i16, i16* %4, align 2
  %6 = bitcast %union.XMMReg* %1 to i16*
  %7 = load i16, i16* %6, align 2
  %8 = icmp ult i16 %5, %7
  %9 = zext i1 %8 to i32
  %10 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 2
  %11 = load i16, i16* %10, align 4
  %12 = zext i1 %8 to i64
  %13 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 %12
  %14 = load i16, i16* %13, align 2
  %15 = icmp ult i16 %11, %14
  %16 = select i1 %15, i32 2, i32 %9
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 3
  %18 = load i16, i16* %17, align 2
  %19 = zext i32 %16 to i64
  %20 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 %19
  %21 = load i16, i16* %20, align 2
  %22 = icmp ult i16 %18, %21
  %23 = select i1 %22, i32 3, i32 %16
  %24 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %25 = bitcast i64* %24 to i16*
  %26 = load i16, i16* %25, align 8
  %27 = zext i32 %23 to i64
  %28 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 %27
  %29 = load i16, i16* %28, align 2
  %30 = icmp ult i16 %26, %29
  %31 = select i1 %30, i32 4, i32 %23
  %32 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 5
  %33 = load i16, i16* %32, align 2
  %34 = zext i32 %31 to i64
  %35 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 %34
  %36 = load i16, i16* %35, align 2
  %37 = icmp ult i16 %33, %36
  %38 = select i1 %37, i32 5, i32 %31
  %39 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 6
  %40 = load i16, i16* %39, align 4
  %41 = zext i32 %38 to i64
  %42 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 %41
  %43 = load i16, i16* %42, align 2
  %44 = icmp ult i16 %40, %43
  %45 = select i1 %44, i32 6, i32 %38
  %46 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 7
  %47 = load i16, i16* %46, align 2
  %48 = zext i32 %45 to i64
  %49 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 %48
  %50 = load i16, i16* %49, align 2
  %51 = icmp ult i16 %47, %50
  %52 = select i1 %51, i32 7, i32 %45
  %53 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  store i64 0, i64* %53, align 8
  %54 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %55 = getelementptr inbounds [4 x i32], [4 x i32]* %54, i64 0, i64 1
  store i32 0, i32* %55, align 4
  %56 = trunc i32 %52 to i16
  %57 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %58 = getelementptr inbounds [8 x i16], [8 x i16]* %57, i64 0, i64 1
  store i16 %56, i16* %58, align 2
  %59 = zext i32 %52 to i64
  %60 = getelementptr inbounds [8 x i16], [8 x i16]* %3, i64 0, i64 %59
  %61 = load i16, i16* %60, align 2
  %62 = bitcast %union.XMMReg* %0 to i16*
  store i16 %61, i16* %62, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_roundps_xmm(%union.XMMReg* nocapture noundef writeonly %0, %union.XMMReg* nocapture noundef readonly %1, i32 noundef %2) local_unnamed_addr #3 {
  %4 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 13, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = and i32 %2, 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %12

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 13
  %11 = and i32 %2, 3
  tail call void @set_float_rounding_mode(i32 noundef %11, %struct.float_status* noundef nonnull %10)
  br label %12

12:                                               ; preds = %9, %3
  %13 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %14 = bitcast %union.XMMReg* %1 to i32*
  %15 = load i32, i32* %14, align 8
  %16 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %17 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %16, i64 0, i32 13
  %18 = tail call i32 @float32_round_to_int(i32 noundef %15, %struct.float_status* noundef nonnull %17)
  %19 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %20 = bitcast %union.XMMReg* %0 to i32*
  store i32 %18, i32* %20, align 8
  %21 = getelementptr inbounds [4 x i32], [4 x i32]* %13, i64 0, i64 1
  %22 = load i32, i32* %21, align 4
  %23 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %24 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %23, i64 0, i32 13
  %25 = tail call i32 @float32_round_to_int(i32 noundef %22, %struct.float_status* noundef nonnull %24)
  %26 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 1
  store i32 %25, i32* %26, align 4
  %27 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %28 = bitcast i64* %27 to i32*
  %29 = load i32, i32* %28, align 8
  %30 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %31 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %30, i64 0, i32 13
  %32 = tail call i32 @float32_round_to_int(i32 noundef %29, %struct.float_status* noundef nonnull %31)
  %33 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %34 = bitcast i64* %33 to i32*
  store i32 %32, i32* %34, align 8
  %35 = getelementptr inbounds [4 x i32], [4 x i32]* %13, i64 0, i64 3
  %36 = load i32, i32* %35, align 4
  %37 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %38 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %37, i64 0, i32 13
  %39 = tail call i32 @float32_round_to_int(i32 noundef %36, %struct.float_status* noundef nonnull %38)
  %40 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i64 0, i64 3
  store i32 %39, i32* %40, align 4
  %41 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %42 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %41, i64 0, i32 13, i32 1
  store i8 %6, i8* %42, align 1
  ret void
}

; Function Attrs: uwtable
define void @helper_roundpd_xmm(%union.XMMReg* nocapture noundef writeonly %0, %union.XMMReg* nocapture noundef readonly %1, i32 noundef %2) local_unnamed_addr #3 {
  %4 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 13, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = and i32 %2, 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %12

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 13
  %11 = and i32 %2, 3
  tail call void @set_float_rounding_mode(i32 noundef %11, %struct.float_status* noundef nonnull %10)
  br label %12

12:                                               ; preds = %9, %3
  %13 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %14 = load i64, i64* %13, align 8
  %15 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 13
  %17 = tail call i64 @float64_round_to_int(i64 noundef %14, %struct.float_status* noundef nonnull %16)
  %18 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %17, i64* %18, align 8
  %19 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %20 = load i64, i64* %19, align 8
  %21 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %22 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 13
  %23 = tail call i64 @float64_round_to_int(i64 noundef %20, %struct.float_status* noundef nonnull %22)
  %24 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  store i64 %23, i64* %24, align 8
  %25 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %26 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %25, i64 0, i32 13, i32 1
  store i8 %6, i8* %26, align 1
  ret void
}

; Function Attrs: uwtable
define void @helper_roundss_xmm(%union.XMMReg* nocapture noundef writeonly %0, %union.XMMReg* nocapture noundef readonly %1, i32 noundef %2) local_unnamed_addr #3 {
  %4 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 13, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = and i32 %2, 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %12

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 13
  %11 = and i32 %2, 3
  tail call void @set_float_rounding_mode(i32 noundef %11, %struct.float_status* noundef nonnull %10)
  br label %12

12:                                               ; preds = %9, %3
  %13 = bitcast %union.XMMReg* %1 to i32*
  %14 = load i32, i32* %13, align 8
  %15 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 13
  %17 = tail call i32 @float32_round_to_int(i32 noundef %14, %struct.float_status* noundef nonnull %16)
  %18 = bitcast %union.XMMReg* %0 to i32*
  store i32 %17, i32* %18, align 8
  %19 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %20 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %19, i64 0, i32 13, i32 1
  store i8 %6, i8* %20, align 1
  ret void
}

; Function Attrs: uwtable
define void @helper_roundsd_xmm(%union.XMMReg* nocapture noundef writeonly %0, %union.XMMReg* nocapture noundef readonly %1, i32 noundef %2) local_unnamed_addr #3 {
  %4 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %5 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 13, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = and i32 %2, 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %12

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %4, i64 0, i32 13
  %11 = and i32 %2, 3
  tail call void @set_float_rounding_mode(i32 noundef %11, %struct.float_status* noundef nonnull %10)
  br label %12

12:                                               ; preds = %9, %3
  %13 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %14 = load i64, i64* %13, align 8
  %15 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 13
  %17 = tail call i64 @float64_round_to_int(i64 noundef %14, %struct.float_status* noundef nonnull %16)
  %18 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %17, i64* %18, align 8
  %19 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %20 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %19, i64 0, i32 13, i32 1
  store i8 %6, i8* %20, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_blendps_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1, i32 noundef %2) local_unnamed_addr #2 {
  %4 = and i32 %2, 1
  %5 = icmp eq i32 %4, 0
  %6 = select i1 %5, %union.XMMReg* %0, %union.XMMReg* %1
  %7 = bitcast %union.XMMReg* %6 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %10 = bitcast %union.XMMReg* %0 to i32*
  store i32 %8, i32* %10, align 8
  %11 = and i32 %2, 2
  %12 = icmp eq i32 %11, 0
  %13 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %14 = select i1 %12, [4 x i32]* %9, [4 x i32]* %13
  %15 = getelementptr inbounds [4 x i32], [4 x i32]* %14, i64 0, i64 1
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds [4 x i32], [4 x i32]* %9, i64 0, i64 1
  store i32 %16, i32* %17, align 4
  %18 = and i32 %2, 4
  %19 = icmp eq i32 %18, 0
  %20 = select i1 %19, %union.XMMReg* %0, %union.XMMReg* %1
  %21 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %20, i64 0, i32 0, i64 1
  %22 = bitcast i64* %21 to i32*
  %23 = load i32, i32* %22, align 8
  %24 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %25 = bitcast i64* %24 to i32*
  store i32 %23, i32* %25, align 8
  %26 = and i32 %2, 8
  %27 = icmp eq i32 %26, 0
  %28 = select i1 %27, [4 x i32]* %9, [4 x i32]* %13
  %29 = getelementptr inbounds [4 x i32], [4 x i32]* %28, i64 0, i64 3
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds [4 x i32], [4 x i32]* %9, i64 0, i64 3
  store i32 %30, i32* %31, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_blendpd_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1, i32 noundef %2) local_unnamed_addr #2 {
  %4 = and i32 %2, 1
  %5 = icmp eq i32 %4, 0
  %6 = select i1 %5, %union.XMMReg* %0, %union.XMMReg* %1
  %7 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %6, i64 0, i32 0, i64 0
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %8, i64* %9, align 8
  %10 = and i32 %2, 2
  %11 = icmp eq i32 %10, 0
  %12 = select i1 %11, %union.XMMReg* %0, %union.XMMReg* %1
  %13 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %12, i64 0, i32 0, i64 1
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  store i64 %14, i64* %15, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pblendw_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1, i32 noundef %2) local_unnamed_addr #2 {
  %4 = and i32 %2, 1
  %5 = icmp eq i32 %4, 0
  %6 = select i1 %5, %union.XMMReg* %0, %union.XMMReg* %1
  %7 = bitcast %union.XMMReg* %6 to i16*
  %8 = load i16, i16* %7, align 8
  %9 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %10 = bitcast %union.XMMReg* %0 to i16*
  store i16 %8, i16* %10, align 8
  %11 = and i32 %2, 2
  %12 = icmp eq i32 %11, 0
  %13 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %14 = select i1 %12, [8 x i16]* %9, [8 x i16]* %13
  %15 = getelementptr inbounds [8 x i16], [8 x i16]* %14, i64 0, i64 1
  %16 = load i16, i16* %15, align 2
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %9, i64 0, i64 1
  store i16 %16, i16* %17, align 2
  %18 = and i32 %2, 4
  %19 = icmp eq i32 %18, 0
  %20 = select i1 %19, [8 x i16]* %9, [8 x i16]* %13
  %21 = getelementptr inbounds [8 x i16], [8 x i16]* %20, i64 0, i64 2
  %22 = load i16, i16* %21, align 4
  %23 = getelementptr inbounds [8 x i16], [8 x i16]* %9, i64 0, i64 2
  store i16 %22, i16* %23, align 4
  %24 = and i32 %2, 8
  %25 = icmp eq i32 %24, 0
  %26 = select i1 %25, [8 x i16]* %9, [8 x i16]* %13
  %27 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 3
  %28 = load i16, i16* %27, align 2
  %29 = getelementptr inbounds [8 x i16], [8 x i16]* %9, i64 0, i64 3
  store i16 %28, i16* %29, align 2
  %30 = and i32 %2, 16
  %31 = icmp eq i32 %30, 0
  %32 = select i1 %31, %union.XMMReg* %0, %union.XMMReg* %1
  %33 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %32, i64 0, i32 0, i64 1
  %34 = bitcast i64* %33 to i16*
  %35 = load i16, i16* %34, align 8
  %36 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %37 = bitcast i64* %36 to i16*
  store i16 %35, i16* %37, align 8
  %38 = and i32 %2, 32
  %39 = icmp eq i32 %38, 0
  %40 = select i1 %39, [8 x i16]* %9, [8 x i16]* %13
  %41 = getelementptr inbounds [8 x i16], [8 x i16]* %40, i64 0, i64 5
  %42 = load i16, i16* %41, align 2
  %43 = getelementptr inbounds [8 x i16], [8 x i16]* %9, i64 0, i64 5
  store i16 %42, i16* %43, align 2
  %44 = and i32 %2, 64
  %45 = icmp eq i32 %44, 0
  %46 = select i1 %45, [8 x i16]* %9, [8 x i16]* %13
  %47 = getelementptr inbounds [8 x i16], [8 x i16]* %46, i64 0, i64 6
  %48 = load i16, i16* %47, align 4
  %49 = getelementptr inbounds [8 x i16], [8 x i16]* %9, i64 0, i64 6
  store i16 %48, i16* %49, align 4
  %50 = and i32 %2, 128
  %51 = icmp eq i32 %50, 0
  %52 = select i1 %51, [8 x i16]* %9, [8 x i16]* %13
  %53 = getelementptr inbounds [8 x i16], [8 x i16]* %52, i64 0, i64 7
  %54 = load i16, i16* %53, align 2
  %55 = getelementptr inbounds [8 x i16], [8 x i16]* %9, i64 0, i64 7
  store i16 %54, i16* %55, align 2
  ret void
}

; Function Attrs: uwtable
define void @helper_dpps_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1, i32 noundef %2) local_unnamed_addr #3 {
  %4 = and i32 %2, 16
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %3
  %7 = bitcast %union.XMMReg* %0 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = bitcast %union.XMMReg* %1 to i32*
  %10 = load i32, i32* %9, align 8
  %11 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %11, i64 0, i32 13
  %13 = tail call i32 @float32_mul(i32 noundef %8, i32 noundef %10, %struct.float_status* noundef nonnull %12)
  %14 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 13
  %16 = tail call i32 @float32_add(i32 noundef 0, i32 noundef %13, %struct.float_status* noundef nonnull %15)
  br label %17

17:                                               ; preds = %6, %3
  %18 = phi i32 [ %16, %6 ], [ 0, %3 ]
  %19 = and i32 %2, 32
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %34, label %21

21:                                               ; preds = %17
  %22 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %23 = getelementptr inbounds [4 x i32], [4 x i32]* %22, i64 0, i64 1
  %24 = load i32, i32* %23, align 4
  %25 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %26 = getelementptr inbounds [4 x i32], [4 x i32]* %25, i64 0, i64 1
  %27 = load i32, i32* %26, align 4
  %28 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %29 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %28, i64 0, i32 13
  %30 = tail call i32 @float32_mul(i32 noundef %24, i32 noundef %27, %struct.float_status* noundef nonnull %29)
  %31 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %32 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %31, i64 0, i32 13
  %33 = tail call i32 @float32_add(i32 noundef %18, i32 noundef %30, %struct.float_status* noundef nonnull %32)
  br label %34

34:                                               ; preds = %21, %17
  %35 = phi i32 [ %33, %21 ], [ %18, %17 ]
  %36 = and i32 %2, 64
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %51, label %38

38:                                               ; preds = %34
  %39 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %40 = bitcast i64* %39 to i32*
  %41 = load i32, i32* %40, align 8
  %42 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %43 = bitcast i64* %42 to i32*
  %44 = load i32, i32* %43, align 8
  %45 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %46 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %45, i64 0, i32 13
  %47 = tail call i32 @float32_mul(i32 noundef %41, i32 noundef %44, %struct.float_status* noundef nonnull %46)
  %48 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %49 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %48, i64 0, i32 13
  %50 = tail call i32 @float32_add(i32 noundef %35, i32 noundef %47, %struct.float_status* noundef nonnull %49)
  br label %51

51:                                               ; preds = %38, %34
  %52 = phi i32 [ %50, %38 ], [ %35, %34 ]
  %53 = and i32 %2, 128
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %68, label %55

55:                                               ; preds = %51
  %56 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %57 = getelementptr inbounds [4 x i32], [4 x i32]* %56, i64 0, i64 3
  %58 = load i32, i32* %57, align 4
  %59 = bitcast %union.XMMReg* %1 to [4 x i32]*
  %60 = getelementptr inbounds [4 x i32], [4 x i32]* %59, i64 0, i64 3
  %61 = load i32, i32* %60, align 4
  %62 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %63 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %62, i64 0, i32 13
  %64 = tail call i32 @float32_mul(i32 noundef %58, i32 noundef %61, %struct.float_status* noundef nonnull %63)
  %65 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %66 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %65, i64 0, i32 13
  %67 = tail call i32 @float32_add(i32 noundef %52, i32 noundef %64, %struct.float_status* noundef nonnull %66)
  br label %68

68:                                               ; preds = %51, %55
  %69 = phi i32 [ %67, %55 ], [ %52, %51 ]
  %70 = bitcast %union.XMMReg* %0 to [4 x i32]*
  %71 = and i32 %2, 1
  %72 = icmp eq i32 %71, 0
  %73 = select i1 %72, i32 0, i32 %69
  %74 = bitcast %union.XMMReg* %0 to i32*
  store i32 %73, i32* %74, align 8
  %75 = and i32 %2, 2
  %76 = icmp eq i32 %75, 0
  %77 = select i1 %76, i32 0, i32 %69
  %78 = getelementptr inbounds [4 x i32], [4 x i32]* %70, i64 0, i64 1
  store i32 %77, i32* %78, align 4
  %79 = and i32 %2, 4
  %80 = icmp eq i32 %79, 0
  %81 = select i1 %80, i32 0, i32 %69
  %82 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %83 = bitcast i64* %82 to i32*
  store i32 %81, i32* %83, align 8
  %84 = and i32 %2, 8
  %85 = icmp eq i32 %84, 0
  %86 = select i1 %85, i32 0, i32 %69
  %87 = getelementptr inbounds [4 x i32], [4 x i32]* %70, i64 0, i64 3
  store i32 %86, i32* %87, align 4
  ret void
}

; Function Attrs: uwtable
define void @helper_dppd_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1, i32 noundef %2) local_unnamed_addr #3 {
  %4 = and i32 %2, 16
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %10 = load i64, i64* %9, align 8
  %11 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %11, i64 0, i32 13
  %13 = tail call i64 @float64_mul(i64 noundef %8, i64 noundef %10, %struct.float_status* noundef nonnull %12)
  %14 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %15 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %14, i64 0, i32 13
  %16 = tail call i64 @float64_add(i64 noundef 0, i64 noundef %13, %struct.float_status* noundef nonnull %15)
  br label %17

17:                                               ; preds = %6, %3
  %18 = phi i64 [ %16, %6 ], [ 0, %3 ]
  %19 = and i32 %2, 32
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %32, label %21

21:                                               ; preds = %17
  %22 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %23 = load i64, i64* %22, align 8
  %24 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %25 = load i64, i64* %24, align 8
  %26 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %27 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %26, i64 0, i32 13
  %28 = tail call i64 @float64_mul(i64 noundef %23, i64 noundef %25, %struct.float_status* noundef nonnull %27)
  %29 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %30 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %29, i64 0, i32 13
  %31 = tail call i64 @float64_add(i64 noundef %18, i64 noundef %28, %struct.float_status* noundef nonnull %30)
  br label %32

32:                                               ; preds = %21, %17
  %33 = phi i64 [ %31, %21 ], [ %18, %17 ]
  %34 = and i32 %2, 1
  %35 = icmp eq i32 %34, 0
  %36 = select i1 %35, i64 0, i64 %33
  %37 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %36, i64* %37, align 8
  %38 = and i32 %2, 2
  %39 = icmp eq i32 %38, 0
  %40 = select i1 %39, i64 0, i64 %33
  %41 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  store i64 %40, i64* %41, align 8
  ret void
}

; Function Attrs: nofree nosync nounwind uwtable
define void @helper_mpsadbw_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1, i32 noundef %2) local_unnamed_addr #20 {
  %4 = shl i32 %2, 2
  %5 = and i32 %4, 12
  %6 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %7 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %8 = zext i32 %5 to i64
  %9 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 %8
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = or i32 %5, 1
  %13 = zext i32 %12 to i64
  %14 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 %13
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i32
  %17 = or i32 %5, 2
  %18 = zext i32 %17 to i64
  %19 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 %18
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = or i32 %5, 3
  %23 = zext i32 %22 to i64
  %24 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 %23
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = and i32 %2, 4
  %28 = zext i32 %27 to i64
  %29 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 %28
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = sub nsw i32 %31, %11
  %33 = tail call i32 @llvm.abs.i32(i32 %32, i1 true) #30
  %34 = trunc i32 %33 to i16
  %35 = or i64 %28, 1
  %36 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 %35
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = sub nsw i32 %38, %16
  %40 = tail call i32 @llvm.abs.i32(i32 %39, i1 true) #30
  %41 = trunc i32 %40 to i16
  %42 = add nuw nsw i16 %41, %34
  %43 = or i64 %28, 2
  %44 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 %43
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i32
  %47 = sub nsw i32 %46, %21
  %48 = tail call i32 @llvm.abs.i32(i32 %47, i1 true) #30
  %49 = trunc i32 %48 to i16
  %50 = add nuw nsw i16 %42, %49
  %51 = or i64 %28, 3
  %52 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 %51
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i32
  %55 = sub nsw i32 %54, %26
  %56 = tail call i32 @llvm.abs.i32(i32 %55, i1 true) #30
  %57 = trunc i32 %56 to i16
  %58 = add nuw nsw i16 %50, %57
  %59 = sub nsw i32 %38, %11
  %60 = tail call i32 @llvm.abs.i32(i32 %59, i1 true) #30
  %61 = trunc i32 %60 to i16
  %62 = sub nsw i32 %46, %16
  %63 = tail call i32 @llvm.abs.i32(i32 %62, i1 true) #30
  %64 = trunc i32 %63 to i16
  %65 = add nuw nsw i16 %64, %61
  %66 = sub nsw i32 %54, %21
  %67 = tail call i32 @llvm.abs.i32(i32 %66, i1 true) #30
  %68 = trunc i32 %67 to i16
  %69 = add nuw nsw i16 %65, %68
  %70 = add nuw nsw i64 %28, 4
  %71 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 %70
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i32
  %74 = sub nsw i32 %73, %26
  %75 = tail call i32 @llvm.abs.i32(i32 %74, i1 true) #30
  %76 = trunc i32 %75 to i16
  %77 = add nuw nsw i16 %69, %76
  %78 = sub nsw i32 %46, %11
  %79 = tail call i32 @llvm.abs.i32(i32 %78, i1 true) #30
  %80 = trunc i32 %79 to i16
  %81 = sub nsw i32 %54, %16
  %82 = tail call i32 @llvm.abs.i32(i32 %81, i1 true) #30
  %83 = trunc i32 %82 to i16
  %84 = add nuw nsw i16 %83, %80
  %85 = sub nsw i32 %73, %21
  %86 = tail call i32 @llvm.abs.i32(i32 %85, i1 true) #30
  %87 = trunc i32 %86 to i16
  %88 = add nuw nsw i16 %84, %87
  %89 = add nuw nsw i64 %28, 5
  %90 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 %89
  %91 = load i8, i8* %90, align 1
  %92 = zext i8 %91 to i32
  %93 = sub nsw i32 %92, %26
  %94 = tail call i32 @llvm.abs.i32(i32 %93, i1 true) #30
  %95 = trunc i32 %94 to i16
  %96 = add nuw nsw i16 %88, %95
  %97 = sub nsw i32 %54, %11
  %98 = tail call i32 @llvm.abs.i32(i32 %97, i1 true) #30
  %99 = trunc i32 %98 to i16
  %100 = sub nsw i32 %73, %16
  %101 = tail call i32 @llvm.abs.i32(i32 %100, i1 true) #30
  %102 = trunc i32 %101 to i16
  %103 = add nuw nsw i16 %102, %99
  %104 = sub nsw i32 %92, %21
  %105 = tail call i32 @llvm.abs.i32(i32 %104, i1 true) #30
  %106 = trunc i32 %105 to i16
  %107 = add nuw nsw i16 %103, %106
  %108 = add nuw nsw i64 %28, 6
  %109 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 %108
  %110 = load i8, i8* %109, align 1
  %111 = zext i8 %110 to i32
  %112 = sub nsw i32 %111, %26
  %113 = tail call i32 @llvm.abs.i32(i32 %112, i1 true) #30
  %114 = trunc i32 %113 to i16
  %115 = add nuw nsw i16 %107, %114
  %116 = sub nsw i32 %73, %11
  %117 = tail call i32 @llvm.abs.i32(i32 %116, i1 true) #30
  %118 = trunc i32 %117 to i16
  %119 = add nuw nsw i64 %28, 5
  %120 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 %119
  %121 = load i8, i8* %120, align 1
  %122 = zext i8 %121 to i32
  %123 = sub nsw i32 %122, %16
  %124 = tail call i32 @llvm.abs.i32(i32 %123, i1 true) #30
  %125 = trunc i32 %124 to i16
  %126 = add nuw nsw i16 %125, %118
  %127 = add nuw nsw i64 %28, 6
  %128 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 %127
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i32
  %131 = sub nsw i32 %130, %21
  %132 = tail call i32 @llvm.abs.i32(i32 %131, i1 true) #30
  %133 = trunc i32 %132 to i16
  %134 = add nuw nsw i16 %126, %133
  %135 = add nuw nsw i64 %28, 7
  %136 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 %135
  %137 = load i8, i8* %136, align 1
  %138 = zext i8 %137 to i32
  %139 = sub nsw i32 %138, %26
  %140 = tail call i32 @llvm.abs.i32(i32 %139, i1 true) #30
  %141 = trunc i32 %140 to i16
  %142 = add nuw nsw i16 %134, %141
  %143 = sub nsw i32 %122, %11
  %144 = tail call i32 @llvm.abs.i32(i32 %143, i1 true) #30
  %145 = trunc i32 %144 to i16
  %146 = add nuw nsw i64 %28, 6
  %147 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 %146
  %148 = load i8, i8* %147, align 1
  %149 = zext i8 %148 to i32
  %150 = sub nsw i32 %149, %16
  %151 = tail call i32 @llvm.abs.i32(i32 %150, i1 true) #30
  %152 = trunc i32 %151 to i16
  %153 = add nuw nsw i16 %152, %145
  %154 = add nuw nsw i64 %28, 7
  %155 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 %154
  %156 = load i8, i8* %155, align 1
  %157 = zext i8 %156 to i32
  %158 = sub nsw i32 %157, %21
  %159 = tail call i32 @llvm.abs.i32(i32 %158, i1 true) #30
  %160 = trunc i32 %159 to i16
  %161 = add nuw nsw i16 %153, %160
  %162 = or i64 %28, 8
  %163 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 %162
  %164 = load i8, i8* %163, align 1
  %165 = zext i8 %164 to i32
  %166 = sub nsw i32 %165, %26
  %167 = tail call i32 @llvm.abs.i32(i32 %166, i1 true) #30
  %168 = trunc i32 %167 to i16
  %169 = add nuw nsw i16 %161, %168
  %170 = sub nsw i32 %149, %11
  %171 = tail call i32 @llvm.abs.i32(i32 %170, i1 true) #30
  %172 = trunc i32 %171 to i16
  %173 = add nuw nsw i64 %28, 7
  %174 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 %173
  %175 = load i8, i8* %174, align 1
  %176 = zext i8 %175 to i32
  %177 = sub nsw i32 %176, %16
  %178 = tail call i32 @llvm.abs.i32(i32 %177, i1 true) #30
  %179 = trunc i32 %178 to i16
  %180 = add nuw nsw i16 %179, %172
  %181 = or i64 %28, 8
  %182 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 %181
  %183 = load i8, i8* %182, align 1
  %184 = zext i8 %183 to i32
  %185 = sub nsw i32 %184, %21
  %186 = tail call i32 @llvm.abs.i32(i32 %185, i1 true) #30
  %187 = trunc i32 %186 to i16
  %188 = add nuw nsw i16 %180, %187
  %189 = or i64 %28, 9
  %190 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 %189
  %191 = load i8, i8* %190, align 1
  %192 = zext i8 %191 to i32
  %193 = sub nsw i32 %192, %26
  %194 = tail call i32 @llvm.abs.i32(i32 %193, i1 true) #30
  %195 = trunc i32 %194 to i16
  %196 = add nuw nsw i16 %188, %195
  %197 = sub nsw i32 %176, %11
  %198 = tail call i32 @llvm.abs.i32(i32 %197, i1 true) #30
  %199 = trunc i32 %198 to i16
  %200 = or i64 %28, 8
  %201 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 %200
  %202 = load i8, i8* %201, align 1
  %203 = zext i8 %202 to i32
  %204 = sub nsw i32 %203, %16
  %205 = tail call i32 @llvm.abs.i32(i32 %204, i1 true) #30
  %206 = trunc i32 %205 to i16
  %207 = add nuw nsw i16 %206, %199
  %208 = or i64 %28, 9
  %209 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 %208
  %210 = load i8, i8* %209, align 1
  %211 = zext i8 %210 to i32
  %212 = sub nsw i32 %211, %21
  %213 = tail call i32 @llvm.abs.i32(i32 %212, i1 true) #30
  %214 = trunc i32 %213 to i16
  %215 = add nuw nsw i16 %207, %214
  %216 = or i64 %28, 10
  %217 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 %216
  %218 = load i8, i8* %217, align 1
  %219 = zext i8 %218 to i32
  %220 = sub nsw i32 %219, %26
  %221 = tail call i32 @llvm.abs.i32(i32 %220, i1 true) #30
  %222 = trunc i32 %221 to i16
  %223 = add nuw nsw i16 %215, %222
  %224 = bitcast %union.XMMReg* %0 to i8*
  %225 = bitcast %union.XMMReg* %0 to i16*
  store i16 %58, i16* %225, align 8
  %226 = getelementptr inbounds i8, i8* %224, i64 2
  %227 = bitcast i8* %226 to i16*
  store i16 %77, i16* %227, align 2
  %228 = getelementptr inbounds i8, i8* %224, i64 4
  %229 = bitcast i8* %228 to i16*
  store i16 %96, i16* %229, align 4
  %230 = getelementptr inbounds i8, i8* %224, i64 6
  %231 = bitcast i8* %230 to i16*
  store i16 %115, i16* %231, align 2
  %232 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %233 = bitcast i64* %232 to i16*
  store i16 %142, i16* %233, align 8
  %234 = getelementptr inbounds i8, i8* %224, i64 10
  %235 = bitcast i8* %234 to i16*
  store i16 %169, i16* %235, align 2
  %236 = getelementptr inbounds i8, i8* %224, i64 12
  %237 = bitcast i8* %236 to i16*
  store i16 %196, i16* %237, align 4
  %238 = getelementptr inbounds i8, i8* %224, i64 14
  %239 = bitcast i8* %238 to i16*
  store i16 %223, i16* %239, align 2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @helper_pcmpgtq_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = icmp ugt i64 %4, %6
  %8 = sext i1 %7 to i64
  store i64 %8, i64* %3, align 8
  %9 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %1, i64 0, i32 0, i64 1
  %12 = load i64, i64* %11, align 8
  %13 = icmp ugt i64 %10, %12
  %14 = sext i1 %13 to i64
  store i64 %14, i64* %9, align 8
  ret void
}

; Function Attrs: uwtable
define void @helper_pcmpestri_xmm(%union.XMMReg* nocapture noundef readonly %0, %union.XMMReg* nocapture noundef readonly %1, i32 noundef %2) local_unnamed_addr #3 {
  %4 = trunc i32 %2 to i8
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 0, i64 2
  %7 = load i64, i64* %6, align 8
  %8 = trunc i64 %7 to i32
  %9 = tail call i32 @llvm.abs.i32(i32 %8, i1 true) #30
  %10 = and i32 %2, 1
  %11 = icmp eq i32 %10, 0
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 0, i64 0
  %13 = load i64, i64* %12, align 8
  %14 = trunc i64 %13 to i32
  %15 = tail call i32 @llvm.abs.i32(i32 %14, i1 true) #30
  br i1 %11, label %20, label %16

16:                                               ; preds = %3
  %17 = icmp ult i32 %9, 8
  %18 = select i1 %17, i32 %9, i32 8
  %19 = icmp ugt i32 %15, 8
  br i1 %19, label %26, label %24

20:                                               ; preds = %3
  %21 = icmp ult i32 %9, 16
  %22 = select i1 %21, i32 %9, i32 16
  %23 = icmp ugt i32 %15, 16
  br i1 %23, label %26, label %24

24:                                               ; preds = %20, %16
  %25 = phi i32 [ %22, %20 ], [ %18, %16 ]
  br label %26

26:                                               ; preds = %16, %20, %24
  %27 = phi i32 [ %25, %24 ], [ %18, %16 ], [ %22, %20 ]
  %28 = phi i32 [ %15, %24 ], [ 8, %16 ], [ 16, %20 ]
  %29 = tail call fastcc i32 @pcmpxstrx(%union.XMMReg* noundef %0, %union.XMMReg* noundef %1, i8 noundef signext %4, i32 noundef %27, i32 noundef %28)
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %38, label %31

31:                                               ; preds = %26
  %32 = and i32 %2, 64
  %33 = icmp eq i32 %32, 0
  %34 = select i1 %33, i32 (i32)* @ffs1, i32 (i32)* @rffs1
  %35 = tail call i32 %34(i32 noundef %29), !callees !25
  %36 = add nsw i32 %35, -1
  %37 = sext i32 %36 to i64
  br label %41

38:                                               ; preds = %26
  %39 = lshr i32 16, %10
  %40 = zext i32 %39 to i64
  br label %41

41:                                               ; preds = %38, %31
  %42 = phi i64 [ %40, %38 ], [ %37, %31 ]
  %43 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %44 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %43, i64 0, i32 0, i64 1
  store i64 %42, i64* %44, align 8
  ret void
}

; Function Attrs: inlinehint nofree norecurse nosync nounwind uwtable
define internal fastcc i32 @pcmpxstrx(%union.XMMReg* nocapture noundef readonly %0, %union.XMMReg* nocapture noundef readonly %1, i8 noundef signext %2, i32 noundef %3, i32 noundef %4) unnamed_addr #21 {
  %6 = zext i8 %2 to i32
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  %9 = select i1 %8, i32 15, i32 7
  %10 = add i32 %3, -1
  %11 = add i32 %4, -1
  %12 = icmp slt i32 %9, %3
  %13 = select i1 %12, i64 0, i64 64
  %14 = icmp slt i32 %9, %4
  %15 = select i1 %14, i64 0, i64 128
  %16 = or i64 %13, %15
  %17 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %18 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %17, i64 0, i32 2
  store i64 %16, i64* %18, align 8
  %19 = lshr i32 %6, 2
  %20 = and i32 %19, 3
  switch i32 %20, label %512 [
    i32 0, label %111
    i32 1, label %21
    i32 2, label %365
    i32 3, label %425
  ]

21:                                               ; preds = %5
  %22 = icmp sgt i32 %3, 0
  br i1 %22, label %23, label %513

23:                                               ; preds = %21
  %24 = and i8 %2, 3
  %25 = zext i8 %24 to i32
  %26 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %27 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %28 = add nsw i32 %4, -2
  %29 = or i32 %28, 1
  %30 = icmp sgt i32 %29, -1
  %31 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %32 = bitcast %union.XMMReg* %0 to [16 x i8]*
  br i1 %30, label %33, label %513

33:                                               ; preds = %23
  %34 = zext i32 %29 to i64
  %35 = zext i32 %10 to i64
  br label %36

36:                                               ; preds = %33, %107
  %37 = phi i64 [ %35, %33 ], [ %108, %107 ]
  %38 = phi i32 [ 0, %33 ], [ %104, %107 ]
  %39 = shl i32 %38, 1
  switch i32 %25, label %40 [
    i32 0, label %52
    i32 1, label %48
    i32 2, label %44
  ]

40:                                               ; preds = %36
  %41 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 %37
  %42 = load i16, i16* %41, align 2
  %43 = sext i16 %42 to i32
  br label %56

44:                                               ; preds = %36
  %45 = getelementptr inbounds [16 x i8], [16 x i8]* %27, i64 0, i64 %37
  %46 = load i8, i8* %45, align 1
  %47 = sext i8 %46 to i32
  br label %56

48:                                               ; preds = %36
  %49 = getelementptr inbounds [8 x i16], [8 x i16]* %26, i64 0, i64 %37
  %50 = load i16, i16* %49, align 2
  %51 = zext i16 %50 to i32
  br label %56

52:                                               ; preds = %36
  %53 = getelementptr inbounds [16 x i8], [16 x i8]* %27, i64 0, i64 %37
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i32
  br label %56

56:                                               ; preds = %52, %48, %44, %40
  %57 = phi i32 [ %43, %40 ], [ %47, %44 ], [ %51, %48 ], [ %55, %52 ]
  br label %58

58:                                               ; preds = %56, %101
  %59 = phi i64 [ %34, %56 ], [ %105, %101 ]
  %60 = phi i32 [ %39, %56 ], [ %104, %101 ]
  switch i32 %25, label %61 [
    i32 0, label %73
    i32 1, label %69
    i32 2, label %65
  ]

61:                                               ; preds = %58
  %62 = getelementptr inbounds [8 x i16], [8 x i16]* %31, i64 0, i64 %59
  %63 = load i16, i16* %62, align 2
  %64 = sext i16 %63 to i32
  br label %77

65:                                               ; preds = %58
  %66 = getelementptr inbounds [16 x i8], [16 x i8]* %32, i64 0, i64 %59
  %67 = load i8, i8* %66, align 1
  %68 = sext i8 %67 to i32
  br label %77

69:                                               ; preds = %58
  %70 = getelementptr inbounds [8 x i16], [8 x i16]* %31, i64 0, i64 %59
  %71 = load i16, i16* %70, align 2
  %72 = zext i16 %71 to i32
  br label %77

73:                                               ; preds = %58
  %74 = getelementptr inbounds [16 x i8], [16 x i8]* %32, i64 0, i64 %59
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i32
  br label %77

77:                                               ; preds = %73, %69, %65, %61
  %78 = phi i32 [ %64, %61 ], [ %68, %65 ], [ %72, %69 ], [ %76, %73 ]
  %79 = icmp sgt i32 %78, %57
  br i1 %79, label %101, label %80

80:                                               ; preds = %77
  %81 = add nsw i64 %59, -1
  switch i32 %25, label %110 [
    i32 0, label %94
    i32 1, label %90
    i32 2, label %86
    i32 3, label %82
  ]

82:                                               ; preds = %80
  %83 = getelementptr inbounds [8 x i16], [8 x i16]* %31, i64 0, i64 %81
  %84 = load i16, i16* %83, align 2
  %85 = sext i16 %84 to i32
  br label %98

86:                                               ; preds = %80
  %87 = getelementptr inbounds [16 x i8], [16 x i8]* %32, i64 0, i64 %81
  %88 = load i8, i8* %87, align 1
  %89 = sext i8 %88 to i32
  br label %98

90:                                               ; preds = %80
  %91 = getelementptr inbounds [8 x i16], [8 x i16]* %31, i64 0, i64 %81
  %92 = load i16, i16* %91, align 2
  %93 = zext i16 %92 to i32
  br label %98

94:                                               ; preds = %80
  %95 = getelementptr inbounds [16 x i8], [16 x i8]* %32, i64 0, i64 %81
  %96 = load i8, i8* %95, align 1
  %97 = zext i8 %96 to i32
  br label %98

98:                                               ; preds = %94, %90, %86, %82
  %99 = phi i32 [ %85, %82 ], [ %89, %86 ], [ %93, %90 ], [ %97, %94 ]
  %100 = icmp sge i32 %99, %57
  br label %101

101:                                              ; preds = %98, %77
  %102 = phi i1 [ false, %77 ], [ %100, %98 ]
  %103 = zext i1 %102 to i32
  %104 = or i32 %60, %103
  %105 = add nsw i64 %59, -2
  %106 = icmp sgt i64 %59, 1
  br i1 %106, label %58, label %107, !llvm.loop !26

107:                                              ; preds = %101
  %108 = add nsw i64 %37, -1
  %109 = icmp sgt i64 %37, 0
  br i1 %109, label %36, label %513, !llvm.loop !27

110:                                              ; preds = %80
  unreachable

111:                                              ; preds = %5
  %112 = icmp sgt i32 %3, 0
  br i1 %112, label %113, label %513

113:                                              ; preds = %111
  %114 = and i8 %2, 3
  %115 = zext i8 %114 to i32
  %116 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %117 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %118 = icmp sgt i32 %4, 0
  %119 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %120 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %121 = zext i32 %11 to i64
  %122 = zext i32 %10 to i64
  %123 = add nuw nsw i64 %121, 1
  %124 = and i64 %123, 3
  %125 = icmp eq i64 %124, 0
  %126 = icmp ult i32 %11, 3
  %127 = and i64 %123, 3
  %128 = icmp eq i64 %127, 0
  %129 = icmp ult i32 %11, 3
  %130 = and i64 %123, 3
  %131 = icmp eq i64 %130, 0
  %132 = icmp ult i32 %11, 3
  %133 = and i64 %123, 3
  %134 = icmp eq i64 %133, 0
  %135 = icmp ult i32 %11, 3
  br label %136

136:                                              ; preds = %113, %361
  %137 = phi i64 [ %122, %113 ], [ %363, %361 ]
  %138 = phi i32 [ 0, %113 ], [ %362, %361 ]
  %139 = shl i32 %138, 1
  switch i32 %115, label %152 [
    i32 0, label %140
    i32 1, label %144
    i32 2, label %148
    i32 3, label %153
  ]

140:                                              ; preds = %136
  %141 = getelementptr inbounds [16 x i8], [16 x i8]* %117, i64 0, i64 %137
  %142 = load i8, i8* %141, align 1
  %143 = zext i8 %142 to i32
  br label %157

144:                                              ; preds = %136
  %145 = getelementptr inbounds [8 x i16], [8 x i16]* %116, i64 0, i64 %137
  %146 = load i16, i16* %145, align 2
  %147 = zext i16 %146 to i32
  br label %157

148:                                              ; preds = %136
  %149 = getelementptr inbounds [16 x i8], [16 x i8]* %117, i64 0, i64 %137
  %150 = load i8, i8* %149, align 1
  %151 = sext i8 %150 to i32
  br label %157

152:                                              ; preds = %136
  unreachable

153:                                              ; preds = %136
  %154 = getelementptr inbounds [8 x i16], [8 x i16]* %116, i64 0, i64 %137
  %155 = load i16, i16* %154, align 2
  %156 = sext i16 %155 to i32
  br label %157

157:                                              ; preds = %140, %144, %148, %153
  %158 = phi i32 [ %156, %153 ], [ %151, %148 ], [ %147, %144 ], [ %143, %140 ]
  br i1 %118, label %159, label %361

159:                                              ; preds = %157
  switch i32 %115, label %360 [
    i32 0, label %214
    i32 1, label %196
    i32 2, label %178
    i32 3, label %160
  ]

160:                                              ; preds = %159
  br i1 %125, label %174, label %161

161:                                              ; preds = %160, %161
  %162 = phi i64 [ %171, %161 ], [ %121, %160 ]
  %163 = phi i32 [ %170, %161 ], [ %139, %160 ]
  %164 = phi i64 [ %172, %161 ], [ 0, %160 ]
  %165 = getelementptr inbounds [8 x i16], [8 x i16]* %119, i64 0, i64 %162
  %166 = load i16, i16* %165, align 2
  %167 = sext i16 %166 to i32
  %168 = icmp eq i32 %158, %167
  %169 = zext i1 %168 to i32
  %170 = or i32 %163, %169
  %171 = add nsw i64 %162, -1
  %172 = add i64 %164, 1
  %173 = icmp eq i64 %172, %124
  br i1 %173, label %174, label %161, !llvm.loop !28

174:                                              ; preds = %161, %160
  %175 = phi i64 [ %121, %160 ], [ %171, %161 ]
  %176 = phi i32 [ %139, %160 ], [ %170, %161 ]
  %177 = phi i32 [ undef, %160 ], [ %170, %161 ]
  br i1 %126, label %361, label %328

178:                                              ; preds = %159
  br i1 %128, label %192, label %179

179:                                              ; preds = %178, %179
  %180 = phi i64 [ %189, %179 ], [ %121, %178 ]
  %181 = phi i32 [ %188, %179 ], [ %139, %178 ]
  %182 = phi i64 [ %190, %179 ], [ 0, %178 ]
  %183 = getelementptr inbounds [16 x i8], [16 x i8]* %120, i64 0, i64 %180
  %184 = load i8, i8* %183, align 1
  %185 = sext i8 %184 to i32
  %186 = icmp eq i32 %158, %185
  %187 = zext i1 %186 to i32
  %188 = or i32 %181, %187
  %189 = add nsw i64 %180, -1
  %190 = add i64 %182, 1
  %191 = icmp eq i64 %190, %127
  br i1 %191, label %192, label %179, !llvm.loop !29

192:                                              ; preds = %179, %178
  %193 = phi i64 [ %121, %178 ], [ %189, %179 ]
  %194 = phi i32 [ %139, %178 ], [ %188, %179 ]
  %195 = phi i32 [ undef, %178 ], [ %188, %179 ]
  br i1 %129, label %361, label %296

196:                                              ; preds = %159
  br i1 %131, label %210, label %197

197:                                              ; preds = %196, %197
  %198 = phi i64 [ %207, %197 ], [ %121, %196 ]
  %199 = phi i32 [ %206, %197 ], [ %139, %196 ]
  %200 = phi i64 [ %208, %197 ], [ 0, %196 ]
  %201 = getelementptr inbounds [8 x i16], [8 x i16]* %119, i64 0, i64 %198
  %202 = load i16, i16* %201, align 2
  %203 = zext i16 %202 to i32
  %204 = icmp eq i32 %158, %203
  %205 = zext i1 %204 to i32
  %206 = or i32 %199, %205
  %207 = add nsw i64 %198, -1
  %208 = add i64 %200, 1
  %209 = icmp eq i64 %208, %130
  br i1 %209, label %210, label %197, !llvm.loop !30

210:                                              ; preds = %197, %196
  %211 = phi i64 [ %121, %196 ], [ %207, %197 ]
  %212 = phi i32 [ %139, %196 ], [ %206, %197 ]
  %213 = phi i32 [ undef, %196 ], [ %206, %197 ]
  br i1 %132, label %361, label %264

214:                                              ; preds = %159
  br i1 %134, label %228, label %215

215:                                              ; preds = %214, %215
  %216 = phi i64 [ %225, %215 ], [ %121, %214 ]
  %217 = phi i32 [ %224, %215 ], [ %139, %214 ]
  %218 = phi i64 [ %226, %215 ], [ 0, %214 ]
  %219 = getelementptr inbounds [16 x i8], [16 x i8]* %120, i64 0, i64 %216
  %220 = load i8, i8* %219, align 1
  %221 = zext i8 %220 to i32
  %222 = icmp eq i32 %158, %221
  %223 = zext i1 %222 to i32
  %224 = or i32 %217, %223
  %225 = add nsw i64 %216, -1
  %226 = add i64 %218, 1
  %227 = icmp eq i64 %226, %133
  br i1 %227, label %228, label %215, !llvm.loop !31

228:                                              ; preds = %215, %214
  %229 = phi i64 [ %121, %214 ], [ %225, %215 ]
  %230 = phi i32 [ %139, %214 ], [ %224, %215 ]
  %231 = phi i32 [ undef, %214 ], [ %224, %215 ]
  br i1 %135, label %361, label %232

232:                                              ; preds = %228, %232
  %233 = phi i64 [ %262, %232 ], [ %229, %228 ]
  %234 = phi i32 [ %261, %232 ], [ %230, %228 ]
  %235 = getelementptr inbounds [16 x i8], [16 x i8]* %120, i64 0, i64 %233
  %236 = load i8, i8* %235, align 1
  %237 = zext i8 %236 to i32
  %238 = icmp eq i32 %158, %237
  %239 = zext i1 %238 to i32
  %240 = or i32 %234, %239
  %241 = add nsw i64 %233, -1
  %242 = getelementptr inbounds [16 x i8], [16 x i8]* %120, i64 0, i64 %241
  %243 = load i8, i8* %242, align 1
  %244 = zext i8 %243 to i32
  %245 = icmp eq i32 %158, %244
  %246 = zext i1 %245 to i32
  %247 = or i32 %240, %246
  %248 = add nsw i64 %233, -2
  %249 = getelementptr inbounds [16 x i8], [16 x i8]* %120, i64 0, i64 %248
  %250 = load i8, i8* %249, align 1
  %251 = zext i8 %250 to i32
  %252 = icmp eq i32 %158, %251
  %253 = zext i1 %252 to i32
  %254 = or i32 %247, %253
  %255 = add nsw i64 %233, -3
  %256 = getelementptr inbounds [16 x i8], [16 x i8]* %120, i64 0, i64 %255
  %257 = load i8, i8* %256, align 1
  %258 = zext i8 %257 to i32
  %259 = icmp eq i32 %158, %258
  %260 = zext i1 %259 to i32
  %261 = or i32 %254, %260
  %262 = add nsw i64 %233, -4
  %263 = icmp sgt i64 %233, 3
  br i1 %263, label %232, label %361, !llvm.loop !32

264:                                              ; preds = %210, %264
  %265 = phi i64 [ %294, %264 ], [ %211, %210 ]
  %266 = phi i32 [ %293, %264 ], [ %212, %210 ]
  %267 = getelementptr inbounds [8 x i16], [8 x i16]* %119, i64 0, i64 %265
  %268 = load i16, i16* %267, align 2
  %269 = zext i16 %268 to i32
  %270 = icmp eq i32 %158, %269
  %271 = zext i1 %270 to i32
  %272 = or i32 %266, %271
  %273 = add nsw i64 %265, -1
  %274 = getelementptr inbounds [8 x i16], [8 x i16]* %119, i64 0, i64 %273
  %275 = load i16, i16* %274, align 2
  %276 = zext i16 %275 to i32
  %277 = icmp eq i32 %158, %276
  %278 = zext i1 %277 to i32
  %279 = or i32 %272, %278
  %280 = add nsw i64 %265, -2
  %281 = getelementptr inbounds [8 x i16], [8 x i16]* %119, i64 0, i64 %280
  %282 = load i16, i16* %281, align 2
  %283 = zext i16 %282 to i32
  %284 = icmp eq i32 %158, %283
  %285 = zext i1 %284 to i32
  %286 = or i32 %279, %285
  %287 = add nsw i64 %265, -3
  %288 = getelementptr inbounds [8 x i16], [8 x i16]* %119, i64 0, i64 %287
  %289 = load i16, i16* %288, align 2
  %290 = zext i16 %289 to i32
  %291 = icmp eq i32 %158, %290
  %292 = zext i1 %291 to i32
  %293 = or i32 %286, %292
  %294 = add nsw i64 %265, -4
  %295 = icmp sgt i64 %265, 3
  br i1 %295, label %264, label %361, !llvm.loop !32

296:                                              ; preds = %192, %296
  %297 = phi i64 [ %326, %296 ], [ %193, %192 ]
  %298 = phi i32 [ %325, %296 ], [ %194, %192 ]
  %299 = getelementptr inbounds [16 x i8], [16 x i8]* %120, i64 0, i64 %297
  %300 = load i8, i8* %299, align 1
  %301 = sext i8 %300 to i32
  %302 = icmp eq i32 %158, %301
  %303 = zext i1 %302 to i32
  %304 = or i32 %298, %303
  %305 = add nsw i64 %297, -1
  %306 = getelementptr inbounds [16 x i8], [16 x i8]* %120, i64 0, i64 %305
  %307 = load i8, i8* %306, align 1
  %308 = sext i8 %307 to i32
  %309 = icmp eq i32 %158, %308
  %310 = zext i1 %309 to i32
  %311 = or i32 %304, %310
  %312 = add nsw i64 %297, -2
  %313 = getelementptr inbounds [16 x i8], [16 x i8]* %120, i64 0, i64 %312
  %314 = load i8, i8* %313, align 1
  %315 = sext i8 %314 to i32
  %316 = icmp eq i32 %158, %315
  %317 = zext i1 %316 to i32
  %318 = or i32 %311, %317
  %319 = add nsw i64 %297, -3
  %320 = getelementptr inbounds [16 x i8], [16 x i8]* %120, i64 0, i64 %319
  %321 = load i8, i8* %320, align 1
  %322 = sext i8 %321 to i32
  %323 = icmp eq i32 %158, %322
  %324 = zext i1 %323 to i32
  %325 = or i32 %318, %324
  %326 = add nsw i64 %297, -4
  %327 = icmp sgt i64 %297, 3
  br i1 %327, label %296, label %361, !llvm.loop !32

328:                                              ; preds = %174, %328
  %329 = phi i64 [ %358, %328 ], [ %175, %174 ]
  %330 = phi i32 [ %357, %328 ], [ %176, %174 ]
  %331 = getelementptr inbounds [8 x i16], [8 x i16]* %119, i64 0, i64 %329
  %332 = load i16, i16* %331, align 2
  %333 = sext i16 %332 to i32
  %334 = icmp eq i32 %158, %333
  %335 = zext i1 %334 to i32
  %336 = or i32 %330, %335
  %337 = add nsw i64 %329, -1
  %338 = getelementptr inbounds [8 x i16], [8 x i16]* %119, i64 0, i64 %337
  %339 = load i16, i16* %338, align 2
  %340 = sext i16 %339 to i32
  %341 = icmp eq i32 %158, %340
  %342 = zext i1 %341 to i32
  %343 = or i32 %336, %342
  %344 = add nsw i64 %329, -2
  %345 = getelementptr inbounds [8 x i16], [8 x i16]* %119, i64 0, i64 %344
  %346 = load i16, i16* %345, align 2
  %347 = sext i16 %346 to i32
  %348 = icmp eq i32 %158, %347
  %349 = zext i1 %348 to i32
  %350 = or i32 %343, %349
  %351 = add nsw i64 %329, -3
  %352 = getelementptr inbounds [8 x i16], [8 x i16]* %119, i64 0, i64 %351
  %353 = load i16, i16* %352, align 2
  %354 = sext i16 %353 to i32
  %355 = icmp eq i32 %158, %354
  %356 = zext i1 %355 to i32
  %357 = or i32 %350, %356
  %358 = add nsw i64 %329, -4
  %359 = icmp sgt i64 %329, 3
  br i1 %359, label %328, label %361, !llvm.loop !32

360:                                              ; preds = %159
  unreachable

361:                                              ; preds = %174, %328, %192, %296, %210, %264, %228, %232, %157
  %362 = phi i32 [ %139, %157 ], [ %231, %228 ], [ %261, %232 ], [ %213, %210 ], [ %293, %264 ], [ %195, %192 ], [ %325, %296 ], [ %177, %174 ], [ %357, %328 ]
  %363 = add nsw i64 %137, -1
  %364 = icmp sgt i64 %137, 0
  br i1 %364, label %136, label %513, !llvm.loop !33

365:                                              ; preds = %5
  %366 = icmp sgt i32 %10, %11
  %367 = select i1 %366, i32 %10, i32 %11
  %368 = sub nsw i32 %9, %367
  %369 = shl i32 2, %368
  %370 = add nsw i32 %369, -1
  %371 = icmp slt i32 %10, %11
  %372 = select i1 %371, i32 %10, i32 %11
  %373 = sub nsw i32 %367, %372
  %374 = shl i32 %370, %373
  %375 = icmp sgt i32 %372, -1
  br i1 %375, label %376, label %513

376:                                              ; preds = %365
  %377 = and i8 %2, 3
  %378 = zext i8 %377 to i32
  %379 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %380 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %381 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %382 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %383 = zext i32 %372 to i64
  br label %384

384:                                              ; preds = %376, %417
  %385 = phi i64 [ %383, %376 ], [ %423, %417 ]
  %386 = phi i32 [ %374, %376 ], [ %422, %417 ]
  %387 = shl i32 %386, 1
  switch i32 %378, label %388 [
    i32 0, label %389
    i32 1, label %396
    i32 2, label %403
    i32 3, label %410
  ]

388:                                              ; preds = %384
  unreachable

389:                                              ; preds = %384
  %390 = getelementptr inbounds [16 x i8], [16 x i8]* %381, i64 0, i64 %385
  %391 = load i8, i8* %390, align 1
  %392 = zext i8 %391 to i32
  %393 = getelementptr inbounds [16 x i8], [16 x i8]* %382, i64 0, i64 %385
  %394 = load i8, i8* %393, align 1
  %395 = zext i8 %394 to i32
  br label %417

396:                                              ; preds = %384
  %397 = getelementptr inbounds [8 x i16], [8 x i16]* %379, i64 0, i64 %385
  %398 = load i16, i16* %397, align 2
  %399 = zext i16 %398 to i32
  %400 = getelementptr inbounds [8 x i16], [8 x i16]* %380, i64 0, i64 %385
  %401 = load i16, i16* %400, align 2
  %402 = zext i16 %401 to i32
  br label %417

403:                                              ; preds = %384
  %404 = getelementptr inbounds [16 x i8], [16 x i8]* %381, i64 0, i64 %385
  %405 = load i8, i8* %404, align 1
  %406 = sext i8 %405 to i32
  %407 = getelementptr inbounds [16 x i8], [16 x i8]* %382, i64 0, i64 %385
  %408 = load i8, i8* %407, align 1
  %409 = sext i8 %408 to i32
  br label %417

410:                                              ; preds = %384
  %411 = getelementptr inbounds [8 x i16], [8 x i16]* %379, i64 0, i64 %385
  %412 = load i16, i16* %411, align 2
  %413 = sext i16 %412 to i32
  %414 = getelementptr inbounds [8 x i16], [8 x i16]* %380, i64 0, i64 %385
  %415 = load i16, i16* %414, align 2
  %416 = sext i16 %415 to i32
  br label %417

417:                                              ; preds = %389, %396, %403, %410
  %418 = phi i32 [ %413, %410 ], [ %406, %403 ], [ %399, %396 ], [ %392, %389 ]
  %419 = phi i32 [ %416, %410 ], [ %409, %403 ], [ %402, %396 ], [ %395, %389 ]
  %420 = icmp eq i32 %418, %419
  %421 = zext i1 %420 to i32
  %422 = or i32 %387, %421
  %423 = add nsw i64 %385, -1
  %424 = icmp sgt i64 %385, 0
  br i1 %424, label %384, label %513, !llvm.loop !34

425:                                              ; preds = %5
  %426 = sub i32 %10, %11
  %427 = icmp sgt i32 %426, -1
  br i1 %427, label %428, label %513

428:                                              ; preds = %425
  %429 = and i8 %2, 3
  %430 = zext i8 %429 to i32
  %431 = bitcast %union.XMMReg* %1 to [8 x i16]*
  %432 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %433 = bitcast %union.XMMReg* %1 to [16 x i8]*
  %434 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %435 = add i32 %9, %4
  %436 = sub i32 %435, %3
  %437 = zext i32 %426 to i64
  %438 = zext i32 %9 to i64
  %439 = sext i32 %11 to i64
  br label %440

440:                                              ; preds = %428, %507
  %441 = phi i64 [ %437, %428 ], [ %509, %507 ]
  %442 = phi i32 [ %436, %428 ], [ %511, %507 ]
  %443 = phi i32 [ 0, %428 ], [ %508, %507 ]
  %444 = call i32 @llvm.smin.i32(i32 %442, i32 %11)
  %445 = sext i32 %444 to i64
  %446 = shl i32 %443, 1
  %447 = or i32 %446, 1
  %448 = sub nsw i64 %438, %441
  %449 = icmp slt i64 %448, %439
  %450 = trunc i64 %448 to i32
  %451 = select i1 %449, i32 %450, i32 %11
  %452 = icmp sgt i32 %451, -1
  br i1 %452, label %453, label %507

453:                                              ; preds = %440
  switch i32 %430, label %506 [
    i32 0, label %454
    i32 1, label %467
    i32 2, label %480
    i32 3, label %493
  ]

454:                                              ; preds = %453, %454
  %455 = phi i64 [ %465, %454 ], [ %445, %453 ]
  %456 = phi i32 [ %464, %454 ], [ %447, %453 ]
  %457 = add nsw i64 %455, %441
  %458 = getelementptr inbounds [16 x i8], [16 x i8]* %433, i64 0, i64 %457
  %459 = load i8, i8* %458, align 1
  %460 = getelementptr inbounds [16 x i8], [16 x i8]* %434, i64 0, i64 %455
  %461 = load i8, i8* %460, align 1
  %462 = icmp eq i8 %459, %461
  %463 = zext i1 %462 to i32
  %464 = and i32 %456, %463
  %465 = add nsw i64 %455, -1
  %466 = icmp sgt i64 %455, 0
  br i1 %466, label %454, label %507, !llvm.loop !35

467:                                              ; preds = %453, %467
  %468 = phi i64 [ %478, %467 ], [ %445, %453 ]
  %469 = phi i32 [ %477, %467 ], [ %447, %453 ]
  %470 = add nsw i64 %468, %441
  %471 = getelementptr inbounds [8 x i16], [8 x i16]* %431, i64 0, i64 %470
  %472 = load i16, i16* %471, align 2
  %473 = getelementptr inbounds [8 x i16], [8 x i16]* %432, i64 0, i64 %468
  %474 = load i16, i16* %473, align 2
  %475 = icmp eq i16 %472, %474
  %476 = zext i1 %475 to i32
  %477 = and i32 %469, %476
  %478 = add nsw i64 %468, -1
  %479 = icmp sgt i64 %468, 0
  br i1 %479, label %467, label %507, !llvm.loop !35

480:                                              ; preds = %453, %480
  %481 = phi i64 [ %491, %480 ], [ %445, %453 ]
  %482 = phi i32 [ %490, %480 ], [ %447, %453 ]
  %483 = add nsw i64 %481, %441
  %484 = getelementptr inbounds [16 x i8], [16 x i8]* %433, i64 0, i64 %483
  %485 = load i8, i8* %484, align 1
  %486 = getelementptr inbounds [16 x i8], [16 x i8]* %434, i64 0, i64 %481
  %487 = load i8, i8* %486, align 1
  %488 = icmp eq i8 %485, %487
  %489 = zext i1 %488 to i32
  %490 = and i32 %482, %489
  %491 = add nsw i64 %481, -1
  %492 = icmp sgt i64 %481, 0
  br i1 %492, label %480, label %507, !llvm.loop !35

493:                                              ; preds = %453, %493
  %494 = phi i64 [ %504, %493 ], [ %445, %453 ]
  %495 = phi i32 [ %503, %493 ], [ %447, %453 ]
  %496 = add nsw i64 %494, %441
  %497 = getelementptr inbounds [8 x i16], [8 x i16]* %431, i64 0, i64 %496
  %498 = load i16, i16* %497, align 2
  %499 = getelementptr inbounds [8 x i16], [8 x i16]* %432, i64 0, i64 %494
  %500 = load i16, i16* %499, align 2
  %501 = icmp eq i16 %498, %500
  %502 = zext i1 %501 to i32
  %503 = and i32 %495, %502
  %504 = add nsw i64 %494, -1
  %505 = icmp sgt i64 %494, 0
  br i1 %505, label %493, label %507, !llvm.loop !35

506:                                              ; preds = %453
  unreachable

507:                                              ; preds = %493, %480, %467, %454, %440
  %508 = phi i32 [ %447, %440 ], [ %464, %454 ], [ %477, %467 ], [ %490, %480 ], [ %503, %493 ]
  %509 = add nsw i64 %441, -1
  %510 = icmp sgt i64 %441, 0
  %511 = add i32 %442, 1
  br i1 %510, label %440, label %513, !llvm.loop !36

512:                                              ; preds = %5
  unreachable

513:                                              ; preds = %507, %417, %107, %361, %23, %425, %365, %21, %111
  %514 = phi i32 [ 0, %111 ], [ 0, %21 ], [ %374, %365 ], [ 0, %425 ], [ 0, %23 ], [ %362, %361 ], [ %104, %107 ], [ %422, %417 ], [ %508, %507 ]
  %515 = lshr i32 %6, 4
  %516 = and i32 %515, 3
  switch i32 %516, label %525 [
    i32 1, label %517
    i32 3, label %521
  ]

517:                                              ; preds = %513
  %518 = shl i32 2, %9
  %519 = add nsw i32 %518, -1
  %520 = xor i32 %514, %519
  br label %525

521:                                              ; preds = %513
  %522 = shl i32 2, %10
  %523 = add nsw i32 %522, -1
  %524 = xor i32 %514, %523
  br label %525

525:                                              ; preds = %513, %521, %517
  %526 = phi i32 [ %514, %513 ], [ %524, %521 ], [ %520, %517 ]
  %527 = icmp eq i32 %526, 0
  br i1 %527, label %534, label %528

528:                                              ; preds = %525
  %529 = or i64 %16, 1
  store i64 %529, i64* %18, align 8
  %530 = and i32 %526, 1
  %531 = icmp eq i32 %530, 0
  br i1 %531, label %534, label %532

532:                                              ; preds = %528
  %533 = or i64 %16, 2049
  store i64 %533, i64* %18, align 8
  br label %534

534:                                              ; preds = %525, %532, %528
  ret i32 %526
}

; Function Attrs: inlinehint nofree norecurse nosync nounwind readnone uwtable
define internal i32 @ffs1(i32 noundef %0) unnamed_addr #22 {
  %2 = shl i32 %0, 16
  %3 = icmp eq i32 %2, 0
  %4 = select i1 %3, i32 %0, i32 %2
  %5 = select i1 %3, i32 1, i32 17
  %6 = shl i32 %4, 8
  %7 = icmp eq i32 %6, 0
  %8 = select i1 %7, i32 %4, i32 %6
  %9 = select i1 %7, i32 0, i32 8
  %10 = or i32 %9, %5
  %11 = shl i32 %8, 4
  %12 = icmp eq i32 %11, 0
  %13 = select i1 %12, i32 %8, i32 %11
  %14 = select i1 %12, i32 0, i32 4
  %15 = or i32 %14, %10
  %16 = shl i32 %13, 2
  %17 = icmp eq i32 %16, 0
  %18 = select i1 %17, i32 %13, i32 %16
  %19 = select i1 %17, i32 0, i32 2
  %20 = or i32 %19, %15
  %21 = and i32 %18, 2147483647
  %22 = icmp ne i32 %21, 0
  %23 = zext i1 %22 to i32
  %24 = add nuw nsw i32 %20, %23
  ret i32 %24
}

; Function Attrs: inlinehint nofree norecurse nosync nounwind readnone uwtable
define internal i32 @rffs1(i32 noundef %0) unnamed_addr #22 {
  %2 = lshr i32 %0, 16
  %3 = icmp ult i32 %0, 65536
  %4 = select i1 %3, i32 %0, i32 %2
  %5 = select i1 %3, i32 1, i32 17
  %6 = lshr i32 %4, 8
  %7 = icmp ult i32 %4, 256
  %8 = select i1 %7, i32 %4, i32 %6
  %9 = select i1 %7, i32 0, i32 8
  %10 = or i32 %9, %5
  %11 = lshr i32 %8, 4
  %12 = icmp ult i32 %8, 16
  %13 = select i1 %12, i32 %8, i32 %11
  %14 = select i1 %12, i32 0, i32 4
  %15 = or i32 %14, %10
  %16 = lshr i32 %13, 2
  %17 = icmp ult i32 %13, 4
  %18 = select i1 %17, i32 %13, i32 %16
  %19 = select i1 %17, i32 0, i32 2
  %20 = or i32 %19, %15
  %21 = icmp ugt i32 %18, 1
  %22 = zext i1 %21 to i32
  %23 = add nuw nsw i32 %20, %22
  ret i32 %23
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.smin.i32(i32, i32) #11

; Function Attrs: nofree nosync nounwind uwtable
define void @helper_pcmpestrm_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1, i32 noundef %2) local_unnamed_addr #20 {
  %4 = trunc i32 %2 to i8
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 0, i64 2
  %7 = load i64, i64* %6, align 8
  %8 = trunc i64 %7 to i32
  %9 = tail call i32 @llvm.abs.i32(i32 %8, i1 true) #30
  %10 = and i32 %2, 1
  %11 = icmp eq i32 %10, 0
  %12 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 0, i64 0
  %13 = load i64, i64* %12, align 8
  %14 = trunc i64 %13 to i32
  %15 = tail call i32 @llvm.abs.i32(i32 %14, i1 true) #30
  br i1 %11, label %20, label %16

16:                                               ; preds = %3
  %17 = icmp ult i32 %9, 8
  %18 = select i1 %17, i32 %9, i32 8
  %19 = icmp ugt i32 %15, 8
  br i1 %19, label %36, label %28

20:                                               ; preds = %3
  %21 = icmp ult i32 %9, 16
  %22 = select i1 %21, i32 %9, i32 16
  %23 = icmp ugt i32 %15, 16
  br i1 %23, label %32, label %24

24:                                               ; preds = %20
  %25 = tail call fastcc i32 @pcmpxstrx(%union.XMMReg* noundef %0, %union.XMMReg* noundef %1, i8 noundef signext %4, i32 noundef %22, i32 noundef %15)
  %26 = and i32 %2, 64
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %165, label %40

28:                                               ; preds = %16
  %29 = tail call fastcc i32 @pcmpxstrx(%union.XMMReg* noundef %0, %union.XMMReg* noundef %1, i8 noundef signext %4, i32 noundef %18, i32 noundef %15)
  %30 = and i32 %2, 64
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %165, label %41

32:                                               ; preds = %20
  %33 = tail call fastcc i32 @pcmpxstrx(%union.XMMReg* noundef %0, %union.XMMReg* noundef %1, i8 noundef signext %4, i32 noundef %22, i32 noundef 16)
  %34 = and i32 %2, 64
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %165, label %84

36:                                               ; preds = %16
  %37 = tail call fastcc i32 @pcmpxstrx(%union.XMMReg* noundef %0, %union.XMMReg* noundef %1, i8 noundef signext %4, i32 noundef %18, i32 noundef 8)
  %38 = and i32 %2, 64
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %165, label %41

40:                                               ; preds = %24
  br i1 %11, label %84, label %41

41:                                               ; preds = %28, %36, %40
  %42 = phi i32 [ %25, %40 ], [ %37, %36 ], [ %29, %28 ]
  %43 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %44 = trunc i32 %42 to i16
  %45 = and i16 %44, 1
  %46 = sub nsw i16 0, %45
  %47 = bitcast %union.XMMReg* %0 to i16*
  store i16 %46, i16* %47, align 2
  %48 = trunc i32 %42 to i16
  %49 = lshr i16 %48, 1
  %50 = and i16 %49, 1
  %51 = sub nsw i16 0, %50
  %52 = getelementptr inbounds [8 x i16], [8 x i16]* %43, i64 0, i64 1
  store i16 %51, i16* %52, align 2
  %53 = trunc i32 %42 to i16
  %54 = lshr i16 %53, 2
  %55 = and i16 %54, 1
  %56 = sub nsw i16 0, %55
  %57 = getelementptr inbounds [8 x i16], [8 x i16]* %43, i64 0, i64 2
  store i16 %56, i16* %57, align 2
  %58 = trunc i32 %42 to i16
  %59 = lshr i16 %58, 3
  %60 = and i16 %59, 1
  %61 = sub nsw i16 0, %60
  %62 = getelementptr inbounds [8 x i16], [8 x i16]* %43, i64 0, i64 3
  store i16 %61, i16* %62, align 2
  %63 = trunc i32 %42 to i16
  %64 = lshr i16 %63, 4
  %65 = and i16 %64, 1
  %66 = sub nsw i16 0, %65
  %67 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %68 = bitcast i64* %67 to i16*
  store i16 %66, i16* %68, align 2
  %69 = trunc i32 %42 to i16
  %70 = lshr i16 %69, 5
  %71 = and i16 %70, 1
  %72 = sub nsw i16 0, %71
  %73 = getelementptr inbounds [8 x i16], [8 x i16]* %43, i64 0, i64 5
  store i16 %72, i16* %73, align 2
  %74 = trunc i32 %42 to i16
  %75 = lshr i16 %74, 6
  %76 = and i16 %75, 1
  %77 = sub nsw i16 0, %76
  %78 = getelementptr inbounds [8 x i16], [8 x i16]* %43, i64 0, i64 6
  store i16 %77, i16* %78, align 2
  %79 = trunc i32 %42 to i16
  %80 = lshr i16 %79, 7
  %81 = and i16 %80, 1
  %82 = sub nsw i16 0, %81
  %83 = getelementptr inbounds [8 x i16], [8 x i16]* %43, i64 0, i64 7
  store i16 %82, i16* %83, align 2
  br label %170

84:                                               ; preds = %32, %40
  %85 = phi i32 [ %25, %40 ], [ %33, %32 ]
  %86 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %87 = trunc i32 %85 to i8
  %88 = and i8 %87, 1
  %89 = sub nsw i8 0, %88
  %90 = bitcast %union.XMMReg* %0 to i8*
  store i8 %89, i8* %90, align 1
  %91 = trunc i32 %85 to i8
  %92 = lshr i8 %91, 1
  %93 = and i8 %92, 1
  %94 = sub nsw i8 0, %93
  %95 = getelementptr inbounds [16 x i8], [16 x i8]* %86, i64 0, i64 1
  store i8 %94, i8* %95, align 1
  %96 = trunc i32 %85 to i8
  %97 = lshr i8 %96, 2
  %98 = and i8 %97, 1
  %99 = sub nsw i8 0, %98
  %100 = getelementptr inbounds [16 x i8], [16 x i8]* %86, i64 0, i64 2
  store i8 %99, i8* %100, align 1
  %101 = trunc i32 %85 to i8
  %102 = lshr i8 %101, 3
  %103 = and i8 %102, 1
  %104 = sub nsw i8 0, %103
  %105 = getelementptr inbounds [16 x i8], [16 x i8]* %86, i64 0, i64 3
  store i8 %104, i8* %105, align 1
  %106 = trunc i32 %85 to i8
  %107 = lshr i8 %106, 4
  %108 = and i8 %107, 1
  %109 = sub nsw i8 0, %108
  %110 = getelementptr inbounds [16 x i8], [16 x i8]* %86, i64 0, i64 4
  store i8 %109, i8* %110, align 1
  %111 = trunc i32 %85 to i8
  %112 = lshr i8 %111, 5
  %113 = and i8 %112, 1
  %114 = sub nsw i8 0, %113
  %115 = getelementptr inbounds [16 x i8], [16 x i8]* %86, i64 0, i64 5
  store i8 %114, i8* %115, align 1
  %116 = trunc i32 %85 to i8
  %117 = lshr i8 %116, 6
  %118 = and i8 %117, 1
  %119 = sub nsw i8 0, %118
  %120 = getelementptr inbounds [16 x i8], [16 x i8]* %86, i64 0, i64 6
  store i8 %119, i8* %120, align 1
  %121 = trunc i32 %85 to i8
  %122 = ashr i8 %121, 7
  %123 = getelementptr inbounds [16 x i8], [16 x i8]* %86, i64 0, i64 7
  store i8 %122, i8* %123, align 1
  %124 = lshr i32 %85, 8
  %125 = trunc i32 %124 to i8
  %126 = and i8 %125, 1
  %127 = sub nsw i8 0, %126
  %128 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %129 = bitcast i64* %128 to i8*
  store i8 %127, i8* %129, align 1
  %130 = lshr i32 %85, 9
  %131 = trunc i32 %130 to i8
  %132 = and i8 %131, 1
  %133 = sub nsw i8 0, %132
  %134 = getelementptr inbounds [16 x i8], [16 x i8]* %86, i64 0, i64 9
  store i8 %133, i8* %134, align 1
  %135 = lshr i32 %85, 10
  %136 = trunc i32 %135 to i8
  %137 = and i8 %136, 1
  %138 = sub nsw i8 0, %137
  %139 = getelementptr inbounds [16 x i8], [16 x i8]* %86, i64 0, i64 10
  store i8 %138, i8* %139, align 1
  %140 = lshr i32 %85, 11
  %141 = trunc i32 %140 to i8
  %142 = and i8 %141, 1
  %143 = sub nsw i8 0, %142
  %144 = getelementptr inbounds [16 x i8], [16 x i8]* %86, i64 0, i64 11
  store i8 %143, i8* %144, align 1
  %145 = lshr i32 %85, 12
  %146 = trunc i32 %145 to i8
  %147 = and i8 %146, 1
  %148 = sub nsw i8 0, %147
  %149 = getelementptr inbounds [16 x i8], [16 x i8]* %86, i64 0, i64 12
  store i8 %148, i8* %149, align 1
  %150 = lshr i32 %85, 13
  %151 = trunc i32 %150 to i8
  %152 = and i8 %151, 1
  %153 = sub nsw i8 0, %152
  %154 = getelementptr inbounds [16 x i8], [16 x i8]* %86, i64 0, i64 13
  store i8 %153, i8* %154, align 1
  %155 = lshr i32 %85, 14
  %156 = trunc i32 %155 to i8
  %157 = and i8 %156, 1
  %158 = sub nsw i8 0, %157
  %159 = getelementptr inbounds [16 x i8], [16 x i8]* %86, i64 0, i64 14
  store i8 %158, i8* %159, align 1
  %160 = lshr i32 %85, 15
  %161 = trunc i32 %160 to i8
  %162 = and i8 %161, 1
  %163 = sub nsw i8 0, %162
  %164 = getelementptr inbounds [16 x i8], [16 x i8]* %86, i64 0, i64 15
  store i8 %163, i8* %164, align 1
  br label %170

165:                                              ; preds = %28, %32, %36, %24
  %166 = phi i32 [ %37, %36 ], [ %25, %24 ], [ %33, %32 ], [ %29, %28 ]
  %167 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  store i64 0, i64* %167, align 8
  %168 = zext i32 %166 to i64
  %169 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %168, i64* %169, align 8
  br label %170

170:                                              ; preds = %41, %84, %165
  ret void
}

; Function Attrs: uwtable
define void @helper_pcmpistri_xmm(%union.XMMReg* nocapture noundef readonly %0, %union.XMMReg* nocapture noundef readonly %1, i32 noundef %2) local_unnamed_addr #3 {
  %4 = trunc i32 %2 to i8
  %5 = tail call fastcc i32 @pcmp_ilen(%union.XMMReg* noundef %1, i8 noundef zeroext %4)
  %6 = tail call fastcc i32 @pcmp_ilen(%union.XMMReg* noundef %0, i8 noundef zeroext %4)
  %7 = tail call fastcc i32 @pcmpxstrx(%union.XMMReg* noundef %0, %union.XMMReg* noundef %1, i8 noundef signext %4, i32 noundef %5, i32 noundef %6)
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %16, label %9

9:                                                ; preds = %3
  %10 = and i32 %2, 64
  %11 = icmp eq i32 %10, 0
  %12 = select i1 %11, i32 (i32)* @ffs1, i32 (i32)* @rffs1
  %13 = tail call i32 %12(i32 noundef %7), !callees !25
  %14 = add nsw i32 %13, -1
  %15 = sext i32 %14 to i64
  br label %20

16:                                               ; preds = %3
  %17 = and i32 %2, 1
  %18 = lshr i32 16, %17
  %19 = zext i32 %18 to i64
  br label %20

20:                                               ; preds = %16, %9
  %21 = phi i64 [ %19, %16 ], [ %15, %9 ]
  %22 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %23 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %22, i64 0, i32 0, i64 1
  store i64 %21, i64* %23, align 8
  ret void
}

; Function Attrs: inlinehint nofree norecurse nosync nounwind readonly uwtable
define internal fastcc i32 @pcmp_ilen(%union.XMMReg* nocapture noundef readonly %0, i8 noundef zeroext %1) unnamed_addr #23 {
  %3 = and i8 %1, 1
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %10, label %5

5:                                                ; preds = %2
  %6 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %7 = bitcast %union.XMMReg* %0 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = icmp eq i16 %8, 0
  br i1 %9, label %107, label %15

10:                                               ; preds = %2
  %11 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %12 = bitcast %union.XMMReg* %0 to i8*
  %13 = load i8, i8* %12, align 1
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %107, label %45

15:                                               ; preds = %5
  %16 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 1
  %17 = load i16, i16* %16, align 2
  %18 = icmp eq i16 %17, 0
  br i1 %18, label %107, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 2
  %21 = load i16, i16* %20, align 2
  %22 = icmp eq i16 %21, 0
  br i1 %22, label %107, label %23

23:                                               ; preds = %19
  %24 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 3
  %25 = load i16, i16* %24, align 2
  %26 = icmp eq i16 %25, 0
  br i1 %26, label %107, label %27

27:                                               ; preds = %23
  %28 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %29 = bitcast i64* %28 to i16*
  %30 = load i16, i16* %29, align 2
  %31 = icmp eq i16 %30, 0
  br i1 %31, label %107, label %32

32:                                               ; preds = %27
  %33 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 5
  %34 = load i16, i16* %33, align 2
  %35 = icmp eq i16 %34, 0
  br i1 %35, label %107, label %36

36:                                               ; preds = %32
  %37 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 6
  %38 = load i16, i16* %37, align 2
  %39 = icmp eq i16 %38, 0
  br i1 %39, label %107, label %40

40:                                               ; preds = %36
  %41 = getelementptr inbounds [8 x i16], [8 x i16]* %6, i64 0, i64 7
  %42 = load i16, i16* %41, align 2
  %43 = icmp eq i16 %42, 0
  %44 = select i1 %43, i32 7, i32 8
  br label %107

45:                                               ; preds = %10
  %46 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 1
  %47 = load i8, i8* %46, align 1
  %48 = icmp eq i8 %47, 0
  br i1 %48, label %107, label %49

49:                                               ; preds = %45
  %50 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 2
  %51 = load i8, i8* %50, align 1
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %107, label %53

53:                                               ; preds = %49
  %54 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 3
  %55 = load i8, i8* %54, align 1
  %56 = icmp eq i8 %55, 0
  br i1 %56, label %107, label %57

57:                                               ; preds = %53
  %58 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 4
  %59 = load i8, i8* %58, align 1
  %60 = icmp eq i8 %59, 0
  br i1 %60, label %107, label %61

61:                                               ; preds = %57
  %62 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 5
  %63 = load i8, i8* %62, align 1
  %64 = icmp eq i8 %63, 0
  br i1 %64, label %107, label %65

65:                                               ; preds = %61
  %66 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 6
  %67 = load i8, i8* %66, align 1
  %68 = icmp eq i8 %67, 0
  br i1 %68, label %107, label %69

69:                                               ; preds = %65
  %70 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 7
  %71 = load i8, i8* %70, align 1
  %72 = icmp eq i8 %71, 0
  br i1 %72, label %107, label %73

73:                                               ; preds = %69
  %74 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %75 = bitcast i64* %74 to i8*
  %76 = load i8, i8* %75, align 1
  %77 = icmp eq i8 %76, 0
  br i1 %77, label %107, label %78

78:                                               ; preds = %73
  %79 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 9
  %80 = load i8, i8* %79, align 1
  %81 = icmp eq i8 %80, 0
  br i1 %81, label %107, label %82

82:                                               ; preds = %78
  %83 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 10
  %84 = load i8, i8* %83, align 1
  %85 = icmp eq i8 %84, 0
  br i1 %85, label %107, label %86

86:                                               ; preds = %82
  %87 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 11
  %88 = load i8, i8* %87, align 1
  %89 = icmp eq i8 %88, 0
  br i1 %89, label %107, label %90

90:                                               ; preds = %86
  %91 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 12
  %92 = load i8, i8* %91, align 1
  %93 = icmp eq i8 %92, 0
  br i1 %93, label %107, label %94

94:                                               ; preds = %90
  %95 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 13
  %96 = load i8, i8* %95, align 1
  %97 = icmp eq i8 %96, 0
  br i1 %97, label %107, label %98

98:                                               ; preds = %94
  %99 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 14
  %100 = load i8, i8* %99, align 1
  %101 = icmp eq i8 %100, 0
  br i1 %101, label %107, label %102

102:                                              ; preds = %98
  %103 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 15
  %104 = load i8, i8* %103, align 1
  %105 = icmp eq i8 %104, 0
  %106 = select i1 %105, i32 15, i32 16
  br label %107

107:                                              ; preds = %102, %40, %5, %15, %19, %23, %27, %32, %36, %10, %45, %49, %53, %57, %61, %65, %69, %73, %78, %82, %86, %90, %94, %98
  %108 = phi i32 [ 0, %10 ], [ 1, %45 ], [ 2, %49 ], [ 3, %53 ], [ 4, %57 ], [ 5, %61 ], [ 6, %65 ], [ 7, %69 ], [ 8, %73 ], [ 9, %78 ], [ 10, %82 ], [ 11, %86 ], [ 12, %90 ], [ 13, %94 ], [ 14, %98 ], [ 0, %5 ], [ 1, %15 ], [ 2, %19 ], [ 3, %23 ], [ 4, 
  ret i32 %108
}

; Function Attrs: nofree norecurse nosync nounwind uwtable
define void @helper_pcmpistrm_xmm(%union.XMMReg* nocapture noundef %0, %union.XMMReg* nocapture noundef readonly %1, i32 noundef %2) local_unnamed_addr #19 {
  %4 = trunc i32 %2 to i8
  %5 = tail call fastcc i32 @pcmp_ilen(%union.XMMReg* noundef %1, i8 noundef zeroext %4)
  %6 = tail call fastcc i32 @pcmp_ilen(%union.XMMReg* noundef %0, i8 noundef zeroext %4)
  %7 = tail call fastcc i32 @pcmpxstrx(%union.XMMReg* noundef %0, %union.XMMReg* noundef %1, i8 noundef signext %4, i32 noundef %5, i32 noundef %6)
  %8 = and i32 %2, 64
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %135, label %10

10:                                               ; preds = %3
  %11 = and i32 %2, 1
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %55, label %13

13:                                               ; preds = %10
  %14 = bitcast %union.XMMReg* %0 to [8 x i16]*
  %15 = trunc i32 %7 to i16
  %16 = and i16 %15, 1
  %17 = sub nsw i16 0, %16
  %18 = bitcast %union.XMMReg* %0 to i16*
  store i16 %17, i16* %18, align 2
  %19 = trunc i32 %7 to i16
  %20 = lshr i16 %19, 1
  %21 = and i16 %20, 1
  %22 = sub nsw i16 0, %21
  %23 = getelementptr inbounds [8 x i16], [8 x i16]* %14, i64 0, i64 1
  store i16 %22, i16* %23, align 2
  %24 = trunc i32 %7 to i16
  %25 = lshr i16 %24, 2
  %26 = and i16 %25, 1
  %27 = sub nsw i16 0, %26
  %28 = getelementptr inbounds [8 x i16], [8 x i16]* %14, i64 0, i64 2
  store i16 %27, i16* %28, align 2
  %29 = trunc i32 %7 to i16
  %30 = lshr i16 %29, 3
  %31 = and i16 %30, 1
  %32 = sub nsw i16 0, %31
  %33 = getelementptr inbounds [8 x i16], [8 x i16]* %14, i64 0, i64 3
  store i16 %32, i16* %33, align 2
  %34 = trunc i32 %7 to i16
  %35 = lshr i16 %34, 4
  %36 = and i16 %35, 1
  %37 = sub nsw i16 0, %36
  %38 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %39 = bitcast i64* %38 to i16*
  store i16 %37, i16* %39, align 2
  %40 = trunc i32 %7 to i16
  %41 = lshr i16 %40, 5
  %42 = and i16 %41, 1
  %43 = sub nsw i16 0, %42
  %44 = getelementptr inbounds [8 x i16], [8 x i16]* %14, i64 0, i64 5
  store i16 %43, i16* %44, align 2
  %45 = trunc i32 %7 to i16
  %46 = lshr i16 %45, 6
  %47 = and i16 %46, 1
  %48 = sub nsw i16 0, %47
  %49 = getelementptr inbounds [8 x i16], [8 x i16]* %14, i64 0, i64 6
  store i16 %48, i16* %49, align 2
  %50 = trunc i32 %7 to i16
  %51 = lshr i16 %50, 7
  %52 = and i16 %51, 1
  %53 = sub nsw i16 0, %52
  %54 = getelementptr inbounds [8 x i16], [8 x i16]* %14, i64 0, i64 7
  store i16 %53, i16* %54, align 2
  br label %139

55:                                               ; preds = %10
  %56 = bitcast %union.XMMReg* %0 to [16 x i8]*
  %57 = trunc i32 %7 to i8
  %58 = and i8 %57, 1
  %59 = sub nsw i8 0, %58
  %60 = bitcast %union.XMMReg* %0 to i8*
  store i8 %59, i8* %60, align 1
  %61 = trunc i32 %7 to i8
  %62 = lshr i8 %61, 1
  %63 = and i8 %62, 1
  %64 = sub nsw i8 0, %63
  %65 = getelementptr inbounds [16 x i8], [16 x i8]* %56, i64 0, i64 1
  store i8 %64, i8* %65, align 1
  %66 = trunc i32 %7 to i8
  %67 = lshr i8 %66, 2
  %68 = and i8 %67, 1
  %69 = sub nsw i8 0, %68
  %70 = getelementptr inbounds [16 x i8], [16 x i8]* %56, i64 0, i64 2
  store i8 %69, i8* %70, align 1
  %71 = trunc i32 %7 to i8
  %72 = lshr i8 %71, 3
  %73 = and i8 %72, 1
  %74 = sub nsw i8 0, %73
  %75 = getelementptr inbounds [16 x i8], [16 x i8]* %56, i64 0, i64 3
  store i8 %74, i8* %75, align 1
  %76 = trunc i32 %7 to i8
  %77 = lshr i8 %76, 4
  %78 = and i8 %77, 1
  %79 = sub nsw i8 0, %78
  %80 = getelementptr inbounds [16 x i8], [16 x i8]* %56, i64 0, i64 4
  store i8 %79, i8* %80, align 1
  %81 = trunc i32 %7 to i8
  %82 = lshr i8 %81, 5
  %83 = and i8 %82, 1
  %84 = sub nsw i8 0, %83
  %85 = getelementptr inbounds [16 x i8], [16 x i8]* %56, i64 0, i64 5
  store i8 %84, i8* %85, align 1
  %86 = trunc i32 %7 to i8
  %87 = lshr i8 %86, 6
  %88 = and i8 %87, 1
  %89 = sub nsw i8 0, %88
  %90 = getelementptr inbounds [16 x i8], [16 x i8]* %56, i64 0, i64 6
  store i8 %89, i8* %90, align 1
  %91 = trunc i32 %7 to i8
  %92 = ashr i8 %91, 7
  %93 = getelementptr inbounds [16 x i8], [16 x i8]* %56, i64 0, i64 7
  store i8 %92, i8* %93, align 1
  %94 = lshr i32 %7, 8
  %95 = trunc i32 %94 to i8
  %96 = and i8 %95, 1
  %97 = sub nsw i8 0, %96
  %98 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  %99 = bitcast i64* %98 to i8*
  store i8 %97, i8* %99, align 1
  %100 = lshr i32 %7, 9
  %101 = trunc i32 %100 to i8
  %102 = and i8 %101, 1
  %103 = sub nsw i8 0, %102
  %104 = getelementptr inbounds [16 x i8], [16 x i8]* %56, i64 0, i64 9
  store i8 %103, i8* %104, align 1
  %105 = lshr i32 %7, 10
  %106 = trunc i32 %105 to i8
  %107 = and i8 %106, 1
  %108 = sub nsw i8 0, %107
  %109 = getelementptr inbounds [16 x i8], [16 x i8]* %56, i64 0, i64 10
  store i8 %108, i8* %109, align 1
  %110 = lshr i32 %7, 11
  %111 = trunc i32 %110 to i8
  %112 = and i8 %111, 1
  %113 = sub nsw i8 0, %112
  %114 = getelementptr inbounds [16 x i8], [16 x i8]* %56, i64 0, i64 11
  store i8 %113, i8* %114, align 1
  %115 = lshr i32 %7, 12
  %116 = trunc i32 %115 to i8
  %117 = and i8 %116, 1
  %118 = sub nsw i8 0, %117
  %119 = getelementptr inbounds [16 x i8], [16 x i8]* %56, i64 0, i64 12
  store i8 %118, i8* %119, align 1
  %120 = lshr i32 %7, 13
  %121 = trunc i32 %120 to i8
  %122 = and i8 %121, 1
  %123 = sub nsw i8 0, %122
  %124 = getelementptr inbounds [16 x i8], [16 x i8]* %56, i64 0, i64 13
  store i8 %123, i8* %124, align 1
  %125 = lshr i32 %7, 14
  %126 = trunc i32 %125 to i8
  %127 = and i8 %126, 1
  %128 = sub nsw i8 0, %127
  %129 = getelementptr inbounds [16 x i8], [16 x i8]* %56, i64 0, i64 14
  store i8 %128, i8* %129, align 1
  %130 = lshr i32 %7, 15
  %131 = trunc i32 %130 to i8
  %132 = and i8 %131, 1
  %133 = sub nsw i8 0, %132
  %134 = getelementptr inbounds [16 x i8], [16 x i8]* %56, i64 0, i64 15
  store i8 %133, i8* %134, align 1
  br label %139

135:                                              ; preds = %3
  %136 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 1
  store i64 0, i64* %136, align 8
  %137 = zext i32 %7 to i64
  %138 = getelementptr inbounds %union.XMMReg, %union.XMMReg* %0, i64 0, i32 0, i64 0
  store i64 %137, i64* %138, align 8
  br label %139

139:                                              ; preds = %13, %55, %135
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind readnone uwtable
define i64 @helper_crc32(i32 noundef %0, i64 noundef %1, i32 noundef %2) local_unnamed_addr #24 {
  %4 = sub i32 64, %2
  %5 = zext i32 %4 to i64
  %6 = lshr i64 -1, %5
  %7 = and i64 %6, %1
  %8 = zext i32 %0 to i64
  %9 = xor i64 %7, %8
  %10 = icmp eq i32 %2, 0
  br i1 %10, label %54, label %11

11:                                               ; preds = %3
  %12 = add i32 %2, -1
  %13 = and i32 %2, 3
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %11, %15
  %16 = phi i64 [ %24, %15 ], [ %9, %11 ]
  %17 = phi i32 [ %19, %15 ], [ %2, %11 ]
  %18 = phi i32 [ %25, %15 ], [ 0, %11 ]
  %19 = add i32 %17, -1
  %20 = lshr i64 %16, 1
  %21 = and i64 %16, 1
  %22 = icmp eq i64 %21, 0
  %23 = select i1 %22, i64 0, i64 2197175160
  %24 = xor i64 %23, %20
  %25 = add i32 %18, 1
  %26 = icmp eq i32 %25, %13
  br i1 %26, label %27, label %15, !llvm.loop !37

27:                                               ; preds = %15, %11
  %28 = phi i64 [ undef, %11 ], [ %24, %15 ]
  %29 = phi i64 [ %9, %11 ], [ %24, %15 ]
  %30 = phi i32 [ %2, %11 ], [ %19, %15 ]
  %31 = icmp ult i32 %12, 3
  br i1 %31, label %54, label %32

32:                                               ; preds = %27, %32
  %33 = phi i64 [ %52, %32 ], [ %29, %27 ]
  %34 = phi i32 [ %48, %32 ], [ %30, %27 ]
  %35 = lshr i64 %33, 4
  %36 = and i64 %33, 1
  %37 = icmp eq i64 %36, 0
  %38 = select i1 %37, i64 0, i64 274646895
  %39 = xor i64 %38, %35
  %40 = and i64 %33, 2
  %41 = icmp eq i64 %40, 0
  %42 = select i1 %41, i64 0, i64 549293790
  %43 = xor i64 %42, %39
  %44 = and i64 %33, 4
  %45 = icmp eq i64 %44, 0
  %46 = select i1 %45, i64 0, i64 1098587580
  %47 = xor i64 %46, %43
  %48 = add i32 %34, -4
  %49 = and i64 %33, 8
  %50 = icmp eq i64 %49, 0
  %51 = select i1 %50, i64 0, i64 2197175160
  %52 = xor i64 %51, %47
  %53 = icmp eq i32 %48, 0
  br i1 %53, label %54, label %32, !llvm.loop !38

54:                                               ; preds = %27, %32, %3
  %55 = phi i64 [ %9, %3 ], [ %28, %27 ], [ %52, %32 ]
  ret i64 %55
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i64 @helper_popcnt(i64 noundef %0, i32 noundef %1) local_unnamed_addr #2 {
  %3 = icmp eq i64 %0, 0
  %4 = select i1 %3, i64 64, i64 0
  %5 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %6 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %5, i64 0, i32 2
  store i64 %4, i64* %6, align 8
  %7 = and i64 %0, 6148914691236517205
  %8 = lshr i64 %0, 1
  %9 = and i64 %8, 6148914691236517205
  %10 = add nuw i64 %9, %7
  %11 = and i64 %10, 3689348814741910323
  %12 = lshr i64 %10, 2
  %13 = and i64 %12, 3689348814741910323
  %14 = add nuw nsw i64 %13, %11
  %15 = and i64 %14, 506381209866536711
  %16 = lshr i64 %14, 4
  %17 = and i64 %16, 506381209866536711
  %18 = add nuw nsw i64 %17, %15
  %19 = and i64 %18, 4222189076152335
  %20 = lshr i64 %18, 8
  %21 = and i64 %20, 4222189076152335
  %22 = add nuw nsw i64 %21, %19
  %23 = icmp eq i32 %1, 1
  br i1 %23, label %24, label %26

24:                                               ; preds = %2
  %25 = and i64 %22, 31
  br label %36

26:                                               ; preds = %2
  %27 = and i64 %22, 133143986207
  %28 = lshr i64 %22, 16
  %29 = and i64 %28, 133143986207
  %30 = add nuw nsw i64 %29, %27
  %31 = icmp eq i32 %1, 2
  %32 = and i64 %30, 63
  br i1 %31, label %36, label %33

33:                                               ; preds = %26
  %34 = lshr i64 %30, 32
  %35 = add nuw nsw i64 %32, %34
  br label %36

36:                                               ; preds = %26, %33, %24
  %37 = phi i64 [ %25, %24 ], [ %35, %33 ], [ %32, %26 ]
  ret i64 %37
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i64 @helper_rclb(i64 noundef %0, i64 noundef %1) local_unnamed_addr #2 {
  %3 = and i64 %1, 31
  %4 = getelementptr inbounds [32 x i8], [32 x i8]* @rclb_table, i64 0, i64 %3
  %5 = load i8, i8* %4, align 1
  %6 = zext i8 %5 to i32
  %7 = icmp eq i8 %5, 0
  %8 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %7, label %40, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %8, i64 0, i32 1
  %11 = load i64, i64* %10, align 16
  %12 = trunc i64 %11 to i32
  %13 = tail call i32 @helper_cc_compute_all(i32 noundef %12)
  %14 = and i64 %0, 255
  %15 = zext i8 %5 to i64
  %16 = shl i64 %14, %15
  %17 = and i32 %13, 1
  %18 = zext i32 %17 to i64
  %19 = add nsw i32 %6, -1
  %20 = zext i32 %19 to i64
  %21 = shl nuw i64 %18, %20
  %22 = icmp eq i8 %5, 1
  %23 = sub nsw i32 9, %6
  %24 = zext i32 %23 to i64
  %25 = lshr i64 %14, %24
  %26 = select i1 %22, i64 0, i64 %25
  %27 = or i64 %26, %16
  %28 = or i64 %27, %21
  %29 = and i32 %13, -2050
  %30 = sext i32 %29 to i64
  %31 = xor i64 %28, %0
  %32 = shl i64 %31, 4
  %33 = and i64 %32, 2048
  %34 = sub nsw i32 8, %6
  %35 = zext i32 %34 to i64
  %36 = lshr i64 %14, %35
  %37 = and i64 %36, 1
  %38 = or i64 %37, %30
  %39 = or i64 %38, %33
  br label %40

40:                                               ; preds = %2, %9
  %41 = phi i64 [ %39, %9 ], [ -1, %2 ]
  %42 = phi i64 [ %28, %9 ], [ %0, %2 ]
  %43 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %8, i64 0, i32 4
  store i64 %41, i64* %43, align 8
  ret i64 %42
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i64 @helper_rcrb(i64 noundef %0, i64 noundef %1) local_unnamed_addr #2 {
  %3 = and i64 %1, 31
  %4 = getelementptr inbounds [32 x i8], [32 x i8]* @rclb_table, i64 0, i64 %3
  %5 = load i8, i8* %4, align 1
  %6 = zext i8 %5 to i32
  %7 = icmp eq i8 %5, 0
  %8 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %7, label %40, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %8, i64 0, i32 1
  %11 = load i64, i64* %10, align 16
  %12 = trunc i64 %11 to i32
  %13 = tail call i32 @helper_cc_compute_all(i32 noundef %12)
  %14 = and i64 %0, 255
  %15 = zext i8 %5 to i64
  %16 = lshr i64 %14, %15
  %17 = and i32 %13, 1
  %18 = zext i32 %17 to i64
  %19 = sub nsw i32 8, %6
  %20 = zext i32 %19 to i64
  %21 = shl nuw i64 %18, %20
  %22 = icmp eq i8 %5, 1
  %23 = sub nsw i32 9, %6
  %24 = zext i32 %23 to i64
  %25 = shl i64 %14, %24
  %26 = select i1 %22, i64 0, i64 %25
  %27 = or i64 %26, %16
  %28 = or i64 %27, %21
  %29 = and i32 %13, -2050
  %30 = sext i32 %29 to i64
  %31 = xor i64 %28, %0
  %32 = shl i64 %31, 4
  %33 = and i64 %32, 2048
  %34 = add nsw i32 %6, -1
  %35 = zext i32 %34 to i64
  %36 = lshr i64 %14, %35
  %37 = and i64 %36, 1
  %38 = or i64 %37, %30
  %39 = or i64 %38, %33
  br label %40

40:                                               ; preds = %2, %9
  %41 = phi i64 [ %39, %9 ], [ -1, %2 ]
  %42 = phi i64 [ %28, %9 ], [ %0, %2 ]
  %43 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %8, i64 0, i32 4
  store i64 %41, i64* %43, align 8
  ret i64 %42
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i64 @helper_rclw(i64 noundef %0, i64 noundef %1) local_unnamed_addr #2 {
  %3 = and i64 %1, 31
  %4 = getelementptr inbounds [32 x i8], [32 x i8]* @rclw_table, i64 0, i64 %3
  %5 = load i8, i8* %4, align 1
  %6 = zext i8 %5 to i32
  %7 = icmp eq i8 %5, 0
  %8 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %7, label %40, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %8, i64 0, i32 1
  %11 = load i64, i64* %10, align 16
  %12 = trunc i64 %11 to i32
  %13 = tail call i32 @helper_cc_compute_all(i32 noundef %12)
  %14 = and i64 %0, 65535
  %15 = zext i8 %5 to i64
  %16 = shl i64 %14, %15
  %17 = and i32 %13, 1
  %18 = zext i32 %17 to i64
  %19 = add nsw i32 %6, -1
  %20 = zext i32 %19 to i64
  %21 = shl nuw i64 %18, %20
  %22 = icmp eq i8 %5, 1
  %23 = sub nsw i32 17, %6
  %24 = zext i32 %23 to i64
  %25 = lshr i64 %14, %24
  %26 = select i1 %22, i64 0, i64 %25
  %27 = or i64 %26, %16
  %28 = or i64 %27, %21
  %29 = and i32 %13, -2050
  %30 = sext i32 %29 to i64
  %31 = xor i64 %28, %0
  %32 = lshr i64 %31, 4
  %33 = and i64 %32, 2048
  %34 = sub nsw i32 16, %6
  %35 = zext i32 %34 to i64
  %36 = lshr i64 %14, %35
  %37 = and i64 %36, 1
  %38 = or i64 %37, %30
  %39 = or i64 %38, %33
  br label %40

40:                                               ; preds = %2, %9
  %41 = phi i64 [ %39, %9 ], [ -1, %2 ]
  %42 = phi i64 [ %28, %9 ], [ %0, %2 ]
  %43 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %8, i64 0, i32 4
  store i64 %41, i64* %43, align 8
  ret i64 %42
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i64 @helper_rcrw(i64 noundef %0, i64 noundef %1) local_unnamed_addr #2 {
  %3 = and i64 %1, 31
  %4 = getelementptr inbounds [32 x i8], [32 x i8]* @rclw_table, i64 0, i64 %3
  %5 = load i8, i8* %4, align 1
  %6 = zext i8 %5 to i32
  %7 = icmp eq i8 %5, 0
  %8 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %7, label %40, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %8, i64 0, i32 1
  %11 = load i64, i64* %10, align 16
  %12 = trunc i64 %11 to i32
  %13 = tail call i32 @helper_cc_compute_all(i32 noundef %12)
  %14 = and i64 %0, 65535
  %15 = zext i8 %5 to i64
  %16 = lshr i64 %14, %15
  %17 = and i32 %13, 1
  %18 = zext i32 %17 to i64
  %19 = sub nsw i32 16, %6
  %20 = zext i32 %19 to i64
  %21 = shl nuw i64 %18, %20
  %22 = icmp eq i8 %5, 1
  %23 = sub nsw i32 17, %6
  %24 = zext i32 %23 to i64
  %25 = shl i64 %14, %24
  %26 = select i1 %22, i64 0, i64 %25
  %27 = or i64 %26, %16
  %28 = or i64 %27, %21
  %29 = and i32 %13, -2050
  %30 = sext i32 %29 to i64
  %31 = xor i64 %28, %0
  %32 = lshr i64 %31, 4
  %33 = and i64 %32, 2048
  %34 = add nsw i32 %6, -1
  %35 = zext i32 %34 to i64
  %36 = lshr i64 %14, %35
  %37 = and i64 %36, 1
  %38 = or i64 %37, %30
  %39 = or i64 %38, %33
  br label %40

40:                                               ; preds = %2, %9
  %41 = phi i64 [ %39, %9 ], [ -1, %2 ]
  %42 = phi i64 [ %28, %9 ], [ %0, %2 ]
  %43 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %8, i64 0, i32 4
  store i64 %41, i64* %43, align 8
  ret i64 %42
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i64 @helper_rcll(i64 noundef %0, i64 noundef %1) local_unnamed_addr #2 {
  %3 = trunc i64 %1 to i32
  %4 = and i32 %3, 31
  %5 = icmp eq i32 %4, 0
  %6 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %5, label %38, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %6, i64 0, i32 1
  %9 = load i64, i64* %8, align 16
  %10 = trunc i64 %9 to i32
  %11 = tail call i32 @helper_cc_compute_all(i32 noundef %10)
  %12 = and i64 %0, 4294967295
  %13 = zext i32 %4 to i64
  %14 = shl nuw nsw i64 %12, %13
  %15 = and i32 %11, 1
  %16 = zext i32 %15 to i64
  %17 = add nsw i32 %4, -1
  %18 = zext i32 %17 to i64
  %19 = shl nuw nsw i64 %16, %18
  %20 = icmp eq i32 %4, 1
  %21 = sub nuw nsw i32 33, %4
  %22 = zext i32 %21 to i64
  %23 = lshr i64 %12, %22
  %24 = select i1 %20, i64 0, i64 %23
  %25 = or i64 %24, %14
  %26 = or i64 %25, %19
  %27 = and i32 %11, -2050
  %28 = sext i32 %27 to i64
  %29 = xor i64 %26, %0
  %30 = lshr i64 %29, 20
  %31 = and i64 %30, 2048
  %32 = sub nuw nsw i32 32, %4
  %33 = zext i32 %32 to i64
  %34 = lshr i64 %12, %33
  %35 = and i64 %34, 1
  %36 = or i64 %35, %28
  %37 = or i64 %36, %31
  br label %38

38:                                               ; preds = %2, %7
  %39 = phi i64 [ %37, %7 ], [ -1, %2 ]
  %40 = phi i64 [ %26, %7 ], [ %0, %2 ]
  %41 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %6, i64 0, i32 4
  store i64 %39, i64* %41, align 8
  ret i64 %40
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i64 @helper_rcrl(i64 noundef %0, i64 noundef %1) local_unnamed_addr #2 {
  %3 = trunc i64 %1 to i32
  %4 = and i32 %3, 31
  %5 = icmp eq i32 %4, 0
  %6 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %5, label %38, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %6, i64 0, i32 1
  %9 = load i64, i64* %8, align 16
  %10 = trunc i64 %9 to i32
  %11 = tail call i32 @helper_cc_compute_all(i32 noundef %10)
  %12 = and i64 %0, 4294967295
  %13 = zext i32 %4 to i64
  %14 = lshr i64 %12, %13
  %15 = and i32 %11, 1
  %16 = zext i32 %15 to i64
  %17 = sub nuw nsw i32 32, %4
  %18 = zext i32 %17 to i64
  %19 = shl nuw nsw i64 %16, %18
  %20 = icmp eq i32 %4, 1
  %21 = sub nuw nsw i32 33, %4
  %22 = zext i32 %21 to i64
  %23 = shl nuw i64 %12, %22
  %24 = select i1 %20, i64 0, i64 %23
  %25 = or i64 %24, %14
  %26 = or i64 %25, %19
  %27 = and i32 %11, -2050
  %28 = sext i32 %27 to i64
  %29 = xor i64 %26, %0
  %30 = lshr i64 %29, 20
  %31 = and i64 %30, 2048
  %32 = add nsw i32 %4, -1
  %33 = zext i32 %32 to i64
  %34 = lshr i64 %12, %33
  %35 = and i64 %34, 1
  %36 = or i64 %35, %28
  %37 = or i64 %36, %31
  br label %38

38:                                               ; preds = %2, %7
  %39 = phi i64 [ %37, %7 ], [ -1, %2 ]
  %40 = phi i64 [ %26, %7 ], [ %0, %2 ]
  %41 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %6, i64 0, i32 4
  store i64 %39, i64* %41, align 8
  ret i64 %40
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i64 @helper_rclq(i64 noundef %0, i64 noundef %1) local_unnamed_addr #2 {
  %3 = trunc i64 %1 to i32
  %4 = and i32 %3, 63
  %5 = icmp eq i32 %4, 0
  %6 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %5, label %37, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %6, i64 0, i32 1
  %9 = load i64, i64* %8, align 16
  %10 = trunc i64 %9 to i32
  %11 = tail call i32 @helper_cc_compute_all(i32 noundef %10)
  %12 = zext i32 %4 to i64
  %13 = shl i64 %0, %12
  %14 = and i32 %11, 1
  %15 = zext i32 %14 to i64
  %16 = add nsw i32 %4, -1
  %17 = zext i32 %16 to i64
  %18 = shl nuw nsw i64 %15, %17
  %19 = icmp eq i32 %4, 1
  %20 = sub nuw nsw i32 65, %4
  %21 = zext i32 %20 to i64
  %22 = lshr i64 %0, %21
  %23 = select i1 %19, i64 0, i64 %22
  %24 = or i64 %23, %13
  %25 = or i64 %24, %18
  %26 = and i32 %11, -2050
  %27 = sext i32 %26 to i64
  %28 = xor i64 %25, %0
  %29 = lshr i64 %28, 52
  %30 = and i64 %29, 2048
  %31 = sub nuw nsw i32 64, %4
  %32 = zext i32 %31 to i64
  %33 = lshr i64 %0, %32
  %34 = and i64 %33, 1
  %35 = or i64 %34, %27
  %36 = or i64 %35, %30
  br label %37

37:                                               ; preds = %2, %7
  %38 = phi i64 [ %36, %7 ], [ -1, %2 ]
  %39 = phi i64 [ %25, %7 ], [ %0, %2 ]
  %40 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %6, i64 0, i32 4
  store i64 %38, i64* %40, align 8
  ret i64 %39
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i64 @helper_rcrq(i64 noundef %0, i64 noundef %1) local_unnamed_addr #2 {
  %3 = trunc i64 %1 to i32
  %4 = and i32 %3, 63
  %5 = icmp eq i32 %4, 0
  %6 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  br i1 %5, label %37, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %6, i64 0, i32 1
  %9 = load i64, i64* %8, align 16
  %10 = trunc i64 %9 to i32
  %11 = tail call i32 @helper_cc_compute_all(i32 noundef %10)
  %12 = zext i32 %4 to i64
  %13 = lshr i64 %0, %12
  %14 = and i32 %11, 1
  %15 = zext i32 %14 to i64
  %16 = sub nuw nsw i32 64, %4
  %17 = zext i32 %16 to i64
  %18 = shl nuw i64 %15, %17
  %19 = icmp eq i32 %4, 1
  %20 = sub nuw nsw i32 65, %4
  %21 = zext i32 %20 to i64
  %22 = shl i64 %0, %21
  %23 = select i1 %19, i64 0, i64 %22
  %24 = or i64 %23, %13
  %25 = or i64 %24, %18
  %26 = and i32 %11, -2050
  %27 = sext i32 %26 to i64
  %28 = xor i64 %25, %0
  %29 = lshr i64 %28, 52
  %30 = and i64 %29, 2048
  %31 = add nsw i32 %4, -1
  %32 = zext i32 %31 to i64
  %33 = lshr i64 %0, %32
  %34 = and i64 %33, 1
  %35 = or i64 %34, %27
  %36 = or i64 %35, %30
  br label %37

37:                                               ; preds = %2, %7
  %38 = phi i64 [ %36, %7 ], [ -1, %2 ]
  %39 = phi i64 [ %25, %7 ], [ %0, %2 ]
  %40 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %6, i64 0, i32 4
  store i64 %38, i64* %40, align 8
  ret i64 %39
}

; Function Attrs: nofree norecurse nosync nounwind readnone uwtable
define i64 @helper_bsf(i64 noundef %0) local_unnamed_addr #24 {
  %2 = and i64 %0, 1
  %3 = icmp eq i64 %2, 0
  br i1 %3, label %4, label %13

4:                                                ; preds = %1, %4
  %5 = phi i64 [ %8, %4 ], [ %0, %1 ]
  %6 = phi i32 [ %7, %4 ], [ 0, %1 ]
  %7 = add nuw nsw i32 %6, 1
  %8 = lshr i64 %5, 1
  %9 = and i64 %5, 2
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %4, label %11, !llvm.loop !39

11:                                               ; preds = %4
  %12 = zext i32 %7 to i64
  br label %13

13:                                               ; preds = %11, %1
  %14 = phi i64 [ 0, %1 ], [ %12, %11 ]
  ret i64 %14
}

; Function Attrs: nofree norecurse nosync nounwind readnone uwtable
define i64 @helper_lzcnt(i64 noundef %0, i32 noundef %1) local_unnamed_addr #24 {
  %3 = icmp sgt i32 %1, 0
  %4 = icmp eq i64 %0, 0
  %5 = and i1 %4, %3
  br i1 %5, label %19, label %6

6:                                                ; preds = %2
  %7 = icmp sgt i64 %0, -1
  br i1 %7, label %8, label %14

8:                                                ; preds = %6, %8
  %9 = phi i64 [ %12, %8 ], [ %0, %6 ]
  %10 = phi i32 [ %11, %8 ], [ 63, %6 ]
  %11 = add nsw i32 %10, -1
  %12 = shl nuw i64 %9, 1
  %13 = icmp sgt i64 %12, -1
  br i1 %13, label %8, label %14, !llvm.loop !40

14:                                               ; preds = %8, %6
  %15 = phi i32 [ 63, %6 ], [ %11, %8 ]
  br i1 %3, label %16, label %19

16:                                               ; preds = %14
  %17 = xor i32 %15, -1
  %18 = add i32 %17, %1
  br label %19

19:                                               ; preds = %14, %2, %16
  %20 = phi i32 [ %18, %16 ], [ %1, %2 ], [ %15, %14 ]
  %21 = sext i32 %20 to i64
  ret i64 %21
}

; Function Attrs: nofree norecurse nosync nounwind readnone uwtable
define i64 @helper_bsr(i64 noundef %0) local_unnamed_addr #24 {
  %2 = icmp sgt i64 %0, -1
  br i1 %2, label %3, label %11

3:                                                ; preds = %1, %3
  %4 = phi i64 [ %7, %3 ], [ %0, %1 ]
  %5 = phi i32 [ %6, %3 ], [ 63, %1 ]
  %6 = add nsw i32 %5, -1
  %7 = shl nuw i64 %4, 1
  %8 = icmp sgt i64 %7, -1
  br i1 %8, label %3, label %9, !llvm.loop !40

9:                                                ; preds = %3
  %10 = sext i32 %6 to i64
  br label %11

11:                                               ; preds = %9, %1
  %12 = phi i64 [ 63, %1 ], [ %10, %9 ]
  ret i64 %12
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @cpu_cc_compute_all(%struct.CPUX86State* noundef %0, i32 noundef %1) local_unnamed_addr #2 {
  %3 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  store %struct.CPUX86State* %0, %struct.CPUX86State** @env, align 8
  %4 = tail call i32 @helper_cc_compute_all(i32 noundef %1)
  store %struct.CPUX86State* %3, %struct.CPUX86State** @env, align 8
  ret i32 %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn
define i32 @helper_cc_compute_c(i32 noundef %0) local_unnamed_addr #0 {
  switch i32 %0, label %302 [
    i32 1, label %2
    i32 2, label %8
    i32 3, label %14
    i32 4, label %20
    i32 6, label %26
    i32 7, label %38
    i32 8, label %50
    i32 10, label %60
    i32 11, label %72
    i32 12, label %84
    i32 14, label %94
    i32 15, label %107
    i32 16, label %120
    i32 18, label %131
    i32 19, label %145
    i32 20, label %159
    i32 41, label %296
    i32 37, label %290
    i32 33, label %285
    i32 26, label %171
    i32 27, label %176
    i32 28, label %181
    i32 30, label %186
    i32 31, label %191
    i32 32, label %196
    i32 34, label %201
    i32 35, label %208
    i32 36, label %215
    i32 38, label %221
    i32 39, label %227
    i32 40, label %233
    i32 5, label %239
    i32 9, label %245
    i32 13, label %253
    i32 17, label %261
    i32 21, label %270
    i32 29, label %280
  ]

2:                                                ; preds = %1
  %3 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %4 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %3, i64 0, i32 2
  %5 = load i64, i64* %4, align 8
  %6 = trunc i64 %5 to i32
  %7 = and i32 %6, 1
  br label %302

8:                                                ; preds = %1
  %9 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %10 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %9, i64 0, i32 2
  %11 = load i64, i64* %10, align 8
  %12 = icmp ne i64 %11, 0
  %13 = zext i1 %12 to i32
  br label %302

14:                                               ; preds = %1
  %15 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %16 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %15, i64 0, i32 2
  %17 = load i64, i64* %16, align 8
  %18 = icmp ne i64 %17, 0
  %19 = zext i1 %18 to i32
  br label %302

20:                                               ; preds = %1
  %21 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %22 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %21, i64 0, i32 2
  %23 = load i64, i64* %22, align 8
  %24 = icmp ne i64 %23, 0
  %25 = zext i1 %24 to i32
  br label %302

26:                                               ; preds = %1
  %27 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %28 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %27, i64 0, i32 2
  %29 = load i64, i64* %28, align 8
  %30 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %27, i64 0, i32 3
  %31 = load i64, i64* %30, align 16
  %32 = trunc i64 %31 to i32
  %33 = and i32 %32, 255
  %34 = trunc i64 %29 to i32
  %35 = and i32 %34, 255
  %36 = icmp ult i32 %33, %35
  %37 = zext i1 %36 to i32
  br label %302

38:                                               ; preds = %1
  %39 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %40 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %39, i64 0, i32 2
  %41 = load i64, i64* %40, align 8
  %42 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %39, i64 0, i32 3
  %43 = load i64, i64* %42, align 16
  %44 = trunc i64 %43 to i32
  %45 = and i32 %44, 65535
  %46 = trunc i64 %41 to i32
  %47 = and i32 %46, 65535
  %48 = icmp ult i32 %45, %47
  %49 = zext i1 %48 to i32
  br label %302

50:                                               ; preds = %1
  %51 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %52 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %51, i64 0, i32 2
  %53 = load i64, i64* %52, align 8
  %54 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %51, i64 0, i32 3
  %55 = load i64, i64* %54, align 16
  %56 = trunc i64 %55 to i32
  %57 = trunc i64 %53 to i32
  %58 = icmp ult i32 %56, %57
  %59 = zext i1 %58 to i32
  br label %302

60:                                               ; preds = %1
  %61 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %62 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %61, i64 0, i32 2
  %63 = load i64, i64* %62, align 8
  %64 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %61, i64 0, i32 3
  %65 = load i64, i64* %64, align 16
  %66 = trunc i64 %65 to i32
  %67 = and i32 %66, 255
  %68 = trunc i64 %63 to i32
  %69 = and i32 %68, 255
  %70 = icmp ule i32 %67, %69
  %71 = zext i1 %70 to i32
  br label %302

72:                                               ; preds = %1
  %73 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %74 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %73, i64 0, i32 2
  %75 = load i64, i64* %74, align 8
  %76 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %73, i64 0, i32 3
  %77 = load i64, i64* %76, align 16
  %78 = trunc i64 %77 to i32
  %79 = and i32 %78, 65535
  %80 = trunc i64 %75 to i32
  %81 = and i32 %80, 65535
  %82 = icmp ule i32 %79, %81
  %83 = zext i1 %82 to i32
  br label %302

84:                                               ; preds = %1
  %85 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %86 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %85, i64 0, i32 2
  %87 = load i64, i64* %86, align 8
  %88 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %85, i64 0, i32 3
  %89 = load i64, i64* %88, align 16
  %90 = trunc i64 %89 to i32
  %91 = trunc i64 %87 to i32
  %92 = icmp ule i32 %90, %91
  %93 = zext i1 %92 to i32
  br label %302

94:                                               ; preds = %1
  %95 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %96 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %95, i64 0, i32 3
  %97 = load i64, i64* %96, align 16
  %98 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %95, i64 0, i32 2
  %99 = load i64, i64* %98, align 8
  %100 = add i64 %99, %97
  %101 = trunc i64 %100 to i32
  %102 = and i32 %101, 255
  %103 = trunc i64 %99 to i32
  %104 = and i32 %103, 255
  %105 = icmp ult i32 %102, %104
  %106 = zext i1 %105 to i32
  br label %302

107:                                              ; preds = %1
  %108 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %109 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %108, i64 0, i32 3
  %110 = load i64, i64* %109, align 16
  %111 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %108, i64 0, i32 2
  %112 = load i64, i64* %111, align 8
  %113 = add i64 %112, %110
  %114 = trunc i64 %113 to i32
  %115 = and i32 %114, 65535
  %116 = trunc i64 %112 to i32
  %117 = and i32 %116, 65535
  %118 = icmp ult i32 %115, %117
  %119 = zext i1 %118 to i32
  br label %302

120:                                              ; preds = %1
  %121 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %122 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %121, i64 0, i32 3
  %123 = load i64, i64* %122, align 16
  %124 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %121, i64 0, i32 2
  %125 = load i64, i64* %124, align 8
  %126 = add i64 %125, %123
  %127 = trunc i64 %126 to i32
  %128 = trunc i64 %125 to i32
  %129 = icmp ult i32 %127, %128
  %130 = zext i1 %129 to i32
  br label %302

131:                                              ; preds = %1
  %132 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %133 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %132, i64 0, i32 3
  %134 = load i64, i64* %133, align 16
  %135 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %132, i64 0, i32 2
  %136 = load i64, i64* %135, align 8
  %137 = add i64 %136, %134
  %138 = trunc i64 %137 to i32
  %139 = add i32 %138, 1
  %140 = and i32 %139, 255
  %141 = trunc i64 %136 to i32
  %142 = and i32 %141, 255
  %143 = icmp ule i32 %140, %142
  %144 = zext i1 %143 to i32
  br label %302

145:                                              ; preds = %1
  %146 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %147 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %146, i64 0, i32 3
  %148 = load i64, i64* %147, align 16
  %149 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %146, i64 0, i32 2
  %150 = load i64, i64* %149, align 8
  %151 = add i64 %150, %148
  %152 = trunc i64 %151 to i32
  %153 = add i32 %152, 1
  %154 = and i32 %153, 65535
  %155 = trunc i64 %150 to i32
  %156 = and i32 %155, 65535
  %157 = icmp ule i32 %154, %156
  %158 = zext i1 %157 to i32
  br label %302

159:                                              ; preds = %1
  %160 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %161 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %160, i64 0, i32 3
  %162 = load i64, i64* %161, align 16
  %163 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %160, i64 0, i32 2
  %164 = load i64, i64* %163, align 8
  %165 = add i64 %164, %162
  %166 = trunc i64 %165 to i32
  %167 = add i32 %166, 1
  %168 = trunc i64 %164 to i32
  %169 = icmp ule i32 %167, %168
  %170 = zext i1 %169 to i32
  br label %302

171:                                              ; preds = %1
  %172 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %173 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %172, i64 0, i32 2
  %174 = load i64, i64* %173, align 8
  %175 = trunc i64 %174 to i32
  br label %302

176:                                              ; preds = %1
  %177 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %178 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %177, i64 0, i32 2
  %179 = load i64, i64* %178, align 8
  %180 = trunc i64 %179 to i32
  br label %302

181:                                              ; preds = %1
  %182 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %183 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %182, i64 0, i32 2
  %184 = load i64, i64* %183, align 8
  %185 = trunc i64 %184 to i32
  br label %302

186:                                              ; preds = %1
  %187 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %188 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %187, i64 0, i32 2
  %189 = load i64, i64* %188, align 8
  %190 = trunc i64 %189 to i32
  br label %302

191:                                              ; preds = %1
  %192 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %193 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %192, i64 0, i32 2
  %194 = load i64, i64* %193, align 8
  %195 = trunc i64 %194 to i32
  br label %302

196:                                              ; preds = %1
  %197 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %198 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %197, i64 0, i32 2
  %199 = load i64, i64* %198, align 8
  %200 = trunc i64 %199 to i32
  br label %302

201:                                              ; preds = %1
  %202 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %203 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %202, i64 0, i32 2
  %204 = load i64, i64* %203, align 8
  %205 = trunc i64 %204 to i32
  %206 = lshr i32 %205, 7
  %207 = and i32 %206, 1
  br label %302

208:                                              ; preds = %1
  %209 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %210 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %209, i64 0, i32 2
  %211 = load i64, i64* %210, align 8
  %212 = trunc i64 %211 to i32
  %213 = lshr i32 %212, 15
  %214 = and i32 %213, 1
  br label %302

215:                                              ; preds = %1
  %216 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %217 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %216, i64 0, i32 2
  %218 = load i64, i64* %217, align 8
  %219 = trunc i64 %218 to i32
  %220 = lshr i32 %219, 31
  br label %302

221:                                              ; preds = %1
  %222 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %223 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %222, i64 0, i32 2
  %224 = load i64, i64* %223, align 8
  %225 = trunc i64 %224 to i32
  %226 = and i32 %225, 1
  br label %302

227:                                              ; preds = %1
  %228 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %229 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %228, i64 0, i32 2
  %230 = load i64, i64* %229, align 8
  %231 = trunc i64 %230 to i32
  %232 = and i32 %231, 1
  br label %302

233:                                              ; preds = %1
  %234 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %235 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %234, i64 0, i32 2
  %236 = load i64, i64* %235, align 8
  %237 = trunc i64 %236 to i32
  %238 = and i32 %237, 1
  br label %302

239:                                              ; preds = %1
  %240 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %241 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %240, i64 0, i32 2
  %242 = load i64, i64* %241, align 8
  %243 = icmp ne i64 %242, 0
  %244 = zext i1 %243 to i32
  br label %302

245:                                              ; preds = %1
  %246 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %247 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %246, i64 0, i32 2
  %248 = load i64, i64* %247, align 8
  %249 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %246, i64 0, i32 3
  %250 = load i64, i64* %249, align 16
  %251 = icmp ult i64 %250, %248
  %252 = zext i1 %251 to i32
  br label %302

253:                                              ; preds = %1
  %254 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %255 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %254, i64 0, i32 2
  %256 = load i64, i64* %255, align 8
  %257 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %254, i64 0, i32 3
  %258 = load i64, i64* %257, align 16
  %259 = icmp ule i64 %258, %256
  %260 = zext i1 %259 to i32
  br label %302

261:                                              ; preds = %1
  %262 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %263 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %262, i64 0, i32 3
  %264 = load i64, i64* %263, align 16
  %265 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %262, i64 0, i32 2
  %266 = load i64, i64* %265, align 8
  %267 = xor i64 %266, -1
  %268 = icmp ugt i64 %264, %267
  %269 = zext i1 %268 to i32
  br label %302

270:                                              ; preds = %1
  %271 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %272 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %271, i64 0, i32 3
  %273 = load i64, i64* %272, align 16
  %274 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %271, i64 0, i32 2
  %275 = load i64, i64* %274, align 8
  %276 = add i64 %273, 1
  %277 = add i64 %276, %275
  %278 = icmp ule i64 %277, %275
  %279 = zext i1 %278 to i32
  br label %302

280:                                              ; preds = %1
  %281 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %282 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %281, i64 0, i32 2
  %283 = load i64, i64* %282, align 8
  %284 = trunc i64 %283 to i32
  br label %302

285:                                              ; preds = %1
  %286 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %287 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %286, i64 0, i32 2
  %288 = load i64, i64* %287, align 8
  %289 = trunc i64 %288 to i32
  br label %302

290:                                              ; preds = %1
  %291 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %292 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %291, i64 0, i32 2
  %293 = load i64, i64* %292, align 8
  %294 = lshr i64 %293, 63
  %295 = trunc i64 %294 to i32
  br label %302

296:                                              ; preds = %1
  %297 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %298 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %297, i64 0, i32 2
  %299 = load i64, i64* %298, align 8
  %300 = trunc i64 %299 to i32
  %301 = and i32 %300, 1
  br label %302

302:                                              ; preds = %1, %296, %290, %285, %280, %270, %261, %253, %245, %239, %233, %227, %221, %215, %208, %201, %196, %191, %186, %181, %176, %171, %159, %145, %131, %120, %107, %94, %84, %72, %60, %50, %38, %26,
  %303 = phi i32 [ %301, %296 ], [ %295, %290 ], [ %289, %285 ], [ %284, %280 ], [ %279, %270 ], [ %269, %261 ], [ %260, %253 ], [ %252, %245 ], [ %244, %239 ], [ %238, %233 ], [ %232, %227 ], [ %226, %221 ], [ %220, %215 ], [ %214, %208 ], [ %207, %201 
  ret i32 %303
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i64 @helper_set_cc_op_eflags() local_unnamed_addr #2 {
  %1 = load %struct.CPUX86State*, %struct.CPUX86State** @env, align 8
  %2 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 1
  %3 = load i64, i64* %2, align 16
  %4 = trunc i64 %3 to i32
  %5 = tail call i32 @helper_cc_compute_all(i32 noundef %4)
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds %struct.CPUX86State, %struct.CPUX86State* %1, i64 0, i32 2
  store i64 %6, i64* %7, align 8
  store i64 1, i64* %2, align 16
  ret i64 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn
define void @se_ensure_symbolic() local_unnamed_addr #18 {
  ret void
}

; Function Attrs: uwtable
define weak void @helper_se_call(i64 noundef %0) local_unnamed_addr #3 {
  ret void
}

; Function Attrs: uwtable
define weak void @helper_se_ret(i64 noundef %0, i32 noundef %1) local_unnamed_addr #3 {
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define void @float_raise(i8 noundef zeroext %0, %struct.float_status* nocapture noundef %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %4 = load i8, i8* %3, align 1
  %5 = or i8 %4, %0
  store i8 %5, i8* %3, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn
define i32 @float16_is_quiet_nan(i16 noundef zeroext %0) local_unnamed_addr #18 {
  %2 = and i16 %0, 32640
  %3 = icmp ugt i16 %2, 31871
  %4 = zext i1 %3 to i32
  ret i32 %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn
define i32 @float16_is_signaling_nan(i16 noundef zeroext %0) local_unnamed_addr #18 {
  %2 = zext i16 %0 to i32
  %3 = and i32 %2, 32256
  %4 = icmp eq i32 %3, 31744
  %5 = and i32 %2, 511
  %6 = icmp ne i32 %5, 0
  %7 = and i1 %4, %6
  %8 = zext i1 %7 to i32
  ret i32 %8
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn
define zeroext i16 @float16_maybe_silence_nan(i16 noundef zeroext %0) local_unnamed_addr #18 {
  %2 = zext i16 %0 to i32
  %3 = and i32 %2, 32256
  %4 = icmp ne i32 %3, 31744
  %5 = and i32 %2, 511
  %6 = icmp eq i32 %5, 0
  %7 = or i1 %4, %6
  %8 = or i16 %0, 512
  %9 = select i1 %7, i16 %0, i16 %8
  ret i16 %9
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn
define i32 @float32_is_quiet_nan(i32 noundef %0) local_unnamed_addr #18 {
  %2 = shl i32 %0, 1
  %3 = icmp ugt i32 %2, -8388609
  %4 = zext i1 %3 to i32
  ret i32 %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn
define i32 @float32_is_signaling_nan(i32 noundef %0) local_unnamed_addr #18 {
  %2 = and i32 %0, 2143289344
  %3 = icmp eq i32 %2, 2139095040
  %4 = and i32 %0, 4194303
  %5 = icmp ne i32 %4, 0
  %6 = and i1 %3, %5
  %7 = zext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn
define i32 @float32_maybe_silence_nan(i32 noundef %0) local_unnamed_addr #18 {
  %2 = and i32 %0, 2143289344
  %3 = icmp ne i32 %2, 2139095040
  %4 = and i32 %0, 4194303
  %5 = icmp eq i32 %4, 0
  %6 = or i1 %3, %5
  %7 = or i32 %0, 4194304
  %8 = select i1 %6, i32 %0, i32 %7
  ret i32 %8
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn
define i32 @float64_is_quiet_nan(i64 noundef %0) local_unnamed_addr #18 {
  %2 = shl i64 %0, 1
  %3 = icmp ugt i64 %2, -4503599627370497
  %4 = zext i1 %3 to i32
  ret i32 %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn
define i32 @float64_is_signaling_nan(i64 noundef %0) local_unnamed_addr #18 {
  %2 = and i64 %0, 9221120237041090560
  %3 = icmp eq i64 %2, 9218868437227405312
  %4 = and i64 %0, 2251799813685247
  %5 = icmp ne i64 %4, 0
  %6 = and i1 %3, %5
  %7 = zext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn
define i64 @float64_maybe_silence_nan(i64 noundef %0) local_unnamed_addr #18 {
  %2 = and i64 %0, 9221120237041090560
  %3 = icmp ne i64 %2, 9218868437227405312
  %4 = and i64 %0, 2251799813685247
  %5 = icmp eq i64 %4, 0
  %6 = or i1 %3, %5
  %7 = or i64 %0, 2251799813685248
  %8 = select i1 %6, i64 %0, i64 %7
  ret i64 %8
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn
define i32 @floatx80_is_quiet_nan(i64 %0, i16 %1) local_unnamed_addr #18 {
  %3 = and i16 %1, 32767
  %4 = icmp eq i16 %3, 32767
  %5 = and i64 %0, 4611686018427387904
  %6 = icmp ne i64 %5, 0
  %7 = select i1 %4, i1 %6, i1 false
  %8 = zext i1 %7 to i32
  ret i32 %8
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn
define i32 @floatx80_is_signaling_nan(i64 %0, i16 %1) local_unnamed_addr #18 {
  %3 = and i64 %0, -4611686018427387905
  %4 = and i16 %1, 32767
  %5 = icmp eq i16 %4, 32767
  %6 = and i64 %0, 4611686018427387903
  %7 = icmp ne i64 %6, 0
  %8 = select i1 %5, i1 %7, i1 false
  %9 = icmp eq i64 %3, %0
  %10 = select i1 %8, i1 %9, i1 false
  %11 = zext i1 %10 to i32
  ret i32 %11
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn
define { i64, i16 } @floatx80_maybe_silence_nan(i64 %0, i16 %1) local_unnamed_addr #18 {
  %3 = and i64 %0, -4611686018427387905
  %4 = and i16 %1, 32767
  %5 = icmp ne i16 %4, 32767
  %6 = and i64 %0, 4611686018427387903
  %7 = icmp eq i64 %6, 0
  %8 = select i1 %5, i1 true, i1 %7
  %9 = icmp ne i64 %3, %0
  %10 = select i1 %8, i1 true, i1 %9
  %11 = or i64 %0, -4611686018427387904
  %12 = select i1 %10, i64 %0, i64 %11
  %13 = insertvalue { i64, i16 } poison, i64 %12, 0
  %14 = insertvalue { i64, i16 } %13, i16 %1, 1
  ret { i64, i16 } %14
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn
define i32 @float128_is_quiet_nan(i64 %0, i64 %1) local_unnamed_addr #18 {
  %3 = shl i64 %1, 1
  %4 = icmp ugt i64 %3, -562949953421313
  br i1 %4, label %5, label %11

5:                                                ; preds = %2
  %6 = icmp ne i64 %0, 0
  %7 = and i64 %1, 281474976710655
  %8 = icmp ne i64 %7, 0
  %9 = select i1 %6, i1 true, i1 %8
  %10 = zext i1 %9 to i32
  br label %11

11:                                               ; preds = %5, %2
  %12 = phi i32 [ 0, %2 ], [ %10, %5 ]
  ret i32 %12
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn
define i32 @float128_is_signaling_nan(i64 %0, i64 %1) local_unnamed_addr #18 {
  %3 = and i64 %1, 9223231299366420480
  %4 = icmp eq i64 %3, 9223090561878065152
  br i1 %4, label %5, label %11

5:                                                ; preds = %2
  %6 = icmp ne i64 %0, 0
  %7 = and i64 %1, 140737488355327
  %8 = icmp ne i64 %7, 0
  %9 = select i1 %6, i1 true, i1 %8
  %10 = zext i1 %9 to i32
  br label %11

11:                                               ; preds = %5, %2
  %12 = phi i32 [ 0, %2 ], [ %10, %5 ]
  ret i32 %12
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn
define { i64, i64 } @float128_maybe_silence_nan(i64 %0, i64 %1) local_unnamed_addr #18 {
  %3 = and i64 %1, 9223231299366420480
  %4 = icmp eq i64 %3, 9223090561878065152
  br i1 %4, label %5, label %11

5:                                                ; preds = %2
  %6 = icmp eq i64 %0, 0
  %7 = and i64 %1, 140737488355327
  %8 = icmp eq i64 %7, 0
  %9 = select i1 %6, i1 %8, i1 false
  %10 = or i64 %1, 140737488355328
  br i1 %9, label %11, label %12

11:                                               ; preds = %2, %5
  br label %12

12:                                               ; preds = %5, %11
  %13 = phi i64 [ %1, %11 ], [ %10, %5 ]
  %14 = insertvalue { i64, i64 } poison, i64 %0, 0
  %15 = insertvalue { i64, i64 } %14, i64 %13, 1
  ret { i64, i64 } %15
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn writeonly
define void @set_float_rounding_mode(i32 noundef %0, %struct.float_status* nocapture noundef writeonly %1) local_unnamed_addr #1 {
  %3 = trunc i32 %0 to i8
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 1
  store i8 %3, i8* %4, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn writeonly
define void @set_float_exception_flags(i32 noundef %0, %struct.float_status* nocapture noundef writeonly %1) local_unnamed_addr #1 {
  %3 = trunc i32 %0 to i8
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  store i8 %3, i8* %4, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn writeonly
define void @set_floatx80_rounding_precision(i32 noundef %0, %struct.float_status* nocapture noundef writeonly %1) local_unnamed_addr #1 {
  %3 = trunc i32 %0 to i8
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 3
  store i8 %3, i8* %4, align 1
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define i32 @int32_to_float32(i32 noundef %0, %struct.float_status* nocapture noundef %1) local_unnamed_addr #14 {
  switch i32 %0, label %4 [
    i32 0, label %13
    i32 -2147483648, label %3
  ]

3:                                                ; preds = %2
  br label %13

4:                                                ; preds = %2
  %5 = lshr i32 %0, 31
  %6 = trunc i32 %5 to i8
  %7 = tail call i32 @llvm.abs.i32(i32 %0, i1 true)
  %ctlz.sh = lshr i32 %7, 1
  %ctlz.step = or i32 %7, %ctlz.sh
  %ctlz.sh1 = lshr i32 %ctlz.step, 2
  %ctlz.step2 = or i32 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i32 %ctlz.step2, 4
  %ctlz.step4 = or i32 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i32 %ctlz.step4, 8
  %ctlz.step6 = or i32 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i32 %ctlz.step6, 16
  %ctlz.step8 = or i32 %ctlz.step6, %ctlz.sh7
  %8 = xor i32 %ctlz.step8, -1
  %cppop.and1 = and i32 %8, 1431655765
  %ctpop.sh = lshr i32 %8, 1
  %cppop.and2 = and i32 %ctpop.sh, 1431655765
  %ctpop.step = add i32 %cppop.and1, %cppop.and2
  %cppop.and19 = and i32 %ctpop.step, 858993459
  %ctpop.sh10 = lshr i32 %ctpop.step, 2
  %cppop.and211 = and i32 %ctpop.sh10, 858993459
  %ctpop.step12 = add i32 %cppop.and19, %cppop.and211
  %cppop.and113 = and i32 %ctpop.step12, 252645135
  %ctpop.sh14 = lshr i32 %ctpop.step12, 4
  %cppop.and215 = and i32 %ctpop.sh14, 252645135
  %ctpop.step16 = add i32 %cppop.and113, %cppop.and215
  %cppop.and117 = and i32 %ctpop.step16, 16711935
  %ctpop.sh18 = lshr i32 %ctpop.step16, 8
  %cppop.and219 = and i32 %ctpop.sh18, 16711935
  %ctpop.step20 = add i32 %cppop.and117, %cppop.and219
  %cppop.and121 = and i32 %ctpop.step20, 65535
  %ctpop.sh22 = lshr i32 %ctpop.step20, 16
  %cppop.and223 = and i32 %ctpop.sh22, 65535
  %ctpop.step24 = add i32 %cppop.and121, %cppop.and223
  %ctpop.part = add i32 %ctpop.step24, 0
  %9 = add nsw i32 %ctpop.part, -1
  %10 = sub nuw nsw i32 157, %ctpop.part
  %11 = shl i32 %7, %9
  %12 = tail call fastcc i32 @roundAndPackFloat32(i8 noundef zeroext %6, i32 noundef %10, i32 noundef %11, %struct.float_status* noundef %1) #30
  br label %13

13:                                               ; preds = %2, %4, %3
  %14 = phi i32 [ -822083584, %3 ], [ %12, %4 ], [ %0, %2 ]
  ret i32 %14
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #11

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define internal fastcc i32 @roundAndPackFloat32(i8 noundef zeroext %0, i32 noundef %1, i32 noundef %2, %struct.float_status* nocapture noundef %3) unnamed_addr #2 {
  %5 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %20, label %8

8:                                                ; preds = %4
  %9 = icmp eq i8 %6, 3
  br i1 %9, label %20, label %10

10:                                               ; preds = %8
  %11 = icmp eq i8 %0, 0
  br i1 %11, label %16, label %12

12:                                               ; preds = %10
  %13 = icmp eq i8 %6, 2
  %14 = sext i1 %13 to i32
  %15 = select i1 %13, i32 0, i32 127
  br label %20

16:                                               ; preds = %10
  %17 = icmp eq i8 %6, 1
  %18 = sext i1 %17 to i32
  %19 = select i1 %17, i32 0, i32 127
  br label %20

20:                                               ; preds = %16, %12, %8, %4
  %21 = phi i32 [ 0, %4 ], [ -1, %8 ], [ %14, %12 ], [ %18, %16 ]
  %22 = phi i32 [ 64, %4 ], [ 0, %8 ], [ %15, %12 ], [ %19, %16 ]
  %23 = trunc i32 %2 to i8
  %24 = and i8 %23, 127
  %25 = and i32 %1, 65535
  %26 = icmp ugt i32 %25, 252
  br i1 %26, label %27, label %84

27:                                               ; preds = %20
  %28 = icmp sgt i32 %1, 253
  br i1 %28, label %34, label %29

29:                                               ; preds = %27
  %30 = icmp eq i32 %1, 253
  %31 = add i32 %22, %2
  %32 = icmp slt i32 %31, 0
  %33 = select i1 %30, i1 %32, i1 false
  br i1 %33, label %34, label %42

34:                                               ; preds = %29, %27
  %35 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %36 = load i8, i8* %35, align 1
  %37 = or i8 %36, 40
  store i8 %37, i8* %35, align 1
  %38 = zext i8 %0 to i32
  %39 = shl i32 %38, 31
  %40 = or i32 %39, 2139095040
  %41 = add i32 %40, %21
  br label %117

42:                                               ; preds = %29
  %43 = icmp slt i32 %1, 0
  br i1 %43, label %44, label %84

44:                                               ; preds = %42
  %45 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 4
  %46 = load i8, i8* %45, align 1
  %47 = icmp eq i8 %46, 0
  br i1 %47, label %54, label %48

48:                                               ; preds = %44
  %49 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %50 = load i8, i8* %49, align 1
  %51 = or i8 %50, -128
  store i8 %51, i8* %49, align 1
  %52 = zext i8 %0 to i32
  %53 = shl i32 %52, 31
  br label %117

54:                                               ; preds = %44
  %55 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 0
  %56 = load i8, i8* %55, align 1
  %57 = icmp eq i8 %56, 1
  %58 = icmp ne i32 %1, -1
  %59 = or i1 %58, %57
  %60 = icmp sgt i32 %31, -1
  %61 = select i1 %59, i1 true, i1 %60
  %62 = sub nsw i32 0, %1
  %63 = icmp ult i32 %62, 32
  br i1 %63, label %64, label %71

64:                                               ; preds = %54
  %65 = lshr i32 %2, %62
  %66 = and i32 %1, 31
  %67 = shl i32 %2, %66
  %68 = icmp ne i32 %67, 0
  %69 = zext i1 %68 to i32
  %70 = or i32 %65, %69
  br label %74

71:                                               ; preds = %54
  %72 = icmp ne i32 %2, 0
  %73 = zext i1 %72 to i32
  br label %74

74:                                               ; preds = %64, %71
  %75 = phi i32 [ %70, %64 ], [ %73, %71 ]
  %76 = trunc i32 %75 to i8
  %77 = and i8 %76, 127
  %78 = icmp ne i8 %77, 0
  %79 = select i1 %61, i1 %78, i1 false
  br i1 %79, label %80, label %84

80:                                               ; preds = %74
  %81 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %82 = load i8, i8* %81, align 1
  %83 = or i8 %82, 16
  br label %92

84:                                               ; preds = %42, %74, %20
  %85 = phi i32 [ %75, %74 ], [ %2, %42 ], [ %2, %20 ]
  %86 = phi i32 [ 0, %74 ], [ %1, %42 ], [ %1, %20 ]
  %87 = phi i8 [ %77, %74 ], [ %24, %42 ], [ %24, %20 ]
  %88 = icmp eq i8 %87, 0
  br i1 %88, label %99, label %89

89:                                               ; preds = %84
  %90 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %91 = load i8, i8* %90, align 1
  br label %92

92:                                               ; preds = %89, %80
  %93 = phi i8 [ %83, %80 ], [ %91, %89 ]
  %94 = phi i8 [ %77, %80 ], [ %87, %89 ]
  %95 = phi i32 [ 0, %80 ], [ %86, %89 ]
  %96 = phi i32 [ %75, %80 ], [ %85, %89 ]
  %97 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %98 = or i8 %93, 32
  store i8 %98, i8* %97, align 1
  br label %99

99:                                               ; preds = %92, %84
  %100 = phi i8 [ %94, %92 ], [ 0, %84 ]
  %101 = phi i32 [ %95, %92 ], [ %86, %84 ]
  %102 = phi i32 [ %96, %92 ], [ %85, %84 ]
  %103 = add i32 %102, %22
  %104 = lshr i32 %103, 7
  %105 = icmp eq i8 %100, 64
  %106 = and i1 %7, %105
  %107 = zext i1 %106 to i32
  %108 = xor i32 %107, -1
  %109 = and i32 %104, %108
  %110 = icmp eq i32 %109, 0
  %111 = zext i8 %0 to i32
  %112 = shl i32 %111, 31
  %113 = shl i32 %101, 23
  %114 = select i1 %110, i32 0, i32 %113
  %115 = or i32 %109, %112
  %116 = add i32 %115, %114
  br label %117

117:                                              ; preds = %99, %48, %34
  %118 = phi i32 [ %41, %34 ], [ %53, %48 ], [ %116, %99 ]
  ret i32 %118
}

; Function Attrs: mustprogress nofree nosync nounwind readnone uwtable willreturn
define i64 @int32_to_float64(i32 noundef %0, %struct.float_status* nocapture noundef readnone %1) local_unnamed_addr #25 {
  %3 = icmp eq i32 %0, 0
  br i1 %3, label %19, label %4

4:                                                ; preds = %2
  %5 = lshr i32 %0, 31
  %6 = zext i32 %5 to i64
  %7 = tail call i32 @llvm.abs.i32(i32 %0, i1 true)
  %ctlz.sh = lshr i32 %7, 1
  %ctlz.step = or i32 %7, %ctlz.sh
  %ctlz.sh1 = lshr i32 %ctlz.step, 2
  %ctlz.step2 = or i32 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i32 %ctlz.step2, 4
  %ctlz.step4 = or i32 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i32 %ctlz.step4, 8
  %ctlz.step6 = or i32 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i32 %ctlz.step6, 16
  %ctlz.step8 = or i32 %ctlz.step6, %ctlz.sh7
  %8 = xor i32 %ctlz.step8, -1
  %cppop.and1 = and i32 %8, 1431655765
  %ctpop.sh = lshr i32 %8, 1
  %cppop.and2 = and i32 %ctpop.sh, 1431655765
  %ctpop.step = add i32 %cppop.and1, %cppop.and2
  %cppop.and19 = and i32 %ctpop.step, 858993459
  %ctpop.sh10 = lshr i32 %ctpop.step, 2
  %cppop.and211 = and i32 %ctpop.sh10, 858993459
  %ctpop.step12 = add i32 %cppop.and19, %cppop.and211
  %cppop.and113 = and i32 %ctpop.step12, 252645135
  %ctpop.sh14 = lshr i32 %ctpop.step12, 4
  %cppop.and215 = and i32 %ctpop.sh14, 252645135
  %ctpop.step16 = add i32 %cppop.and113, %cppop.and215
  %cppop.and117 = and i32 %ctpop.step16, 16711935
  %ctpop.sh18 = lshr i32 %ctpop.step16, 8
  %cppop.and219 = and i32 %ctpop.sh18, 16711935
  %ctpop.step20 = add i32 %cppop.and117, %cppop.and219
  %cppop.and121 = and i32 %ctpop.step20, 65535
  %ctpop.sh22 = lshr i32 %ctpop.step20, 16
  %cppop.and223 = and i32 %ctpop.sh22, 65535
  %ctpop.step24 = add i32 %cppop.and121, %cppop.and223
  %ctpop.part = add i32 %ctpop.step24, 0
  %9 = add nuw nsw i32 %ctpop.part, 21
  %10 = zext i32 %7 to i64
  %11 = sub nuw nsw i32 1053, %ctpop.part
  %12 = zext i32 %9 to i64
  %13 = shl i64 %10, %12
  %14 = shl nuw i64 %6, 63
  %15 = zext i32 %11 to i64
  %16 = shl nuw nsw i64 %15, 52
  %17 = add i64 %13, %14
  %18 = add i64 %17, %16
  br label %19

19:                                               ; preds = %2, %4
  %20 = phi i64 [ %18, %4 ], [ 0, %2 ]
  ret i64 %20
}

; Function Attrs: mustprogress nofree nosync nounwind readnone uwtable willreturn
define { i64, i16 } @int32_to_floatx80(i32 noundef %0, %struct.float_status* nocapture noundef readnone %1) local_unnamed_addr #25 {
  %3 = icmp eq i32 %0, 0
  br i1 %3, label %18, label %4

4:                                                ; preds = %2
  %5 = tail call i32 @llvm.abs.i32(i32 %0, i1 true)
  %ctlz.sh = lshr i32 %5, 1
  %ctlz.step = or i32 %5, %ctlz.sh
  %ctlz.sh1 = lshr i32 %ctlz.step, 2
  %ctlz.step2 = or i32 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i32 %ctlz.step2, 4
  %ctlz.step4 = or i32 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i32 %ctlz.step4, 8
  %ctlz.step6 = or i32 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i32 %ctlz.step6, 16
  %ctlz.step8 = or i32 %ctlz.step6, %ctlz.sh7
  %6 = xor i32 %ctlz.step8, -1
  %cppop.and1 = and i32 %6, 1431655765
  %ctpop.sh = lshr i32 %6, 1
  %cppop.and2 = and i32 %ctpop.sh, 1431655765
  %ctpop.step = add i32 %cppop.and1, %cppop.and2
  %cppop.and19 = and i32 %ctpop.step, 858993459
  %ctpop.sh10 = lshr i32 %ctpop.step, 2
  %cppop.and211 = and i32 %ctpop.sh10, 858993459
  %ctpop.step12 = add i32 %cppop.and19, %cppop.and211
  %cppop.and113 = and i32 %ctpop.step12, 252645135
  %ctpop.sh14 = lshr i32 %ctpop.step12, 4
  %cppop.and215 = and i32 %ctpop.sh14, 252645135
  %ctpop.step16 = add i32 %cppop.and113, %cppop.and215
  %cppop.and117 = and i32 %ctpop.step16, 16711935
  %ctpop.sh18 = lshr i32 %ctpop.step16, 8
  %cppop.and219 = and i32 %ctpop.sh18, 16711935
  %ctpop.step20 = add i32 %cppop.and117, %cppop.and219
  %cppop.and121 = and i32 %ctpop.step20, 65535
  %ctpop.sh22 = lshr i32 %ctpop.step20, 16
  %cppop.and223 = and i32 %ctpop.sh22, 65535
  %ctpop.step24 = add i32 %cppop.and121, %cppop.and223
  %ctpop.part = add i32 %ctpop.step24, 0
  %7 = add nuw nsw i32 %ctpop.part, 32
  %8 = zext i32 %5 to i64
  %9 = sub nuw nsw i32 16414, %ctpop.part
  %10 = zext i32 %7 to i64
  %11 = shl i64 %8, %10
  %12 = lshr i32 %0, 16
  %13 = and i32 %12, 32768
  %14 = or i32 %9, %13
  %15 = trunc i32 %14 to i16
  %16 = insertvalue { i64, i16 } poison, i64 %11, 0
  %17 = insertvalue { i64, i16 } %16, i16 %15, 1
  br label %18

18:                                               ; preds = %2, %4
  %19 = phi { i64, i16 } [ %17, %4 ], [ zeroinitializer, %2 ]
  ret { i64, i16 } %19
}

; Function Attrs: mustprogress nofree nosync nounwind readnone uwtable willreturn
define { i64, i64 } @int32_to_float128(i32 noundef %0, %struct.float_status* nocapture noundef readnone %1) local_unnamed_addr #25 {
  %3 = icmp eq i32 %0, 0
  br i1 %3, label %20, label %4

4:                                                ; preds = %2
  %5 = lshr i32 %0, 31
  %6 = zext i32 %5 to i64
  %7 = tail call i32 @llvm.abs.i32(i32 %0, i1 true)
  %ctlz.sh = lshr i32 %7, 1
  %ctlz.step = or i32 %7, %ctlz.sh
  %ctlz.sh1 = lshr i32 %ctlz.step, 2
  %ctlz.step2 = or i32 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i32 %ctlz.step2, 4
  %ctlz.step4 = or i32 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i32 %ctlz.step4, 8
  %ctlz.step6 = or i32 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i32 %ctlz.step6, 16
  %ctlz.step8 = or i32 %ctlz.step6, %ctlz.sh7
  %8 = xor i32 %ctlz.step8, -1
  %cppop.and1 = and i32 %8, 1431655765
  %ctpop.sh = lshr i32 %8, 1
  %cppop.and2 = and i32 %ctpop.sh, 1431655765
  %ctpop.step = add i32 %cppop.and1, %cppop.and2
  %cppop.and19 = and i32 %ctpop.step, 858993459
  %ctpop.sh10 = lshr i32 %ctpop.step, 2
  %cppop.and211 = and i32 %ctpop.sh10, 858993459
  %ctpop.step12 = add i32 %cppop.and19, %cppop.and211
  %cppop.and113 = and i32 %ctpop.step12, 252645135
  %ctpop.sh14 = lshr i32 %ctpop.step12, 4
  %cppop.and215 = and i32 %ctpop.sh14, 252645135
  %ctpop.step16 = add i32 %cppop.and113, %cppop.and215
  %cppop.and117 = and i32 %ctpop.step16, 16711935
  %ctpop.sh18 = lshr i32 %ctpop.step16, 8
  %cppop.and219 = and i32 %ctpop.sh18, 16711935
  %ctpop.step20 = add i32 %cppop.and117, %cppop.and219
  %cppop.and121 = and i32 %ctpop.step20, 65535
  %ctpop.sh22 = lshr i32 %ctpop.step20, 16
  %cppop.and223 = and i32 %ctpop.sh22, 65535
  %ctpop.step24 = add i32 %cppop.and121, %cppop.and223
  %ctpop.part = add i32 %ctpop.step24, 0
  %9 = add nuw nsw i32 %ctpop.part, 17
  %10 = zext i32 %7 to i64
  %11 = sub nuw nsw i32 16413, %ctpop.part
  %12 = zext i32 %9 to i64
  %13 = shl i64 %10, %12
  %14 = shl nuw i64 %6, 63
  %15 = zext i32 %11 to i64
  %16 = shl nuw nsw i64 %15, 48
  %17 = add i64 %13, %14
  %18 = add i64 %17, %16
  %19 = insertvalue { i64, i64 } { i64 0, i64 poison }, i64 %18, 1
  br label %20

20:                                               ; preds = %2, %4
  %21 = phi { i64, i64 } [ %19, %4 ], [ zeroinitializer, %2 ]
  ret { i64, i64 } %21
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define i32 @int64_to_float32(i64 noundef %0, %struct.float_status* nocapture noundef %1) local_unnamed_addr #14 {
  %3 = icmp eq i64 %0, 0
  br i1 %3, label %45, label %4

4:                                                ; preds = %2
  %5 = lshr i64 %0, 63
  %6 = trunc i64 %5 to i8
  %7 = tail call i64 @llvm.abs.i64(i64 %0, i1 true)
  %ctlz.sh = lshr i64 %7, 1
  %ctlz.step = or i64 %7, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %8 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %8, 6148914691236517205
  %ctpop.sh = lshr i64 %8, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %9 = trunc i64 %ctpop.part to i8
  %10 = add nsw i8 %9, -40
  %11 = sext i8 %10 to i32
  %12 = icmp ugt i8 %9, 39
  br i1 %12, label %13, label %23

13:                                               ; preds = %4
  %14 = zext i32 %11 to i64
  %15 = shl i64 %7, %14
  %16 = trunc i64 %15 to i32
  %17 = trunc i64 %5 to i32
  %18 = shl nuw i32 %17, 31
  %19 = mul nsw i32 %11, -8388608
  %20 = or i32 %18, 1249902592
  %21 = add i32 %20, %19
  %22 = add i32 %21, %16
  br label %45

23:                                               ; preds = %4
  %24 = add nsw i8 %9, -33
  %25 = sext i8 %24 to i32
  %26 = icmp ult i8 %9, 33
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = sub nsw i32 0, %25
  %29 = zext i32 %28 to i64
  %30 = lshr i64 %7, %29
  %31 = and i32 %25, 63
  %32 = zext i32 %31 to i64
  %33 = shl i64 %7, %32
  %34 = icmp ne i64 %33, 0
  %35 = zext i1 %34 to i64
  %36 = or i64 %30, %35
  br label %40

37:                                               ; preds = %23
  %38 = zext i32 %25 to i64
  %39 = shl i64 %7, %38
  br label %40

40:                                               ; preds = %27, %37
  %41 = phi i64 [ %39, %37 ], [ %36, %27 ]
  %42 = sub nsw i32 156, %25
  %43 = trunc i64 %41 to i32
  %44 = tail call fastcc i32 @roundAndPackFloat32(i8 noundef zeroext %6, i32 noundef %42, i32 noundef %43, %struct.float_status* noundef %1)
  br label %45

45:                                               ; preds = %2, %40, %13
  %46 = phi i32 [ %22, %13 ], [ %44, %40 ], [ 0, %2 ]
  ret i32 %46
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.ctlz.i64(i64, i1 immarg) #11

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define i32 @uint64_to_float32(i64 noundef %0, %struct.float_status* nocapture noundef %1) local_unnamed_addr #14 {
  %3 = icmp eq i64 %0, 0
  br i1 %3, label %39, label %4

4:                                                ; preds = %2
  %ctlz.sh = lshr i64 %0, 1
  %ctlz.step = or i64 %0, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %5 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %5, 6148914691236517205
  %ctpop.sh = lshr i64 %5, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %6 = trunc i64 %ctpop.part to i8
  %7 = add nsw i8 %6, -40
  %8 = sext i8 %7 to i32
  %9 = icmp ugt i8 %6, 39
  br i1 %9, label %10, label %17

10:                                               ; preds = %4
  %11 = zext i32 %8 to i64
  %12 = shl i64 %0, %11
  %13 = trunc i64 %12 to i32
  %14 = mul nsw i32 %8, -8388608
  %15 = add nsw i32 %14, -897581056
  %16 = add i32 %15, %13
  br label %39

17:                                               ; preds = %4
  %18 = add nsw i8 %6, -33
  %19 = sext i8 %18 to i32
  %20 = icmp ult i8 %6, 33
  br i1 %20, label %21, label %31

21:                                               ; preds = %17
  %22 = sub nsw i32 0, %19
  %23 = zext i32 %22 to i64
  %24 = lshr i64 %0, %23
  %25 = and i32 %19, 63
  %26 = zext i32 %25 to i64
  %27 = shl i64 %0, %26
  %28 = icmp ne i64 %27, 0
  %29 = zext i1 %28 to i64
  %30 = or i64 %24, %29
  br label %34

31:                                               ; preds = %17
  %32 = zext i32 %19 to i64
  %33 = shl i64 %0, %32
  br label %34

34:                                               ; preds = %21, %31
  %35 = phi i64 [ %33, %31 ], [ %30, %21 ]
  %36 = sub nsw i32 156, %19
  %37 = trunc i64 %35 to i32
  %38 = tail call fastcc i32 @roundAndPackFloat32(i8 noundef zeroext 1, i32 noundef %36, i32 noundef %37, %struct.float_status* noundef %1)
  br label %39

39:                                               ; preds = %2, %34, %10
  %40 = phi i32 [ %16, %10 ], [ %38, %34 ], [ 0, %2 ]
  ret i32 %40
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define i64 @int64_to_float64(i64 noundef %0, %struct.float_status* nocapture noundef %1) local_unnamed_addr #14 {
  switch i64 %0, label %4 [
    i64 0, label %15
    i64 -9223372036854775808, label %3
  ]

3:                                                ; preds = %2
  br label %15

4:                                                ; preds = %2
  %5 = lshr i64 %0, 63
  %6 = trunc i64 %5 to i8
  %7 = tail call i64 @llvm.abs.i64(i64 %0, i1 true)
  %ctlz.sh = lshr i64 %7, 1
  %ctlz.step = or i64 %7, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %8 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %8, 6148914691236517205
  %ctpop.sh = lshr i64 %8, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %9 = trunc i64 %ctpop.part to i32
  %10 = add nuw nsw i64 %ctpop.part, 4294967295
  %11 = sub nuw nsw i32 1085, %9
  %12 = and i64 %10, 4294967295
  %13 = shl i64 %7, %12
  %14 = tail call fastcc i64 @roundAndPackFloat64(i8 noundef zeroext %6, i32 noundef %11, i64 noundef %13, %struct.float_status* noundef %1) #30
  br label %15

15:                                               ; preds = %2, %4, %3
  %16 = phi i64 [ -4332462841530417152, %3 ], [ %14, %4 ], [ %0, %2 ]
  ret i64 %16
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define internal fastcc i64 @roundAndPackFloat64(i8 noundef zeroext %0, i32 noundef %1, i64 noundef %2, %struct.float_status* nocapture noundef %3) unnamed_addr #2 {
  %5 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %20, label %8

8:                                                ; preds = %4
  %9 = icmp eq i8 %6, 3
  br i1 %9, label %20, label %10

10:                                               ; preds = %8
  %11 = icmp eq i8 %0, 0
  br i1 %11, label %16, label %12

12:                                               ; preds = %10
  %13 = icmp eq i8 %6, 2
  %14 = sext i1 %13 to i64
  %15 = select i1 %13, i64 0, i64 1023
  br label %20

16:                                               ; preds = %10
  %17 = icmp eq i8 %6, 1
  %18 = sext i1 %17 to i64
  %19 = select i1 %17, i64 0, i64 1023
  br label %20

20:                                               ; preds = %16, %12, %8, %4
  %21 = phi i64 [ 0, %4 ], [ -1, %8 ], [ %14, %12 ], [ %18, %16 ]
  %22 = phi i64 [ 512, %4 ], [ 0, %8 ], [ %15, %12 ], [ %19, %16 ]
  %23 = trunc i64 %2 to i32
  %24 = and i32 %23, 1023
  %25 = and i32 %1, 65535
  %26 = icmp ugt i32 %25, 2044
  br i1 %26, label %27, label %86

27:                                               ; preds = %20
  %28 = icmp sgt i32 %1, 2045
  br i1 %28, label %34, label %29

29:                                               ; preds = %27
  %30 = icmp eq i32 %1, 2045
  %31 = add i64 %22, %2
  %32 = icmp slt i64 %31, 0
  %33 = select i1 %30, i1 %32, i1 false
  br i1 %33, label %34, label %42

34:                                               ; preds = %29, %27
  %35 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %36 = load i8, i8* %35, align 1
  %37 = or i8 %36, 40
  store i8 %37, i8* %35, align 1
  %38 = zext i8 %0 to i64
  %39 = shl i64 %38, 63
  %40 = or i64 %39, 9218868437227405312
  %41 = add i64 %40, %21
  br label %120

42:                                               ; preds = %29
  %43 = icmp slt i32 %1, 0
  br i1 %43, label %44, label %86

44:                                               ; preds = %42
  %45 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 4
  %46 = load i8, i8* %45, align 1
  %47 = icmp eq i8 %46, 0
  br i1 %47, label %54, label %48

48:                                               ; preds = %44
  %49 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %50 = load i8, i8* %49, align 1
  %51 = or i8 %50, -128
  store i8 %51, i8* %49, align 1
  %52 = zext i8 %0 to i64
  %53 = shl i64 %52, 63
  br label %120

54:                                               ; preds = %44
  %55 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 0
  %56 = load i8, i8* %55, align 1
  %57 = icmp eq i8 %56, 1
  %58 = icmp ne i32 %1, -1
  %59 = or i1 %58, %57
  %60 = icmp sgt i64 %31, -1
  %61 = select i1 %59, i1 true, i1 %60
  %62 = sub nsw i32 0, %1
  %63 = icmp ult i32 %62, 64
  br i1 %63, label %64, label %73

64:                                               ; preds = %54
  %65 = zext i32 %62 to i64
  %66 = lshr i64 %2, %65
  %67 = and i32 %1, 63
  %68 = zext i32 %67 to i64
  %69 = shl i64 %2, %68
  %70 = icmp ne i64 %69, 0
  %71 = zext i1 %70 to i64
  %72 = or i64 %66, %71
  br label %76

73:                                               ; preds = %54
  %74 = icmp ne i64 %2, 0
  %75 = zext i1 %74 to i64
  br label %76

76:                                               ; preds = %64, %73
  %77 = phi i64 [ %72, %64 ], [ %75, %73 ]
  %78 = trunc i64 %77 to i32
  %79 = and i32 %78, 1023
  %80 = icmp ne i32 %79, 0
  %81 = select i1 %61, i1 %80, i1 false
  br i1 %81, label %82, label %86

82:                                               ; preds = %76
  %83 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %84 = load i8, i8* %83, align 1
  %85 = or i8 %84, 16
  br label %94

86:                                               ; preds = %42, %76, %20
  %87 = phi i64 [ %77, %76 ], [ %2, %42 ], [ %2, %20 ]
  %88 = phi i32 [ 0, %76 ], [ %1, %42 ], [ %1, %20 ]
  %89 = phi i32 [ %79, %76 ], [ %24, %42 ], [ %24, %20 ]
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %101, label %91

91:                                               ; preds = %86
  %92 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %93 = load i8, i8* %92, align 1
  br label %94

94:                                               ; preds = %91, %82
  %95 = phi i8 [ %85, %82 ], [ %93, %91 ]
  %96 = phi i32 [ %79, %82 ], [ %89, %91 ]
  %97 = phi i32 [ 0, %82 ], [ %88, %91 ]
  %98 = phi i64 [ %77, %82 ], [ %87, %91 ]
  %99 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %100 = or i8 %95, 32
  store i8 %100, i8* %99, align 1
  br label %101

101:                                              ; preds = %94, %86
  %102 = phi i32 [ %96, %94 ], [ 0, %86 ]
  %103 = phi i32 [ %97, %94 ], [ %88, %86 ]
  %104 = phi i64 [ %98, %94 ], [ %87, %86 ]
  %105 = add i64 %104, %22
  %106 = lshr i64 %105, 10
  %107 = icmp eq i32 %102, 512
  %108 = and i1 %7, %107
  %109 = zext i1 %108 to i64
  %110 = xor i64 %109, -1
  %111 = and i64 %106, %110
  %112 = icmp eq i64 %111, 0
  %113 = zext i8 %0 to i64
  %114 = shl i64 %113, 63
  %115 = zext i32 %103 to i64
  %116 = shl i64 %115, 52
  %117 = select i1 %112, i64 0, i64 %116
  %118 = or i64 %111, %114
  %119 = add i64 %118, %117
  br label %120

120:                                              ; preds = %101, %48, %34
  %121 = phi i64 [ %41, %34 ], [ %53, %48 ], [ %119, %101 ]
  ret i64 %121
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define i64 @uint64_to_float64(i64 noundef %0, %struct.float_status* nocapture noundef %1) local_unnamed_addr #14 {
  %3 = icmp eq i64 %0, 0
  br i1 %3, label %12, label %4

4:                                                ; preds = %2
  %ctlz.sh = lshr i64 %0, 1
  %ctlz.step = or i64 %0, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %5 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %5, 6148914691236517205
  %ctpop.sh = lshr i64 %5, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %6 = trunc i64 %ctpop.part to i32
  %7 = add nuw nsw i64 %ctpop.part, 4294967295
  %8 = sub nuw nsw i32 1085, %6
  %9 = and i64 %7, 4294967295
  %10 = shl i64 %0, %9
  %11 = tail call fastcc i64 @roundAndPackFloat64(i8 noundef zeroext 0, i32 noundef %8, i64 noundef %10, %struct.float_status* noundef %1) #30
  br label %12

12:                                               ; preds = %2, %4
  %13 = phi i64 [ %11, %4 ], [ 0, %2 ]
  ret i64 %13
}

; Function Attrs: mustprogress nofree nosync nounwind readnone uwtable willreturn
define { i64, i16 } @int64_to_floatx80(i64 noundef %0, %struct.float_status* nocapture noundef readnone %1) local_unnamed_addr #25 {
  %3 = icmp eq i64 %0, 0
  br i1 %3, label %16, label %4

4:                                                ; preds = %2
  %5 = tail call i64 @llvm.abs.i64(i64 %0, i1 true)
  %ctlz.sh = lshr i64 %5, 1
  %ctlz.step = or i64 %5, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %6 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %6, 6148914691236517205
  %ctpop.sh = lshr i64 %6, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %7 = trunc i64 %ctpop.part to i16
  %8 = sub nuw nsw i16 16446, %7
  %9 = shl i64 %5, %ctpop.part
  %10 = lshr i64 %0, 48
  %11 = trunc i64 %10 to i16
  %12 = and i16 %11, -32768
  %13 = or i16 %8, %12
  %14 = insertvalue { i64, i16 } poison, i64 %9, 0
  %15 = insertvalue { i64, i16 } %14, i16 %13, 1
  br label %16

16:                                               ; preds = %2, %4
  %17 = phi { i64, i16 } [ %15, %4 ], [ zeroinitializer, %2 ]
  ret { i64, i16 } %17
}

; Function Attrs: mustprogress nofree nosync nounwind readnone uwtable willreturn
define { i64, i64 } @int64_to_float128(i64 noundef %0, %struct.float_status* nocapture noundef readnone %1) local_unnamed_addr #25 {
  %3 = icmp eq i64 %0, 0
  br i1 %3, label %34, label %4

4:                                                ; preds = %2
  %5 = and i64 %0, -9223372036854775808
  %6 = tail call i64 @llvm.abs.i64(i64 %0, i1 true)
  %ctlz.sh = lshr i64 %6, 1
  %ctlz.step = or i64 %6, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %7 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %7, 6148914691236517205
  %ctpop.sh = lshr i64 %7, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %8 = trunc i64 %ctpop.part to i8
  %9 = add nuw nsw i8 %8, 49
  %10 = zext i8 %9 to i64
  %11 = icmp ugt i8 %8, 14
  %12 = add nsw i8 %8, -15
  %13 = select i1 %11, i64 %6, i64 0
  %14 = select i1 %11, i64 0, i64 %6
  %15 = select i1 %11, i8 %12, i8 %9
  %16 = zext i8 %15 to i64
  %17 = shl i64 %14, %16
  %18 = icmp eq i8 %15, 0
  br i1 %18, label %26, label %19

19:                                               ; preds = %4
  %20 = shl i64 %13, %16
  %21 = sub nsw i8 0, %15
  %22 = and i8 %21, 63
  %23 = zext i8 %22 to i64
  %24 = lshr i64 %14, %23
  %25 = or i64 %24, %20
  br label %26

26:                                               ; preds = %4, %19
  %27 = phi i64 [ %25, %19 ], [ %13, %4 ]
  %28 = mul nsw i64 %10, -281474976710656
  %29 = or i64 %5, 4642648265865560064
  %30 = add i64 %29, %28
  %31 = add i64 %30, %27
  %32 = insertvalue { i64, i64 } poison, i64 %17, 0
  %33 = insertvalue { i64, i64 } %32, i64 %31, 1
  br label %34

34:                                               ; preds = %2, %26
  %35 = phi { i64, i64 } [ %33, %26 ], [ zeroinitializer, %2 ]
  ret { i64, i64 } %35
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define i32 @float32_to_int32(i32 noundef %0, %struct.float_status* nocapture noundef %1) local_unnamed_addr #14 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = and i32 %0, 2139095040
  %8 = icmp ne i32 %7, 0
  %9 = and i32 %0, 8388607
  %10 = icmp eq i32 %9, 0
  %11 = or i1 %8, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, 64
  store i8 %15, i8* %13, align 1
  %16 = and i32 %0, -2147483648
  br label %17

17:                                               ; preds = %2, %6, %12
  %18 = phi i32 [ %16, %12 ], [ %0, %6 ], [ %0, %2 ]
  %19 = and i32 %18, 8388607
  %20 = lshr i32 %18, 23
  %21 = and i32 %20, 255
  %22 = lshr i32 %18, 31
  %23 = trunc i32 %22 to i8
  %24 = icmp eq i32 %21, 0
  %25 = or i32 %19, 8388608
  %26 = select i1 %24, i32 %19, i32 %25
  %27 = zext i32 %26 to i64
  %28 = shl nuw nsw i64 %27, 32
  %29 = icmp ult i32 %21, 175
  br i1 %29, label %30, label %46

30:                                               ; preds = %17
  %31 = icmp ugt i32 %21, 111
  br i1 %31, label %32, label %43

32:                                               ; preds = %30
  %33 = sub nuw nsw i32 175, %21
  %34 = add nuw nsw i32 %20, 17
  %35 = zext i32 %33 to i64
  %36 = lshr i64 %28, %35
  %37 = and i32 %34, 63
  %38 = zext i32 %37 to i64
  %39 = shl i64 %28, %38
  %40 = icmp ne i64 %39, 0
  %41 = zext i1 %40 to i64
  %42 = or i64 %36, %41
  br label %46

43:                                               ; preds = %30
  %44 = icmp ne i32 %26, 0
  %45 = zext i1 %44 to i64
  br label %46

46:                                               ; preds = %43, %32, %17
  %47 = phi i64 [ %28, %17 ], [ %42, %32 ], [ %45, %43 ]
  %48 = icmp eq i32 %21, 255
  %49 = icmp ne i32 %19, 0
  %50 = and i1 %49, %48
  %51 = select i1 %50, i8 0, i8 %23
  %52 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 1
  %53 = load i8, i8* %52, align 1
  %54 = icmp eq i8 %53, 0
  br i1 %54, label %65, label %55

55:                                               ; preds = %46
  %56 = icmp eq i8 %53, 3
  br i1 %56, label %65, label %57

57:                                               ; preds = %55
  %58 = icmp eq i8 %51, 0
  br i1 %58, label %62, label %59

59:                                               ; preds = %57
  %60 = icmp eq i8 %53, 2
  %61 = select i1 %60, i64 0, i64 127
  br label %65

62:                                               ; preds = %57
  %63 = icmp eq i8 %53, 1
  %64 = select i1 %63, i64 0, i64 127
  br label %65

65:                                               ; preds = %62, %59, %55, %46
  %66 = phi i64 [ 64, %46 ], [ 0, %55 ], [ %61, %59 ], [ %64, %62 ]
  %67 = trunc i64 %47 to i8
  %68 = and i8 %67, 127
  %69 = add i64 %66, %47
  %70 = lshr i64 %69, 7
  %71 = icmp eq i8 %68, 64
  %72 = and i1 %54, %71
  %73 = zext i1 %72 to i64
  %74 = xor i64 %73, -1
  %75 = and i64 %70, %74
  %76 = trunc i64 %75 to i32
  %77 = icmp eq i8 %51, 0
  %78 = sub nsw i32 0, %76
  %79 = select i1 %77, i32 %76, i32 %78
  %80 = icmp ult i64 %69, 549755813888
  br i1 %80, label %81, label %87

81:                                               ; preds = %65
  %82 = icmp eq i32 %79, 0
  br i1 %82, label %92, label %83

83:                                               ; preds = %81
  %84 = lshr i32 %79, 31
  %85 = zext i8 %51 to i32
  %86 = icmp eq i32 %84, %85
  br i1 %86, label %92, label %87

87:                                               ; preds = %83, %65
  %88 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %89 = load i8, i8* %88, align 1
  %90 = or i8 %89, 1
  store i8 %90, i8* %88, align 1
  %91 = select i1 %77, i32 2147483647, i32 -2147483648
  br label %98

92:                                               ; preds = %83, %81
  %93 = icmp eq i8 %68, 0
  br i1 %93, label %98, label %94

94:                                               ; preds = %92
  %95 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %96 = load i8, i8* %95, align 1
  %97 = or i8 %96, 32
  store i8 %97, i8* %95, align 1
  br label %98

98:                                               ; preds = %87, %92, %94
  %99 = phi i32 [ %91, %87 ], [ %79, %94 ], [ %79, %92 ]
  ret i32 %99
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @float32_to_int32_round_to_zero(i32 noundef %0, %struct.float_status* nocapture noundef %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = and i32 %0, 2139095040
  %8 = icmp ne i32 %7, 0
  %9 = and i32 %0, 8388607
  %10 = icmp eq i32 %9, 0
  %11 = or i1 %8, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, 64
  store i8 %15, i8* %13, align 1
  %16 = and i32 %0, -2147483648
  br label %17

17:                                               ; preds = %2, %6, %12
  %18 = phi i32 [ %16, %12 ], [ %0, %6 ], [ %0, %2 ]
  %19 = and i32 %18, 8388607
  %20 = lshr i32 %18, 23
  %21 = and i32 %20, 255
  %22 = add nuw nsw i32 %20, 2
  %23 = icmp ugt i32 %21, 157
  br i1 %23, label %24, label %36

24:                                               ; preds = %17
  %25 = icmp eq i32 %18, -822083584
  br i1 %25, label %35, label %26

26:                                               ; preds = %24
  %27 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %28 = load i8, i8* %27, align 1
  %29 = or i8 %28, 1
  store i8 %29, i8* %27, align 1
  %30 = icmp sgt i32 %18, -1
  br i1 %30, label %61, label %31

31:                                               ; preds = %26
  %32 = icmp eq i32 %21, 255
  %33 = icmp ne i32 %19, 0
  %34 = and i1 %33, %32
  br i1 %34, label %61, label %35

35:                                               ; preds = %31, %24
  br label %61

36:                                               ; preds = %17
  %37 = icmp ult i32 %21, 127
  br i1 %37, label %38, label %45

38:                                               ; preds = %36
  %39 = or i32 %21, %19
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %61, label %41

41:                                               ; preds = %38
  %42 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %43 = load i8, i8* %42, align 1
  %44 = or i8 %43, 32
  store i8 %44, i8* %42, align 1
  br label %61

45:                                               ; preds = %36
  %46 = shl nuw nsw i32 %19, 8
  %47 = or i32 %46, -2147483648
  %48 = sub nuw nsw i32 158, %21
  %49 = lshr i32 %47, %48
  %50 = and i32 %22, 31
  %51 = shl i32 %47, %50
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %57, label %53

53:                                               ; preds = %45
  %54 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %55 = load i8, i8* %54, align 1
  %56 = or i8 %55, 32
  store i8 %56, i8* %54, align 1
  br label %57

57:                                               ; preds = %53, %45
  %58 = icmp sgt i32 %18, -1
  %59 = sub nsw i32 0, %49
  %60 = select i1 %58, i32 %49, i32 %59
  br label %61

61:                                               ; preds = %38, %41, %26, %31, %57, %35
  %62 = phi i32 [ -2147483648, %35 ], [ %60, %57 ], [ 2147483647, %31 ], [ 2147483647, %26 ], [ 0, %41 ], [ 0, %38 ]
  ret i32 %62
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @float32_to_int16_round_to_zero(i32 noundef %0, %struct.float_status* nocapture noundef %1) local_unnamed_addr #2 {
  %3 = and i32 %0, 8388607
  %4 = lshr i32 %0, 23
  %5 = and i32 %4, 255
  %6 = icmp ugt i32 %5, 141
  br i1 %6, label %7, label %19

7:                                                ; preds = %2
  %8 = icmp eq i32 %0, -956301312
  br i1 %8, label %18, label %9

9:                                                ; preds = %7
  %10 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %11 = load i8, i8* %10, align 1
  %12 = or i8 %11, 1
  store i8 %12, i8* %10, align 1
  %13 = icmp sgt i32 %0, -1
  br i1 %13, label %45, label %14

14:                                               ; preds = %9
  %15 = icmp eq i32 %5, 255
  %16 = icmp ne i32 %3, 0
  %17 = and i1 %16, %15
  br i1 %17, label %45, label %18

18:                                               ; preds = %14, %7
  br label %45

19:                                               ; preds = %2
  %20 = icmp ult i32 %5, 127
  br i1 %20, label %21, label %28

21:                                               ; preds = %19
  %22 = or i32 %5, %3
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %45, label %24

24:                                               ; preds = %21
  %25 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %26 = load i8, i8* %25, align 1
  %27 = or i8 %26, 32
  store i8 %27, i8* %25, align 1
  br label %45

28:                                               ; preds = %19
  %29 = add nuw nsw i32 %4, 2
  %30 = shl nuw nsw i32 %3, 8
  %31 = or i32 %30, -2147483648
  %32 = sub nuw nsw i32 158, %5
  %33 = lshr i32 %31, %32
  %34 = and i32 %29, 31
  %35 = shl i32 %31, %34
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %41, label %37

37:                                               ; preds = %28
  %38 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %39 = load i8, i8* %38, align 1
  %40 = or i8 %39, 32
  store i8 %40, i8* %38, align 1
  br label %41

41:                                               ; preds = %37, %28
  %42 = icmp sgt i32 %0, -1
  %43 = sub nsw i32 0, %33
  %44 = select i1 %42, i32 %33, i32 %43
  br label %45

45:                                               ; preds = %21, %24, %9, %14, %41, %18
  %46 = phi i32 [ -32768, %18 ], [ %44, %41 ], [ 32767, %14 ], [ 32767, %9 ], [ 0, %24 ], [ 0, %21 ]
  ret i32 %46
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define i64 @float32_to_int64(i32 noundef %0, %struct.float_status* nocapture noundef %1) local_unnamed_addr #14 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = and i32 %0, 2139095040
  %8 = icmp ne i32 %7, 0
  %9 = and i32 %0, 8388607
  %10 = icmp eq i32 %9, 0
  %11 = or i1 %8, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, 64
  store i8 %15, i8* %13, align 1
  %16 = and i32 %0, -2147483648
  br label %17

17:                                               ; preds = %2, %6, %12
  %18 = phi i32 [ %16, %12 ], [ %0, %6 ], [ %0, %2 ]
  %19 = and i32 %18, 8388607
  %20 = lshr i32 %18, 23
  %21 = and i32 %20, 255
  %22 = lshr i32 %18, 31
  %23 = sub nsw i32 190, %21
  %24 = icmp ugt i32 %21, 190
  br i1 %24, label %25, label %35

25:                                               ; preds = %17
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 1
  store i8 %28, i8* %26, align 1
  %29 = icmp sgt i32 %18, -1
  br i1 %29, label %110, label %30

30:                                               ; preds = %25
  %31 = icmp eq i32 %21, 255
  %32 = icmp ne i32 %19, 0
  %33 = and i1 %32, %31
  %34 = select i1 %33, i64 9223372036854775807, i64 -9223372036854775808
  br label %110

35:                                               ; preds = %17
  %36 = add nuw nsw i32 %20, 2
  %37 = icmp eq i32 %21, 0
  %38 = or i32 %18, 8388608
  %39 = select i1 %37, i32 %19, i32 %38
  %40 = zext i32 %39 to i64
  %41 = shl i64 %40, 40
  %42 = and i32 %36, 63
  %43 = icmp eq i32 %21, 190
  br i1 %43, label %56, label %44

44:                                               ; preds = %35
  %45 = icmp ugt i32 %21, 126
  br i1 %45, label %46, label %51

46:                                               ; preds = %44
  %47 = zext i32 %42 to i64
  %48 = shl i64 %41, %47
  %49 = zext i32 %23 to i64
  %50 = lshr i64 %41, %49
  br label %56

51:                                               ; preds = %44
  %52 = icmp eq i32 %21, 126
  br i1 %52, label %56, label %53

53:                                               ; preds = %51
  %54 = icmp ne i64 %41, 0
  %55 = zext i1 %54 to i64
  br label %56

56:                                               ; preds = %51, %35, %46, %53
  %57 = phi i64 [ %48, %46 ], [ 0, %35 ], [ %55, %53 ], [ %41, %51 ]
  %58 = phi i64 [ %50, %46 ], [ %41, %35 ], [ 0, %53 ], [ 0, %51 ]
  %59 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 1
  %60 = load i8, i8* %59, align 1
  %61 = icmp eq i8 %60, 0
  %62 = lshr i64 %57, 63
  %63 = trunc i64 %62 to i8
  br i1 %61, label %78, label %64

64:                                               ; preds = %56
  %65 = icmp eq i8 %60, 3
  br i1 %65, label %89, label %66

66:                                               ; preds = %64
  %67 = icmp sgt i32 %18, -1
  br i1 %67, label %73, label %68

68:                                               ; preds = %66
  %69 = icmp eq i8 %60, 1
  %70 = icmp ne i64 %57, 0
  %71 = and i1 %70, %69
  %72 = zext i1 %71 to i8
  br label %78

73:                                               ; preds = %66
  %74 = icmp eq i8 %60, 2
  %75 = icmp ne i64 %57, 0
  %76 = and i1 %75, %74
  %77 = zext i1 %76 to i8
  br label %78

78:                                               ; preds = %73, %68, %56
  %79 = phi i8 [ %63, %56 ], [ %72, %68 ], [ %77, %73 ]
  %80 = icmp eq i8 %79, 0
  br i1 %80, label %89, label %81

81:                                               ; preds = %78
  %82 = add nuw i64 %58, 1
  %83 = and i64 %57, 9223372036854775807
  %84 = icmp eq i64 %83, 0
  %85 = and i1 %84, %61
  %86 = zext i1 %85 to i64
  %87 = xor i64 %86, -1
  %88 = and i64 %82, %87
  br label %89

89:                                               ; preds = %81, %78, %64
  %90 = phi i64 [ %88, %81 ], [ %58, %78 ], [ %58, %64 ]
  %91 = icmp sgt i32 %18, -1
  %92 = sub nsw i64 0, %90
  %93 = select i1 %91, i64 %90, i64 %92
  %94 = icmp eq i64 %93, 0
  %95 = lshr i64 %93, 63
  %96 = trunc i64 %95 to i32
  %97 = icmp eq i32 %22, %96
  %98 = select i1 %94, i1 true, i1 %97
  br i1 %98, label %104, label %99

99:                                               ; preds = %89
  %100 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %101 = load i8, i8* %100, align 1
  %102 = or i8 %101, 1
  store i8 %102, i8* %100, align 1
  %103 = select i1 %91, i64 9223372036854775807, i64 -9223372036854775808
  br label %110

104:                                              ; preds = %89
  %105 = icmp eq i64 %57, 0
  br i1 %105, label %110, label %106

106:                                              ; preds = %104
  %107 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %108 = load i8, i8* %107, align 1
  %109 = or i8 %108, 32
  store i8 %109, i8* %107, align 1
  br label %110

110:                                              ; preds = %106, %104, %99, %30, %25
  %111 = phi i64 [ 9223372036854775807, %25 ], [ %34, %30 ], [ %103, %99 ], [ %93, %106 ], [ %93, %104 ]
  ret i64 %111
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i64 @float32_to_int64_round_to_zero(i32 noundef %0, %struct.float_status* nocapture noundef %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = and i32 %0, 2139095040
  %8 = icmp ne i32 %7, 0
  %9 = and i32 %0, 8388607
  %10 = icmp eq i32 %9, 0
  %11 = or i1 %8, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, 64
  store i8 %15, i8* %13, align 1
  %16 = and i32 %0, -2147483648
  br label %17

17:                                               ; preds = %2, %6, %12
  %18 = phi i32 [ %16, %12 ], [ %0, %6 ], [ %0, %2 ]
  %19 = and i32 %18, 8388607
  %20 = lshr i32 %18, 23
  %21 = and i32 %20, 255
  %22 = add nuw nsw i32 %20, 2
  %23 = icmp ugt i32 %21, 189
  br i1 %23, label %24, label %36

24:                                               ; preds = %17
  %25 = icmp eq i32 %18, -553648128
  br i1 %25, label %35, label %26

26:                                               ; preds = %24
  %27 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %28 = load i8, i8* %27, align 1
  %29 = or i8 %28, 1
  store i8 %29, i8* %27, align 1
  %30 = icmp sgt i32 %18, -1
  br i1 %30, label %64, label %31

31:                                               ; preds = %26
  %32 = icmp eq i32 %21, 255
  %33 = icmp ne i32 %19, 0
  %34 = and i1 %33, %32
  br i1 %34, label %64, label %35

35:                                               ; preds = %31, %24
  br label %64

36:                                               ; preds = %17
  %37 = icmp ult i32 %21, 127
  br i1 %37, label %38, label %45

38:                                               ; preds = %36
  %39 = or i32 %21, %19
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %64, label %41

41:                                               ; preds = %38
  %42 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %43 = load i8, i8* %42, align 1
  %44 = or i8 %43, 32
  store i8 %44, i8* %42, align 1
  br label %64

45:                                               ; preds = %36
  %46 = or i32 %18, 8388608
  %47 = zext i32 %46 to i64
  %48 = shl i64 %47, 40
  %49 = sub nuw nsw i32 190, %21
  %50 = zext i32 %49 to i64
  %51 = lshr i64 %48, %50
  %52 = and i32 %22, 63
  %53 = zext i32 %52 to i64
  %54 = shl i64 %48, %53
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %60, label %56

56:                                               ; preds = %45
  %57 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %58 = load i8, i8* %57, align 1
  %59 = or i8 %58, 32
  store i8 %59, i8* %57, align 1
  br label %60

60:                                               ; preds = %56, %45
  %61 = icmp sgt i32 %18, -1
  %62 = sub nsw i64 0, %51
  %63 = select i1 %61, i64 %51, i64 %62
  br label %64

64:                                               ; preds = %38, %41, %26, %31, %60, %35
  %65 = phi i64 [ -9223372036854775808, %35 ], [ %63, %60 ], [ 9223372036854775807, %31 ], [ 9223372036854775807, %26 ], [ 0, %41 ], [ 0, %38 ]
  ret i64 %65
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define i64 @float32_to_float64(i32 noundef %0, %struct.float_status* nocapture noundef %1) local_unnamed_addr #14 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = and i32 %0, 2139095040
  %8 = icmp ne i32 %7, 0
  %9 = and i32 %0, 8388607
  %10 = icmp eq i32 %9, 0
  %11 = or i1 %8, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, 64
  store i8 %15, i8* %13, align 1
  %16 = and i32 %0, -2147483648
  br label %17

17:                                               ; preds = %2, %6, %12
  %18 = phi i32 [ %16, %12 ], [ %0, %6 ], [ %0, %2 ]
  %19 = and i32 %18, 8388607
  %20 = lshr i32 %18, 23
  %21 = and i32 %20, 255
  %22 = lshr i32 %18, 31
  %23 = zext i32 %22 to i64
  %24 = trunc i32 %20 to i8
  switch i8 %24, label %62 [
    i8 -1, label %25
    i8 0, label %53
  ]

25:                                               ; preds = %17
  %26 = icmp eq i32 %19, 0
  br i1 %26, label %50, label %27

27:                                               ; preds = %25
  %28 = and i32 %18, 2143289344
  %29 = icmp ne i32 %28, 2139095040
  %30 = and i32 %18, 4194303
  %31 = icmp eq i32 %30, 0
  %32 = or i1 %29, %31
  br i1 %32, label %37, label %33

33:                                               ; preds = %27
  %34 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %35 = load i8, i8* %34, align 1, !noalias !41
  %36 = or i8 %35, 1
  store i8 %36, i8* %34, align 1, !noalias !41
  br label %37

37:                                               ; preds = %27, %33
  %38 = zext i32 %18 to i64
  %39 = shl i64 %38, 41
  %40 = getelementptr %struct.float_status, %struct.float_status* %1, i64 0, i32 6
  %41 = load i8, i8* %40, align 1
  %42 = lshr exact i64 %39, 12
  %43 = icmp ne i8 %41, 0
  %44 = icmp eq i64 %39, 0
  %45 = or i1 %44, %43
  %46 = shl nuw i64 %23, 63
  %47 = or i64 %46, %42
  %48 = or i64 %47, 9218868437227405312
  %49 = select i1 %45, i64 -2251799813685248, i64 %48
  br label %73

50:                                               ; preds = %25
  %51 = shl nuw i64 %23, 63
  %52 = or i64 %51, 9218868437227405312
  br label %73

53:                                               ; preds = %17
  %54 = icmp eq i32 %19, 0
  br i1 %54, label %55, label %57

55:                                               ; preds = %53
  %56 = shl nuw i64 %23, 63
  br label %73

57:                                               ; preds = %53
  %ctlz.sh = lshr i32 %19, 1
  %ctlz.step = or i32 %19, %ctlz.sh
  %ctlz.sh1 = lshr i32 %ctlz.step, 2
  %ctlz.step2 = or i32 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i32 %ctlz.step2, 4
  %ctlz.step4 = or i32 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i32 %ctlz.step4, 8
  %ctlz.step6 = or i32 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i32 %ctlz.step6, 16
  %ctlz.step8 = or i32 %ctlz.step6, %ctlz.sh7
  %58 = xor i32 %ctlz.step8, -1
  %cppop.and1 = and i32 %58, 1431655765
  %ctpop.sh = lshr i32 %58, 1
  %cppop.and2 = and i32 %ctpop.sh, 1431655765
  %ctpop.step = add i32 %cppop.and1, %cppop.and2
  %cppop.and19 = and i32 %ctpop.step, 858993459
  %ctpop.sh10 = lshr i32 %ctpop.step, 2
  %cppop.and211 = and i32 %ctpop.sh10, 858993459
  %ctpop.step12 = add i32 %cppop.and19, %cppop.and211
  %cppop.and113 = and i32 %ctpop.step12, 252645135
  %ctpop.sh14 = lshr i32 %ctpop.step12, 4
  %cppop.and215 = and i32 %ctpop.sh14, 252645135
  %ctpop.step16 = add i32 %cppop.and113, %cppop.and215
  %cppop.and117 = and i32 %ctpop.step16, 16711935
  %ctpop.sh18 = lshr i32 %ctpop.step16, 8
  %cppop.and219 = and i32 %ctpop.sh18, 16711935
  %ctpop.step20 = add i32 %cppop.and117, %cppop.and219
  %cppop.and121 = and i32 %ctpop.step20, 65535
  %ctpop.sh22 = lshr i32 %ctpop.step20, 16
  %cppop.and223 = and i32 %ctpop.sh22, 65535
  %ctpop.step24 = add i32 %cppop.and121, %cppop.and223
  %ctpop.part = add i32 %ctpop.step24, 0
  %59 = add nsw i32 %ctpop.part, -8
  %60 = shl i32 %19, %59
  %61 = sub nsw i32 8, %ctpop.part
  br label %62

62:                                               ; preds = %17, %57
  %63 = phi i32 [ %19, %17 ], [ %60, %57 ]
  %64 = phi i32 [ %21, %17 ], [ %61, %57 ]
  %65 = add nsw i32 %64, 896
  %66 = zext i32 %63 to i64
  %67 = shl nuw nsw i64 %66, 29
  %68 = shl nuw i64 %23, 63
  %69 = zext i32 %65 to i64
  %70 = shl nuw nsw i64 %69, 52
  %71 = or i64 %67, %68
  %72 = add nuw i64 %71, %70
  br label %73

73:                                               ; preds = %62, %55, %50, %37
  %74 = phi i64 [ %49, %37 ], [ %52, %50 ], [ %56, %55 ], [ %72, %62 ]
  ret i64 %74
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define { i64, i16 } @float32_to_floatx80(i32 noundef %0, %struct.float_status* nocapture noundef %1) local_unnamed_addr #14 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = and i32 %0, 2139095040
  %8 = icmp ne i32 %7, 0
  %9 = and i32 %0, 8388607
  %10 = icmp eq i32 %9, 0
  %11 = or i1 %8, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, 64
  store i8 %15, i8* %13, align 1
  %16 = and i32 %0, -2147483648
  br label %17

17:                                               ; preds = %2, %6, %12
  %18 = phi i32 [ %16, %12 ], [ %0, %6 ], [ %0, %2 ]
  %19 = and i32 %18, 8388607
  %20 = lshr i32 %18, 23
  %21 = and i32 %20, 255
  %22 = lshr i32 %18, 31
  %23 = trunc i32 %20 to i8
  switch i8 %23, label %66 [
    i8 -1, label %24
    i8 0, label %56
  ]

24:                                               ; preds = %17
  %25 = icmp eq i32 %19, 0
  br i1 %25, label %52, label %26

26:                                               ; preds = %24
  %27 = and i32 %18, 2143289344
  %28 = icmp ne i32 %27, 2139095040
  %29 = and i32 %18, 4194303
  %30 = icmp eq i32 %29, 0
  %31 = or i1 %28, %30
  br i1 %31, label %36, label %32

32:                                               ; preds = %26
  %33 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %34 = load i8, i8* %33, align 1, !noalias !44
  %35 = or i8 %34, 1
  store i8 %35, i8* %33, align 1, !noalias !44
  br label %36

36:                                               ; preds = %26, %32
  %37 = zext i32 %18 to i64
  %38 = shl i64 %37, 41
  %39 = getelementptr %struct.float_status, %struct.float_status* %1, i64 0, i32 6
  %40 = load i8, i8* %39, align 1
  %41 = icmp ne i8 %40, 0
  %42 = icmp eq i64 %38, 0
  %43 = or i1 %42, %41
  %44 = lshr exact i64 %38, 1
  %45 = or i64 %44, -9223372036854775808
  %46 = trunc i32 %22 to i16
  %47 = shl nuw i16 %46, 15
  %48 = or i16 %47, 32767
  %49 = select i1 %43, i64 -4611686018427387904, i64 %45
  %50 = select i1 %43, i16 -1, i16 %48
  %51 = insertvalue { i64, i16 } poison, i64 %49, 0
  br label %77

52:                                               ; preds = %24
  %53 = shl nuw nsw i32 %22, 15
  %54 = trunc i32 %53 to i16
  %55 = or i16 %54, 32767
  br label %77

56:                                               ; preds = %17
  %57 = icmp eq i32 %19, 0
  br i1 %57, label %58, label %61

58:                                               ; preds = %56
  %59 = shl nuw nsw i32 %22, 15
  %60 = trunc i32 %59 to i16
  br label %77

61:                                               ; preds = %56
  %ctlz.sh = lshr i32 %19, 1
  %ctlz.step = or i32 %19, %ctlz.sh
  %ctlz.sh1 = lshr i32 %ctlz.step, 2
  %ctlz.step2 = or i32 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i32 %ctlz.step2, 4
  %ctlz.step4 = or i32 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i32 %ctlz.step4, 8
  %ctlz.step6 = or i32 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i32 %ctlz.step6, 16
  %ctlz.step8 = or i32 %ctlz.step6, %ctlz.sh7
  %62 = xor i32 %ctlz.step8, -1
  %cppop.and1 = and i32 %62, 1431655765
  %ctpop.sh = lshr i32 %62, 1
  %cppop.and2 = and i32 %ctpop.sh, 1431655765
  %ctpop.step = add i32 %cppop.and1, %cppop.and2
  %cppop.and19 = and i32 %ctpop.step, 858993459
  %ctpop.sh10 = lshr i32 %ctpop.step, 2
  %cppop.and211 = and i32 %ctpop.sh10, 858993459
  %ctpop.step12 = add i32 %cppop.and19, %cppop.and211
  %cppop.and113 = and i32 %ctpop.step12, 252645135
  %ctpop.sh14 = lshr i32 %ctpop.step12, 4
  %cppop.and215 = and i32 %ctpop.sh14, 252645135
  %ctpop.step16 = add i32 %cppop.and113, %cppop.and215
  %cppop.and117 = and i32 %ctpop.step16, 16711935
  %ctpop.sh18 = lshr i32 %ctpop.step16, 8
  %cppop.and219 = and i32 %ctpop.sh18, 16711935
  %ctpop.step20 = add i32 %cppop.and117, %cppop.and219
  %cppop.and121 = and i32 %ctpop.step20, 65535
  %ctpop.sh22 = lshr i32 %ctpop.step20, 16
  %cppop.and223 = and i32 %ctpop.sh22, 65535
  %ctpop.step24 = add i32 %cppop.and121, %cppop.and223
  %ctpop.part = add i32 %ctpop.step24, 0
  %63 = add nsw i32 %ctpop.part, -8
  %64 = shl i32 %19, %63
  %65 = sub nsw i32 9, %ctpop.part
  br label %66

66:                                               ; preds = %17, %61
  %67 = phi i32 [ %19, %17 ], [ %64, %61 ]
  %68 = phi i32 [ %21, %17 ], [ %65, %61 ]
  %69 = or i32 %67, 8388608
  %70 = zext i32 %69 to i64
  %71 = shl i64 %70, 40
  %72 = shl nuw nsw i32 %22, 15
  %73 = or i32 %72, 16256
  %74 = add nsw i32 %73, %68
  %75 = trunc i32 %74 to i16
  %76 = insertvalue { i64, i16 } poison, i64 %71, 0
  br label %77

77:                                               ; preds = %66, %58, %52, %36
  %78 = phi { i64, i16 } [ %51, %36 ], [ { i64 -9223372036854775808, i16 poison }, %52 ], [ { i64 0, i16 poison }, %58 ], [ %76, %66 ]
  %79 = phi i16 [ %50, %36 ], [ %55, %52 ], [ %60, %58 ], [ %75, %66 ]
  %80 = insertvalue { i64, i16 } %78, i16 %79, 1
  ret { i64, i16 } %80
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define { i64, i64 } @float32_to_float128(i32 noundef %0, %struct.float_status* nocapture noundef %1) local_unnamed_addr #14 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = and i32 %0, 2139095040
  %8 = icmp ne i32 %7, 0
  %9 = and i32 %0, 8388607
  %10 = icmp eq i32 %9, 0
  %11 = or i1 %8, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, 64
  store i8 %15, i8* %13, align 1
  %16 = and i32 %0, -2147483648
  br label %17

17:                                               ; preds = %2, %6, %12
  %18 = phi i32 [ %16, %12 ], [ %0, %6 ], [ %0, %2 ]
  %19 = and i32 %18, 8388607
  %20 = lshr i32 %18, 23
  %21 = and i32 %20, 255
  %22 = lshr i32 %18, 31
  %23 = zext i32 %22 to i64
  %24 = trunc i32 %20 to i8
  switch i8 %24, label %59 [
    i8 -1, label %25
    i8 0, label %50
  ]

25:                                               ; preds = %17
  %26 = icmp eq i32 %19, 0
  br i1 %26, label %47, label %27

27:                                               ; preds = %25
  %28 = and i32 %18, 2143289344
  %29 = icmp ne i32 %28, 2139095040
  %30 = and i32 %18, 4194303
  %31 = icmp eq i32 %30, 0
  %32 = or i1 %29, %31
  br i1 %32, label %37, label %33

33:                                               ; preds = %27
  %34 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %35 = load i8, i8* %34, align 1, !noalias !47
  %36 = or i8 %35, 1
  store i8 %36, i8* %34, align 1, !noalias !47
  br label %37

37:                                               ; preds = %27, %33
  %38 = getelementptr %struct.float_status, %struct.float_status* %1, i64 0, i32 6
  %39 = load i8, i8* %38, align 1
  %40 = icmp eq i8 %39, 0
  %41 = zext i32 %18 to i64
  %42 = shl nuw nsw i64 %41, 25
  %43 = shl nuw i64 %23, 63
  %44 = or i64 %43, %42
  %45 = or i64 %44, 9223090561878065152
  %46 = select i1 %40, i64 %45, i64 -140737488355328
  br label %70

47:                                               ; preds = %25
  %48 = shl nuw i64 %23, 63
  %49 = or i64 %48, 9223090561878065152
  br label %70

50:                                               ; preds = %17
  %51 = icmp eq i32 %19, 0
  br i1 %51, label %52, label %54

52:                                               ; preds = %50
  %53 = shl nuw i64 %23, 63
  br label %70

54:                                               ; preds = %50
  %ctlz.sh = lshr i32 %19, 1
  %ctlz.step = or i32 %19, %ctlz.sh
  %ctlz.sh1 = lshr i32 %ctlz.step, 2
  %ctlz.step2 = or i32 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i32 %ctlz.step2, 4
  %ctlz.step4 = or i32 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i32 %ctlz.step4, 8
  %ctlz.step6 = or i32 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i32 %ctlz.step6, 16
  %ctlz.step8 = or i32 %ctlz.step6, %ctlz.sh7
  %55 = xor i32 %ctlz.step8, -1
  %cppop.and1 = and i32 %55, 1431655765
  %ctpop.sh = lshr i32 %55, 1
  %cppop.and2 = and i32 %ctpop.sh, 1431655765
  %ctpop.step = add i32 %cppop.and1, %cppop.and2
  %cppop.and19 = and i32 %ctpop.step, 858993459
  %ctpop.sh10 = lshr i32 %ctpop.step, 2
  %cppop.and211 = and i32 %ctpop.sh10, 858993459
  %ctpop.step12 = add i32 %cppop.and19, %cppop.and211
  %cppop.and113 = and i32 %ctpop.step12, 252645135
  %ctpop.sh14 = lshr i32 %ctpop.step12, 4
  %cppop.and215 = and i32 %ctpop.sh14, 252645135
  %ctpop.step16 = add i32 %cppop.and113, %cppop.and215
  %cppop.and117 = and i32 %ctpop.step16, 16711935
  %ctpop.sh18 = lshr i32 %ctpop.step16, 8
  %cppop.and219 = and i32 %ctpop.sh18, 16711935
  %ctpop.step20 = add i32 %cppop.and117, %cppop.and219
  %cppop.and121 = and i32 %ctpop.step20, 65535
  %ctpop.sh22 = lshr i32 %ctpop.step20, 16
  %cppop.and223 = and i32 %ctpop.sh22, 65535
  %ctpop.step24 = add i32 %cppop.and121, %cppop.and223
  %ctpop.part = add i32 %ctpop.step24, 0
  %56 = add nsw i32 %ctpop.part, -8
  %57 = shl i32 %19, %56
  %58 = sub nsw i32 8, %ctpop.part
  br label %59

59:                                               ; preds = %17, %54
  %60 = phi i32 [ %19, %17 ], [ %57, %54 ]
  %61 = phi i32 [ %21, %17 ], [ %58, %54 ]
  %62 = add nsw i32 %61, 16256
  %63 = zext i32 %60 to i64
  %64 = shl nuw nsw i64 %63, 25
  %65 = shl nuw i64 %23, 63
  %66 = zext i32 %62 to i64
  %67 = shl nuw nsw i64 %66, 48
  %68 = or i64 %64, %65
  %69 = add nuw i64 %68, %67
  br label %70

70:                                               ; preds = %59, %52, %47, %37
  %71 = phi i64 [ %46, %37 ], [ %49, %47 ], [ %53, %52 ], [ %69, %59 ]
  %72 = insertvalue { i64, i64 } { i64 0, i64 poison }, i64 %71, 1
  ret { i64, i64 } %72
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @float32_round_to_int(i32 noundef %0, %struct.float_status* nocapture noundef %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = and i32 %0, 2139095040
  %8 = icmp ne i32 %7, 0
  %9 = and i32 %0, 8388607
  %10 = icmp eq i32 %9, 0
  %11 = or i1 %8, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, 64
  store i8 %15, i8* %13, align 1
  %16 = and i32 %0, -2147483648
  br label %17

17:                                               ; preds = %2, %6, %12
  %18 = phi i32 [ %16, %12 ], [ %0, %6 ], [ %0, %2 ]
  %19 = lshr i32 %18, 23
  %20 = and i32 %19, 255
  %21 = icmp ugt i32 %20, 149
  br i1 %21, label %22, label %50

22:                                               ; preds = %17
  %23 = icmp ne i32 %20, 255
  %24 = and i32 %18, 8388607
  %25 = icmp eq i32 %24, 0
  %26 = or i1 %25, %23
  br i1 %26, label %107, label %27

27:                                               ; preds = %22
  %28 = and i32 %18, 2143289344
  %29 = icmp eq i32 %28, 2139095040
  %30 = and i32 %18, 4194303
  %31 = icmp ne i32 %30, 0
  %32 = and i1 %29, %31
  br i1 %32, label %33, label %40

33:                                               ; preds = %27
  %34 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %35 = load i8, i8* %34, align 1
  %36 = or i8 %35, 1
  store i8 %36, i8* %34, align 1
  %37 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 6
  %38 = load i8, i8* %37, align 1
  %39 = icmp eq i8 %38, 0
  br i1 %39, label %44, label %107

40:                                               ; preds = %27
  %41 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 6
  %42 = load i8, i8* %41, align 1
  %43 = icmp eq i8 %42, 0
  br i1 %43, label %44, label %107

44:                                               ; preds = %40, %33
  %45 = icmp ne i32 %28, 2139095040
  %46 = icmp eq i32 %30, 0
  %47 = or i1 %45, %46
  %48 = or i32 %18, 4194304
  %49 = select i1 %47, i32 %18, i32 %48
  br label %107

50:                                               ; preds = %17
  %51 = icmp ult i32 %20, 127
  br i1 %51, label %52, label %76

52:                                               ; preds = %50
  %53 = and i32 %18, 2147483647
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %107, label %55

55:                                               ; preds = %52
  %56 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %57 = load i8, i8* %56, align 1
  %58 = or i8 %57, 32
  store i8 %58, i8* %56, align 1
  %59 = and i32 %18, -2147483648
  %60 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 1
  %61 = load i8, i8* %60, align 1
  %62 = sext i8 %61 to i32
  switch i32 %62, label %107 [
    i32 0, label %63
    i32 1, label %70
    i32 2, label %73
  ]

63:                                               ; preds = %55
  %64 = icmp ne i32 %20, 126
  %65 = and i32 %18, 8388607
  %66 = icmp eq i32 %65, 0
  %67 = or i1 %66, %64
  %68 = or i32 %59, 1065353216
  %69 = select i1 %67, i32 %59, i32 %68
  br label %107

70:                                               ; preds = %55
  %71 = icmp slt i32 %18, 0
  %72 = select i1 %71, i32 -1082130432, i32 0
  br label %107

73:                                               ; preds = %55
  %74 = icmp sgt i32 %18, -1
  %75 = select i1 %74, i32 1065353216, i32 -2147483648
  br label %107

76:                                               ; preds = %50
  %77 = sub nuw nsw i32 150, %20
  %78 = shl nuw nsw i32 1, %77
  %79 = add nsw i32 %78, -1
  %80 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 1
  %81 = load i8, i8* %80, align 1
  switch i8 %81, label %90 [
    i8 0, label %82
    i8 3, label %98
  ]

82:                                               ; preds = %76
  %83 = lshr i32 %78, 1
  %84 = add i32 %83, %18
  %85 = and i32 %84, %79
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %98

87:                                               ; preds = %82
  %88 = xor i32 %78, -1
  %89 = and i32 %84, %88
  br label %98

90:                                               ; preds = %76
  %91 = lshr i32 %18, 31
  %92 = trunc i32 %91 to i8
  %93 = icmp eq i8 %81, 2
  %94 = zext i1 %93 to i8
  %95 = icmp eq i8 %92, %94
  %96 = select i1 %95, i32 0, i32 %79
  %97 = add i32 %96, %18
  br label %98

98:                                               ; preds = %90, %76, %82, %87
  %99 = phi i32 [ %89, %87 ], [ %84, %82 ], [ %18, %76 ], [ %97, %90 ]
  %100 = sub nsw i32 0, %78
  %101 = and i32 %99, %100
  %102 = icmp eq i32 %101, %18
  br i1 %102, label %107, label %103

103:                                              ; preds = %98
  %104 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %105 = load i8, i8* %104, align 1
  %106 = or i8 %105, 32
  store i8 %106, i8* %104, align 1
  br label %107

107:                                              ; preds = %63, %55, %44, %33, %40, %98, %103, %52, %22, %73, %70
  %108 = phi i32 [ %75, %73 ], [ %72, %70 ], [ %18, %22 ], [ %18, %52 ], [ %101, %103 ], [ %18, %98 ], [ %49, %44 ], [ -4194304, %33 ], [ -4194304, %40 ], [ %59, %55 ], [ %69, %63 ]
  ret i32 %108
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define i32 @float32_add(i32 noundef %0, i32 noundef %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #14 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i32 %0, 2139095040
  %9 = icmp ne i32 %8, 0
  %10 = and i32 %0, 8388607
  %11 = icmp eq i32 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i32 %0, -2147483648
  br label %18

18:                                               ; preds = %7, %13
  %19 = phi i32 [ %0, %7 ], [ %17, %13 ]
  %20 = and i32 %1, 2139095040
  %21 = icmp ne i32 %20, 0
  %22 = and i32 %1, 8388607
  %23 = icmp eq i32 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i32 %1, -2147483648
  br label %30

30:                                               ; preds = %3, %18, %25
  %31 = phi i32 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i32 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = lshr i32 %31, 31
  %34 = trunc i32 %33 to i8
  %35 = lshr i32 %32, 31
  %36 = trunc i32 %35 to i8
  %37 = icmp eq i8 %34, %36
  br i1 %37, label %38, label %40

38:                                               ; preds = %30
  %39 = tail call fastcc i32 @addFloat32Sigs(i32 noundef %31, i32 noundef %32, i8 noundef zeroext %34, %struct.float_status* noundef nonnull %2)
  br label %42

40:                                               ; preds = %30
  %41 = tail call fastcc i32 @subFloat32Sigs(i32 noundef %31, i32 noundef %32, i8 noundef zeroext %34, %struct.float_status* noundef nonnull %2)
  br label %42

42:                                               ; preds = %40, %38
  %43 = phi i32 [ %39, %38 ], [ %41, %40 ]
  ret i32 %43
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define internal fastcc i32 @addFloat32Sigs(i32 noundef %0, i32 noundef %1, i8 noundef zeroext %2, %struct.float_status* nocapture noundef %3) unnamed_addr #14 {
  %5 = lshr i32 %0, 23
  %6 = and i32 %5, 255
  %7 = lshr i32 %1, 23
  %8 = and i32 %7, 255
  %9 = sub nsw i32 %6, %8
  %10 = shl i32 %0, 6
  %11 = and i32 %10, 536870848
  %12 = shl i32 %1, 6
  %13 = and i32 %12, 536870848
  %14 = icmp sgt i32 %9, 0
  br i1 %14, label %15, label %95

15:                                               ; preds = %4
  %16 = icmp eq i32 %6, 255
  br i1 %16, label %17, label %73

17:                                               ; preds = %15
  %18 = icmp eq i32 %11, 0
  br i1 %18, label %277, label %19

19:                                               ; preds = %17
  %20 = shl i32 %0, 1
  %21 = icmp ult i32 %20, -8388608
  %22 = and i32 %0, 2143289344
  %23 = icmp eq i32 %22, 2139095040
  %24 = and i32 %0, 4194303
  %25 = icmp ne i32 %24, 0
  %26 = and i1 %23, %25
  %27 = shl i32 %1, 1
  %28 = icmp ugt i32 %27, -8388609
  %29 = and i32 %1, 2143289344
  %30 = icmp eq i32 %29, 2139095040
  %31 = and i32 %1, 4194303
  %32 = icmp ne i32 %31, 0
  %33 = and i1 %30, %32
  %34 = zext i1 %33 to i8
  %35 = or i1 %26, %33
  br i1 %35, label %36, label %40

36:                                               ; preds = %19
  %37 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %38 = load i8, i8* %37, align 1
  %39 = or i8 %38, 1
  store i8 %39, i8* %37, align 1
  br label %40

40:                                               ; preds = %36, %19
  %41 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 6
  %42 = load i8, i8* %41, align 1
  %43 = icmp eq i8 %42, 0
  br i1 %43, label %44, label %277

44:                                               ; preds = %40
  %45 = icmp ult i32 %20, %27
  br i1 %45, label %51, label %46

46:                                               ; preds = %44
  %47 = icmp ult i32 %27, %20
  br i1 %47, label %51, label %48

48:                                               ; preds = %46
  %49 = icmp ult i32 %0, %1
  %50 = zext i1 %49 to i8
  br label %51

51:                                               ; preds = %48, %46, %44
  %52 = phi i8 [ %50, %48 ], [ 0, %44 ], [ 1, %46 ]
  br i1 %26, label %58, label %53

53:                                               ; preds = %51
  br i1 %21, label %61, label %54

54:                                               ; preds = %53
  %55 = or i8 %52, %34
  %56 = icmp eq i8 %55, 0
  %57 = and i1 %28, %56
  br i1 %57, label %61, label %67

58:                                               ; preds = %51
  %59 = icmp eq i8 %52, 0
  %60 = select i1 %33, i1 %59, i1 %28
  br i1 %60, label %61, label %67

61:                                               ; preds = %58, %54, %53
  %62 = icmp ne i32 %29, 2139095040
  %63 = icmp eq i32 %31, 0
  %64 = or i1 %62, %63
  %65 = or i32 %1, 4194304
  %66 = select i1 %64, i32 %1, i32 %65
  br label %277

67:                                               ; preds = %58, %54
  %68 = icmp ne i32 %22, 2139095040
  %69 = icmp eq i32 %24, 0
  %70 = or i1 %68, %69
  %71 = or i32 %0, 4194304
  %72 = select i1 %70, i32 %0, i32 %71
  br label %277

73:                                               ; preds = %15
  %74 = icmp eq i32 %8, 0
  br i1 %74, label %77, label %75

75:                                               ; preds = %73
  %76 = or i32 %13, 536870912
  br label %80

77:                                               ; preds = %73
  %78 = add nsw i32 %9, -1
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %261, label %80

80:                                               ; preds = %75, %77
  %81 = phi i32 [ %9, %75 ], [ %78, %77 ]
  %82 = phi i32 [ %76, %75 ], [ %13, %77 ]
  %83 = icmp ult i32 %81, 32
  br i1 %83, label %84, label %92

84:                                               ; preds = %80
  %85 = lshr i32 %82, %81
  %86 = sub nsw i32 0, %81
  %87 = and i32 %86, 31
  %88 = shl i32 %82, %87
  %89 = icmp ne i32 %88, 0
  %90 = zext i1 %89 to i32
  %91 = or i32 %85, %90
  br label %261

92:                                               ; preds = %80
  %93 = icmp ne i32 %82, 0
  %94 = zext i1 %93 to i32
  br label %261

95:                                               ; preds = %4
  %96 = icmp slt i32 %9, 0
  br i1 %96, label %97, label %179

97:                                               ; preds = %95
  %98 = icmp eq i32 %8, 255
  br i1 %98, label %99, label %159

99:                                               ; preds = %97
  %100 = icmp eq i32 %13, 0
  br i1 %100, label %155, label %101

101:                                              ; preds = %99
  %102 = shl i32 %0, 1
  %103 = icmp ult i32 %102, -8388608
  %104 = and i32 %0, 2143289344
  %105 = icmp eq i32 %104, 2139095040
  %106 = and i32 %0, 4194303
  %107 = icmp ne i32 %106, 0
  %108 = and i1 %105, %107
  %109 = shl i32 %1, 1
  %110 = icmp ugt i32 %109, -8388609
  %111 = and i32 %1, 2143289344
  %112 = icmp eq i32 %111, 2139095040
  %113 = and i32 %1, 4194303
  %114 = icmp ne i32 %113, 0
  %115 = and i1 %112, %114
  %116 = zext i1 %115 to i8
  %117 = or i1 %108, %115
  br i1 %117, label %118, label %122

118:                                              ; preds = %101
  %119 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %120 = load i8, i8* %119, align 1
  %121 = or i8 %120, 1
  store i8 %121, i8* %119, align 1
  br label %122

122:                                              ; preds = %118, %101
  %123 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 6
  %124 = load i8, i8* %123, align 1
  %125 = icmp eq i8 %124, 0
  br i1 %125, label %126, label %277

126:                                              ; preds = %122
  %127 = icmp ult i32 %102, %109
  br i1 %127, label %133, label %128

128:                                              ; preds = %126
  %129 = icmp ult i32 %109, %102
  br i1 %129, label %133, label %130

130:                                              ; preds = %128
  %131 = icmp ult i32 %0, %1
  %132 = zext i1 %131 to i8
  br label %133

133:                                              ; preds = %130, %128, %126
  %134 = phi i8 [ %132, %130 ], [ 0, %126 ], [ 1, %128 ]
  br i1 %108, label %140, label %135

135:                                              ; preds = %133
  br i1 %103, label %143, label %136

136:                                              ; preds = %135
  %137 = or i8 %134, %116
  %138 = icmp eq i8 %137, 0
  %139 = and i1 %110, %138
  br i1 %139, label %143, label %149

140:                                              ; preds = %133
  %141 = icmp eq i8 %134, 0
  %142 = select i1 %115, i1 %141, i1 %110
  br i1 %142, label %143, label %149

143:                                              ; preds = %140, %136, %135
  %144 = icmp ne i32 %111, 2139095040
  %145 = icmp eq i32 %113, 0
  %146 = or i1 %144, %145
  %147 = or i32 %1, 4194304
  %148 = select i1 %146, i32 %1, i32 %147
  br label %277

149:                                              ; preds = %140, %136
  %150 = icmp ne i32 %104, 2139095040
  %151 = icmp eq i32 %106, 0
  %152 = or i1 %150, %151
  %153 = or i32 %0, 4194304
  %154 = select i1 %152, i32 %0, i32 %153
  br label %277

155:                                              ; preds = %99
  %156 = zext i8 %2 to i32
  %157 = shl i32 %156, 31
  %158 = or i32 %157, 2139095040
  br label %277

159:                                              ; preds = %97
  %160 = icmp eq i32 %6, 0
  %161 = or i32 %11, 536870912
  %162 = select i1 %160, i32 %11, i32 %161
  %163 = zext i1 %160 to i32
  %164 = add nsw i32 %9, %163
  %165 = sub nsw i32 0, %164
  %166 = icmp eq i32 %164, 0
  br i1 %166, label %261, label %167

167:                                              ; preds = %159
  %168 = icmp ult i32 %165, 32
  br i1 %168, label %169, label %176

169:                                              ; preds = %167
  %170 = lshr i32 %162, %165
  %171 = and i32 %164, 31
  %172 = shl i32 %162, %171
  %173 = icmp ne i32 %172, 0
  %174 = zext i1 %173 to i32
  %175 = or i32 %170, %174
  br label %261

176:                                              ; preds = %167
  %177 = icmp ne i32 %162, 0
  %178 = zext i1 %177 to i32
  br label %261

179:                                              ; preds = %95
  %180 = trunc i32 %5 to i8
  switch i8 %180, label %258 [
    i8 -1, label %181
    i8 0, label %238
  ]

181:                                              ; preds = %179
  %182 = or i32 %13, %11
  %183 = icmp eq i32 %182, 0
  br i1 %183, label %277, label %184

184:                                              ; preds = %181
  %185 = shl i32 %0, 1
  %186 = icmp ult i32 %185, -8388608
  %187 = and i32 %0, 2143289344
  %188 = icmp eq i32 %187, 2139095040
  %189 = and i32 %0, 4194303
  %190 = icmp ne i32 %189, 0
  %191 = and i1 %188, %190
  %192 = shl i32 %1, 1
  %193 = icmp ugt i32 %192, -8388609
  %194 = and i32 %1, 2143289344
  %195 = icmp eq i32 %194, 2139095040
  %196 = and i32 %1, 4194303
  %197 = icmp ne i32 %196, 0
  %198 = and i1 %195, %197
  %199 = zext i1 %198 to i8
  %200 = or i1 %191, %198
  br i1 %200, label %201, label %205

201:                                              ; preds = %184
  %202 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %203 = load i8, i8* %202, align 1
  %204 = or i8 %203, 1
  store i8 %204, i8* %202, align 1
  br label %205

205:                                              ; preds = %201, %184
  %206 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 6
  %207 = load i8, i8* %206, align 1
  %208 = icmp eq i8 %207, 0
  br i1 %208, label %209, label %277

209:                                              ; preds = %205
  %210 = icmp ult i32 %185, %192
  br i1 %210, label %216, label %211

211:                                              ; preds = %209
  %212 = icmp ult i32 %192, %185
  br i1 %212, label %216, label %213

213:                                              ; preds = %211
  %214 = icmp ult i32 %0, %1
  %215 = zext i1 %214 to i8
  br label %216

216:                                              ; preds = %213, %211, %209
  %217 = phi i8 [ %215, %213 ], [ 0, %209 ], [ 1, %211 ]
  br i1 %191, label %223, label %218

218:                                              ; preds = %216
  br i1 %186, label %226, label %219

219:                                              ; preds = %218
  %220 = or i8 %217, %199
  %221 = icmp eq i8 %220, 0
  %222 = and i1 %193, %221
  br i1 %222, label %226, label %232

223:                                              ; preds = %216
  %224 = icmp eq i8 %217, 0
  %225 = select i1 %198, i1 %224, i1 %193
  br i1 %225, label %226, label %232

226:                                              ; preds = %223, %219, %218
  %227 = icmp ne i32 %194, 2139095040
  %228 = icmp eq i32 %196, 0
  %229 = or i1 %227, %228
  %230 = or i32 %1, 4194304
  %231 = select i1 %229, i32 %1, i32 %230
  br label %277

232:                                              ; preds = %223, %219
  %233 = icmp ne i32 %187, 2139095040
  %234 = icmp eq i32 %189, 0
  %235 = or i1 %233, %234
  %236 = or i32 %0, 4194304
  %237 = select i1 %235, i32 %0, i32 %236
  br label %277

238:                                              ; preds = %179
  %239 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 4
  %240 = load i8, i8* %239, align 1
  %241 = icmp eq i8 %240, 0
  br i1 %241, label %252, label %242

242:                                              ; preds = %238
  %243 = or i32 %13, %11
  %244 = icmp eq i32 %243, 0
  br i1 %244, label %249, label %245

245:                                              ; preds = %242
  %246 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %247 = load i8, i8* %246, align 1
  %248 = or i8 %247, -128
  store i8 %248, i8* %246, align 1
  br label %249

249:                                              ; preds = %245, %242
  %250 = zext i8 %2 to i32
  %251 = shl i32 %250, 31
  br label %277

252:                                              ; preds = %238
  %253 = add nuw nsw i32 %13, %11
  %254 = lshr exact i32 %253, 6
  %255 = zext i8 %2 to i32
  %256 = shl i32 %255, 31
  %257 = or i32 %254, %256
  br label %277

258:                                              ; preds = %179
  %259 = or i32 %11, 1073741824
  %260 = add nuw nsw i32 %259, %13
  br label %273

261:                                              ; preds = %176, %169, %159, %92, %84, %77
  %262 = phi i32 [ %11, %77 ], [ %11, %84 ], [ %11, %92 ], [ %175, %169 ], [ %178, %176 ], [ %162, %159 ]
  %263 = phi i32 [ %13, %77 ], [ %91, %84 ], [ %94, %92 ], [ %13, %169 ], [ %13, %176 ], [ %13, %159 ]
  %264 = phi i32 [ %6, %77 ], [ %6, %84 ], [ %6, %92 ], [ %8, %169 ], [ %8, %176 ], [ %8, %159 ]
  %265 = or i32 %262, 536870912
  %266 = add i32 %265, %263
  %267 = shl i32 %266, 1
  %268 = icmp slt i32 %267, 0
  %269 = xor i1 %268, true
  %270 = sext i1 %269 to i32
  %271 = add nsw i32 %264, %270
  %272 = select i1 %268, i32 %266, i32 %267
  br label %273

273:                                              ; preds = %261, %258
  %274 = phi i32 [ %6, %258 ], [ %271, %261 ]
  %275 = phi i32 [ %260, %258 ], [ %272, %261 ]
  %276 = tail call fastcc i32 @roundAndPackFloat32(i8 noundef zeroext %2, i32 noundef %274, i32 noundef %275, %struct.float_status* noundef %3)
  br label %277

277:                                              ; preds = %232, %226, %205, %149, %143, %122, %67, %61, %40, %181, %17, %273, %252, %249, %155
  %278 = phi i32 [ %276, %273 ], [ %158, %155 ], [ %251, %249 ], [ %257, %252 ], [ %0, %17 ], [ %0, %181 ], [ %66, %61 ], [ %72, %67 ], [ -4194304, %40 ], [ %148, %143 ], [ %154, %149 ], [ -4194304, %122 ], [ %231, %226 ], [ %237, %232 ], [ -4194304, %20
  ret i32 %278
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define internal fastcc i32 @subFloat32Sigs(i32 noundef %0, i32 noundef %1, i8 noundef zeroext %2, %struct.float_status* nocapture noundef %3) unnamed_addr #14 {
  %5 = lshr i32 %0, 23
  %6 = and i32 %5, 255
  %7 = lshr i32 %1, 23
  %8 = and i32 %7, 255
  %9 = sub nsw i32 %6, %8
  %10 = shl i32 %0, 7
  %11 = and i32 %10, 1073741696
  %12 = shl i32 %1, 7
  %13 = and i32 %12, 1073741696
  %14 = icmp sgt i32 %9, 0
  br i1 %14, label %184, label %15

15:                                               ; preds = %4
  %16 = icmp slt i32 %9, 0
  br i1 %16, label %92, label %17

17:                                               ; preds = %15
  %18 = trunc i32 %5 to i8
  switch i8 %18, label %81 [
    i8 -1, label %19
    i8 0, label %80
  ]

19:                                               ; preds = %17
  %20 = or i32 %13, %11
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %76, label %22

22:                                               ; preds = %19
  %23 = shl i32 %0, 1
  %24 = icmp ult i32 %23, -8388608
  %25 = and i32 %0, 2143289344
  %26 = icmp eq i32 %25, 2139095040
  %27 = and i32 %0, 4194303
  %28 = icmp ne i32 %27, 0
  %29 = and i1 %26, %28
  %30 = shl i32 %1, 1
  %31 = icmp ugt i32 %30, -8388609
  %32 = and i32 %1, 2143289344
  %33 = icmp eq i32 %32, 2139095040
  %34 = and i32 %1, 4194303
  %35 = icmp ne i32 %34, 0
  %36 = and i1 %33, %35
  %37 = zext i1 %36 to i8
  %38 = or i1 %29, %36
  br i1 %38, label %39, label %43

39:                                               ; preds = %22
  %40 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %41 = load i8, i8* %40, align 1
  %42 = or i8 %41, 1
  store i8 %42, i8* %40, align 1
  br label %43

43:                                               ; preds = %39, %22
  %44 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 6
  %45 = load i8, i8* %44, align 1
  %46 = icmp eq i8 %45, 0
  br i1 %46, label %47, label %281

47:                                               ; preds = %43
  %48 = icmp ult i32 %23, %30
  br i1 %48, label %54, label %49

49:                                               ; preds = %47
  %50 = icmp ult i32 %30, %23
  br i1 %50, label %54, label %51

51:                                               ; preds = %49
  %52 = icmp ult i32 %0, %1
  %53 = zext i1 %52 to i8
  br label %54

54:                                               ; preds = %51, %49, %47
  %55 = phi i8 [ %53, %51 ], [ 0, %47 ], [ 1, %49 ]
  br i1 %29, label %61, label %56

56:                                               ; preds = %54
  br i1 %24, label %64, label %57

57:                                               ; preds = %56
  %58 = or i8 %55, %37
  %59 = icmp eq i8 %58, 0
  %60 = and i1 %31, %59
  br i1 %60, label %64, label %70

61:                                               ; preds = %54
  %62 = icmp eq i8 %55, 0
  %63 = select i1 %36, i1 %62, i1 %31
  br i1 %63, label %64, label %70

64:                                               ; preds = %61, %57, %56
  %65 = icmp ne i32 %32, 2139095040
  %66 = icmp eq i32 %34, 0
  %67 = or i1 %65, %66
  %68 = or i32 %1, 4194304
  %69 = select i1 %67, i32 %1, i32 %68
  br label %281

70:                                               ; preds = %61, %57
  %71 = icmp ne i32 %25, 2139095040
  %72 = icmp eq i32 %27, 0
  %73 = or i1 %71, %72
  %74 = or i32 %0, 4194304
  %75 = select i1 %73, i32 %0, i32 %74
  br label %281

76:                                               ; preds = %19
  %77 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %78 = load i8, i8* %77, align 1
  %79 = or i8 %78, 1
  store i8 %79, i8* %77, align 1
  br label %281

80:                                               ; preds = %17
  br label %81

81:                                               ; preds = %17, %80
  %82 = phi i32 [ 1, %80 ], [ %6, %17 ]
  %83 = phi i32 [ 1, %80 ], [ %8, %17 ]
  %84 = icmp ult i32 %13, %11
  br i1 %84, label %267, label %85

85:                                               ; preds = %81
  %86 = icmp ult i32 %11, %13
  br i1 %86, label %178, label %87

87:                                               ; preds = %85
  %88 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 1
  %89 = load i8, i8* %88, align 1
  %90 = icmp eq i8 %89, 1
  %91 = select i1 %90, i32 -2147483648, i32 0
  br label %281

92:                                               ; preds = %15
  %93 = icmp eq i32 %8, 255
  br i1 %93, label %94, label %155

94:                                               ; preds = %92
  %95 = icmp eq i32 %13, 0
  br i1 %95, label %150, label %96

96:                                               ; preds = %94
  %97 = shl i32 %0, 1
  %98 = icmp ult i32 %97, -8388608
  %99 = and i32 %0, 2143289344
  %100 = icmp eq i32 %99, 2139095040
  %101 = and i32 %0, 4194303
  %102 = icmp ne i32 %101, 0
  %103 = and i1 %100, %102
  %104 = shl i32 %1, 1
  %105 = icmp ugt i32 %104, -8388609
  %106 = and i32 %1, 2143289344
  %107 = icmp eq i32 %106, 2139095040
  %108 = and i32 %1, 4194303
  %109 = icmp ne i32 %108, 0
  %110 = and i1 %107, %109
  %111 = zext i1 %110 to i8
  %112 = or i1 %103, %110
  br i1 %112, label %113, label %117

113:                                              ; preds = %96
  %114 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %115 = load i8, i8* %114, align 1
  %116 = or i8 %115, 1
  store i8 %116, i8* %114, align 1
  br label %117

117:                                              ; preds = %113, %96
  %118 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 6
  %119 = load i8, i8* %118, align 1
  %120 = icmp eq i8 %119, 0
  br i1 %120, label %121, label %281

121:                                              ; preds = %117
  %122 = icmp ult i32 %97, %104
  br i1 %122, label %128, label %123

123:                                              ; preds = %121
  %124 = icmp ult i32 %104, %97
  br i1 %124, label %128, label %125

125:                                              ; preds = %123
  %126 = icmp ult i32 %0, %1
  %127 = zext i1 %126 to i8
  br label %128

128:                                              ; preds = %125, %123, %121
  %129 = phi i8 [ %127, %125 ], [ 0, %121 ], [ 1, %123 ]
  br i1 %103, label %135, label %130

130:                                              ; preds = %128
  br i1 %98, label %138, label %131

131:                                              ; preds = %130
  %132 = or i8 %129, %111
  %133 = icmp eq i8 %132, 0
  %134 = and i1 %105, %133
  br i1 %134, label %138, label %144

135:                                              ; preds = %128
  %136 = icmp eq i8 %129, 0
  %137 = select i1 %110, i1 %136, i1 %105
  br i1 %137, label %138, label %144

138:                                              ; preds = %135, %131, %130
  %139 = icmp ne i32 %106, 2139095040
  %140 = icmp eq i32 %108, 0
  %141 = or i1 %139, %140
  %142 = or i32 %1, 4194304
  %143 = select i1 %141, i32 %1, i32 %142
  br label %281

144:                                              ; preds = %135, %131
  %145 = icmp ne i32 %99, 2139095040
  %146 = icmp eq i32 %101, 0
  %147 = or i1 %145, %146
  %148 = or i32 %0, 4194304
  %149 = select i1 %147, i32 %0, i32 %148
  br label %281

150:                                              ; preds = %94
  %151 = xor i8 %2, -1
  %152 = zext i8 %151 to i32
  %153 = shl i32 %152, 31
  %154 = or i32 %153, 2139095040
  br label %281

155:                                              ; preds = %92
  %156 = icmp eq i32 %6, 0
  %157 = or i32 %11, 1073741824
  %158 = select i1 %156, i32 %11, i32 %157
  %159 = zext i1 %156 to i32
  %160 = add nsw i32 %9, %159
  %161 = sub nsw i32 0, %160
  %162 = icmp eq i32 %160, 0
  br i1 %162, label %175, label %163

163:                                              ; preds = %155
  %164 = icmp ult i32 %161, 32
  br i1 %164, label %165, label %172

165:                                              ; preds = %163
  %166 = lshr i32 %158, %161
  %167 = and i32 %160, 31
  %168 = shl i32 %158, %167
  %169 = icmp ne i32 %168, 0
  %170 = zext i1 %169 to i32
  %171 = or i32 %166, %170
  br label %175

172:                                              ; preds = %163
  %173 = icmp ne i32 %158, 0
  %174 = zext i1 %173 to i32
  br label %175

175:                                              ; preds = %155, %165, %172
  %176 = phi i32 [ %171, %165 ], [ %174, %172 ], [ %158, %155 ]
  %177 = or i32 %13, 1073741824
  br label %178

178:                                              ; preds = %85, %175
  %179 = phi i32 [ %176, %175 ], [ %11, %85 ]
  %180 = phi i32 [ %177, %175 ], [ %13, %85 ]
  %181 = phi i32 [ %8, %175 ], [ %83, %85 ]
  %182 = sub i32 %180, %179
  %183 = xor i8 %2, 1
  br label %272

184:                                              ; preds = %4
  %185 = icmp eq i32 %6, 255
  br i1 %185, label %186, label %242

186:                                              ; preds = %184
  %187 = icmp eq i32 %11, 0
  br i1 %187, label %281, label %188

188:                                              ; preds = %186
  %189 = shl i32 %0, 1
  %190 = icmp ult i32 %189, -8388608
  %191 = and i32 %0, 2143289344
  %192 = icmp eq i32 %191, 2139095040
  %193 = and i32 %0, 4194303
  %194 = icmp ne i32 %193, 0
  %195 = and i1 %192, %194
  %196 = shl i32 %1, 1
  %197 = icmp ugt i32 %196, -8388609
  %198 = and i32 %1, 2143289344
  %199 = icmp eq i32 %198, 2139095040
  %200 = and i32 %1, 4194303
  %201 = icmp ne i32 %200, 0
  %202 = and i1 %199, %201
  %203 = zext i1 %202 to i8
  %204 = or i1 %195, %202
  br i1 %204, label %205, label %209

205:                                              ; preds = %188
  %206 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %207 = load i8, i8* %206, align 1
  %208 = or i8 %207, 1
  store i8 %208, i8* %206, align 1
  br label %209

209:                                              ; preds = %205, %188
  %210 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 6
  %211 = load i8, i8* %210, align 1
  %212 = icmp eq i8 %211, 0
  br i1 %212, label %213, label %281

213:                                              ; preds = %209
  %214 = icmp ult i32 %189, %196
  br i1 %214, label %220, label %215

215:                                              ; preds = %213
  %216 = icmp ult i32 %196, %189
  br i1 %216, label %220, label %217

217:                                              ; preds = %215
  %218 = icmp ult i32 %0, %1
  %219 = zext i1 %218 to i8
  br label %220

220:                                              ; preds = %217, %215, %213
  %221 = phi i8 [ %219, %217 ], [ 0, %213 ], [ 1, %215 ]
  br i1 %195, label %227, label %222

222:                                              ; preds = %220
  br i1 %190, label %230, label %223

223:                                              ; preds = %222
  %224 = or i8 %221, %203
  %225 = icmp eq i8 %224, 0
  %226 = and i1 %197, %225
  br i1 %226, label %230, label %236

227:                                              ; preds = %220
  %228 = icmp eq i8 %221, 0
  %229 = select i1 %202, i1 %228, i1 %197
  br i1 %229, label %230, label %236

230:                                              ; preds = %227, %223, %222
  %231 = icmp ne i32 %198, 2139095040
  %232 = icmp eq i32 %200, 0
  %233 = or i1 %231, %232
  %234 = or i32 %1, 4194304
  %235 = select i1 %233, i32 %1, i32 %234
  br label %281

236:                                              ; preds = %227, %223
  %237 = icmp ne i32 %191, 2139095040
  %238 = icmp eq i32 %193, 0
  %239 = or i1 %237, %238
  %240 = or i32 %0, 4194304
  %241 = select i1 %239, i32 %0, i32 %240
  br label %281

242:                                              ; preds = %184
  %243 = icmp eq i32 %8, 0
  br i1 %243, label %246, label %244

244:                                              ; preds = %242
  %245 = or i32 %13, 1073741824
  br label %249

246:                                              ; preds = %242
  %247 = add nsw i32 %9, -1
  %248 = icmp eq i32 %247, 0
  br i1 %248, label %264, label %249

249:                                              ; preds = %244, %246
  %250 = phi i32 [ %9, %244 ], [ %247, %246 ]
  %251 = phi i32 [ %245, %244 ], [ %13, %246 ]
  %252 = icmp ult i32 %250, 32
  br i1 %252, label %253, label %261

253:                                              ; preds = %249
  %254 = lshr i32 %251, %250
  %255 = sub nsw i32 0, %250
  %256 = and i32 %255, 31
  %257 = shl i32 %251, %256
  %258 = icmp ne i32 %257, 0
  %259 = zext i1 %258 to i32
  %260 = or i32 %254, %259
  br label %264

261:                                              ; preds = %249
  %262 = icmp ne i32 %251, 0
  %263 = zext i1 %262 to i32
  br label %264

264:                                              ; preds = %246, %253, %261
  %265 = phi i32 [ %260, %253 ], [ %263, %261 ], [ %13, %246 ]
  %266 = or i32 %11, 1073741824
  br label %267

267:                                              ; preds = %81, %264
  %268 = phi i32 [ %266, %264 ], [ %11, %81 ]
  %269 = phi i32 [ %265, %264 ], [ %13, %81 ]
  %270 = phi i32 [ %6, %264 ], [ %82, %81 ]
  %271 = sub i32 %268, %269
  br label %272

272:                                              ; preds = %267, %178
  %273 = phi i8 [ %2, %267 ], [ %183, %178 ]
  %274 = phi i32 [ %270, %267 ], [ %181, %178 ]
  %275 = phi i32 [ %271, %267 ], [ %182, %178 ]
  %ctlz.sh = lshr i32 %275, 1
  %ctlz.step = or i32 %275, %ctlz.sh
  %ctlz.sh1 = lshr i32 %ctlz.step, 2
  %ctlz.step2 = or i32 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i32 %ctlz.step2, 4
  %ctlz.step4 = or i32 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i32 %ctlz.step4, 8
  %ctlz.step6 = or i32 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i32 %ctlz.step6, 16
  %ctlz.step8 = or i32 %ctlz.step6, %ctlz.sh7
  %276 = xor i32 %ctlz.step8, -1
  %cppop.and1 = and i32 %276, 1431655765
  %ctpop.sh = lshr i32 %276, 1
  %cppop.and2 = and i32 %ctpop.sh, 1431655765
  %ctpop.step = add i32 %cppop.and1, %cppop.and2
  %cppop.and19 = and i32 %ctpop.step, 858993459
  %ctpop.sh10 = lshr i32 %ctpop.step, 2
  %cppop.and211 = and i32 %ctpop.sh10, 858993459
  %ctpop.step12 = add i32 %cppop.and19, %cppop.and211
  %cppop.and113 = and i32 %ctpop.step12, 252645135
  %ctpop.sh14 = lshr i32 %ctpop.step12, 4
  %cppop.and215 = and i32 %ctpop.sh14, 252645135
  %ctpop.step16 = add i32 %cppop.and113, %cppop.and215
  %cppop.and117 = and i32 %ctpop.step16, 16711935
  %ctpop.sh18 = lshr i32 %ctpop.step16, 8
  %cppop.and219 = and i32 %ctpop.sh18, 16711935
  %ctpop.step20 = add i32 %cppop.and117, %cppop.and219
  %cppop.and121 = and i32 %ctpop.step20, 65535
  %ctpop.sh22 = lshr i32 %ctpop.step20, 16
  %cppop.and223 = and i32 %ctpop.sh22, 65535
  %ctpop.step24 = add i32 %cppop.and121, %cppop.and223
  %ctpop.part = add i32 %ctpop.step24, 0
  %277 = add nsw i32 %ctpop.part, -1
  %278 = sub nsw i32 %274, %ctpop.part
  %279 = shl i32 %275, %277
  %280 = tail call fastcc i32 @roundAndPackFloat32(i8 noundef zeroext %273, i32 noundef %278, i32 noundef %279, %struct.float_status* noundef %3) #30
  br label %281

281:                                              ; preds = %236, %230, %209, %144, %138, %117, %70, %64, %43, %186, %272, %150, %87, %76
  %282 = phi i32 [ %280, %272 ], [ %154, %150 ], [ -4194304, %76 ], [ %91, %87 ], [ %0, %186 ], [ %69, %64 ], [ %75, %70 ], [ -4194304, %43 ], [ %143, %138 ], [ %149, %144 ], [ -4194304, %117 ], [ %235, %230 ], [ %241, %236 ], [ -4194304, %209 ]
  ret i32 %282
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define i32 @float32_sub(i32 noundef %0, i32 noundef %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #14 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i32 %0, 2139095040
  %9 = icmp ne i32 %8, 0
  %10 = and i32 %0, 8388607
  %11 = icmp eq i32 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i32 %0, -2147483648
  br label %18

18:                                               ; preds = %7, %13
  %19 = phi i32 [ %0, %7 ], [ %17, %13 ]
  %20 = and i32 %1, 2139095040
  %21 = icmp ne i32 %20, 0
  %22 = and i32 %1, 8388607
  %23 = icmp eq i32 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i32 %1, -2147483648
  br label %30

30:                                               ; preds = %3, %18, %25
  %31 = phi i32 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i32 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = lshr i32 %31, 31
  %34 = trunc i32 %33 to i8
  %35 = lshr i32 %32, 31
  %36 = trunc i32 %35 to i8
  %37 = icmp eq i8 %34, %36
  br i1 %37, label %38, label %40

38:                                               ; preds = %30
  %39 = tail call fastcc i32 @subFloat32Sigs(i32 noundef %31, i32 noundef %32, i8 noundef zeroext %34, %struct.float_status* noundef nonnull %2)
  br label %42

40:                                               ; preds = %30
  %41 = tail call fastcc i32 @addFloat32Sigs(i32 noundef %31, i32 noundef %32, i8 noundef zeroext %34, %struct.float_status* noundef nonnull %2)
  br label %42

42:                                               ; preds = %40, %38
  %43 = phi i32 [ %39, %38 ], [ %41, %40 ]
  ret i32 %43
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define i32 @float32_mul(i32 noundef %0, i32 noundef %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #14 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i32 %0, 2139095040
  %9 = icmp ne i32 %8, 0
  %10 = and i32 %0, 8388607
  %11 = icmp eq i32 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i32 %0, -2147483648
  br label %18

18:                                               ; preds = %7, %13
  %19 = phi i32 [ %0, %7 ], [ %17, %13 ]
  %20 = and i32 %1, 2139095040
  %21 = icmp ne i32 %20, 0
  %22 = and i32 %1, 8388607
  %23 = icmp eq i32 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i32 %1, -2147483648
  br label %30

30:                                               ; preds = %3, %18, %25
  %31 = phi i32 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i32 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = and i32 %31, 8388607
  %34 = lshr i32 %31, 23
  %35 = and i32 %34, 255
  %36 = and i32 %32, 8388607
  %37 = lshr i32 %32, 23
  %38 = and i32 %37, 255
  %39 = xor i32 %32, %31
  %40 = lshr i32 %39, 31
  %41 = trunc i32 %40 to i8
  %42 = icmp eq i32 %35, 255
  br i1 %42, label %43, label %113

43:                                               ; preds = %30
  %44 = icmp eq i32 %33, 0
  br i1 %44, label %45, label %49

45:                                               ; preds = %43
  %46 = icmp eq i32 %38, 255
  %47 = icmp ne i32 %36, 0
  %48 = and i1 %47, %46
  br i1 %48, label %49, label %103

49:                                               ; preds = %45, %43
  %50 = shl i32 %31, 1
  %51 = icmp ult i32 %50, -8388608
  %52 = and i32 %31, 2143289344
  %53 = icmp eq i32 %52, 2139095040
  %54 = and i32 %31, 4194303
  %55 = icmp ne i32 %54, 0
  %56 = and i1 %53, %55
  %57 = shl i32 %32, 1
  %58 = icmp ugt i32 %57, -8388609
  %59 = and i32 %32, 2143289344
  %60 = icmp eq i32 %59, 2139095040
  %61 = and i32 %32, 4194303
  %62 = icmp ne i32 %61, 0
  %63 = and i1 %60, %62
  %64 = zext i1 %63 to i8
  %65 = or i1 %56, %63
  br i1 %65, label %66, label %70

66:                                               ; preds = %49
  %67 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %68 = load i8, i8* %67, align 1
  %69 = or i8 %68, 1
  store i8 %69, i8* %67, align 1
  br label %70

70:                                               ; preds = %66, %49
  %71 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %72 = load i8, i8* %71, align 1
  %73 = icmp eq i8 %72, 0
  br i1 %73, label %74, label %228

74:                                               ; preds = %70
  %75 = icmp ult i32 %50, %57
  br i1 %75, label %81, label %76

76:                                               ; preds = %74
  %77 = icmp ult i32 %57, %50
  br i1 %77, label %81, label %78

78:                                               ; preds = %76
  %79 = icmp ult i32 %31, %32
  %80 = zext i1 %79 to i8
  br label %81

81:                                               ; preds = %78, %76, %74
  %82 = phi i8 [ %80, %78 ], [ 0, %74 ], [ 1, %76 ]
  br i1 %56, label %88, label %83

83:                                               ; preds = %81
  br i1 %51, label %91, label %84

84:                                               ; preds = %83
  %85 = or i8 %82, %64
  %86 = icmp eq i8 %85, 0
  %87 = and i1 %58, %86
  br i1 %87, label %91, label %97

88:                                               ; preds = %81
  %89 = icmp eq i8 %82, 0
  %90 = select i1 %63, i1 %89, i1 %58
  br i1 %90, label %91, label %97

91:                                               ; preds = %88, %84, %83
  %92 = icmp ne i32 %59, 2139095040
  %93 = icmp eq i32 %61, 0
  %94 = or i1 %92, %93
  %95 = or i32 %32, 4194304
  %96 = select i1 %94, i32 %32, i32 %95
  br label %228

97:                                               ; preds = %88, %84
  %98 = icmp ne i32 %52, 2139095040
  %99 = icmp eq i32 %54, 0
  %100 = or i1 %98, %99
  %101 = or i32 %31, 4194304
  %102 = select i1 %100, i32 %31, i32 %101
  br label %228

103:                                              ; preds = %45
  %104 = or i32 %38, %36
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %106, label %110

106:                                              ; preds = %103
  %107 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %108 = load i8, i8* %107, align 1
  %109 = or i8 %108, 1
  store i8 %109, i8* %107, align 1
  br label %228

110:                                              ; preds = %103
  %111 = and i32 %39, -2147483648
  %112 = or i32 %111, 2139095040
  br label %228

113:                                              ; preds = %30
  %114 = icmp eq i32 %38, 255
  br i1 %114, label %115, label %181

115:                                              ; preds = %113
  %116 = icmp eq i32 %36, 0
  br i1 %116, label %171, label %117

117:                                              ; preds = %115
  %118 = shl i32 %31, 1
  %119 = icmp ult i32 %118, -8388608
  %120 = and i32 %31, 2143289344
  %121 = icmp eq i32 %120, 2139095040
  %122 = and i32 %31, 4194303
  %123 = icmp ne i32 %122, 0
  %124 = and i1 %121, %123
  %125 = shl i32 %32, 1
  %126 = icmp ugt i32 %125, -8388609
  %127 = and i32 %32, 2143289344
  %128 = icmp eq i32 %127, 2139095040
  %129 = and i32 %32, 4194303
  %130 = icmp ne i32 %129, 0
  %131 = and i1 %128, %130
  %132 = zext i1 %131 to i8
  %133 = or i1 %124, %131
  br i1 %133, label %134, label %138

134:                                              ; preds = %117
  %135 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %136 = load i8, i8* %135, align 1
  %137 = or i8 %136, 1
  store i8 %137, i8* %135, align 1
  br label %138

138:                                              ; preds = %134, %117
  %139 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %140 = load i8, i8* %139, align 1
  %141 = icmp eq i8 %140, 0
  br i1 %141, label %142, label %228

142:                                              ; preds = %138
  %143 = icmp ult i32 %118, %125
  br i1 %143, label %149, label %144

144:                                              ; preds = %142
  %145 = icmp ult i32 %125, %118
  br i1 %145, label %149, label %146

146:                                              ; preds = %144
  %147 = icmp ult i32 %31, %32
  %148 = zext i1 %147 to i8
  br label %149

149:                                              ; preds = %146, %144, %142
  %150 = phi i8 [ %148, %146 ], [ 0, %142 ], [ 1, %144 ]
  br i1 %124, label %156, label %151

151:                                              ; preds = %149
  br i1 %119, label %159, label %152

152:                                              ; preds = %151
  %153 = or i8 %150, %132
  %154 = icmp eq i8 %153, 0
  %155 = and i1 %126, %154
  br i1 %155, label %159, label %165

156:                                              ; preds = %149
  %157 = icmp eq i8 %150, 0
  %158 = select i1 %131, i1 %157, i1 %126
  br i1 %158, label %159, label %165

159:                                              ; preds = %156, %152, %151
  %160 = icmp ne i32 %127, 2139095040
  %161 = icmp eq i32 %129, 0
  %162 = or i1 %160, %161
  %163 = or i32 %32, 4194304
  %164 = select i1 %162, i32 %32, i32 %163
  br label %228

165:                                              ; preds = %156, %152
  %166 = icmp ne i32 %120, 2139095040
  %167 = icmp eq i32 %122, 0
  %168 = or i1 %166, %167
  %169 = or i32 %31, 4194304
  %170 = select i1 %168, i32 %31, i32 %169
  br label %228

171:                                              ; preds = %115
  %172 = or i32 %35, %33
  %173 = icmp eq i32 %172, 0
  br i1 %173, label %174, label %178

174:                                              ; preds = %171
  %175 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %176 = load i8, i8* %175, align 1
  %177 = or i8 %176, 1
  store i8 %177, i8* %175, align 1
  br label %228

178:                                              ; preds = %171
  %179 = and i32 %39, -2147483648
  %180 = or i32 %179, 2139095040
  br label %228

181:                                              ; preds = %113
  %182 = icmp eq i32 %35, 0
  br i1 %182, label %183, label %192

183:                                              ; preds = %181
  %184 = icmp eq i32 %33, 0
  br i1 %184, label %185, label %187

185:                                              ; preds = %183
  %186 = and i32 %39, -2147483648
  br label %228

187:                                              ; preds = %183
  %ctlz.sh = lshr i32 %33, 1
  %ctlz.step = or i32 %33, %ctlz.sh
  %ctlz.sh1 = lshr i32 %ctlz.step, 2
  %ctlz.step2 = or i32 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i32 %ctlz.step2, 4
  %ctlz.step4 = or i32 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i32 %ctlz.step4, 8
  %ctlz.step6 = or i32 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i32 %ctlz.step6, 16
  %ctlz.step8 = or i32 %ctlz.step6, %ctlz.sh7
  %188 = xor i32 %ctlz.step8, -1
  %cppop.and1 = and i32 %188, 1431655765
  %ctpop.sh = lshr i32 %188, 1
  %cppop.and2 = and i32 %ctpop.sh, 1431655765
  %ctpop.step = add i32 %cppop.and1, %cppop.and2
  %cppop.and19 = and i32 %ctpop.step, 858993459
  %ctpop.sh10 = lshr i32 %ctpop.step, 2
  %cppop.and211 = and i32 %ctpop.sh10, 858993459
  %ctpop.step12 = add i32 %cppop.and19, %cppop.and211
  %cppop.and113 = and i32 %ctpop.step12, 252645135
  %ctpop.sh14 = lshr i32 %ctpop.step12, 4
  %cppop.and215 = and i32 %ctpop.sh14, 252645135
  %ctpop.step16 = add i32 %cppop.and113, %cppop.and215
  %cppop.and117 = and i32 %ctpop.step16, 16711935
  %ctpop.sh18 = lshr i32 %ctpop.step16, 8
  %cppop.and219 = and i32 %ctpop.sh18, 16711935
  %ctpop.step20 = add i32 %cppop.and117, %cppop.and219
  %cppop.and121 = and i32 %ctpop.step20, 65535
  %ctpop.sh22 = lshr i32 %ctpop.step20, 16
  %cppop.and223 = and i32 %ctpop.sh22, 65535
  %ctpop.step24 = add i32 %cppop.and121, %cppop.and223
  %ctpop.part = add i32 %ctpop.step24, 0
  %189 = add nsw i32 %ctpop.part, -8
  %190 = shl i32 %33, %189
  %191 = sub nsw i32 9, %ctpop.part
  br label %192

192:                                              ; preds = %187, %181
  %193 = phi i32 [ %190, %187 ], [ %33, %181 ]
  %194 = phi i32 [ %191, %187 ], [ %35, %181 ]
  %195 = icmp eq i32 %38, 0
  br i1 %195, label %196, label %205

196:                                              ; preds = %192
  %197 = icmp eq i32 %36, 0
  br i1 %197, label %198, label %200

198:                                              ; preds = %196
  %199 = and i32 %39, -2147483648
  br label %228

200:                                              ; preds = %196
  %ctlz.sh25 = lshr i32 %36, 1
  %ctlz.step26 = or i32 %36, %ctlz.sh25
  %ctlz.sh27 = lshr i32 %ctlz.step26, 2
  %ctlz.step28 = or i32 %ctlz.step26, %ctlz.sh27
  %ctlz.sh29 = lshr i32 %ctlz.step28, 4
  %ctlz.step30 = or i32 %ctlz.step28, %ctlz.sh29
  %ctlz.sh31 = lshr i32 %ctlz.step30, 8
  %ctlz.step32 = or i32 %ctlz.step30, %ctlz.sh31
  %ctlz.sh33 = lshr i32 %ctlz.step32, 16
  %ctlz.step34 = or i32 %ctlz.step32, %ctlz.sh33
  %201 = xor i32 %ctlz.step34, -1
  %cppop.and135 = and i32 %201, 1431655765
  %ctpop.sh36 = lshr i32 %201, 1
  %cppop.and237 = and i32 %ctpop.sh36, 1431655765
  %ctpop.step38 = add i32 %cppop.and135, %cppop.and237
  %cppop.and139 = and i32 %ctpop.step38, 858993459
  %ctpop.sh40 = lshr i32 %ctpop.step38, 2
  %cppop.and241 = and i32 %ctpop.sh40, 858993459
  %ctpop.step42 = add i32 %cppop.and139, %cppop.and241
  %cppop.and143 = and i32 %ctpop.step42, 252645135
  %ctpop.sh44 = lshr i32 %ctpop.step42, 4
  %cppop.and245 = and i32 %ctpop.sh44, 252645135
  %ctpop.step46 = add i32 %cppop.and143, %cppop.and245
  %cppop.and147 = and i32 %ctpop.step46, 16711935
  %ctpop.sh48 = lshr i32 %ctpop.step46, 8
  %cppop.and249 = and i32 %ctpop.sh48, 16711935
  %ctpop.step50 = add i32 %cppop.and147, %cppop.and249
  %cppop.and151 = and i32 %ctpop.step50, 65535
  %ctpop.sh52 = lshr i32 %ctpop.step50, 16
  %cppop.and253 = and i32 %ctpop.sh52, 65535
  %ctpop.step54 = add i32 %cppop.and151, %cppop.and253
  %ctpop.part55 = add i32 %ctpop.step54, 0
  %202 = add nsw i32 %ctpop.part55, -8
  %203 = shl i32 %36, %202
  %204 = sub nsw i32 9, %ctpop.part55
  br label %205

205:                                              ; preds = %200, %192
  %206 = phi i32 [ %204, %200 ], [ %38, %192 ]
  %207 = phi i32 [ %203, %200 ], [ %36, %192 ]
  %208 = add nsw i32 %206, %194
  %209 = shl i32 %193, 7
  %210 = or i32 %209, 1073741824
  %211 = shl i32 %207, 8
  %212 = or i32 %211, -2147483648
  %213 = zext i32 %210 to i64
  %214 = zext i32 %212 to i64
  %215 = mul nuw i64 %214, %213
  %216 = lshr i64 %215, 32
  %217 = and i64 %215, 4294934528
  %218 = icmp ne i64 %217, 0
  %219 = zext i1 %218 to i64
  %220 = or i64 %216, %219
  %221 = trunc i64 %220 to i32
  %222 = shl i32 %221, 1
  %223 = icmp sgt i32 %222, -1
  %224 = select i1 %223, i32 -128, i32 -127
  %225 = add nsw i32 %208, %224
  %226 = select i1 %223, i32 %222, i32 %221
  %227 = tail call fastcc i32 @roundAndPackFloat32(i8 noundef zeroext %41, i32 noundef %225, i32 noundef %226, %struct.float_status* noundef nonnull %2)
  br label %228

228:                                              ; preds = %165, %159, %138, %97, %91, %70, %205, %198, %185, %178, %174, %110, %106
  %229 = phi i32 [ -4194304, %106 ], [ %112, %110 ], [ -4194304, %174 ], [ %180, %178 ], [ %186, %185 ], [ %199, %198 ], [ %227, %205 ], [ %96, %91 ], [ %102, %97 ], [ -4194304, %70 ], [ %164, %159 ], [ %170, %165 ], [ -4194304, %138 ]
  ret i32 %229
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define i32 @float32_div(i32 noundef %0, i32 noundef %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #14 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i32 %0, 2139095040
  %9 = icmp ne i32 %8, 0
  %10 = and i32 %0, 8388607
  %11 = icmp eq i32 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i32 %0, -2147483648
  br label %18

18:                                               ; preds = %7, %13
  %19 = phi i32 [ %0, %7 ], [ %17, %13 ]
  %20 = and i32 %1, 2139095040
  %21 = icmp ne i32 %20, 0
  %22 = and i32 %1, 8388607
  %23 = icmp eq i32 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i32 %1, -2147483648
  br label %30

30:                                               ; preds = %3, %18, %25
  %31 = phi i32 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i32 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = and i32 %31, 8388607
  %34 = lshr i32 %31, 23
  %35 = and i32 %34, 255
  %36 = and i32 %32, 8388607
  %37 = lshr i32 %32, 23
  %38 = and i32 %37, 255
  %39 = xor i32 %32, %31
  %40 = lshr i32 %39, 31
  %41 = trunc i32 %40 to i8
  %42 = icmp eq i32 %35, 255
  br i1 %42, label %43, label %164

43:                                               ; preds = %30
  %44 = icmp eq i32 %33, 0
  br i1 %44, label %99, label %45

45:                                               ; preds = %43
  %46 = shl i32 %31, 1
  %47 = icmp ult i32 %46, -8388608
  %48 = and i32 %31, 2143289344
  %49 = icmp eq i32 %48, 2139095040
  %50 = and i32 %31, 4194303
  %51 = icmp ne i32 %50, 0
  %52 = and i1 %49, %51
  %53 = shl i32 %32, 1
  %54 = icmp ugt i32 %53, -8388609
  %55 = and i32 %32, 2143289344
  %56 = icmp eq i32 %55, 2139095040
  %57 = and i32 %32, 4194303
  %58 = icmp ne i32 %57, 0
  %59 = and i1 %56, %58
  %60 = zext i1 %59 to i8
  %61 = or i1 %52, %59
  br i1 %61, label %62, label %66

62:                                               ; preds = %45
  %63 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %64 = load i8, i8* %63, align 1
  %65 = or i8 %64, 1
  store i8 %65, i8* %63, align 1
  br label %66

66:                                               ; preds = %62, %45
  %67 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %68 = load i8, i8* %67, align 1
  %69 = icmp eq i8 %68, 0
  br i1 %69, label %70, label %286

70:                                               ; preds = %66
  %71 = icmp ult i32 %46, %53
  br i1 %71, label %77, label %72

72:                                               ; preds = %70
  %73 = icmp ult i32 %53, %46
  br i1 %73, label %77, label %74

74:                                               ; preds = %72
  %75 = icmp ult i32 %31, %32
  %76 = zext i1 %75 to i8
  br label %77

77:                                               ; preds = %74, %72, %70
  %78 = phi i8 [ %76, %74 ], [ 0, %70 ], [ 1, %72 ]
  br i1 %52, label %84, label %79

79:                                               ; preds = %77
  br i1 %47, label %87, label %80

80:                                               ; preds = %79
  %81 = or i8 %78, %60
  %82 = icmp eq i8 %81, 0
  %83 = and i1 %54, %82
  br i1 %83, label %87, label %93

84:                                               ; preds = %77
  %85 = icmp eq i8 %78, 0
  %86 = select i1 %59, i1 %85, i1 %54
  br i1 %86, label %87, label %93

87:                                               ; preds = %84, %80, %79
  %88 = icmp ne i32 %55, 2139095040
  %89 = icmp eq i32 %57, 0
  %90 = or i1 %88, %89
  %91 = or i32 %32, 4194304
  %92 = select i1 %90, i32 %32, i32 %91
  br label %286

93:                                               ; preds = %84, %80
  %94 = icmp ne i32 %48, 2139095040
  %95 = icmp eq i32 %50, 0
  %96 = or i1 %94, %95
  %97 = or i32 %31, 4194304
  %98 = select i1 %96, i32 %31, i32 %97
  br label %286

99:                                               ; preds = %43
  %100 = icmp eq i32 %38, 255
  br i1 %100, label %101, label %161

101:                                              ; preds = %99
  %102 = icmp eq i32 %36, 0
  br i1 %102, label %157, label %103

103:                                              ; preds = %101
  %104 = shl i32 %31, 1
  %105 = icmp ult i32 %104, -8388608
  %106 = and i32 %31, 2143289344
  %107 = icmp eq i32 %106, 2139095040
  %108 = and i32 %31, 4194303
  %109 = icmp ne i32 %108, 0
  %110 = and i1 %107, %109
  %111 = shl i32 %32, 1
  %112 = icmp ugt i32 %111, -8388609
  %113 = and i32 %32, 2143289344
  %114 = icmp eq i32 %113, 2139095040
  %115 = and i32 %32, 4194303
  %116 = icmp ne i32 %115, 0
  %117 = and i1 %114, %116
  %118 = zext i1 %117 to i8
  %119 = or i1 %110, %117
  br i1 %119, label %120, label %124

120:                                              ; preds = %103
  %121 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %122 = load i8, i8* %121, align 1
  %123 = or i8 %122, 1
  store i8 %123, i8* %121, align 1
  br label %124

124:                                              ; preds = %120, %103
  %125 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %126 = load i8, i8* %125, align 1
  %127 = icmp eq i8 %126, 0
  br i1 %127, label %128, label %286

128:                                              ; preds = %124
  %129 = icmp ult i32 %104, %111
  br i1 %129, label %135, label %130

130:                                              ; preds = %128
  %131 = icmp ult i32 %111, %104
  br i1 %131, label %135, label %132

132:                                              ; preds = %130
  %133 = icmp ult i32 %31, %32
  %134 = zext i1 %133 to i8
  br label %135

135:                                              ; preds = %132, %130, %128
  %136 = phi i8 [ %134, %132 ], [ 0, %128 ], [ 1, %130 ]
  br i1 %110, label %142, label %137

137:                                              ; preds = %135
  br i1 %105, label %145, label %138

138:                                              ; preds = %137
  %139 = or i8 %136, %118
  %140 = icmp eq i8 %139, 0
  %141 = and i1 %112, %140
  br i1 %141, label %145, label %151

142:                                              ; preds = %135
  %143 = icmp eq i8 %136, 0
  %144 = select i1 %117, i1 %143, i1 %112
  br i1 %144, label %145, label %151

145:                                              ; preds = %142, %138, %137
  %146 = icmp ne i32 %113, 2139095040
  %147 = icmp eq i32 %115, 0
  %148 = or i1 %146, %147
  %149 = or i32 %32, 4194304
  %150 = select i1 %148, i32 %32, i32 %149
  br label %286

151:                                              ; preds = %142, %138
  %152 = icmp ne i32 %106, 2139095040
  %153 = icmp eq i32 %108, 0
  %154 = or i1 %152, %153
  %155 = or i32 %31, 4194304
  %156 = select i1 %154, i32 %31, i32 %155
  br label %286

157:                                              ; preds = %101
  %158 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %159 = load i8, i8* %158, align 1
  %160 = or i8 %159, 1
  store i8 %160, i8* %158, align 1
  br label %286

161:                                              ; preds = %99
  %162 = and i32 %39, -2147483648
  %163 = or i32 %162, 2139095040
  br label %286

164:                                              ; preds = %30
  %165 = trunc i32 %37 to i8
  switch i8 %165, label %242 [
    i8 -1, label %166
    i8 0, label %224
  ]

166:                                              ; preds = %164
  %167 = icmp eq i32 %36, 0
  br i1 %167, label %222, label %168

168:                                              ; preds = %166
  %169 = shl i32 %31, 1
  %170 = icmp ult i32 %169, -8388608
  %171 = and i32 %31, 2143289344
  %172 = icmp eq i32 %171, 2139095040
  %173 = and i32 %31, 4194303
  %174 = icmp ne i32 %173, 0
  %175 = and i1 %172, %174
  %176 = shl i32 %32, 1
  %177 = icmp ugt i32 %176, -8388609
  %178 = and i32 %32, 2143289344
  %179 = icmp eq i32 %178, 2139095040
  %180 = and i32 %32, 4194303
  %181 = icmp ne i32 %180, 0
  %182 = and i1 %179, %181
  %183 = zext i1 %182 to i8
  %184 = or i1 %175, %182
  br i1 %184, label %185, label %189

185:                                              ; preds = %168
  %186 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %187 = load i8, i8* %186, align 1
  %188 = or i8 %187, 1
  store i8 %188, i8* %186, align 1
  br label %189

189:                                              ; preds = %185, %168
  %190 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %191 = load i8, i8* %190, align 1
  %192 = icmp eq i8 %191, 0
  br i1 %192, label %193, label %286

193:                                              ; preds = %189
  %194 = icmp ult i32 %169, %176
  br i1 %194, label %200, label %195

195:                                              ; preds = %193
  %196 = icmp ult i32 %176, %169
  br i1 %196, label %200, label %197

197:                                              ; preds = %195
  %198 = icmp ult i32 %31, %32
  %199 = zext i1 %198 to i8
  br label %200

200:                                              ; preds = %197, %195, %193
  %201 = phi i8 [ %199, %197 ], [ 0, %193 ], [ 1, %195 ]
  br i1 %175, label %207, label %202

202:                                              ; preds = %200
  br i1 %170, label %210, label %203

203:                                              ; preds = %202
  %204 = or i8 %201, %183
  %205 = icmp eq i8 %204, 0
  %206 = and i1 %177, %205
  br i1 %206, label %210, label %216

207:                                              ; preds = %200
  %208 = icmp eq i8 %201, 0
  %209 = select i1 %182, i1 %208, i1 %177
  br i1 %209, label %210, label %216

210:                                              ; preds = %207, %203, %202
  %211 = icmp ne i32 %178, 2139095040
  %212 = icmp eq i32 %180, 0
  %213 = or i1 %211, %212
  %214 = or i32 %32, 4194304
  %215 = select i1 %213, i32 %32, i32 %214
  br label %286

216:                                              ; preds = %207, %203
  %217 = icmp ne i32 %171, 2139095040
  %218 = icmp eq i32 %173, 0
  %219 = or i1 %217, %218
  %220 = or i32 %31, 4194304
  %221 = select i1 %219, i32 %31, i32 %220
  br label %286

222:                                              ; preds = %166
  %223 = and i32 %39, -2147483648
  br label %286

224:                                              ; preds = %164
  %225 = icmp eq i32 %36, 0
  br i1 %225, label %226, label %237

226:                                              ; preds = %224
  %227 = or i32 %35, %33
  %228 = icmp eq i32 %227, 0
  %229 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %230 = load i8, i8* %229, align 1
  br i1 %228, label %231, label %233

231:                                              ; preds = %226
  %232 = or i8 %230, 1
  store i8 %232, i8* %229, align 1
  br label %286

233:                                              ; preds = %226
  %234 = or i8 %230, 4
  store i8 %234, i8* %229, align 1
  %235 = and i32 %39, -2147483648
  %236 = or i32 %235, 2139095040
  br label %286

237:                                              ; preds = %224
  %ctlz.sh = lshr i32 %36, 1
  %ctlz.step = or i32 %36, %ctlz.sh
  %ctlz.sh1 = lshr i32 %ctlz.step, 2
  %ctlz.step2 = or i32 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i32 %ctlz.step2, 4
  %ctlz.step4 = or i32 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i32 %ctlz.step4, 8
  %ctlz.step6 = or i32 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i32 %ctlz.step6, 16
  %ctlz.step8 = or i32 %ctlz.step6, %ctlz.sh7
  %238 = xor i32 %ctlz.step8, -1
  %cppop.and1 = and i32 %238, 1431655765
  %ctpop.sh = lshr i32 %238, 1
  %cppop.and2 = and i32 %ctpop.sh, 1431655765
  %ctpop.step = add i32 %cppop.and1, %cppop.and2
  %cppop.and19 = and i32 %ctpop.step, 858993459
  %ctpop.sh10 = lshr i32 %ctpop.step, 2
  %cppop.and211 = and i32 %ctpop.sh10, 858993459
  %ctpop.step12 = add i32 %cppop.and19, %cppop.and211
  %cppop.and113 = and i32 %ctpop.step12, 252645135
  %ctpop.sh14 = lshr i32 %ctpop.step12, 4
  %cppop.and215 = and i32 %ctpop.sh14, 252645135
  %ctpop.step16 = add i32 %cppop.and113, %cppop.and215
  %cppop.and117 = and i32 %ctpop.step16, 16711935
  %ctpop.sh18 = lshr i32 %ctpop.step16, 8
  %cppop.and219 = and i32 %ctpop.sh18, 16711935
  %ctpop.step20 = add i32 %cppop.and117, %cppop.and219
  %cppop.and121 = and i32 %ctpop.step20, 65535
  %ctpop.sh22 = lshr i32 %ctpop.step20, 16
  %cppop.and223 = and i32 %ctpop.sh22, 65535
  %ctpop.step24 = add i32 %cppop.and121, %cppop.and223
  %ctpop.part = add i32 %ctpop.step24, 0
  %239 = add nsw i32 %ctpop.part, -8
  %240 = shl i32 %36, %239
  %241 = sub nsw i32 9, %ctpop.part
  br label %242

242:                                              ; preds = %164, %237
  %243 = phi i32 [ %38, %164 ], [ %241, %237 ]
  %244 = phi i32 [ %36, %164 ], [ %240, %237 ]
  %245 = icmp eq i32 %35, 0
  br i1 %245, label %246, label %255

246:                                              ; preds = %242
  %247 = icmp eq i32 %33, 0
  br i1 %247, label %248, label %250

248:                                              ; preds = %246
  %249 = and i32 %39, -2147483648
  br label %286

250:                                              ; preds = %246
  %ctlz.sh25 = lshr i32 %33, 1
  %ctlz.step26 = or i32 %33, %ctlz.sh25
  %ctlz.sh27 = lshr i32 %ctlz.step26, 2
  %ctlz.step28 = or i32 %ctlz.step26, %ctlz.sh27
  %ctlz.sh29 = lshr i32 %ctlz.step28, 4
  %ctlz.step30 = or i32 %ctlz.step28, %ctlz.sh29
  %ctlz.sh31 = lshr i32 %ctlz.step30, 8
  %ctlz.step32 = or i32 %ctlz.step30, %ctlz.sh31
  %ctlz.sh33 = lshr i32 %ctlz.step32, 16
  %ctlz.step34 = or i32 %ctlz.step32, %ctlz.sh33
  %251 = xor i32 %ctlz.step34, -1
  %cppop.and135 = and i32 %251, 1431655765
  %ctpop.sh36 = lshr i32 %251, 1
  %cppop.and237 = and i32 %ctpop.sh36, 1431655765
  %ctpop.step38 = add i32 %cppop.and135, %cppop.and237
  %cppop.and139 = and i32 %ctpop.step38, 858993459
  %ctpop.sh40 = lshr i32 %ctpop.step38, 2
  %cppop.and241 = and i32 %ctpop.sh40, 858993459
  %ctpop.step42 = add i32 %cppop.and139, %cppop.and241
  %cppop.and143 = and i32 %ctpop.step42, 252645135
  %ctpop.sh44 = lshr i32 %ctpop.step42, 4
  %cppop.and245 = and i32 %ctpop.sh44, 252645135
  %ctpop.step46 = add i32 %cppop.and143, %cppop.and245
  %cppop.and147 = and i32 %ctpop.step46, 16711935
  %ctpop.sh48 = lshr i32 %ctpop.step46, 8
  %cppop.and249 = and i32 %ctpop.sh48, 16711935
  %ctpop.step50 = add i32 %cppop.and147, %cppop.and249
  %cppop.and151 = and i32 %ctpop.step50, 65535
  %ctpop.sh52 = lshr i32 %ctpop.step50, 16
  %cppop.and253 = and i32 %ctpop.sh52, 65535
  %ctpop.step54 = add i32 %cppop.and151, %cppop.and253
  %ctpop.part55 = add i32 %ctpop.step54, 0
  %252 = add nsw i32 %ctpop.part55, -8
  %253 = shl i32 %33, %252
  %254 = sub nsw i32 9, %ctpop.part55
  br label %255

255:                                              ; preds = %250, %242
  %256 = phi i32 [ %254, %250 ], [ %35, %242 ]
  %257 = phi i32 [ %253, %250 ], [ %33, %242 ]
  %258 = sub nsw i32 %256, %243
  %259 = shl i32 %257, 7
  %260 = or i32 %259, 1073741824
  %261 = shl i32 %244, 8
  %262 = or i32 %261, -2147483648
  %263 = shl i32 %260, 1
  %264 = icmp ugt i32 %262, %263
  %265 = xor i1 %264, true
  %266 = zext i1 %265 to i32
  %267 = lshr exact i32 %260, %266
  %268 = select i1 %264, i32 125, i32 126
  %269 = add nsw i32 %258, %268
  %270 = zext i32 %267 to i64
  %271 = shl nuw i64 %270, 32
  %272 = zext i32 %262 to i64
  %273 = udiv i64 %271, %272
  %274 = trunc i64 %273 to i32
  %275 = and i32 %274, 63
  %276 = icmp eq i32 %275, 0
  br i1 %276, label %277, label %283

277:                                              ; preds = %255
  %278 = and i64 %273, 4294967295
  %279 = mul nuw i64 %278, %272
  %280 = icmp ne i64 %279, %271
  %281 = zext i1 %280 to i32
  %282 = or i32 %281, %274
  br label %283

283:                                              ; preds = %277, %255
  %284 = phi i32 [ %282, %277 ], [ %274, %255 ]
  %285 = tail call fastcc i32 @roundAndPackFloat32(i8 noundef zeroext %41, i32 noundef %269, i32 noundef %284, %struct.float_status* noundef nonnull %2)
  br label %286

286:                                              ; preds = %216, %210, %189, %151, %145, %124, %93, %87, %66, %283, %248, %233, %231, %222, %161, %157
  %287 = phi i32 [ -4194304, %157 ], [ %163, %161 ], [ %223, %222 ], [ -4194304, %231 ], [ %236, %233 ], [ %249, %248 ], [ %285, %283 ], [ %92, %87 ], [ %98, %93 ], [ -4194304, %66 ], [ %150, %145 ], [ %156, %151 ], [ -4194304, %124 ], [ %215, %210 ], [ 
  ret i32 %287
}

; Function Attrs: nofree nosync nounwind uwtable
define i32 @float32_rem(i32 noundef %0, i32 noundef %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #20 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i32 %0, 2139095040
  %9 = icmp ne i32 %8, 0
  %10 = and i32 %0, 8388607
  %11 = icmp eq i32 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i32 %0, -2147483648
  br label %18

18:                                               ; preds = %7, %13
  %19 = phi i32 [ %0, %7 ], [ %17, %13 ]
  %20 = and i32 %1, 2139095040
  %21 = icmp ne i32 %20, 0
  %22 = and i32 %1, 8388607
  %23 = icmp eq i32 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i32 %1, -2147483648
  br label %30

30:                                               ; preds = %3, %18, %25
  %31 = phi i32 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i32 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = and i32 %31, 8388607
  %34 = lshr i32 %31, 23
  %35 = and i32 %34, 255
  %36 = lshr i32 %31, 31
  %37 = and i32 %32, 8388607
  %38 = lshr i32 %32, 23
  %39 = and i32 %38, 255
  %40 = icmp eq i32 %35, 255
  br i1 %40, label %41, label %105

41:                                               ; preds = %30
  %42 = icmp eq i32 %33, 0
  br i1 %42, label %43, label %47

43:                                               ; preds = %41
  %44 = icmp eq i32 %39, 255
  %45 = icmp ne i32 %37, 0
  %46 = and i1 %45, %44
  br i1 %46, label %47, label %101

47:                                               ; preds = %43, %41
  %48 = shl i32 %31, 1
  %49 = icmp ult i32 %48, -8388608
  %50 = and i32 %31, 2143289344
  %51 = icmp eq i32 %50, 2139095040
  %52 = and i32 %31, 4194303
  %53 = icmp ne i32 %52, 0
  %54 = and i1 %51, %53
  %55 = shl i32 %32, 1
  %56 = icmp ugt i32 %55, -8388609
  %57 = and i32 %32, 2143289344
  %58 = icmp eq i32 %57, 2139095040
  %59 = and i32 %32, 4194303
  %60 = icmp ne i32 %59, 0
  %61 = and i1 %58, %60
  %62 = zext i1 %61 to i8
  %63 = or i1 %54, %61
  br i1 %63, label %64, label %68

64:                                               ; preds = %47
  %65 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %66 = load i8, i8* %65, align 1
  %67 = or i8 %66, 1
  store i8 %67, i8* %65, align 1
  br label %68

68:                                               ; preds = %64, %47
  %69 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %70 = load i8, i8* %69, align 1
  %71 = icmp eq i8 %70, 0
  br i1 %71, label %72, label %448

72:                                               ; preds = %68
  %73 = icmp ult i32 %48, %55
  br i1 %73, label %79, label %74

74:                                               ; preds = %72
  %75 = icmp ult i32 %55, %48
  br i1 %75, label %79, label %76

76:                                               ; preds = %74
  %77 = icmp ult i32 %31, %32
  %78 = zext i1 %77 to i8
  br label %79

79:                                               ; preds = %76, %74, %72
  %80 = phi i8 [ %78, %76 ], [ 0, %72 ], [ 1, %74 ]
  br i1 %54, label %86, label %81

81:                                               ; preds = %79
  br i1 %49, label %89, label %82

82:                                               ; preds = %81
  %83 = or i8 %80, %62
  %84 = icmp eq i8 %83, 0
  %85 = and i1 %56, %84
  br i1 %85, label %89, label %95

86:                                               ; preds = %79
  %87 = icmp eq i8 %80, 0
  %88 = select i1 %61, i1 %87, i1 %56
  br i1 %88, label %89, label %95

89:                                               ; preds = %86, %82, %81
  %90 = icmp ne i32 %57, 2139095040
  %91 = icmp eq i32 %59, 0
  %92 = or i1 %90, %91
  %93 = or i32 %32, 4194304
  %94 = select i1 %92, i32 %32, i32 %93
  br label %448

95:                                               ; preds = %86, %82
  %96 = icmp ne i32 %50, 2139095040
  %97 = icmp eq i32 %52, 0
  %98 = or i1 %96, %97
  %99 = or i32 %31, 4194304
  %100 = select i1 %98, i32 %31, i32 %99
  br label %448

101:                                              ; preds = %43
  %102 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %103 = load i8, i8* %102, align 1
  %104 = or i8 %103, 1
  store i8 %104, i8* %102, align 1
  br label %448

105:                                              ; preds = %30
  %106 = trunc i32 %38 to i8
  switch i8 %106, label %174 [
    i8 -1, label %107
    i8 0, label %163
  ]

107:                                              ; preds = %105
  %108 = icmp eq i32 %37, 0
  br i1 %108, label %448, label %109

109:                                              ; preds = %107
  %110 = shl i32 %31, 1
  %111 = icmp ult i32 %110, -8388608
  %112 = and i32 %31, 2143289344
  %113 = icmp eq i32 %112, 2139095040
  %114 = and i32 %31, 4194303
  %115 = icmp ne i32 %114, 0
  %116 = and i1 %113, %115
  %117 = shl i32 %32, 1
  %118 = icmp ugt i32 %117, -8388609
  %119 = and i32 %32, 2143289344
  %120 = icmp eq i32 %119, 2139095040
  %121 = and i32 %32, 4194303
  %122 = icmp ne i32 %121, 0
  %123 = and i1 %120, %122
  %124 = zext i1 %123 to i8
  %125 = or i1 %116, %123
  br i1 %125, label %126, label %130

126:                                              ; preds = %109
  %127 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %128 = load i8, i8* %127, align 1
  %129 = or i8 %128, 1
  store i8 %129, i8* %127, align 1
  br label %130

130:                                              ; preds = %126, %109
  %131 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %132 = load i8, i8* %131, align 1
  %133 = icmp eq i8 %132, 0
  br i1 %133, label %134, label %448

134:                                              ; preds = %130
  %135 = icmp ult i32 %110, %117
  br i1 %135, label %141, label %136

136:                                              ; preds = %134
  %137 = icmp ult i32 %117, %110
  br i1 %137, label %141, label %138

138:                                              ; preds = %136
  %139 = icmp ult i32 %31, %32
  %140 = zext i1 %139 to i8
  br label %141

141:                                              ; preds = %138, %136, %134
  %142 = phi i8 [ %140, %138 ], [ 0, %134 ], [ 1, %136 ]
  br i1 %116, label %148, label %143

143:                                              ; preds = %141
  br i1 %111, label %151, label %144

144:                                              ; preds = %143
  %145 = or i8 %142, %124
  %146 = icmp eq i8 %145, 0
  %147 = and i1 %118, %146
  br i1 %147, label %151, label %157

148:                                              ; preds = %141
  %149 = icmp eq i8 %142, 0
  %150 = select i1 %123, i1 %149, i1 %118
  br i1 %150, label %151, label %157

151:                                              ; preds = %148, %144, %143
  %152 = icmp ne i32 %119, 2139095040
  %153 = icmp eq i32 %121, 0
  %154 = or i1 %152, %153
  %155 = or i32 %32, 4194304
  %156 = select i1 %154, i32 %32, i32 %155
  br label %448

157:                                              ; preds = %148, %144
  %158 = icmp ne i32 %112, 2139095040
  %159 = icmp eq i32 %114, 0
  %160 = or i1 %158, %159
  %161 = or i32 %31, 4194304
  %162 = select i1 %160, i32 %31, i32 %161
  br label %448

163:                                              ; preds = %105
  %164 = icmp eq i32 %37, 0
  br i1 %164, label %165, label %169

165:                                              ; preds = %163
  %166 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %167 = load i8, i8* %166, align 1
  %168 = or i8 %167, 1
  store i8 %168, i8* %166, align 1
  br label %448

169:                                              ; preds = %163
  %ctlz.sh = lshr i32 %37, 1
  %ctlz.step = or i32 %37, %ctlz.sh
  %ctlz.sh1 = lshr i32 %ctlz.step, 2
  %ctlz.step2 = or i32 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i32 %ctlz.step2, 4
  %ctlz.step4 = or i32 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i32 %ctlz.step4, 8
  %ctlz.step6 = or i32 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i32 %ctlz.step6, 16
  %ctlz.step8 = or i32 %ctlz.step6, %ctlz.sh7
  %170 = xor i32 %ctlz.step8, -1
  %cppop.and1 = and i32 %170, 1431655765
  %ctpop.sh = lshr i32 %170, 1
  %cppop.and2 = and i32 %ctpop.sh, 1431655765
  %ctpop.step = add i32 %cppop.and1, %cppop.and2
  %cppop.and19 = and i32 %ctpop.step, 858993459
  %ctpop.sh10 = lshr i32 %ctpop.step, 2
  %cppop.and211 = and i32 %ctpop.sh10, 858993459
  %ctpop.step12 = add i32 %cppop.and19, %cppop.and211
  %cppop.and113 = and i32 %ctpop.step12, 252645135
  %ctpop.sh14 = lshr i32 %ctpop.step12, 4
  %cppop.and215 = and i32 %ctpop.sh14, 252645135
  %ctpop.step16 = add i32 %cppop.and113, %cppop.and215
  %cppop.and117 = and i32 %ctpop.step16, 16711935
  %ctpop.sh18 = lshr i32 %ctpop.step16, 8
  %cppop.and219 = and i32 %ctpop.sh18, 16711935
  %ctpop.step20 = add i32 %cppop.and117, %cppop.and219
  %cppop.and121 = and i32 %ctpop.step20, 65535
  %ctpop.sh22 = lshr i32 %ctpop.step20, 16
  %cppop.and223 = and i32 %ctpop.sh22, 65535
  %ctpop.step24 = add i32 %cppop.and121, %cppop.and223
  %ctpop.part = add i32 %ctpop.step24, 0
  %171 = add nsw i32 %ctpop.part, -8
  %172 = shl i32 %37, %171
  %173 = sub nsw i32 9, %ctpop.part
  br label %174

174:                                              ; preds = %105, %169
  %175 = phi i32 [ %39, %105 ], [ %173, %169 ]
  %176 = phi i32 [ %37, %105 ], [ %172, %169 ]
  %177 = icmp eq i32 %35, 0
  br i1 %177, label %178, label %185

178:                                              ; preds = %174
  %179 = icmp eq i32 %33, 0
  br i1 %179, label %448, label %180

180:                                              ; preds = %178
  %ctlz.sh25 = lshr i32 %33, 1
  %ctlz.step26 = or i32 %33, %ctlz.sh25
  %ctlz.sh27 = lshr i32 %ctlz.step26, 2
  %ctlz.step28 = or i32 %ctlz.step26, %ctlz.sh27
  %ctlz.sh29 = lshr i32 %ctlz.step28, 4
  %ctlz.step30 = or i32 %ctlz.step28, %ctlz.sh29
  %ctlz.sh31 = lshr i32 %ctlz.step30, 8
  %ctlz.step32 = or i32 %ctlz.step30, %ctlz.sh31
  %ctlz.sh33 = lshr i32 %ctlz.step32, 16
  %ctlz.step34 = or i32 %ctlz.step32, %ctlz.sh33
  %181 = xor i32 %ctlz.step34, -1
  %cppop.and135 = and i32 %181, 1431655765
  %ctpop.sh36 = lshr i32 %181, 1
  %cppop.and237 = and i32 %ctpop.sh36, 1431655765
  %ctpop.step38 = add i32 %cppop.and135, %cppop.and237
  %cppop.and139 = and i32 %ctpop.step38, 858993459
  %ctpop.sh40 = lshr i32 %ctpop.step38, 2
  %cppop.and241 = and i32 %ctpop.sh40, 858993459
  %ctpop.step42 = add i32 %cppop.and139, %cppop.and241
  %cppop.and143 = and i32 %ctpop.step42, 252645135
  %ctpop.sh44 = lshr i32 %ctpop.step42, 4
  %cppop.and245 = and i32 %ctpop.sh44, 252645135
  %ctpop.step46 = add i32 %cppop.and143, %cppop.and245
  %cppop.and147 = and i32 %ctpop.step46, 16711935
  %ctpop.sh48 = lshr i32 %ctpop.step46, 8
  %cppop.and249 = and i32 %ctpop.sh48, 16711935
  %ctpop.step50 = add i32 %cppop.and147, %cppop.and249
  %cppop.and151 = and i32 %ctpop.step50, 65535
  %ctpop.sh52 = lshr i32 %ctpop.step50, 16
  %cppop.and253 = and i32 %ctpop.sh52, 65535
  %ctpop.step54 = add i32 %cppop.and151, %cppop.and253
  %ctpop.part55 = add i32 %ctpop.step54, 0
  %182 = add nsw i32 %ctpop.part55, -8
  %183 = shl i32 %33, %182
  %184 = sub nsw i32 9, %ctpop.part55
  br label %185

185:                                              ; preds = %180, %174
  %186 = phi i32 [ %184, %180 ], [ %35, %174 ]
  %187 = phi i32 [ %183, %180 ], [ %33, %174 ]
  %188 = sub nsw i32 %186, %175
  %189 = or i32 %187, 8388608
  %190 = or i32 %176, 8388608
  %191 = icmp slt i32 %188, 32
  br i1 %191, label %192, label %225

192:                                              ; preds = %185
  %193 = shl i32 %189, 8
  %194 = shl i32 %190, 8
  %195 = icmp slt i32 %188, 0
  br i1 %195, label %196, label %200

196:                                              ; preds = %192
  %197 = icmp eq i32 %188, -1
  br i1 %197, label %198, label %448

198:                                              ; preds = %196
  %199 = lshr exact i32 %193, 1
  br label %219

200:                                              ; preds = %192
  %201 = icmp uge i32 %193, %194
  %202 = select i1 %201, i32 %194, i32 0
  %203 = sub i32 %193, %202
  %204 = icmp eq i32 %188, 0
  br i1 %204, label %219, label %205

205:                                              ; preds = %200
  %206 = zext i32 %203 to i64
  %207 = shl nuw i64 %206, 32
  %208 = zext i32 %194 to i64
  %209 = udiv i64 %207, %208
  %210 = trunc i64 %209 to i32
  %211 = sub nuw nsw i32 32, %188
  %212 = lshr i32 %210, %211
  %213 = lshr exact i32 %194, 2
  %214 = lshr exact i32 %203, 1
  %215 = add nsw i32 %188, -1
  %216 = shl i32 %214, %215
  %217 = mul i32 %212, %213
  %218 = sub i32 %216, %217
  br label %413

219:                                              ; preds = %198, %200
  %220 = phi i32 [ %199, %198 ], [ %203, %200 ]
  %221 = phi i1 [ false, %198 ], [ %201, %200 ]
  %222 = zext i1 %221 to i32
  %223 = lshr i32 %220, 2
  %224 = lshr exact i32 %194, 2
  br label %413

225:                                              ; preds = %185
  %226 = icmp ult i32 %189, %190
  %227 = select i1 %226, i32 0, i32 %190
  %228 = sub i32 %189, %227
  %229 = zext i32 %228 to i64
  %230 = shl i64 %229, 40
  %231 = zext i32 %190 to i64
  %232 = shl i64 %231, 40
  %233 = add nsw i32 %188, -64
  %234 = icmp ugt i32 %188, 64
  br i1 %234, label %235, label %368

235:                                              ; preds = %225
  %236 = lshr exact i64 %232, 32
  %237 = mul i64 %231, -274877906944
  %238 = icmp ugt i64 %232, %230
  br i1 %238, label %239, label %262

239:                                              ; preds = %235
  %240 = udiv i64 %230, %236
  %241 = shl i64 %240, 32
  %242 = and i64 %240, 4294967295
  %243 = mul nuw i64 %242, %236
  %244 = sub i64 %230, %243
  %245 = icmp slt i64 %244, 0
  br i1 %245, label %246, label %252

246:                                              ; preds = %239, %246
  %247 = phi i64 [ %249, %246 ], [ %241, %239 ]
  %248 = phi i64 [ %250, %246 ], [ %244, %239 ]
  %249 = add i64 %247, -4294967296
  %250 = add i64 %248, %236
  %251 = icmp slt i64 %250, 0
  br i1 %251, label %246, label %252, !llvm.loop !50

252:                                              ; preds = %246, %239
  %253 = phi i64 [ %244, %239 ], [ %250, %246 ]
  %254 = phi i64 [ %241, %239 ], [ %249, %246 ]
  %255 = shl i64 %253, 32
  %256 = icmp ugt i64 %232, %255
  br i1 %256, label %257, label %259

257:                                              ; preds = %252
  %258 = udiv i64 %255, %236
  br label %259

259:                                              ; preds = %257, %252
  %260 = phi i64 [ %258, %257 ], [ 4294967295, %252 ]
  %261 = or i64 %260, %254
  br label %262

262:                                              ; preds = %235, %259
  %263 = phi i64 [ %261, %259 ], [ -1, %235 ]
  %264 = sub i64 %263, 2
  %265 = icmp ult i64 %263, 2
  %266 = select i1 %265, i64 0, i64 %264
  %267 = mul i64 %237, %266
  %268 = add nsw i32 %188, -126
  %269 = icmp sgt i32 %188, 126
  br i1 %269, label %270, label %368, !llvm.loop !51

270:                                              ; preds = %262
  %271 = icmp ugt i64 %232, %267
  br i1 %271, label %272, label %295

272:                                              ; preds = %270
  %273 = udiv i64 %267, %236
  %274 = shl i64 %273, 32
  %275 = and i64 %273, 4294967295
  %276 = mul nuw i64 %275, %236
  %277 = sub i64 %267, %276
  %278 = icmp slt i64 %277, 0
  br i1 %278, label %279, label %285

279:                                              ; preds = %272, %279
  %280 = phi i64 [ %282, %279 ], [ %274, %272 ]
  %281 = phi i64 [ %283, %279 ], [ %277, %272 ]
  %282 = add i64 %280, -4294967296
  %283 = add i64 %281, %236
  %284 = icmp slt i64 %283, 0
  br i1 %284, label %279, label %285, !llvm.loop !50

285:                                              ; preds = %279, %272
  %286 = phi i64 [ %277, %272 ], [ %283, %279 ]
  %287 = phi i64 [ %274, %272 ], [ %282, %279 ]
  %288 = shl i64 %286, 32
  %289 = icmp ugt i64 %232, %288
  br i1 %289, label %290, label %292

290:                                              ; preds = %285
  %291 = udiv i64 %288, %236
  br label %292

292:                                              ; preds = %290, %285
  %293 = phi i64 [ %291, %290 ], [ 4294967295, %285 ]
  %294 = or i64 %293, %287
  br label %295

295:                                              ; preds = %292, %270
  %296 = phi i64 [ %294, %292 ], [ -1, %270 ]
  %297 = sub i64 %296, 2
  %298 = icmp ult i64 %296, 2
  %299 = select i1 %298, i64 0, i64 %297
  %300 = mul i64 %237, %299
  %301 = add nsw i32 %188, -188
  %302 = icmp sgt i32 %188, 188
  br i1 %302, label %303, label %368, !llvm.loop !51

303:                                              ; preds = %295
  %304 = icmp ugt i64 %232, %300
  br i1 %304, label %305, label %328

305:                                              ; preds = %303
  %306 = udiv i64 %300, %236
  %307 = shl i64 %306, 32
  %308 = and i64 %306, 4294967295
  %309 = mul nuw i64 %308, %236
  %310 = sub i64 %300, %309
  %311 = icmp slt i64 %310, 0
  br i1 %311, label %312, label %318

312:                                              ; preds = %305, %312
  %313 = phi i64 [ %315, %312 ], [ %307, %305 ]
  %314 = phi i64 [ %316, %312 ], [ %310, %305 ]
  %315 = add i64 %313, -4294967296
  %316 = add i64 %314, %236
  %317 = icmp slt i64 %316, 0
  br i1 %317, label %312, label %318, !llvm.loop !50

318:                                              ; preds = %312, %305
  %319 = phi i64 [ %310, %305 ], [ %316, %312 ]
  %320 = phi i64 [ %307, %305 ], [ %315, %312 ]
  %321 = shl i64 %319, 32
  %322 = icmp ugt i64 %232, %321
  br i1 %322, label %323, label %325

323:                                              ; preds = %318
  %324 = udiv i64 %321, %236
  br label %325

325:                                              ; preds = %323, %318
  %326 = phi i64 [ %324, %323 ], [ 4294967295, %318 ]
  %327 = or i64 %326, %320
  br label %328

328:                                              ; preds = %325, %303
  %329 = phi i64 [ %327, %325 ], [ -1, %303 ]
  %330 = sub i64 %329, 2
  %331 = icmp ult i64 %329, 2
  %332 = select i1 %331, i64 0, i64 %330
  %333 = mul i64 %237, %332
  %334 = add nsw i32 %188, -250
  %335 = icmp sgt i32 %188, 250
  br i1 %335, label %336, label %368, !llvm.loop !51

336:                                              ; preds = %328
  %337 = icmp ugt i64 %232, %333
  br i1 %337, label %338, label %361

338:                                              ; preds = %336
  %339 = udiv i64 %333, %236
  %340 = shl i64 %339, 32
  %341 = and i64 %339, 4294967295
  %342 = mul nuw i64 %341, %236
  %343 = sub i64 %333, %342
  %344 = icmp slt i64 %343, 0
  br i1 %344, label %345, label %351

345:                                              ; preds = %338, %345
  %346 = phi i64 [ %348, %345 ], [ %340, %338 ]
  %347 = phi i64 [ %349, %345 ], [ %343, %338 ]
  %348 = add i64 %346, -4294967296
  %349 = add i64 %347, %236
  %350 = icmp slt i64 %349, 0
  br i1 %350, label %345, label %351, !llvm.loop !50

351:                                              ; preds = %345, %338
  %352 = phi i64 [ %343, %338 ], [ %349, %345 ]
  %353 = phi i64 [ %340, %338 ], [ %348, %345 ]
  %354 = shl i64 %352, 32
  %355 = icmp ugt i64 %232, %354
  br i1 %355, label %356, label %358

356:                                              ; preds = %351
  %357 = udiv i64 %354, %236
  br label %358

358:                                              ; preds = %356, %351
  %359 = phi i64 [ %357, %356 ], [ 4294967295, %351 ]
  %360 = or i64 %359, %353
  br label %361

361:                                              ; preds = %358, %336
  %362 = phi i64 [ %360, %358 ], [ -1, %336 ]
  %363 = sub i64 %362, 2
  %364 = icmp ult i64 %362, 2
  %365 = select i1 %364, i64 0, i64 %363
  %366 = mul i64 %237, %365
  %367 = add nsw i32 %188, -312
  br label %368

368:                                              ; preds = %262, %295, %328, %361, %225
  %369 = phi i32 [ %233, %225 ], [ %268, %262 ], [ %301, %295 ], [ %334, %328 ], [ %367, %361 ]
  %370 = phi i64 [ %230, %225 ], [ %267, %262 ], [ %300, %295 ], [ %333, %328 ], [ %366, %361 ]
  %371 = icmp ugt i64 %232, %370
  br i1 %371, label %372, label %396

372:                                              ; preds = %368
  %373 = lshr exact i64 %232, 32
  %374 = udiv i64 %370, %373
  %375 = shl i64 %374, 32
  %376 = and i64 %374, 4294967295
  %377 = mul nuw i64 %376, %373
  %378 = sub i64 %370, %377
  %379 = icmp slt i64 %378, 0
  br i1 %379, label %380, label %386

380:                                              ; preds = %372, %380
  %381 = phi i64 [ %383, %380 ], [ %375, %372 ]
  %382 = phi i64 [ %384, %380 ], [ %378, %372 ]
  %383 = add i64 %381, -4294967296
  %384 = add i64 %382, %373
  %385 = icmp slt i64 %384, 0
  br i1 %385, label %380, label %386, !llvm.loop !50

386:                                              ; preds = %380, %372
  %387 = phi i64 [ %378, %372 ], [ %384, %380 ]
  %388 = phi i64 [ %375, %372 ], [ %383, %380 ]
  %389 = shl i64 %387, 32
  %390 = icmp ugt i64 %232, %389
  br i1 %390, label %391, label %393

391:                                              ; preds = %386
  %392 = udiv i64 %389, %373
  br label %393

393:                                              ; preds = %391, %386
  %394 = phi i64 [ %392, %391 ], [ 4294967295, %386 ]
  %395 = or i64 %394, %388
  br label %396

396:                                              ; preds = %368, %393
  %397 = phi i64 [ %395, %393 ], [ -1, %368 ]
  %398 = sub i64 %397, 2
  %399 = icmp ult i64 %397, 2
  %400 = select i1 %399, i64 0, i64 %398
  %401 = sub i32 0, %369
  %402 = zext i32 %401 to i64
  %403 = lshr i64 %400, %402
  %404 = trunc i64 %403 to i32
  %405 = shl i32 %190, 6
  %406 = lshr exact i64 %370, 33
  %407 = add nsw i32 %369, 63
  %408 = zext i32 %407 to i64
  %409 = shl i64 %406, %408
  %410 = mul i32 %405, %404
  %411 = trunc i64 %409 to i32
  %412 = sub i32 %411, %410
  br label %413

413:                                              ; preds = %205, %219, %396
  %414 = phi i32 [ %218, %205 ], [ %223, %219 ], [ %412, %396 ]
  %415 = phi i32 [ %213, %205 ], [ %224, %219 ], [ %405, %396 ]
  %416 = phi i32 [ %212, %205 ], [ %222, %219 ], [ %404, %396 ]
  br label %417

417:                                              ; preds = %417, %413
  %418 = phi i32 [ %414, %413 ], [ %421, %417 ]
  %419 = phi i32 [ %416, %413 ], [ %420, %417 ]
  %420 = add i32 %419, 1
  %421 = sub i32 %418, %415
  %422 = icmp sgt i32 %421, -1
  br i1 %422, label %417, label %423, !llvm.loop !52

423:                                              ; preds = %417
  %424 = add i32 %421, %418
  %425 = icmp slt i32 %424, 0
  br i1 %425, label %431, label %426

426:                                              ; preds = %423
  %427 = icmp ne i32 %424, 0
  %428 = and i32 %420, 1
  %429 = icmp eq i32 %428, 0
  %430 = select i1 %427, i1 true, i1 %429
  br i1 %430, label %434, label %431

431:                                              ; preds = %423, %426
  %432 = lshr i32 %418, 31
  %433 = icmp sgt i32 %418, -1
  br i1 %433, label %438, label %434

434:                                              ; preds = %426, %431
  %435 = phi i32 [ %432, %431 ], [ 1, %426 ]
  %436 = phi i32 [ %418, %431 ], [ %421, %426 ]
  %437 = sub i32 0, %436
  br label %438

438:                                              ; preds = %434, %431
  %439 = phi i32 [ %432, %431 ], [ %435, %434 ]
  %440 = phi i32 [ %418, %431 ], [ %437, %434 ]
  %441 = xor i32 %439, %36
  %442 = trunc i32 %441 to i8
  %ctlz.sh56 = lshr i32 %440, 1
  %ctlz.step57 = or i32 %440, %ctlz.sh56
  %ctlz.sh58 = lshr i32 %ctlz.step57, 2
  %ctlz.step59 = or i32 %ctlz.step57, %ctlz.sh58
  %ctlz.sh60 = lshr i32 %ctlz.step59, 4
  %ctlz.step61 = or i32 %ctlz.step59, %ctlz.sh60
  %ctlz.sh62 = lshr i32 %ctlz.step61, 8
  %ctlz.step63 = or i32 %ctlz.step61, %ctlz.sh62
  %ctlz.sh64 = lshr i32 %ctlz.step63, 16
  %ctlz.step65 = or i32 %ctlz.step63, %ctlz.sh64
  %443 = xor i32 %ctlz.step65, -1
  %cppop.and166 = and i32 %443, 1431655765
  %ctpop.sh67 = lshr i32 %443, 1
  %cppop.and268 = and i32 %ctpop.sh67, 1431655765
  %ctpop.step69 = add i32 %cppop.and166, %cppop.and268
  %cppop.and170 = and i32 %ctpop.step69, 858993459
  %ctpop.sh71 = lshr i32 %ctpop.step69, 2
  %cppop.and272 = and i32 %ctpop.sh71, 858993459
  %ctpop.step73 = add i32 %cppop.and170, %cppop.and272
  %cppop.and174 = and i32 %ctpop.step73, 252645135
  %ctpop.sh75 = lshr i32 %ctpop.step73, 4
  %cppop.and276 = and i32 %ctpop.sh75, 252645135
  %ctpop.step77 = add i32 %cppop.and174, %cppop.and276
  %cppop.and178 = and i32 %ctpop.step77, 16711935
  %ctpop.sh79 = lshr i32 %ctpop.step77, 8
  %cppop.and280 = and i32 %ctpop.sh79, 16711935
  %ctpop.step81 = add i32 %cppop.and178, %cppop.and280
  %cppop.and182 = and i32 %ctpop.step81, 65535
  %ctpop.sh83 = lshr i32 %ctpop.step81, 16
  %cppop.and284 = and i32 %ctpop.sh83, 65535
  %ctpop.step85 = add i32 %cppop.and182, %cppop.and284
  %ctpop.part86 = add i32 %ctpop.step85, 0
  %444 = add nsw i32 %ctpop.part86, -1
  %445 = sub nsw i32 %175, %444
  %446 = shl i32 %440, %444
  %447 = tail call fastcc i32 @roundAndPackFloat32(i8 noundef zeroext %442, i32 noundef %445, i32 noundef %446, %struct.float_status* noundef %2) #30
  br label %448

448:                                              ; preds = %157, %151, %130, %95, %89, %68, %196, %178, %107, %438, %165, %101
  %449 = phi i32 [ -4194304, %101 ], [ -4194304, %165 ], [ %447, %438 ], [ %31, %107 ], [ %31, %178 ], [ %31, %196 ], [ %94, %89 ], [ %100, %95 ], [ -4194304, %68 ], [ %156, %151 ], [ %162, %157 ], [ -4194304, %130 ]
  ret i32 %449
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.usub.sat.i64(i64, i64) #11

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define i32 @float32_muladd(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.float_status* nocapture noundef %4) local_unnamed_addr #14 {
  %6 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 5
  %7 = load i8, i8* %6, align 1
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %44, label %9

9:                                                ; preds = %5
  %10 = and i32 %0, 2139095040
  %11 = icmp ne i32 %10, 0
  %12 = and i32 %0, 8388607
  %13 = icmp eq i32 %12, 0
  %14 = or i1 %11, %13
  br i1 %14, label %20, label %15

15:                                               ; preds = %9
  %16 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %17 = load i8, i8* %16, align 1
  %18 = or i8 %17, 64
  store i8 %18, i8* %16, align 1
  %19 = and i32 %0, -2147483648
  br label %20

20:                                               ; preds = %9, %15
  %21 = phi i32 [ %0, %9 ], [ %19, %15 ]
  %22 = and i32 %1, 2139095040
  %23 = icmp ne i32 %22, 0
  %24 = and i32 %1, 8388607
  %25 = icmp eq i32 %24, 0
  %26 = or i1 %23, %25
  br i1 %26, label %32, label %27

27:                                               ; preds = %20
  %28 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %29 = load i8, i8* %28, align 1
  %30 = or i8 %29, 64
  store i8 %30, i8* %28, align 1
  %31 = and i32 %1, -2147483648
  br label %32

32:                                               ; preds = %20, %27
  %33 = phi i32 [ %1, %20 ], [ %31, %27 ]
  %34 = and i32 %2, 2139095040
  %35 = icmp ne i32 %34, 0
  %36 = and i32 %2, 8388607
  %37 = icmp eq i32 %36, 0
  %38 = or i1 %35, %37
  br i1 %38, label %44, label %39

39:                                               ; preds = %32
  %40 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %41 = load i8, i8* %40, align 1
  %42 = or i8 %41, 64
  store i8 %42, i8* %40, align 1
  %43 = and i32 %2, -2147483648
  br label %44

44:                                               ; preds = %5, %32, %39
  %45 = phi i32 [ %33, %39 ], [ %33, %32 ], [ %1, %5 ]
  %46 = phi i32 [ %21, %39 ], [ %21, %32 ], [ %0, %5 ]
  %47 = phi i32 [ %43, %39 ], [ %2, %32 ], [ %2, %5 ]
  %48 = and i32 %46, 8388607
  %49 = lshr i32 %46, 23
  %50 = and i32 %49, 255
  %51 = and i32 %45, 8388607
  %52 = lshr i32 %45, 23
  %53 = and i32 %52, 255
  %54 = and i32 %47, 8388607
  %55 = lshr i32 %47, 23
  %56 = and i32 %55, 255
  %57 = lshr i32 %47, 31
  %58 = trunc i32 %57 to i8
  %59 = icmp eq i32 %50, 0
  %60 = icmp eq i32 %53, 255
  %61 = or i32 %48, %51
  %62 = or i32 %61, %50
  %63 = icmp eq i32 %62, 0
  %64 = and i1 %60, %63
  br i1 %64, label %80, label %65

65:                                               ; preds = %44
  %66 = icmp eq i32 %50, 255
  %67 = or i32 %53, %51
  %68 = or i32 %67, %48
  %69 = icmp eq i32 %68, 0
  %70 = and i1 %66, %69
  %71 = icmp ne i32 %48, 0
  %72 = and i1 %71, %66
  %73 = icmp ne i32 %51, 0
  %74 = and i1 %73, %60
  %75 = or i1 %74, %72
  br i1 %75, label %84, label %76

76:                                               ; preds = %65
  %77 = icmp eq i32 %56, 255
  %78 = icmp ne i32 %54, 0
  %79 = and i1 %78, %77
  br i1 %79, label %84, label %137

80:                                               ; preds = %44
  %81 = icmp eq i32 %56, 255
  %82 = icmp ne i32 %54, 0
  %83 = and i1 %82, %81
  br i1 %83, label %84, label %138

84:                                               ; preds = %80, %76, %65
  %85 = shl i32 %46, 1
  %86 = icmp ugt i32 %85, -8388609
  %87 = and i32 %46, 2143289344
  %88 = icmp eq i32 %87, 2139095040
  %89 = and i32 %46, 4194303
  %90 = icmp ne i32 %89, 0
  %91 = and i1 %88, %90
  %92 = shl i32 %45, 1
  %93 = icmp ugt i32 %92, -8388609
  %94 = and i32 %45, 2143289344
  %95 = icmp eq i32 %94, 2139095040
  %96 = and i32 %45, 4194303
  %97 = icmp ne i32 %96, 0
  %98 = and i1 %95, %97
  %99 = and i32 %47, 2143289344
  %100 = icmp eq i32 %99, 2139095040
  %101 = and i32 %47, 4194303
  %102 = icmp ne i32 %101, 0
  %103 = and i1 %100, %102
  %104 = or i1 %98, %91
  %105 = or i1 %104, %103
  br i1 %105, label %106, label %110

106:                                              ; preds = %84
  %107 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %108 = load i8, i8* %107, align 1
  %109 = or i8 %108, 1
  store i8 %109, i8* %107, align 1
  br label %110

110:                                              ; preds = %106, %84
  %111 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 6
  %112 = load i8, i8* %111, align 1
  %113 = icmp eq i8 %112, 0
  br i1 %113, label %114, label %387

114:                                              ; preds = %110
  %115 = or i1 %93, %98
  %116 = select i1 %115, i32 1, i32 2
  %117 = or i1 %86, %91
  %118 = select i1 %117, i32 0, i32 %116
  switch i32 %118, label %387 [
    i32 0, label %119
    i32 1, label %125
    i32 2, label %131
  ]

119:                                              ; preds = %114
  %120 = icmp ne i32 %87, 2139095040
  %121 = icmp eq i32 %89, 0
  %122 = or i1 %120, %121
  %123 = or i32 %46, 4194304
  %124 = select i1 %122, i32 %46, i32 %123
  br label %387

125:                                              ; preds = %114
  %126 = icmp ne i32 %94, 2139095040
  %127 = icmp eq i32 %96, 0
  %128 = or i1 %126, %127
  %129 = or i32 %45, 4194304
  %130 = select i1 %128, i32 %45, i32 %129
  br label %387

131:                                              ; preds = %114
  %132 = icmp ne i32 %99, 2139095040
  %133 = icmp eq i32 %101, 0
  %134 = or i1 %132, %133
  %135 = or i32 %47, 4194304
  %136 = select i1 %134, i32 %47, i32 %135
  br label %387

137:                                              ; preds = %76
  br i1 %70, label %138, label %142

138:                                              ; preds = %80, %137
  %139 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %140 = load i8, i8* %139, align 1
  %141 = or i8 %140, 1
  store i8 %141, i8* %139, align 1
  br label %387

142:                                              ; preds = %137
  %143 = trunc i32 %3 to i8
  %144 = and i8 %143, 1
  %145 = xor i8 %144, %58
  %146 = and i32 %3, 3
  %147 = icmp ne i32 %146, 0
  %148 = xor i32 %46, %45
  %149 = lshr i32 %148, 31
  %150 = trunc i32 %149 to i8
  %151 = lshr i8 %143, 1
  %152 = and i8 %151, 1
  %153 = xor i8 %152, %150
  %154 = or i1 %60, %66
  %155 = or i32 %50, %48
  %156 = icmp eq i32 %155, 0
  %157 = icmp eq i32 %67, 0
  %158 = or i1 %157, %156
  br i1 %77, label %159, label %173

159:                                              ; preds = %142
  %160 = xor i1 %154, true
  %161 = icmp eq i8 %153, %145
  %162 = select i1 %160, i1 true, i1 %161
  br i1 %162, label %167, label %163

163:                                              ; preds = %159
  %164 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %165 = load i8, i8* %164, align 1
  %166 = or i8 %165, 1
  store i8 %166, i8* %164, align 1
  br label %387

167:                                              ; preds = %159
  %168 = zext i1 %147 to i8
  %169 = xor i8 %145, %168
  %170 = zext i8 %169 to i32
  %171 = shl nuw i32 %170, 31
  %172 = or i32 %171, 2139095040
  br label %387

173:                                              ; preds = %142
  br i1 %154, label %174, label %180

174:                                              ; preds = %173
  %175 = zext i1 %147 to i8
  %176 = xor i8 %153, %175
  %177 = zext i8 %176 to i32
  %178 = shl nuw i32 %177, 31
  %179 = or i32 %178, 2139095040
  br label %387

180:                                              ; preds = %173
  br i1 %158, label %181, label %213

181:                                              ; preds = %180
  %182 = icmp eq i32 %56, 0
  br i1 %182, label %183, label %210

183:                                              ; preds = %181
  %184 = icmp eq i32 %54, 0
  br i1 %184, label %185, label %198

185:                                              ; preds = %183
  %186 = icmp eq i8 %153, %145
  br i1 %186, label %192, label %187

187:                                              ; preds = %185
  %188 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 1
  %189 = load i8, i8* %188, align 1
  %190 = icmp eq i8 %189, 1
  %191 = zext i1 %190 to i8
  br label %192

192:                                              ; preds = %187, %185
  %193 = phi i8 [ %145, %185 ], [ %191, %187 ]
  %194 = zext i1 %147 to i8
  %195 = xor i8 %193, %194
  %196 = zext i8 %195 to i32
  %197 = shl i32 %196, 31
  br label %387

198:                                              ; preds = %183
  %199 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 4
  %200 = load i8, i8* %199, align 1
  %201 = icmp eq i8 %200, 0
  br i1 %201, label %210, label %202

202:                                              ; preds = %198
  %203 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %204 = load i8, i8* %203, align 1
  %205 = or i8 %204, -128
  store i8 %205, i8* %203, align 1
  %206 = zext i1 %147 to i8
  %207 = xor i8 %145, %206
  %208 = zext i8 %207 to i32
  %209 = shl nuw i32 %208, 31
  br label %387

210:                                              ; preds = %198, %181
  %211 = select i1 %147, i32 -2147483648, i32 0
  %212 = xor i32 %47, %211
  br label %387

213:                                              ; preds = %180
  br i1 %59, label %214, label %219

214:                                              ; preds = %213
  %ctlz.sh = lshr i32 %48, 1
  %ctlz.step = or i32 %48, %ctlz.sh
  %ctlz.sh1 = lshr i32 %ctlz.step, 2
  %ctlz.step2 = or i32 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i32 %ctlz.step2, 4
  %ctlz.step4 = or i32 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i32 %ctlz.step4, 8
  %ctlz.step6 = or i32 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i32 %ctlz.step6, 16
  %ctlz.step8 = or i32 %ctlz.step6, %ctlz.sh7
  %215 = xor i32 %ctlz.step8, -1
  %cppop.and1 = and i32 %215, 1431655765
  %ctpop.sh = lshr i32 %215, 1
  %cppop.and2 = and i32 %ctpop.sh, 1431655765
  %ctpop.step = add i32 %cppop.and1, %cppop.and2
  %cppop.and19 = and i32 %ctpop.step, 858993459
  %ctpop.sh10 = lshr i32 %ctpop.step, 2
  %cppop.and211 = and i32 %ctpop.sh10, 858993459
  %ctpop.step12 = add i32 %cppop.and19, %cppop.and211
  %cppop.and113 = and i32 %ctpop.step12, 252645135
  %ctpop.sh14 = lshr i32 %ctpop.step12, 4
  %cppop.and215 = and i32 %ctpop.sh14, 252645135
  %ctpop.step16 = add i32 %cppop.and113, %cppop.and215
  %cppop.and117 = and i32 %ctpop.step16, 16711935
  %ctpop.sh18 = lshr i32 %ctpop.step16, 8
  %cppop.and219 = and i32 %ctpop.sh18, 16711935
  %ctpop.step20 = add i32 %cppop.and117, %cppop.and219
  %cppop.and121 = and i32 %ctpop.step20, 65535
  %ctpop.sh22 = lshr i32 %ctpop.step20, 16
  %cppop.and223 = and i32 %ctpop.sh22, 65535
  %ctpop.step24 = add i32 %cppop.and121, %cppop.and223
  %ctpop.part = add i32 %ctpop.step24, 0
  %216 = add nsw i32 %ctpop.part, -8
  %217 = shl i32 %48, %216
  %218 = sub nsw i32 9, %ctpop.part
  br label %219

219:                                              ; preds = %214, %213
  %220 = phi i32 [ %218, %214 ], [ %50, %213 ]
  %221 = phi i32 [ %217, %214 ], [ %48, %213 ]
  %222 = icmp eq i32 %53, 0
  br i1 %222, label %223, label %228

223:                                              ; preds = %219
  %ctlz.sh25 = lshr i32 %51, 1
  %ctlz.step26 = or i32 %51, %ctlz.sh25
  %ctlz.sh27 = lshr i32 %ctlz.step26, 2
  %ctlz.step28 = or i32 %ctlz.step26, %ctlz.sh27
  %ctlz.sh29 = lshr i32 %ctlz.step28, 4
  %ctlz.step30 = or i32 %ctlz.step28, %ctlz.sh29
  %ctlz.sh31 = lshr i32 %ctlz.step30, 8
  %ctlz.step32 = or i32 %ctlz.step30, %ctlz.sh31
  %ctlz.sh33 = lshr i32 %ctlz.step32, 16
  %ctlz.step34 = or i32 %ctlz.step32, %ctlz.sh33
  %224 = xor i32 %ctlz.step34, -1
  %cppop.and135 = and i32 %224, 1431655765
  %ctpop.sh36 = lshr i32 %224, 1
  %cppop.and237 = and i32 %ctpop.sh36, 1431655765
  %ctpop.step38 = add i32 %cppop.and135, %cppop.and237
  %cppop.and139 = and i32 %ctpop.step38, 858993459
  %ctpop.sh40 = lshr i32 %ctpop.step38, 2
  %cppop.and241 = and i32 %ctpop.sh40, 858993459
  %ctpop.step42 = add i32 %cppop.and139, %cppop.and241
  %cppop.and143 = and i32 %ctpop.step42, 252645135
  %ctpop.sh44 = lshr i32 %ctpop.step42, 4
  %cppop.and245 = and i32 %ctpop.sh44, 252645135
  %ctpop.step46 = add i32 %cppop.and143, %cppop.and245
  %cppop.and147 = and i32 %ctpop.step46, 16711935
  %ctpop.sh48 = lshr i32 %ctpop.step46, 8
  %cppop.and249 = and i32 %ctpop.sh48, 16711935
  %ctpop.step50 = add i32 %cppop.and147, %cppop.and249
  %cppop.and151 = and i32 %ctpop.step50, 65535
  %ctpop.sh52 = lshr i32 %ctpop.step50, 16
  %cppop.and253 = and i32 %ctpop.sh52, 65535
  %ctpop.step54 = add i32 %cppop.and151, %cppop.and253
  %ctpop.part55 = add i32 %ctpop.step54, 0
  %225 = add nsw i32 %ctpop.part55, -8
  %226 = shl i32 %51, %225
  %227 = sub nsw i32 9, %ctpop.part55
  br label %228

228:                                              ; preds = %223, %219
  %229 = phi i32 [ %227, %223 ], [ %53, %219 ]
  %230 = phi i32 [ %226, %223 ], [ %51, %219 ]
  %231 = add nsw i32 %229, %220
  %232 = shl i32 %221, 7
  %233 = or i32 %232, 1073741824
  %234 = shl i32 %230, 8
  %235 = or i32 %234, -2147483648
  %236 = zext i32 %233 to i64
  %237 = zext i32 %235 to i64
  %238 = mul nuw i64 %237, %236
  %239 = shl i64 %238, 1
  %240 = icmp sgt i64 %239, -1
  %241 = select i1 %240, i64 %239, i64 %238
  %242 = select i1 %240, i32 -127, i32 -126
  %243 = add nsw i32 %231, %242
  %244 = zext i1 %147 to i8
  %245 = xor i8 %153, %244
  %246 = icmp eq i32 %56, 0
  br i1 %246, label %247, label %263

247:                                              ; preds = %228
  %248 = icmp eq i32 %54, 0
  br i1 %248, label %249, label %258

249:                                              ; preds = %247
  %250 = lshr i64 %241, 32
  %251 = and i64 %241, 4294967294
  %252 = icmp ne i64 %251, 0
  %253 = zext i1 %252 to i64
  %254 = or i64 %250, %253
  %255 = trunc i64 %254 to i32
  %256 = add nsw i32 %243, -1
  %257 = tail call fastcc i32 @roundAndPackFloat32(i8 noundef zeroext %245, i32 noundef %256, i32 noundef %255, %struct.float_status* noundef nonnull %4)
  br label %387

258:                                              ; preds = %247
  %ctlz.sh56 = lshr i32 %54, 1
  %ctlz.step57 = or i32 %54, %ctlz.sh56
  %ctlz.sh58 = lshr i32 %ctlz.step57, 2
  %ctlz.step59 = or i32 %ctlz.step57, %ctlz.sh58
  %ctlz.sh60 = lshr i32 %ctlz.step59, 4
  %ctlz.step61 = or i32 %ctlz.step59, %ctlz.sh60
  %ctlz.sh62 = lshr i32 %ctlz.step61, 8
  %ctlz.step63 = or i32 %ctlz.step61, %ctlz.sh62
  %ctlz.sh64 = lshr i32 %ctlz.step63, 16
  %ctlz.step65 = or i32 %ctlz.step63, %ctlz.sh64
  %259 = xor i32 %ctlz.step65, -1
  %cppop.and166 = and i32 %259, 1431655765
  %ctpop.sh67 = lshr i32 %259, 1
  %cppop.and268 = and i32 %ctpop.sh67, 1431655765
  %ctpop.step69 = add i32 %cppop.and166, %cppop.and268
  %cppop.and170 = and i32 %ctpop.step69, 858993459
  %ctpop.sh71 = lshr i32 %ctpop.step69, 2
  %cppop.and272 = and i32 %ctpop.sh71, 858993459
  %ctpop.step73 = add i32 %cppop.and170, %cppop.and272
  %cppop.and174 = and i32 %ctpop.step73, 252645135
  %ctpop.sh75 = lshr i32 %ctpop.step73, 4
  %cppop.and276 = and i32 %ctpop.sh75, 252645135
  %ctpop.step77 = add i32 %cppop.and174, %cppop.and276
  %cppop.and178 = and i32 %ctpop.step77, 16711935
  %ctpop.sh79 = lshr i32 %ctpop.step77, 8
  %cppop.and280 = and i32 %ctpop.sh79, 16711935
  %ctpop.step81 = add i32 %cppop.and178, %cppop.and280
  %cppop.and182 = and i32 %ctpop.step81, 65535
  %ctpop.sh83 = lshr i32 %ctpop.step81, 16
  %cppop.and284 = and i32 %ctpop.sh83, 65535
  %ctpop.step85 = add i32 %cppop.and182, %cppop.and284
  %ctpop.part86 = add i32 %ctpop.step85, 0
  %260 = add nsw i32 %ctpop.part86, -8
  %261 = shl i32 %54, %260
  %262 = sub nsw i32 9, %ctpop.part86
  br label %263

263:                                              ; preds = %258, %228
  %264 = phi i32 [ %262, %258 ], [ %56, %228 ]
  %265 = phi i32 [ %261, %258 ], [ %54, %228 ]
  %266 = zext i32 %265 to i64
  %267 = shl i64 %266, 39
  %268 = or i64 %267, 4611686018427387904
  %269 = sub nsw i32 %243, %264
  %270 = icmp eq i8 %153, %145
  %271 = icmp sgt i32 %269, 0
  br i1 %270, label %272, label %314

272:                                              ; preds = %263
  br i1 %271, label %273, label %285

273:                                              ; preds = %272
  %274 = icmp ult i32 %269, 64
  br i1 %274, label %275, label %302

275:                                              ; preds = %273
  %276 = zext i32 %269 to i64
  %277 = lshr i64 %268, %276
  %278 = sub nsw i32 0, %269
  %279 = and i32 %278, 63
  %280 = zext i32 %279 to i64
  %281 = shl i64 %268, %280
  %282 = icmp ne i64 %281, 0
  %283 = zext i1 %282 to i64
  %284 = or i64 %277, %283
  br label %302

285:                                              ; preds = %272
  %286 = icmp slt i32 %269, 0
  br i1 %286, label %287, label %302

287:                                              ; preds = %285
  %288 = sub nsw i32 0, %269
  %289 = icmp ult i32 %288, 64
  br i1 %289, label %290, label %299

290:                                              ; preds = %287
  %291 = zext i32 %288 to i64
  %292 = lshr i64 %241, %291
  %293 = and i32 %269, 63
  %294 = zext i32 %293 to i64
  %295 = shl i64 %241, %294
  %296 = icmp ne i64 %295, 0
  %297 = zext i1 %296 to i64
  %298 = or i64 %292, %297
  br label %302

299:                                              ; preds = %287
  %300 = icmp ne i64 %241, 0
  %301 = zext i1 %300 to i64
  br label %302

302:                                              ; preds = %299, %290, %275, %273, %285
  %303 = phi i64 [ %241, %285 ], [ %241, %273 ], [ %241, %275 ], [ %298, %290 ], [ %301, %299 ]
  %304 = phi i64 [ %268, %285 ], [ 1, %273 ], [ %284, %275 ], [ %268, %290 ], [ %268, %299 ]
  %305 = phi i32 [ %264, %285 ], [ %243, %273 ], [ %243, %275 ], [ %264, %290 ], [ %264, %299 ]
  %306 = add i64 %304, %303
  %307 = icmp slt i64 %306, 0
  br i1 %307, label %308, label %312

308:                                              ; preds = %302
  %309 = lshr i64 %306, 1
  %310 = and i64 %306, 1
  %311 = or i64 %309, %310
  br label %376

312:                                              ; preds = %302
  %313 = add nsw i32 %305, -1
  br label %376

314:                                              ; preds = %263
  br i1 %271, label %315, label %330

315:                                              ; preds = %314
  %316 = icmp ult i32 %269, 64
  br i1 %316, label %317, label %327

317:                                              ; preds = %315
  %318 = zext i32 %269 to i64
  %319 = lshr i64 %268, %318
  %320 = sub nsw i32 0, %269
  %321 = and i32 %320, 63
  %322 = zext i32 %321 to i64
  %323 = shl i64 %268, %322
  %324 = icmp ne i64 %323, 0
  %325 = zext i1 %324 to i64
  %326 = or i64 %319, %325
  br label %327

327:                                              ; preds = %315, %317
  %328 = phi i64 [ %326, %317 ], [ 1, %315 ]
  %329 = sub i64 %241, %328
  br label %366

330:                                              ; preds = %314
  %331 = icmp slt i32 %269, 0
  br i1 %331, label %332, label %351

332:                                              ; preds = %330
  %333 = sub nsw i32 0, %269
  %334 = icmp ult i32 %333, 64
  br i1 %334, label %335, label %344

335:                                              ; preds = %332
  %336 = zext i32 %333 to i64
  %337 = lshr i64 %241, %336
  %338 = and i32 %269, 63
  %339 = zext i32 %338 to i64
  %340 = shl i64 %241, %339
  %341 = icmp ne i64 %340, 0
  %342 = zext i1 %341 to i64
  %343 = or i64 %337, %342
  br label %347

344:                                              ; preds = %332
  %345 = icmp ne i64 %241, 0
  %346 = zext i1 %345 to i64
  br label %347

347:                                              ; preds = %335, %344
  %348 = phi i64 [ %343, %335 ], [ %346, %344 ]
  %349 = sub i64 %268, %348
  %350 = xor i8 %245, 1
  br label %366

351:                                              ; preds = %330
  %352 = icmp ult i64 %268, %241
  br i1 %352, label %353, label %355

353:                                              ; preds = %351
  %354 = sub i64 %241, %268
  br label %366

355:                                              ; preds = %351
  %356 = icmp ult i64 %241, %268
  br i1 %356, label %357, label %360

357:                                              ; preds = %355
  %358 = sub i64 %268, %241
  %359 = xor i8 %245, 1
  br label %366

360:                                              ; preds = %355
  %361 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 1
  %362 = load i8, i8* %361, align 1
  %363 = icmp eq i8 %362, 1
  %364 = xor i1 %147, %363
  %365 = select i1 %364, i32 -2147483648, i32 0
  br label %387

366:                                              ; preds = %347, %357, %353, %327
  %367 = phi i64 [ %329, %327 ], [ %349, %347 ], [ %354, %353 ], [ %358, %357 ]
  %368 = phi i32 [ %243, %327 ], [ %264, %347 ], [ %243, %353 ], [ %243, %357 ]
  %369 = phi i8 [ %245, %327 ], [ %350, %347 ], [ %245, %353 ], [ %359, %357 ]
  %ctlz.sh87 = lshr i64 %367, 1
  %ctlz.step88 = or i64 %367, %ctlz.sh87
  %ctlz.sh89 = lshr i64 %ctlz.step88, 2
  %ctlz.step90 = or i64 %ctlz.step88, %ctlz.sh89
  %ctlz.sh91 = lshr i64 %ctlz.step90, 4
  %ctlz.step92 = or i64 %ctlz.step90, %ctlz.sh91
  %ctlz.sh93 = lshr i64 %ctlz.step92, 8
  %ctlz.step94 = or i64 %ctlz.step92, %ctlz.sh93
  %ctlz.sh95 = lshr i64 %ctlz.step94, 16
  %ctlz.step96 = or i64 %ctlz.step94, %ctlz.sh95
  %ctlz.sh97 = lshr i64 %ctlz.step96, 32
  %ctlz.step98 = or i64 %ctlz.step96, %ctlz.sh97
  %370 = xor i64 %ctlz.step98, -1
  %cppop.and199 = and i64 %370, 6148914691236517205
  %ctpop.sh100 = lshr i64 %370, 1
  %cppop.and2101 = and i64 %ctpop.sh100, 6148914691236517205
  %ctpop.step102 = add i64 %cppop.and199, %cppop.and2101
  %cppop.and1103 = and i64 %ctpop.step102, 3689348814741910323
  %ctpop.sh104 = lshr i64 %ctpop.step102, 2
  %cppop.and2105 = and i64 %ctpop.sh104, 3689348814741910323
  %ctpop.step106 = add i64 %cppop.and1103, %cppop.and2105
  %cppop.and1107 = and i64 %ctpop.step106, 1085102592571150095
  %ctpop.sh108 = lshr i64 %ctpop.step106, 4
  %cppop.and2109 = and i64 %ctpop.sh108, 1085102592571150095
  %ctpop.step110 = add i64 %cppop.and1107, %cppop.and2109
  %cppop.and1111 = and i64 %ctpop.step110, 71777214294589695
  %ctpop.sh112 = lshr i64 %ctpop.step110, 8
  %cppop.and2113 = and i64 %ctpop.sh112, 71777214294589695
  %ctpop.step114 = add i64 %cppop.and1111, %cppop.and2113
  %cppop.and1115 = and i64 %ctpop.step114, 281470681808895
  %ctpop.sh116 = lshr i64 %ctpop.step114, 16
  %cppop.and2117 = and i64 %ctpop.sh116, 281470681808895
  %ctpop.step118 = add i64 %cppop.and1115, %cppop.and2117
  %cppop.and1119 = and i64 %ctpop.step118, 4294967295
  %ctpop.sh120 = lshr i64 %ctpop.step118, 32
  %cppop.and2121 = and i64 %ctpop.sh120, 4294967295
  %ctpop.step122 = add i64 %cppop.and1119, %cppop.and2121
  %ctpop.part123 = add i64 %ctpop.step122, 0
  %371 = trunc i64 %ctpop.part123 to i32
  %372 = add nuw nsw i64 %ctpop.part123, 4294967295
  %373 = and i64 %372, 4294967295
  %374 = shl i64 %367, %373
  %375 = sub nsw i32 %368, %371
  br label %376

376:                                              ; preds = %308, %312, %366
  %377 = phi i64 [ %311, %308 ], [ %306, %312 ], [ %374, %366 ]
  %378 = phi i32 [ %305, %308 ], [ %313, %312 ], [ %375, %366 ]
  %379 = phi i8 [ %245, %308 ], [ %245, %312 ], [ %369, %366 ]
  %380 = lshr i64 %377, 32
  %381 = and i64 %377, 4294967295
  %382 = icmp ne i64 %381, 0
  %383 = zext i1 %382 to i64
  %384 = or i64 %380, %383
  %385 = trunc i64 %384 to i32
  %386 = tail call fastcc i32 @roundAndPackFloat32(i8 noundef zeroext %379, i32 noundef %378, i32 noundef %385, %struct.float_status* noundef nonnull %4)
  br label %387

387:                                              ; preds = %131, %125, %119, %114, %110, %376, %360, %249, %210, %202, %192, %174, %167, %163, %138
  %388 = phi i32 [ -4194304, %138 ], [ -4194304, %163 ], [ %172, %167 ], [ %179, %174 ], [ %197, %192 ], [ %209, %202 ], [ %212, %210 ], [ %386, %376 ], [ %365, %360 ], [ %257, %249 ], [ %136, %131 ], [ %130, %125 ], [ %124, %119 ], [ -4194304, %110 ], [
  ret i32 %388
}

; Function Attrs: nofree nosync nounwind uwtable
define i32 @float32_sqrt(i32 noundef %0, %struct.float_status* nocapture noundef %1) local_unnamed_addr #20 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = and i32 %0, 2139095040
  %8 = icmp ne i32 %7, 0
  %9 = and i32 %0, 8388607
  %10 = icmp eq i32 %9, 0
  %11 = or i1 %8, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, 64
  store i8 %15, i8* %13, align 1
  %16 = and i32 %0, -2147483648
  br label %17

17:                                               ; preds = %2, %6, %12
  %18 = phi i32 [ %16, %12 ], [ %0, %6 ], [ %0, %2 ]
  %19 = and i32 %18, 8388607
  %20 = lshr i32 %18, 23
  %21 = and i32 %20, 255
  %22 = icmp eq i32 %21, 255
  br i1 %22, label %23, label %55

23:                                               ; preds = %17
  %24 = icmp eq i32 %19, 0
  br i1 %24, label %49, label %25

25:                                               ; preds = %23
  %26 = shl i32 %18, 1
  %27 = icmp ugt i32 %26, -8388609
  %28 = and i32 %18, 2143289344
  %29 = icmp eq i32 %28, 2139095040
  %30 = and i32 %18, 4194303
  %31 = icmp ne i32 %30, 0
  %32 = and i1 %29, %31
  br i1 %32, label %33, label %37

33:                                               ; preds = %25
  %34 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %35 = load i8, i8* %34, align 1
  %36 = or i8 %35, 1
  store i8 %36, i8* %34, align 1
  br label %37

37:                                               ; preds = %33, %25
  %38 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 6
  %39 = load i8, i8* %38, align 1
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %41, label %162

41:                                               ; preds = %37
  %42 = or i1 %27, %32
  br i1 %42, label %43, label %162

43:                                               ; preds = %41
  %44 = icmp ne i32 %28, 2139095040
  %45 = icmp eq i32 %30, 0
  %46 = or i1 %44, %45
  %47 = or i32 %18, 4194304
  %48 = select i1 %46, i32 %18, i32 %47
  br label %162

49:                                               ; preds = %23
  %50 = icmp sgt i32 %18, -1
  br i1 %50, label %162, label %51

51:                                               ; preds = %49
  %52 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %53 = load i8, i8* %52, align 1
  %54 = or i8 %53, 1
  store i8 %54, i8* %52, align 1
  br label %162

55:                                               ; preds = %17
  %56 = icmp sgt i32 %18, -1
  br i1 %56, label %64, label %57

57:                                               ; preds = %55
  %58 = or i32 %21, %19
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %162, label %60

60:                                               ; preds = %57
  %61 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %62 = load i8, i8* %61, align 1
  %63 = or i8 %62, 1
  store i8 %63, i8* %61, align 1
  br label %162

64:                                               ; preds = %55
  %65 = icmp eq i32 %21, 0
  br i1 %65, label %66, label %73

66:                                               ; preds = %64
  %67 = icmp eq i32 %19, 0
  br i1 %67, label %162, label %68

68:                                               ; preds = %66
  %ctlz.sh = lshr i32 %19, 1
  %ctlz.step = or i32 %19, %ctlz.sh
  %ctlz.sh1 = lshr i32 %ctlz.step, 2
  %ctlz.step2 = or i32 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i32 %ctlz.step2, 4
  %ctlz.step4 = or i32 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i32 %ctlz.step4, 8
  %ctlz.step6 = or i32 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i32 %ctlz.step6, 16
  %ctlz.step8 = or i32 %ctlz.step6, %ctlz.sh7
  %69 = xor i32 %ctlz.step8, -1
  %cppop.and1 = and i32 %69, 1431655765
  %ctpop.sh = lshr i32 %69, 1
  %cppop.and2 = and i32 %ctpop.sh, 1431655765
  %ctpop.step = add i32 %cppop.and1, %cppop.and2
  %cppop.and19 = and i32 %ctpop.step, 858993459
  %ctpop.sh10 = lshr i32 %ctpop.step, 2
  %cppop.and211 = and i32 %ctpop.sh10, 858993459
  %ctpop.step12 = add i32 %cppop.and19, %cppop.and211
  %cppop.and113 = and i32 %ctpop.step12, 252645135
  %ctpop.sh14 = lshr i32 %ctpop.step12, 4
  %cppop.and215 = and i32 %ctpop.sh14, 252645135
  %ctpop.step16 = add i32 %cppop.and113, %cppop.and215
  %cppop.and117 = and i32 %ctpop.step16, 16711935
  %ctpop.sh18 = lshr i32 %ctpop.step16, 8
  %cppop.and219 = and i32 %ctpop.sh18, 16711935
  %ctpop.step20 = add i32 %cppop.and117, %cppop.and219
  %cppop.and121 = and i32 %ctpop.step20, 65535
  %ctpop.sh22 = lshr i32 %ctpop.step20, 16
  %cppop.and223 = and i32 %ctpop.sh22, 65535
  %ctpop.step24 = add i32 %cppop.and121, %cppop.and223
  %ctpop.part = add i32 %ctpop.step24, 0
  %70 = add nsw i32 %ctpop.part, -8
  %71 = shl i32 %19, %70
  %72 = sub nsw i32 9, %ctpop.part
  br label %73

73:                                               ; preds = %68, %64
  %74 = phi i32 [ %72, %68 ], [ %21, %64 ]
  %75 = phi i32 [ %71, %68 ], [ %19, %64 ]
  %76 = add nsw i32 %74, -127
  %77 = ashr i32 %76, 1
  %78 = add nsw i32 %77, 126
  %79 = shl i32 %75, 8
  %80 = or i32 %79, -2147483648
  %81 = lshr i32 %79, 27
  %82 = trunc i32 %81 to i8
  %83 = and i8 %82, 15
  %84 = and i32 %74, 1
  %85 = icmp eq i32 %84, 0
  %86 = lshr i32 %80, 17
  br i1 %85, label %99, label %87

87:                                               ; preds = %73
  %88 = add nuw nsw i32 %86, 16384
  %89 = zext i8 %83 to i64
  %90 = getelementptr inbounds [16 x i16], [16 x i16]* @estimateSqrt32.sqrtOddAdjustments, i64 0, i64 %89
  %91 = load i16, i16* %90, align 2
  %92 = zext i16 %91 to i32
  %93 = sub nsw i32 %88, %92
  %94 = udiv i32 %80, %93
  %95 = shl i32 %94, 14
  %96 = shl nsw i32 %93, 15
  %97 = add i32 %96, %95
  %98 = lshr exact i32 %80, 1
  br label %114

99:                                               ; preds = %73
  %100 = or i32 %86, 32768
  %101 = zext i8 %83 to i64
  %102 = getelementptr inbounds [16 x i16], [16 x i16]* @estimateSqrt32.sqrtEvenAdjustments, i64 0, i64 %101
  %103 = load i16, i16* %102, align 2
  %104 = zext i16 %103 to i32
  %105 = sub nsw i32 %100, %104
  %106 = udiv i32 %80, %105
  %107 = add i32 %105, %106
  %108 = icmp ugt i32 %107, 131071
  %109 = shl i32 %107, 15
  %110 = select i1 %108, i32 -32768, i32 %109
  %111 = icmp ugt i32 %110, %80
  br i1 %111, label %114, label %112

112:                                              ; preds = %99
  %113 = ashr exact i32 %80, 1
  br label %124

114:                                              ; preds = %99, %87
  %115 = phi i32 [ %98, %87 ], [ %80, %99 ]
  %116 = phi i32 [ %97, %87 ], [ %110, %99 ]
  %117 = zext i32 %115 to i64
  %118 = shl nuw nsw i64 %117, 31
  %119 = zext i32 %116 to i64
  %120 = udiv i64 %118, %119
  %121 = trunc i64 %120 to i32
  %122 = lshr i32 %116, 1
  %123 = add i32 %122, %121
  br label %124

124:                                              ; preds = %112, %114
  %125 = phi i32 [ %123, %114 ], [ %113, %112 ]
  %126 = add i32 %125, 2
  %127 = and i32 %126, 126
  %128 = icmp ult i32 %127, 6
  br i1 %128, label %129, label %154

129:                                              ; preds = %124
  %130 = icmp ugt i32 %125, -3
  br i1 %130, label %159, label %131

131:                                              ; preds = %129
  %132 = lshr i32 %80, %84
  %133 = zext i32 %126 to i64
  %134 = mul nuw i64 %133, %133
  %135 = zext i32 %132 to i64
  %136 = shl nuw i64 %135, 32
  %137 = sub i64 %136, %134
  %138 = icmp slt i64 %137, 0
  br i1 %138, label %139, label %148

139:                                              ; preds = %131, %139
  %140 = phi i64 [ %146, %139 ], [ %137, %131 ]
  %141 = phi i32 [ %142, %139 ], [ %126, %131 ]
  %142 = add i32 %141, -1
  %143 = zext i32 %142 to i64
  %144 = shl nuw nsw i64 %143, 1
  %145 = add nsw i64 %140, 1
  %146 = add nsw i64 %145, %144
  %147 = icmp slt i64 %146, 0
  br i1 %147, label %139, label %148, !llvm.loop !53

148:                                              ; preds = %139, %131
  %149 = phi i32 [ %126, %131 ], [ %142, %139 ]
  %150 = phi i64 [ %137, %131 ], [ %146, %139 ]
  %151 = icmp ne i64 %150, 0
  %152 = zext i1 %151 to i32
  %153 = or i32 %149, %152
  br label %154

154:                                              ; preds = %148, %124
  %155 = phi i32 [ %153, %148 ], [ %126, %124 ]
  %156 = lshr i32 %155, 1
  %157 = and i32 %155, 1
  %158 = or i32 %156, %157
  br label %159

159:                                              ; preds = %129, %154
  %160 = phi i32 [ %158, %154 ], [ 2147483647, %129 ]
  %161 = tail call fastcc i32 @roundAndPackFloat32(i8 noundef zeroext 0, i32 noundef %78, i32 noundef %160, %struct.float_status* noundef %1)
  br label %162

162:                                              ; preds = %41, %43, %37, %66, %57, %49, %159, %60, %51
  %163 = phi i32 [ -4194304, %51 ], [ -4194304, %60 ], [ %161, %159 ], [ %18, %49 ], [ %18, %57 ], [ 0, %66 ], [ %48, %43 ], [ -4194304, %37 ], [ 0, %41 ]
  ret i32 %163
}

; Function Attrs: nofree nosync nounwind uwtable
define i32 @float32_exp2(i32 noundef %0, %struct.float_status* nocapture noundef %1) local_unnamed_addr #20 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = and i32 %0, 2139095040
  %8 = icmp ne i32 %7, 0
  %9 = and i32 %0, 8388607
  %10 = icmp eq i32 %9, 0
  %11 = or i1 %8, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, 64
  store i8 %15, i8* %13, align 1
  %16 = and i32 %0, -2147483648
  br label %17

17:                                               ; preds = %2, %6, %12
  %18 = phi i32 [ %16, %12 ], [ %0, %6 ], [ %0, %2 ]
  %19 = and i32 %18, 8388607
  %20 = lshr i32 %18, 23
  %21 = and i32 %20, 255
  %22 = icmp eq i32 %21, 255
  br i1 %22, label %23, label %52

23:                                               ; preds = %17
  %24 = icmp eq i32 %19, 0
  br i1 %24, label %49, label %25

25:                                               ; preds = %23
  %26 = shl i32 %18, 1
  %27 = icmp ugt i32 %26, -8388609
  %28 = and i32 %18, 2143289344
  %29 = icmp eq i32 %28, 2139095040
  %30 = and i32 %18, 4194303
  %31 = icmp ne i32 %30, 0
  %32 = and i1 %29, %31
  br i1 %32, label %33, label %37

33:                                               ; preds = %25
  %34 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %35 = load i8, i8* %34, align 1
  %36 = or i8 %35, 1
  store i8 %36, i8* %34, align 1
  br label %37

37:                                               ; preds = %33, %25
  %38 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 6
  %39 = load i8, i8* %38, align 1
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %41, label %110

41:                                               ; preds = %37
  %42 = or i1 %27, %32
  br i1 %42, label %43, label %110

43:                                               ; preds = %41
  %44 = icmp ne i32 %28, 2139095040
  %45 = icmp eq i32 %30, 0
  %46 = or i1 %44, %45
  %47 = or i32 %18, 4194304
  %48 = select i1 %46, i32 %18, i32 %47
  br label %110

49:                                               ; preds = %23
  %50 = icmp sgt i32 %18, 0
  %51 = select i1 %50, i32 %18, i32 0
  br label %110

52:                                               ; preds = %17
  %53 = or i32 %21, %19
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %110, label %55

55:                                               ; preds = %52
  %56 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %57 = load i8, i8* %56, align 1
  %58 = or i8 %57, 32
  store i8 %58, i8* %56, align 1
  %59 = tail call i64 @float32_to_float64(i32 noundef %18, %struct.float_status* noundef nonnull %1)
  %60 = tail call i64 @float64_mul(i64 noundef %59, i64 noundef 4604418534313441775, %struct.float_status* noundef nonnull %1)
  br label %61

61:                                               ; preds = %55, %103
  %62 = phi i64 [ 0, %55 ], [ %106, %103 ]
  %63 = phi i64 [ %60, %55 ], [ %105, %103 ]
  %64 = phi i64 [ 4607182418800017408, %55 ], [ %104, %103 ]
  %65 = getelementptr inbounds [15 x i64], [15 x i64]* @float32_exp2_coefficients, i64 0, i64 %62
  %66 = load i64, i64* %65, align 8
  %67 = tail call i64 @float64_mul(i64 noundef %63, i64 noundef %66, %struct.float_status* noundef nonnull %1)
  %68 = load i8, i8* %3, align 1
  %69 = icmp eq i8 %68, 0
  br i1 %69, label %91, label %70

70:                                               ; preds = %61
  %71 = and i64 %64, 9218868437227405312
  %72 = icmp ne i64 %71, 0
  %73 = and i64 %64, 4503599627370495
  %74 = icmp eq i64 %73, 0
  %75 = or i1 %72, %74
  br i1 %75, label %80, label %76

76:                                               ; preds = %70
  %77 = load i8, i8* %56, align 1
  %78 = or i8 %77, 64
  store i8 %78, i8* %56, align 1
  %79 = and i64 %64, -9223372036854775808
  br label %80

80:                                               ; preds = %76, %70
  %81 = phi i64 [ %64, %70 ], [ %79, %76 ]
  %82 = and i64 %67, 9218868437227405312
  %83 = icmp ne i64 %82, 0
  %84 = and i64 %67, 4503599627370495
  %85 = icmp eq i64 %84, 0
  %86 = or i1 %83, %85
  br i1 %86, label %91, label %87

87:                                               ; preds = %80
  %88 = load i8, i8* %56, align 1
  %89 = or i8 %88, 64
  store i8 %89, i8* %56, align 1
  %90 = and i64 %67, -9223372036854775808
  br label %91

91:                                               ; preds = %87, %80, %61
  %92 = phi i64 [ %81, %87 ], [ %81, %80 ], [ %64, %61 ]
  %93 = phi i64 [ %90, %87 ], [ %67, %80 ], [ %67, %61 ]
  %94 = lshr i64 %92, 63
  %95 = trunc i64 %94 to i8
  %96 = lshr i64 %93, 63
  %97 = trunc i64 %96 to i8
  %98 = icmp eq i8 %95, %97
  br i1 %98, label %99, label %101

99:                                               ; preds = %91
  %100 = tail call fastcc i64 @addFloat64Sigs(i64 noundef %92, i64 noundef %93, i8 noundef zeroext %95, %struct.float_status* noundef nonnull %1) #30
  br label %103

101:                                              ; preds = %91
  %102 = tail call fastcc i64 @subFloat64Sigs(i64 noundef %92, i64 noundef %93, i8 noundef zeroext %95, %struct.float_status* noundef nonnull %1) #30
  br label %103

103:                                              ; preds = %99, %101
  %104 = phi i64 [ %100, %99 ], [ %102, %101 ]
  %105 = tail call i64 @float64_mul(i64 noundef %63, i64 noundef %60, %struct.float_status* noundef nonnull %1)
  %106 = add nuw nsw i64 %62, 1
  %107 = icmp eq i64 %106, 15
  br i1 %107, label %108, label %61, !llvm.loop !54

108:                                              ; preds = %103
  %109 = tail call i32 @float64_to_float32(i64 noundef %104, %struct.float_status* noundef nonnull %1)
  br label %110

110:                                              ; preds = %41, %43, %37, %52, %108, %49
  %111 = phi i32 [ %51, %49 ], [ %109, %108 ], [ 1065353216, %52 ], [ %48, %43 ], [ -4194304, %37 ], [ 0, %41 ]
  ret i32 %111
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define i64 @float64_mul(i64 noundef %0, i64 noundef %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #14 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i64 %0, 9218868437227405312
  %9 = icmp ne i64 %8, 0
  %10 = and i64 %0, 4503599627370495
  %11 = icmp eq i64 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i64 %0, -9223372036854775808
  br label %18

18:                                               ; preds = %7, %13
  %19 = phi i64 [ %0, %7 ], [ %17, %13 ]
  %20 = and i64 %1, 9218868437227405312
  %21 = icmp ne i64 %20, 0
  %22 = and i64 %1, 4503599627370495
  %23 = icmp eq i64 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i64 %1, -9223372036854775808
  br label %30

30:                                               ; preds = %3, %18, %25
  %31 = phi i64 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i64 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = and i64 %31, 4503599627370495
  %34 = lshr i64 %31, 52
  %35 = trunc i64 %34 to i32
  %36 = and i32 %35, 2047
  %37 = and i64 %32, 4503599627370495
  %38 = lshr i64 %32, 52
  %39 = trunc i64 %38 to i32
  %40 = and i32 %39, 2047
  %41 = xor i64 %32, %31
  %42 = lshr i64 %41, 63
  %43 = trunc i64 %42 to i8
  %44 = icmp eq i32 %36, 2047
  br i1 %44, label %45, label %116

45:                                               ; preds = %30
  %46 = icmp eq i64 %33, 0
  br i1 %46, label %47, label %51

47:                                               ; preds = %45
  %48 = icmp eq i32 %40, 2047
  %49 = icmp ne i64 %37, 0
  %50 = and i1 %49, %48
  br i1 %50, label %51, label %105

51:                                               ; preds = %47, %45
  %52 = shl i64 %31, 1
  %53 = icmp ult i64 %52, -4503599627370496
  %54 = and i64 %31, 9221120237041090560
  %55 = icmp eq i64 %54, 9218868437227405312
  %56 = and i64 %31, 2251799813685247
  %57 = icmp ne i64 %56, 0
  %58 = and i1 %55, %57
  %59 = shl i64 %32, 1
  %60 = icmp ugt i64 %59, -4503599627370497
  %61 = and i64 %32, 9221120237041090560
  %62 = icmp eq i64 %61, 9218868437227405312
  %63 = and i64 %32, 2251799813685247
  %64 = icmp ne i64 %63, 0
  %65 = and i1 %62, %64
  %66 = zext i1 %65 to i8
  %67 = or i1 %58, %65
  br i1 %67, label %68, label %72

68:                                               ; preds = %51
  %69 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %70 = load i8, i8* %69, align 1
  %71 = or i8 %70, 1
  store i8 %71, i8* %69, align 1
  br label %72

72:                                               ; preds = %68, %51
  %73 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %74 = load i8, i8* %73, align 1
  %75 = icmp eq i8 %74, 0
  br i1 %75, label %76, label %253

76:                                               ; preds = %72
  %77 = icmp ult i64 %52, %59
  br i1 %77, label %83, label %78

78:                                               ; preds = %76
  %79 = icmp ult i64 %59, %52
  br i1 %79, label %83, label %80

80:                                               ; preds = %78
  %81 = icmp ult i64 %31, %32
  %82 = zext i1 %81 to i8
  br label %83

83:                                               ; preds = %80, %78, %76
  %84 = phi i8 [ %82, %80 ], [ 0, %76 ], [ 1, %78 ]
  br i1 %58, label %90, label %85

85:                                               ; preds = %83
  br i1 %53, label %93, label %86

86:                                               ; preds = %85
  %87 = or i8 %84, %66
  %88 = icmp eq i8 %87, 0
  %89 = and i1 %60, %88
  br i1 %89, label %93, label %99

90:                                               ; preds = %83
  %91 = icmp eq i8 %84, 0
  %92 = select i1 %65, i1 %91, i1 %60
  br i1 %92, label %93, label %99

93:                                               ; preds = %90, %86, %85
  %94 = icmp ne i64 %61, 9218868437227405312
  %95 = icmp eq i64 %63, 0
  %96 = or i1 %94, %95
  %97 = or i64 %32, 2251799813685248
  %98 = select i1 %96, i64 %32, i64 %97
  br label %253

99:                                               ; preds = %90, %86
  %100 = icmp ne i64 %54, 9218868437227405312
  %101 = icmp eq i64 %56, 0
  %102 = or i1 %100, %101
  %103 = or i64 %31, 2251799813685248
  %104 = select i1 %102, i64 %31, i64 %103
  br label %253

105:                                              ; preds = %47
  %106 = zext i32 %40 to i64
  %107 = or i64 %37, %106
  %108 = icmp eq i64 %107, 0
  br i1 %108, label %109, label %113

109:                                              ; preds = %105
  %110 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %111 = load i8, i8* %110, align 1
  %112 = or i8 %111, 1
  store i8 %112, i8* %110, align 1
  br label %253

113:                                              ; preds = %105
  %114 = and i64 %41, -9223372036854775808
  %115 = or i64 %114, 9218868437227405312
  br label %253

116:                                              ; preds = %30
  %117 = icmp eq i32 %40, 2047
  br i1 %117, label %118, label %185

118:                                              ; preds = %116
  %119 = icmp eq i64 %37, 0
  br i1 %119, label %174, label %120

120:                                              ; preds = %118
  %121 = shl i64 %31, 1
  %122 = icmp ult i64 %121, -4503599627370496
  %123 = and i64 %31, 9221120237041090560
  %124 = icmp eq i64 %123, 9218868437227405312
  %125 = and i64 %31, 2251799813685247
  %126 = icmp ne i64 %125, 0
  %127 = and i1 %124, %126
  %128 = shl i64 %32, 1
  %129 = icmp ugt i64 %128, -4503599627370497
  %130 = and i64 %32, 9221120237041090560
  %131 = icmp eq i64 %130, 9218868437227405312
  %132 = and i64 %32, 2251799813685247
  %133 = icmp ne i64 %132, 0
  %134 = and i1 %131, %133
  %135 = zext i1 %134 to i8
  %136 = or i1 %127, %134
  br i1 %136, label %137, label %141

137:                                              ; preds = %120
  %138 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %139 = load i8, i8* %138, align 1
  %140 = or i8 %139, 1
  store i8 %140, i8* %138, align 1
  br label %141

141:                                              ; preds = %137, %120
  %142 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %143 = load i8, i8* %142, align 1
  %144 = icmp eq i8 %143, 0
  br i1 %144, label %145, label %253

145:                                              ; preds = %141
  %146 = icmp ult i64 %121, %128
  br i1 %146, label %152, label %147

147:                                              ; preds = %145
  %148 = icmp ult i64 %128, %121
  br i1 %148, label %152, label %149

149:                                              ; preds = %147
  %150 = icmp ult i64 %31, %32
  %151 = zext i1 %150 to i8
  br label %152

152:                                              ; preds = %149, %147, %145
  %153 = phi i8 [ %151, %149 ], [ 0, %145 ], [ 1, %147 ]
  br i1 %127, label %159, label %154

154:                                              ; preds = %152
  br i1 %122, label %162, label %155

155:                                              ; preds = %154
  %156 = or i8 %153, %135
  %157 = icmp eq i8 %156, 0
  %158 = and i1 %129, %157
  br i1 %158, label %162, label %168

159:                                              ; preds = %152
  %160 = icmp eq i8 %153, 0
  %161 = select i1 %134, i1 %160, i1 %129
  br i1 %161, label %162, label %168

162:                                              ; preds = %159, %155, %154
  %163 = icmp ne i64 %130, 9218868437227405312
  %164 = icmp eq i64 %132, 0
  %165 = or i1 %163, %164
  %166 = or i64 %32, 2251799813685248
  %167 = select i1 %165, i64 %32, i64 %166
  br label %253

168:                                              ; preds = %159, %155
  %169 = icmp ne i64 %123, 9218868437227405312
  %170 = icmp eq i64 %125, 0
  %171 = or i1 %169, %170
  %172 = or i64 %31, 2251799813685248
  %173 = select i1 %171, i64 %31, i64 %172
  br label %253

174:                                              ; preds = %118
  %175 = zext i32 %36 to i64
  %176 = or i64 %33, %175
  %177 = icmp eq i64 %176, 0
  br i1 %177, label %178, label %182

178:                                              ; preds = %174
  %179 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %180 = load i8, i8* %179, align 1
  %181 = or i8 %180, 1
  store i8 %181, i8* %179, align 1
  br label %253

182:                                              ; preds = %174
  %183 = and i64 %41, -9223372036854775808
  %184 = or i64 %183, 9218868437227405312
  br label %253

185:                                              ; preds = %116
  %186 = icmp eq i32 %36, 0
  br i1 %186, label %187, label %200

187:                                              ; preds = %185
  %188 = icmp eq i64 %33, 0
  br i1 %188, label %189, label %191

189:                                              ; preds = %187
  %190 = and i64 %41, -9223372036854775808
  br label %253

191:                                              ; preds = %187
  %ctlz.sh = lshr i64 %33, 1
  %ctlz.step = or i64 %33, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %192 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %192, 6148914691236517205
  %ctpop.sh = lshr i64 %192, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %193 = trunc i64 %ctpop.part to i32
  %194 = shl nuw nsw i32 %193, 24
  %195 = add nsw i32 %194, -184549376
  %196 = ashr exact i32 %195, 24
  %197 = zext i32 %196 to i64
  %198 = shl i64 %33, %197
  %199 = sub nsw i32 1, %196
  br label %200

200:                                              ; preds = %191, %185
  %201 = phi i64 [ %198, %191 ], [ %33, %185 ]
  %202 = phi i32 [ %199, %191 ], [ %36, %185 ]
  %203 = icmp eq i32 %40, 0
  br i1 %203, label %204, label %217

204:                                              ; preds = %200
  %205 = icmp eq i64 %37, 0
  br i1 %205, label %206, label %208

206:                                              ; preds = %204
  %207 = and i64 %41, -9223372036854775808
  br label %253

208:                                              ; preds = %204
  %ctlz.sh31 = lshr i64 %37, 1
  %ctlz.step32 = or i64 %37, %ctlz.sh31
  %ctlz.sh33 = lshr i64 %ctlz.step32, 2
  %ctlz.step34 = or i64 %ctlz.step32, %ctlz.sh33
  %ctlz.sh35 = lshr i64 %ctlz.step34, 4
  %ctlz.step36 = or i64 %ctlz.step34, %ctlz.sh35
  %ctlz.sh37 = lshr i64 %ctlz.step36, 8
  %ctlz.step38 = or i64 %ctlz.step36, %ctlz.sh37
  %ctlz.sh39 = lshr i64 %ctlz.step38, 16
  %ctlz.step40 = or i64 %ctlz.step38, %ctlz.sh39
  %ctlz.sh41 = lshr i64 %ctlz.step40, 32
  %ctlz.step42 = or i64 %ctlz.step40, %ctlz.sh41
  %209 = xor i64 %ctlz.step42, -1
  %cppop.and143 = and i64 %209, 6148914691236517205
  %ctpop.sh44 = lshr i64 %209, 1
  %cppop.and245 = and i64 %ctpop.sh44, 6148914691236517205
  %ctpop.step46 = add i64 %cppop.and143, %cppop.and245
  %cppop.and147 = and i64 %ctpop.step46, 3689348814741910323
  %ctpop.sh48 = lshr i64 %ctpop.step46, 2
  %cppop.and249 = and i64 %ctpop.sh48, 3689348814741910323
  %ctpop.step50 = add i64 %cppop.and147, %cppop.and249
  %cppop.and151 = and i64 %ctpop.step50, 1085102592571150095
  %ctpop.sh52 = lshr i64 %ctpop.step50, 4
  %cppop.and253 = and i64 %ctpop.sh52, 1085102592571150095
  %ctpop.step54 = add i64 %cppop.and151, %cppop.and253
  %cppop.and155 = and i64 %ctpop.step54, 71777214294589695
  %ctpop.sh56 = lshr i64 %ctpop.step54, 8
  %cppop.and257 = and i64 %ctpop.sh56, 71777214294589695
  %ctpop.step58 = add i64 %cppop.and155, %cppop.and257
  %cppop.and159 = and i64 %ctpop.step58, 281470681808895
  %ctpop.sh60 = lshr i64 %ctpop.step58, 16
  %cppop.and261 = and i64 %ctpop.sh60, 281470681808895
  %ctpop.step62 = add i64 %cppop.and159, %cppop.and261
  %cppop.and163 = and i64 %ctpop.step62, 4294967295
  %ctpop.sh64 = lshr i64 %ctpop.step62, 32
  %cppop.and265 = and i64 %ctpop.sh64, 4294967295
  %ctpop.step66 = add i64 %cppop.and163, %cppop.and265
  %ctpop.part67 = add i64 %ctpop.step66, 0
  %210 = trunc i64 %ctpop.part67 to i32
  %211 = shl nuw nsw i32 %210, 24
  %212 = add nsw i32 %211, -184549376
  %213 = ashr exact i32 %212, 24
  %214 = zext i32 %213 to i64
  %215 = shl i64 %37, %214
  %216 = sub nsw i32 1, %213
  br label %217

217:                                              ; preds = %208, %200
  %218 = phi i32 [ %216, %208 ], [ %40, %200 ]
  %219 = phi i64 [ %215, %208 ], [ %37, %200 ]
  %220 = add nsw i32 %218, %202
  %221 = shl i64 %201, 10
  %222 = shl i64 %219, 11
  %223 = lshr i64 %221, 32
  %224 = or i64 %223, 1073741824
  %225 = lshr i64 %222, 32
  %226 = or i64 %225, 2147483648
  %227 = and i64 %221, 4294966272
  %228 = and i64 %222, 4294965248
  %229 = mul nuw i64 %228, %227
  %230 = mul nuw i64 %226, %227
  %231 = mul nuw i64 %228, %224
  %232 = mul nuw i64 %226, %224
  %233 = add i64 %230, %231
  %234 = icmp ult i64 %233, %231
  %235 = select i1 %234, i64 4294967296, i64 0
  %236 = lshr i64 %233, 32
  %237 = shl i64 %233, 32
  %238 = add i64 %237, %229
  %239 = icmp ult i64 %238, %237
  %240 = zext i1 %239 to i64
  %241 = add nuw i64 %236, %232
  %242 = add i64 %241, %235
  %243 = add i64 %242, %240
  %244 = icmp ne i64 %238, 0
  %245 = zext i1 %244 to i64
  %246 = or i64 %243, %245
  %247 = shl i64 %246, 1
  %248 = icmp sgt i64 %247, -1
  %249 = select i1 %248, i64 %247, i64 %246
  %250 = select i1 %248, i32 -1024, i32 -1023
  %251 = add nsw i32 %220, %250
  %252 = tail call fastcc i64 @roundAndPackFloat64(i8 noundef zeroext %43, i32 noundef %251, i64 noundef %249, %struct.float_status* noundef nonnull %2)
  br label %253

253:                                              ; preds = %168, %162, %141, %99, %93, %72, %217, %206, %189, %182, %178, %113, %109
  %254 = phi i64 [ -2251799813685248, %109 ], [ %115, %113 ], [ -2251799813685248, %178 ], [ %184, %182 ], [ %190, %189 ], [ %207, %206 ], [ %252, %217 ], [ %98, %93 ], [ %104, %99 ], [ -2251799813685248, %72 ], [ %167, %162 ], [ %173, %168 ], [ -2251799
  ret i64 %254
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define internal fastcc i64 @addFloat64Sigs(i64 noundef %0, i64 noundef %1, i8 noundef zeroext %2, %struct.float_status* nocapture noundef %3) unnamed_addr #14 {
  %5 = lshr i64 %0, 52
  %6 = trunc i64 %5 to i32
  %7 = and i32 %6, 2047
  %8 = lshr i64 %1, 52
  %9 = trunc i64 %8 to i32
  %10 = and i32 %9, 2047
  %11 = sub nsw i32 %7, %10
  %12 = shl i64 %0, 9
  %13 = and i64 %12, 2305843009213693440
  %14 = shl i64 %1, 9
  %15 = and i64 %14, 2305843009213693440
  %16 = icmp sgt i32 %11, 0
  br i1 %16, label %17, label %99

17:                                               ; preds = %4
  %18 = icmp eq i32 %7, 2047
  br i1 %18, label %19, label %75

19:                                               ; preds = %17
  %20 = icmp eq i64 %13, 0
  br i1 %20, label %282, label %21

21:                                               ; preds = %19
  %22 = shl i64 %0, 1
  %23 = icmp ult i64 %22, -4503599627370496
  %24 = and i64 %0, 9221120237041090560
  %25 = icmp eq i64 %24, 9218868437227405312
  %26 = and i64 %0, 2251799813685247
  %27 = icmp ne i64 %26, 0
  %28 = and i1 %25, %27
  %29 = shl i64 %1, 1
  %30 = icmp ugt i64 %29, -4503599627370497
  %31 = and i64 %1, 9221120237041090560
  %32 = icmp eq i64 %31, 9218868437227405312
  %33 = and i64 %1, 2251799813685247
  %34 = icmp ne i64 %33, 0
  %35 = and i1 %32, %34
  %36 = zext i1 %35 to i8
  %37 = or i1 %28, %35
  br i1 %37, label %38, label %42

38:                                               ; preds = %21
  %39 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %40 = load i8, i8* %39, align 1
  %41 = or i8 %40, 1
  store i8 %41, i8* %39, align 1
  br label %42

42:                                               ; preds = %38, %21
  %43 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 6
  %44 = load i8, i8* %43, align 1
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %46, label %282

46:                                               ; preds = %42
  %47 = icmp ult i64 %22, %29
  br i1 %47, label %53, label %48

48:                                               ; preds = %46
  %49 = icmp ult i64 %29, %22
  br i1 %49, label %53, label %50

50:                                               ; preds = %48
  %51 = icmp ult i64 %0, %1
  %52 = zext i1 %51 to i8
  br label %53

53:                                               ; preds = %50, %48, %46
  %54 = phi i8 [ %52, %50 ], [ 0, %46 ], [ 1, %48 ]
  br i1 %28, label %60, label %55

55:                                               ; preds = %53
  br i1 %23, label %63, label %56

56:                                               ; preds = %55
  %57 = or i8 %54, %36
  %58 = icmp eq i8 %57, 0
  %59 = and i1 %30, %58
  br i1 %59, label %63, label %69

60:                                               ; preds = %53
  %61 = icmp eq i8 %54, 0
  %62 = select i1 %35, i1 %61, i1 %30
  br i1 %62, label %63, label %69

63:                                               ; preds = %60, %56, %55
  %64 = icmp ne i64 %31, 9218868437227405312
  %65 = icmp eq i64 %33, 0
  %66 = or i1 %64, %65
  %67 = or i64 %1, 2251799813685248
  %68 = select i1 %66, i64 %1, i64 %67
  br label %282

69:                                               ; preds = %60, %56
  %70 = icmp ne i64 %24, 9218868437227405312
  %71 = icmp eq i64 %26, 0
  %72 = or i1 %70, %71
  %73 = or i64 %0, 2251799813685248
  %74 = select i1 %72, i64 %0, i64 %73
  br label %282

75:                                               ; preds = %17
  %76 = icmp eq i32 %10, 0
  br i1 %76, label %79, label %77

77:                                               ; preds = %75
  %78 = or i64 %15, 2305843009213693952
  br label %82

79:                                               ; preds = %75
  %80 = add nsw i32 %11, -1
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %266, label %82

82:                                               ; preds = %77, %79
  %83 = phi i32 [ %11, %77 ], [ %80, %79 ]
  %84 = phi i64 [ %78, %77 ], [ %15, %79 ]
  %85 = icmp ult i32 %83, 64
  br i1 %85, label %86, label %96

86:                                               ; preds = %82
  %87 = zext i32 %83 to i64
  %88 = lshr i64 %84, %87
  %89 = sub nsw i32 0, %83
  %90 = and i32 %89, 63
  %91 = zext i32 %90 to i64
  %92 = shl i64 %84, %91
  %93 = icmp ne i64 %92, 0
  %94 = zext i1 %93 to i64
  %95 = or i64 %88, %94
  br label %266

96:                                               ; preds = %82
  %97 = icmp ne i64 %84, 0
  %98 = zext i1 %97 to i64
  br label %266

99:                                               ; preds = %4
  %100 = icmp slt i32 %11, 0
  br i1 %100, label %101, label %185

101:                                              ; preds = %99
  %102 = icmp eq i32 %10, 2047
  br i1 %102, label %103, label %163

103:                                              ; preds = %101
  %104 = icmp eq i64 %15, 0
  br i1 %104, label %159, label %105

105:                                              ; preds = %103
  %106 = shl i64 %0, 1
  %107 = icmp ult i64 %106, -4503599627370496
  %108 = and i64 %0, 9221120237041090560
  %109 = icmp eq i64 %108, 9218868437227405312
  %110 = and i64 %0, 2251799813685247
  %111 = icmp ne i64 %110, 0
  %112 = and i1 %109, %111
  %113 = shl i64 %1, 1
  %114 = icmp ugt i64 %113, -4503599627370497
  %115 = and i64 %1, 9221120237041090560
  %116 = icmp eq i64 %115, 9218868437227405312
  %117 = and i64 %1, 2251799813685247
  %118 = icmp ne i64 %117, 0
  %119 = and i1 %116, %118
  %120 = zext i1 %119 to i8
  %121 = or i1 %112, %119
  br i1 %121, label %122, label %126

122:                                              ; preds = %105
  %123 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %124 = load i8, i8* %123, align 1
  %125 = or i8 %124, 1
  store i8 %125, i8* %123, align 1
  br label %126

126:                                              ; preds = %122, %105
  %127 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 6
  %128 = load i8, i8* %127, align 1
  %129 = icmp eq i8 %128, 0
  br i1 %129, label %130, label %282

130:                                              ; preds = %126
  %131 = icmp ult i64 %106, %113
  br i1 %131, label %137, label %132

132:                                              ; preds = %130
  %133 = icmp ult i64 %113, %106
  br i1 %133, label %137, label %134

134:                                              ; preds = %132
  %135 = icmp ult i64 %0, %1
  %136 = zext i1 %135 to i8
  br label %137

137:                                              ; preds = %134, %132, %130
  %138 = phi i8 [ %136, %134 ], [ 0, %130 ], [ 1, %132 ]
  br i1 %112, label %144, label %139

139:                                              ; preds = %137
  br i1 %107, label %147, label %140

140:                                              ; preds = %139
  %141 = or i8 %138, %120
  %142 = icmp eq i8 %141, 0
  %143 = and i1 %114, %142
  br i1 %143, label %147, label %153

144:                                              ; preds = %137
  %145 = icmp eq i8 %138, 0
  %146 = select i1 %119, i1 %145, i1 %114
  br i1 %146, label %147, label %153

147:                                              ; preds = %144, %140, %139
  %148 = icmp ne i64 %115, 9218868437227405312
  %149 = icmp eq i64 %117, 0
  %150 = or i1 %148, %149
  %151 = or i64 %1, 2251799813685248
  %152 = select i1 %150, i64 %1, i64 %151
  br label %282

153:                                              ; preds = %144, %140
  %154 = icmp ne i64 %108, 9218868437227405312
  %155 = icmp eq i64 %110, 0
  %156 = or i1 %154, %155
  %157 = or i64 %0, 2251799813685248
  %158 = select i1 %156, i64 %0, i64 %157
  br label %282

159:                                              ; preds = %103
  %160 = zext i8 %2 to i64
  %161 = shl i64 %160, 63
  %162 = or i64 %161, 9218868437227405312
  br label %282

163:                                              ; preds = %101
  %164 = icmp eq i32 %7, 0
  %165 = or i64 %13, 2305843009213693952
  %166 = select i1 %164, i64 %13, i64 %165
  %167 = zext i1 %164 to i32
  %168 = add nsw i32 %11, %167
  %169 = sub nsw i32 0, %168
  %170 = icmp eq i32 %168, 0
  br i1 %170, label %266, label %171

171:                                              ; preds = %163
  %172 = icmp ult i32 %169, 64
  br i1 %172, label %173, label %182

173:                                              ; preds = %171
  %174 = zext i32 %169 to i64
  %175 = lshr i64 %166, %174
  %176 = and i32 %168, 63
  %177 = zext i32 %176 to i64
  %178 = shl i64 %166, %177
  %179 = icmp ne i64 %178, 0
  %180 = zext i1 %179 to i64
  %181 = or i64 %175, %180
  br label %266

182:                                              ; preds = %171
  %183 = icmp ne i64 %166, 0
  %184 = zext i1 %183 to i64
  br label %266

185:                                              ; preds = %99
  switch i32 %7, label %263 [
    i32 2047, label %186
    i32 0, label %243
  ]

186:                                              ; preds = %185
  %187 = or i64 %15, %13
  %188 = icmp eq i64 %187, 0
  br i1 %188, label %282, label %189

189:                                              ; preds = %186
  %190 = shl i64 %0, 1
  %191 = icmp ult i64 %190, -4503599627370496
  %192 = and i64 %0, 9221120237041090560
  %193 = icmp eq i64 %192, 9218868437227405312
  %194 = and i64 %0, 2251799813685247
  %195 = icmp ne i64 %194, 0
  %196 = and i1 %193, %195
  %197 = shl i64 %1, 1
  %198 = icmp ugt i64 %197, -4503599627370497
  %199 = and i64 %1, 9221120237041090560
  %200 = icmp eq i64 %199, 9218868437227405312
  %201 = and i64 %1, 2251799813685247
  %202 = icmp ne i64 %201, 0
  %203 = and i1 %200, %202
  %204 = zext i1 %203 to i8
  %205 = or i1 %196, %203
  br i1 %205, label %206, label %210

206:                                              ; preds = %189
  %207 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %208 = load i8, i8* %207, align 1
  %209 = or i8 %208, 1
  store i8 %209, i8* %207, align 1
  br label %210

210:                                              ; preds = %206, %189
  %211 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 6
  %212 = load i8, i8* %211, align 1
  %213 = icmp eq i8 %212, 0
  br i1 %213, label %214, label %282

214:                                              ; preds = %210
  %215 = icmp ult i64 %190, %197
  br i1 %215, label %221, label %216

216:                                              ; preds = %214
  %217 = icmp ult i64 %197, %190
  br i1 %217, label %221, label %218

218:                                              ; preds = %216
  %219 = icmp ult i64 %0, %1
  %220 = zext i1 %219 to i8
  br label %221

221:                                              ; preds = %218, %216, %214
  %222 = phi i8 [ %220, %218 ], [ 0, %214 ], [ 1, %216 ]
  br i1 %196, label %228, label %223

223:                                              ; preds = %221
  br i1 %191, label %231, label %224

224:                                              ; preds = %223
  %225 = or i8 %222, %204
  %226 = icmp eq i8 %225, 0
  %227 = and i1 %198, %226
  br i1 %227, label %231, label %237

228:                                              ; preds = %221
  %229 = icmp eq i8 %222, 0
  %230 = select i1 %203, i1 %229, i1 %198
  br i1 %230, label %231, label %237

231:                                              ; preds = %228, %224, %223
  %232 = icmp ne i64 %199, 9218868437227405312
  %233 = icmp eq i64 %201, 0
  %234 = or i1 %232, %233
  %235 = or i64 %1, 2251799813685248
  %236 = select i1 %234, i64 %1, i64 %235
  br label %282

237:                                              ; preds = %228, %224
  %238 = icmp ne i64 %192, 9218868437227405312
  %239 = icmp eq i64 %194, 0
  %240 = or i1 %238, %239
  %241 = or i64 %0, 2251799813685248
  %242 = select i1 %240, i64 %0, i64 %241
  br label %282

243:                                              ; preds = %185
  %244 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 4
  %245 = load i8, i8* %244, align 1
  %246 = icmp eq i8 %245, 0
  br i1 %246, label %257, label %247

247:                                              ; preds = %243
  %248 = or i64 %15, %13
  %249 = icmp eq i64 %248, 0
  br i1 %249, label %254, label %250

250:                                              ; preds = %247
  %251 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %252 = load i8, i8* %251, align 1
  %253 = or i8 %252, -128
  store i8 %253, i8* %251, align 1
  br label %254

254:                                              ; preds = %250, %247
  %255 = zext i8 %2 to i64
  %256 = shl i64 %255, 63
  br label %282

257:                                              ; preds = %243
  %258 = add nuw nsw i64 %15, %13
  %259 = lshr exact i64 %258, 9
  %260 = zext i8 %2 to i64
  %261 = shl i64 %260, 63
  %262 = or i64 %259, %261
  br label %282

263:                                              ; preds = %185
  %264 = or i64 %13, 4611686018427387904
  %265 = add nuw nsw i64 %264, %15
  br label %278

266:                                              ; preds = %182, %173, %163, %96, %86, %79
  %267 = phi i64 [ %13, %79 ], [ %13, %86 ], [ %13, %96 ], [ %181, %173 ], [ %184, %182 ], [ %166, %163 ]
  %268 = phi i64 [ %15, %79 ], [ %95, %86 ], [ %98, %96 ], [ %15, %173 ], [ %15, %182 ], [ %15, %163 ]
  %269 = phi i32 [ %7, %79 ], [ %7, %86 ], [ %7, %96 ], [ %10, %173 ], [ %10, %182 ], [ %10, %163 ]
  %270 = or i64 %267, 2305843009213693952
  %271 = add i64 %270, %268
  %272 = shl i64 %271, 1
  %273 = icmp slt i64 %272, 0
  %274 = xor i1 %273, true
  %275 = sext i1 %274 to i32
  %276 = add nsw i32 %269, %275
  %277 = select i1 %273, i64 %271, i64 %272
  br label %278

278:                                              ; preds = %266, %263
  %279 = phi i32 [ %7, %263 ], [ %276, %266 ]
  %280 = phi i64 [ %265, %263 ], [ %277, %266 ]
  %281 = tail call fastcc i64 @roundAndPackFloat64(i8 noundef zeroext %2, i32 noundef %279, i64 noundef %280, %struct.float_status* noundef %3)
  br label %282

282:                                              ; preds = %237, %231, %210, %153, %147, %126, %69, %63, %42, %186, %19, %278, %257, %254, %159
  %283 = phi i64 [ %281, %278 ], [ %162, %159 ], [ %256, %254 ], [ %262, %257 ], [ %0, %19 ], [ %0, %186 ], [ %68, %63 ], [ %74, %69 ], [ -2251799813685248, %42 ], [ %152, %147 ], [ %158, %153 ], [ -2251799813685248, %126 ], [ %236, %231 ], [ %242, %237 
  ret i64 %283
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define internal fastcc i64 @subFloat64Sigs(i64 noundef %0, i64 noundef %1, i8 noundef zeroext %2, %struct.float_status* nocapture noundef %3) unnamed_addr #14 {
  %5 = lshr i64 %0, 52
  %6 = trunc i64 %5 to i32
  %7 = and i32 %6, 2047
  %8 = lshr i64 %1, 52
  %9 = trunc i64 %8 to i32
  %10 = and i32 %9, 2047
  %11 = sub nsw i32 %7, %10
  %12 = shl i64 %0, 10
  %13 = and i64 %12, 4611686018427386880
  %14 = shl i64 %1, 10
  %15 = and i64 %14, 4611686018427386880
  %16 = icmp sgt i32 %11, 0
  br i1 %16, label %187, label %17

17:                                               ; preds = %4
  %18 = icmp slt i32 %11, 0
  br i1 %18, label %93, label %19

19:                                               ; preds = %17
  switch i32 %7, label %82 [
    i32 2047, label %20
    i32 0, label %81
  ]

20:                                               ; preds = %19
  %21 = or i64 %15, %13
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %77, label %23

23:                                               ; preds = %20
  %24 = shl i64 %0, 1
  %25 = icmp ult i64 %24, -4503599627370496
  %26 = and i64 %0, 9221120237041090560
  %27 = icmp eq i64 %26, 9218868437227405312
  %28 = and i64 %0, 2251799813685247
  %29 = icmp ne i64 %28, 0
  %30 = and i1 %27, %29
  %31 = shl i64 %1, 1
  %32 = icmp ugt i64 %31, -4503599627370497
  %33 = and i64 %1, 9221120237041090560
  %34 = icmp eq i64 %33, 9218868437227405312
  %35 = and i64 %1, 2251799813685247
  %36 = icmp ne i64 %35, 0
  %37 = and i1 %34, %36
  %38 = zext i1 %37 to i8
  %39 = or i1 %30, %37
  br i1 %39, label %40, label %44

40:                                               ; preds = %23
  %41 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %42 = load i8, i8* %41, align 1
  %43 = or i8 %42, 1
  store i8 %43, i8* %41, align 1
  br label %44

44:                                               ; preds = %40, %23
  %45 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 6
  %46 = load i8, i8* %45, align 1
  %47 = icmp eq i8 %46, 0
  br i1 %47, label %48, label %288

48:                                               ; preds = %44
  %49 = icmp ult i64 %24, %31
  br i1 %49, label %55, label %50

50:                                               ; preds = %48
  %51 = icmp ult i64 %31, %24
  br i1 %51, label %55, label %52

52:                                               ; preds = %50
  %53 = icmp ult i64 %0, %1
  %54 = zext i1 %53 to i8
  br label %55

55:                                               ; preds = %52, %50, %48
  %56 = phi i8 [ %54, %52 ], [ 0, %48 ], [ 1, %50 ]
  br i1 %30, label %62, label %57

57:                                               ; preds = %55
  br i1 %25, label %65, label %58

58:                                               ; preds = %57
  %59 = or i8 %56, %38
  %60 = icmp eq i8 %59, 0
  %61 = and i1 %32, %60
  br i1 %61, label %65, label %71

62:                                               ; preds = %55
  %63 = icmp eq i8 %56, 0
  %64 = select i1 %37, i1 %63, i1 %32
  br i1 %64, label %65, label %71

65:                                               ; preds = %62, %58, %57
  %66 = icmp ne i64 %33, 9218868437227405312
  %67 = icmp eq i64 %35, 0
  %68 = or i1 %66, %67
  %69 = or i64 %1, 2251799813685248
  %70 = select i1 %68, i64 %1, i64 %69
  br label %288

71:                                               ; preds = %62, %58
  %72 = icmp ne i64 %26, 9218868437227405312
  %73 = icmp eq i64 %28, 0
  %74 = or i1 %72, %73
  %75 = or i64 %0, 2251799813685248
  %76 = select i1 %74, i64 %0, i64 %75
  br label %288

77:                                               ; preds = %20
  %78 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %79 = load i8, i8* %78, align 1
  %80 = or i8 %79, 1
  store i8 %80, i8* %78, align 1
  br label %288

81:                                               ; preds = %19
  br label %82

82:                                               ; preds = %19, %81
  %83 = phi i32 [ 1, %81 ], [ %7, %19 ]
  %84 = phi i32 [ 1, %81 ], [ %10, %19 ]
  %85 = icmp ult i64 %15, %13
  br i1 %85, label %272, label %86

86:                                               ; preds = %82
  %87 = icmp ult i64 %13, %15
  br i1 %87, label %181, label %88

88:                                               ; preds = %86
  %89 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 1
  %90 = load i8, i8* %89, align 1
  %91 = icmp eq i8 %90, 1
  %92 = select i1 %91, i64 -9223372036854775808, i64 0
  br label %288

93:                                               ; preds = %17
  %94 = icmp eq i32 %10, 2047
  br i1 %94, label %95, label %156

95:                                               ; preds = %93
  %96 = icmp eq i64 %15, 0
  br i1 %96, label %151, label %97

97:                                               ; preds = %95
  %98 = shl i64 %0, 1
  %99 = icmp ult i64 %98, -4503599627370496
  %100 = and i64 %0, 9221120237041090560
  %101 = icmp eq i64 %100, 9218868437227405312
  %102 = and i64 %0, 2251799813685247
  %103 = icmp ne i64 %102, 0
  %104 = and i1 %101, %103
  %105 = shl i64 %1, 1
  %106 = icmp ugt i64 %105, -4503599627370497
  %107 = and i64 %1, 9221120237041090560
  %108 = icmp eq i64 %107, 9218868437227405312
  %109 = and i64 %1, 2251799813685247
  %110 = icmp ne i64 %109, 0
  %111 = and i1 %108, %110
  %112 = zext i1 %111 to i8
  %113 = or i1 %104, %111
  br i1 %113, label %114, label %118

114:                                              ; preds = %97
  %115 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %116 = load i8, i8* %115, align 1
  %117 = or i8 %116, 1
  store i8 %117, i8* %115, align 1
  br label %118

118:                                              ; preds = %114, %97
  %119 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 6
  %120 = load i8, i8* %119, align 1
  %121 = icmp eq i8 %120, 0
  br i1 %121, label %122, label %288

122:                                              ; preds = %118
  %123 = icmp ult i64 %98, %105
  br i1 %123, label %129, label %124

124:                                              ; preds = %122
  %125 = icmp ult i64 %105, %98
  br i1 %125, label %129, label %126

126:                                              ; preds = %124
  %127 = icmp ult i64 %0, %1
  %128 = zext i1 %127 to i8
  br label %129

129:                                              ; preds = %126, %124, %122
  %130 = phi i8 [ %128, %126 ], [ 0, %122 ], [ 1, %124 ]
  br i1 %104, label %136, label %131

131:                                              ; preds = %129
  br i1 %99, label %139, label %132

132:                                              ; preds = %131
  %133 = or i8 %130, %112
  %134 = icmp eq i8 %133, 0
  %135 = and i1 %106, %134
  br i1 %135, label %139, label %145

136:                                              ; preds = %129
  %137 = icmp eq i8 %130, 0
  %138 = select i1 %111, i1 %137, i1 %106
  br i1 %138, label %139, label %145

139:                                              ; preds = %136, %132, %131
  %140 = icmp ne i64 %107, 9218868437227405312
  %141 = icmp eq i64 %109, 0
  %142 = or i1 %140, %141
  %143 = or i64 %1, 2251799813685248
  %144 = select i1 %142, i64 %1, i64 %143
  br label %288

145:                                              ; preds = %136, %132
  %146 = icmp ne i64 %100, 9218868437227405312
  %147 = icmp eq i64 %102, 0
  %148 = or i1 %146, %147
  %149 = or i64 %0, 2251799813685248
  %150 = select i1 %148, i64 %0, i64 %149
  br label %288

151:                                              ; preds = %95
  %152 = xor i8 %2, -1
  %153 = zext i8 %152 to i64
  %154 = shl i64 %153, 63
  %155 = or i64 %154, 9218868437227405312
  br label %288

156:                                              ; preds = %93
  %157 = icmp eq i32 %7, 0
  %158 = or i64 %13, 4611686018427387904
  %159 = select i1 %157, i64 %13, i64 %158
  %160 = zext i1 %157 to i32
  %161 = add nsw i32 %11, %160
  %162 = sub nsw i32 0, %161
  %163 = icmp eq i32 %161, 0
  br i1 %163, label %178, label %164

164:                                              ; preds = %156
  %165 = icmp ult i32 %162, 64
  br i1 %165, label %166, label %175

166:                                              ; preds = %164
  %167 = zext i32 %162 to i64
  %168 = lshr i64 %159, %167
  %169 = and i32 %161, 63
  %170 = zext i32 %169 to i64
  %171 = shl i64 %159, %170
  %172 = icmp ne i64 %171, 0
  %173 = zext i1 %172 to i64
  %174 = or i64 %168, %173
  br label %178

175:                                              ; preds = %164
  %176 = icmp ne i64 %159, 0
  %177 = zext i1 %176 to i64
  br label %178

178:                                              ; preds = %156, %166, %175
  %179 = phi i64 [ %174, %166 ], [ %177, %175 ], [ %159, %156 ]
  %180 = or i64 %15, 4611686018427387904
  br label %181

181:                                              ; preds = %86, %178
  %182 = phi i64 [ %179, %178 ], [ %13, %86 ]
  %183 = phi i64 [ %180, %178 ], [ %15, %86 ]
  %184 = phi i32 [ %10, %178 ], [ %84, %86 ]
  %185 = sub i64 %183, %182
  %186 = xor i8 %2, 1
  br label %277

187:                                              ; preds = %4
  %188 = icmp eq i32 %7, 2047
  br i1 %188, label %189, label %245

189:                                              ; preds = %187
  %190 = icmp eq i64 %13, 0
  br i1 %190, label %288, label %191

191:                                              ; preds = %189
  %192 = shl i64 %0, 1
  %193 = icmp ult i64 %192, -4503599627370496
  %194 = and i64 %0, 9221120237041090560
  %195 = icmp eq i64 %194, 9218868437227405312
  %196 = and i64 %0, 2251799813685247
  %197 = icmp ne i64 %196, 0
  %198 = and i1 %195, %197
  %199 = shl i64 %1, 1
  %200 = icmp ugt i64 %199, -4503599627370497
  %201 = and i64 %1, 9221120237041090560
  %202 = icmp eq i64 %201, 9218868437227405312
  %203 = and i64 %1, 2251799813685247
  %204 = icmp ne i64 %203, 0
  %205 = and i1 %202, %204
  %206 = zext i1 %205 to i8
  %207 = or i1 %198, %205
  br i1 %207, label %208, label %212

208:                                              ; preds = %191
  %209 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %210 = load i8, i8* %209, align 1
  %211 = or i8 %210, 1
  store i8 %211, i8* %209, align 1
  br label %212

212:                                              ; preds = %208, %191
  %213 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 6
  %214 = load i8, i8* %213, align 1
  %215 = icmp eq i8 %214, 0
  br i1 %215, label %216, label %288

216:                                              ; preds = %212
  %217 = icmp ult i64 %192, %199
  br i1 %217, label %223, label %218

218:                                              ; preds = %216
  %219 = icmp ult i64 %199, %192
  br i1 %219, label %223, label %220

220:                                              ; preds = %218
  %221 = icmp ult i64 %0, %1
  %222 = zext i1 %221 to i8
  br label %223

223:                                              ; preds = %220, %218, %216
  %224 = phi i8 [ %222, %220 ], [ 0, %216 ], [ 1, %218 ]
  br i1 %198, label %230, label %225

225:                                              ; preds = %223
  br i1 %193, label %233, label %226

226:                                              ; preds = %225
  %227 = or i8 %224, %206
  %228 = icmp eq i8 %227, 0
  %229 = and i1 %200, %228
  br i1 %229, label %233, label %239

230:                                              ; preds = %223
  %231 = icmp eq i8 %224, 0
  %232 = select i1 %205, i1 %231, i1 %200
  br i1 %232, label %233, label %239

233:                                              ; preds = %230, %226, %225
  %234 = icmp ne i64 %201, 9218868437227405312
  %235 = icmp eq i64 %203, 0
  %236 = or i1 %234, %235
  %237 = or i64 %1, 2251799813685248
  %238 = select i1 %236, i64 %1, i64 %237
  br label %288

239:                                              ; preds = %230, %226
  %240 = icmp ne i64 %194, 9218868437227405312
  %241 = icmp eq i64 %196, 0
  %242 = or i1 %240, %241
  %243 = or i64 %0, 2251799813685248
  %244 = select i1 %242, i64 %0, i64 %243
  br label %288

245:                                              ; preds = %187
  %246 = icmp eq i32 %10, 0
  br i1 %246, label %249, label %247

247:                                              ; preds = %245
  %248 = or i64 %15, 4611686018427387904
  br label %252

249:                                              ; preds = %245
  %250 = add nsw i32 %11, -1
  %251 = icmp eq i32 %250, 0
  br i1 %251, label %269, label %252

252:                                              ; preds = %247, %249
  %253 = phi i32 [ %11, %247 ], [ %250, %249 ]
  %254 = phi i64 [ %248, %247 ], [ %15, %249 ]
  %255 = icmp ult i32 %253, 64
  br i1 %255, label %256, label %266

256:                                              ; preds = %252
  %257 = zext i32 %253 to i64
  %258 = lshr i64 %254, %257
  %259 = sub nsw i32 0, %253
  %260 = and i32 %259, 63
  %261 = zext i32 %260 to i64
  %262 = shl i64 %254, %261
  %263 = icmp ne i64 %262, 0
  %264 = zext i1 %263 to i64
  %265 = or i64 %258, %264
  br label %269

266:                                              ; preds = %252
  %267 = icmp ne i64 %254, 0
  %268 = zext i1 %267 to i64
  br label %269

269:                                              ; preds = %249, %256, %266
  %270 = phi i64 [ %265, %256 ], [ %268, %266 ], [ %15, %249 ]
  %271 = or i64 %13, 4611686018427387904
  br label %272

272:                                              ; preds = %82, %269
  %273 = phi i64 [ %271, %269 ], [ %13, %82 ]
  %274 = phi i64 [ %270, %269 ], [ %15, %82 ]
  %275 = phi i32 [ %7, %269 ], [ %83, %82 ]
  %276 = sub i64 %273, %274
  br label %277

277:                                              ; preds = %272, %181
  %278 = phi i8 [ %2, %272 ], [ %186, %181 ]
  %279 = phi i32 [ %275, %272 ], [ %184, %181 ]
  %280 = phi i64 [ %276, %272 ], [ %185, %181 ]
  %ctlz.sh = lshr i64 %280, 1
  %ctlz.step = or i64 %280, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %281 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %281, 6148914691236517205
  %ctpop.sh = lshr i64 %281, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %282 = trunc i64 %ctpop.part to i32
  %283 = add nuw nsw i64 %ctpop.part, 4294967295
  %284 = sub nsw i32 %279, %282
  %285 = and i64 %283, 4294967295
  %286 = shl i64 %280, %285
  %287 = tail call fastcc i64 @roundAndPackFloat64(i8 noundef zeroext %278, i32 noundef %284, i64 noundef %286, %struct.float_status* noundef %3) #30
  br label %288

288:                                              ; preds = %239, %233, %212, %145, %139, %118, %71, %65, %44, %189, %277, %151, %88, %77
  %289 = phi i64 [ %287, %277 ], [ %155, %151 ], [ -2251799813685248, %77 ], [ %92, %88 ], [ %0, %189 ], [ %70, %65 ], [ %76, %71 ], [ -2251799813685248, %44 ], [ %144, %139 ], [ %150, %145 ], [ -2251799813685248, %118 ], [ %238, %233 ], [ %244, %239 ], 
  ret i64 %289
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define i32 @float64_to_float32(i64 noundef %0, %struct.float_status* nocapture noundef %1) local_unnamed_addr #14 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = and i64 %0, 9218868437227405312
  %8 = icmp ne i64 %7, 0
  %9 = and i64 %0, 4503599627370495
  %10 = icmp eq i64 %9, 0
  %11 = or i1 %8, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, 64
  store i8 %15, i8* %13, align 1
  %16 = and i64 %0, -9223372036854775808
  br label %17

17:                                               ; preds = %2, %6, %12
  %18 = phi i64 [ %16, %12 ], [ %0, %6 ], [ %0, %2 ]
  %19 = and i64 %18, 4503599627370495
  %20 = lshr i64 %18, 52
  %21 = trunc i64 %20 to i32
  %22 = and i32 %21, 2047
  %23 = lshr i64 %18, 63
  %24 = icmp eq i32 %22, 2047
  br i1 %24, label %25, label %54

25:                                               ; preds = %17
  %26 = icmp eq i64 %19, 0
  br i1 %26, label %50, label %27

27:                                               ; preds = %25
  %28 = and i64 %18, 9221120237041090560
  %29 = icmp ne i64 %28, 9218868437227405312
  %30 = and i64 %18, 2251799813685247
  %31 = icmp eq i64 %30, 0
  %32 = or i1 %29, %31
  br i1 %32, label %37, label %33

33:                                               ; preds = %27
  %34 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %35 = load i8, i8* %34, align 1, !noalias !55
  %36 = or i8 %35, 1
  store i8 %36, i8* %34, align 1, !noalias !55
  br label %37

37:                                               ; preds = %27, %33
  %38 = shl i64 %18, 12
  %39 = getelementptr %struct.float_status, %struct.float_status* %1, i64 0, i32 6
  %40 = load i8, i8* %39, align 1
  %41 = lshr i64 %38, 41
  %42 = icmp ne i8 %40, 0
  %43 = icmp ult i64 %38, 2199023255552
  %44 = or i1 %43, %42
  %45 = shl nuw nsw i64 %23, 31
  %46 = or i64 %45, %41
  %47 = trunc i64 %46 to i32
  %48 = or i32 %47, 2139095040
  %49 = select i1 %44, i32 -4194304, i32 %48
  br label %70

50:                                               ; preds = %25
  %51 = trunc i64 %23 to i32
  %52 = shl nuw i32 %51, 31
  %53 = or i32 %52, 2139095040
  br label %70

54:                                               ; preds = %17
  %55 = trunc i64 %23 to i8
  %56 = lshr i64 %19, 22
  %57 = and i64 %18, 4194303
  %58 = icmp ne i64 %57, 0
  %59 = zext i1 %58 to i64
  %60 = or i64 %56, %59
  %61 = trunc i64 %60 to i32
  %62 = icmp ne i32 %22, 0
  %63 = icmp ne i32 %61, 0
  %64 = select i1 %62, i1 true, i1 %63
  %65 = or i32 %61, 1073741824
  %66 = add nsw i32 %22, -897
  %67 = select i1 %64, i32 %66, i32 0
  %68 = select i1 %64, i32 %65, i32 0
  %69 = tail call fastcc i32 @roundAndPackFloat32(i8 noundef zeroext %55, i32 noundef %67, i32 noundef %68, %struct.float_status* noundef nonnull %1)
  br label %70

70:                                               ; preds = %54, %50, %37
  %71 = phi i32 [ %49, %37 ], [ %53, %50 ], [ %69, %54 ]
  ret i32 %71
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define i64 @float64_add(i64 noundef %0, i64 noundef %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #14 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i64 %0, 9218868437227405312
  %9 = icmp ne i64 %8, 0
  %10 = and i64 %0, 4503599627370495
  %11 = icmp eq i64 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i64 %0, -9223372036854775808
  br label %18

18:                                               ; preds = %7, %13
  %19 = phi i64 [ %0, %7 ], [ %17, %13 ]
  %20 = and i64 %1, 9218868437227405312
  %21 = icmp ne i64 %20, 0
  %22 = and i64 %1, 4503599627370495
  %23 = icmp eq i64 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i64 %1, -9223372036854775808
  br label %30

30:                                               ; preds = %3, %18, %25
  %31 = phi i64 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i64 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = lshr i64 %31, 63
  %34 = trunc i64 %33 to i8
  %35 = lshr i64 %32, 63
  %36 = trunc i64 %35 to i8
  %37 = icmp eq i8 %34, %36
  br i1 %37, label %38, label %40

38:                                               ; preds = %30
  %39 = tail call fastcc i64 @addFloat64Sigs(i64 noundef %31, i64 noundef %32, i8 noundef zeroext %34, %struct.float_status* noundef nonnull %2)
  br label %42

40:                                               ; preds = %30
  %41 = tail call fastcc i64 @subFloat64Sigs(i64 noundef %31, i64 noundef %32, i8 noundef zeroext %34, %struct.float_status* noundef nonnull %2)
  br label %42

42:                                               ; preds = %40, %38
  %43 = phi i64 [ %39, %38 ], [ %41, %40 ]
  ret i64 %43
}

; Function Attrs: nofree nosync nounwind uwtable
define i32 @float32_log2(i32 noundef %0, %struct.float_status* nocapture noundef %1) local_unnamed_addr #20 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = and i32 %0, 2139095040
  %8 = icmp ne i32 %7, 0
  %9 = and i32 %0, 8388607
  %10 = icmp eq i32 %9, 0
  %11 = or i1 %8, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, 64
  store i8 %15, i8* %13, align 1
  %16 = and i32 %0, -2147483648
  br label %17

17:                                               ; preds = %2, %6, %12
  %18 = phi i32 [ %16, %12 ], [ %0, %6 ], [ %0, %2 ]
  %19 = and i32 %18, 8388607
  %20 = lshr i32 %18, 23
  %21 = and i32 %20, 255
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %30

23:                                               ; preds = %17
  %24 = icmp eq i32 %19, 0
  br i1 %24, label %287, label %25

25:                                               ; preds = %23
  %ctlz.sh = lshr i32 %19, 1
  %ctlz.step = or i32 %19, %ctlz.sh
  %ctlz.sh1 = lshr i32 %ctlz.step, 2
  %ctlz.step2 = or i32 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i32 %ctlz.step2, 4
  %ctlz.step4 = or i32 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i32 %ctlz.step4, 8
  %ctlz.step6 = or i32 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i32 %ctlz.step6, 16
  %ctlz.step8 = or i32 %ctlz.step6, %ctlz.sh7
  %26 = xor i32 %ctlz.step8, -1
  %cppop.and1 = and i32 %26, 1431655765
  %ctpop.sh = lshr i32 %26, 1
  %cppop.and2 = and i32 %ctpop.sh, 1431655765
  %ctpop.step = add i32 %cppop.and1, %cppop.and2
  %cppop.and19 = and i32 %ctpop.step, 858993459
  %ctpop.sh10 = lshr i32 %ctpop.step, 2
  %cppop.and211 = and i32 %ctpop.sh10, 858993459
  %ctpop.step12 = add i32 %cppop.and19, %cppop.and211
  %cppop.and113 = and i32 %ctpop.step12, 252645135
  %ctpop.sh14 = lshr i32 %ctpop.step12, 4
  %cppop.and215 = and i32 %ctpop.sh14, 252645135
  %ctpop.step16 = add i32 %cppop.and113, %cppop.and215
  %cppop.and117 = and i32 %ctpop.step16, 16711935
  %ctpop.sh18 = lshr i32 %ctpop.step16, 8
  %cppop.and219 = and i32 %ctpop.sh18, 16711935
  %ctpop.step20 = add i32 %cppop.and117, %cppop.and219
  %cppop.and121 = and i32 %ctpop.step20, 65535
  %ctpop.sh22 = lshr i32 %ctpop.step20, 16
  %cppop.and223 = and i32 %ctpop.sh22, 65535
  %ctpop.step24 = add i32 %cppop.and121, %cppop.and223
  %ctpop.part = add i32 %ctpop.step24, 0
  %27 = add nsw i32 %ctpop.part, -8
  %28 = shl i32 %19, %27
  %29 = sub nsw i32 9, %ctpop.part
  br label %30

30:                                               ; preds = %25, %17
  %31 = phi i32 [ %29, %25 ], [ %21, %17 ]
  %32 = phi i32 [ %28, %25 ], [ %19, %17 ]
  %33 = icmp sgt i32 %18, -1
  br i1 %33, label %38, label %34

34:                                               ; preds = %30
  %35 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %36 = load i8, i8* %35, align 1
  %37 = or i8 %36, 1
  store i8 %37, i8* %35, align 1
  br label %287

38:                                               ; preds = %30
  %39 = icmp eq i32 %31, 255
  br i1 %39, label %40, label %65

40:                                               ; preds = %38
  %41 = icmp eq i32 %32, 0
  br i1 %41, label %287, label %42

42:                                               ; preds = %40
  %43 = icmp ugt i32 %18, 2143289343
  %44 = and i32 %18, 2143289344
  %45 = icmp eq i32 %44, 2139095040
  %46 = and i32 %18, 4194303
  %47 = icmp ne i32 %46, 0
  %48 = and i1 %45, %47
  br i1 %48, label %49, label %53

49:                                               ; preds = %42
  %50 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %51 = load i8, i8* %50, align 1
  %52 = or i8 %51, 1
  store i8 %52, i8* %50, align 1
  br label %53

53:                                               ; preds = %49, %42
  %54 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 6
  %55 = load i8, i8* %54, align 1
  %56 = icmp eq i8 %55, 0
  br i1 %56, label %57, label %287

57:                                               ; preds = %53
  %58 = or i1 %43, %48
  br i1 %58, label %59, label %287

59:                                               ; preds = %57
  %60 = icmp ne i32 %44, 2139095040
  %61 = icmp eq i32 %46, 0
  %62 = or i1 %60, %61
  %63 = or i32 %18, 4194304
  %64 = select i1 %62, i32 %18, i32 %63
  br label %287

65:                                               ; preds = %38
  %66 = or i32 %32, 8388608
  %67 = shl nsw i32 %31, 23
  %68 = add i32 %67, -1065353216
  %69 = zext i32 %66 to i64
  %70 = mul nuw i64 %69, %69
  %71 = lshr i64 %70, 23
  %72 = trunc i64 %71 to i32
  %73 = and i32 %72, 16777216
  %74 = lshr exact i32 %73, 24
  %75 = lshr i32 %72, %74
  %76 = lshr exact i32 %73, 2
  %77 = or i32 %76, %68
  %78 = zext i32 %75 to i64
  %79 = mul nuw i64 %78, %78
  %80 = lshr i64 %79, 23
  %81 = trunc i64 %80 to i32
  %82 = and i32 %81, 16777216
  %83 = lshr exact i32 %82, 24
  %84 = lshr i32 %81, %83
  %85 = lshr exact i32 %82, 3
  %86 = or i32 %85, %77
  %87 = zext i32 %84 to i64
  %88 = mul nuw i64 %87, %87
  %89 = lshr i64 %88, 23
  %90 = trunc i64 %89 to i32
  %91 = and i32 %90, 16777216
  %92 = lshr exact i32 %91, 24
  %93 = lshr i32 %90, %92
  %94 = lshr exact i32 %91, 4
  %95 = or i32 %94, %86
  %96 = zext i32 %93 to i64
  %97 = mul nuw i64 %96, %96
  %98 = lshr i64 %97, 23
  %99 = trunc i64 %98 to i32
  %100 = and i32 %99, 16777216
  %101 = lshr exact i32 %100, 24
  %102 = lshr i32 %99, %101
  %103 = lshr exact i32 %100, 5
  %104 = or i32 %103, %95
  %105 = zext i32 %102 to i64
  %106 = mul nuw i64 %105, %105
  %107 = lshr i64 %106, 23
  %108 = trunc i64 %107 to i32
  %109 = and i32 %108, 16777216
  %110 = lshr exact i32 %109, 24
  %111 = lshr i32 %108, %110
  %112 = lshr exact i32 %109, 6
  %113 = or i32 %112, %104
  %114 = zext i32 %111 to i64
  %115 = mul nuw i64 %114, %114
  %116 = lshr i64 %115, 23
  %117 = trunc i64 %116 to i32
  %118 = and i32 %117, 16777216
  %119 = lshr exact i32 %118, 24
  %120 = lshr i32 %117, %119
  %121 = lshr exact i32 %118, 7
  %122 = or i32 %121, %113
  %123 = zext i32 %120 to i64
  %124 = mul nuw i64 %123, %123
  %125 = lshr i64 %124, 23
  %126 = trunc i64 %125 to i32
  %127 = and i32 %126, 16777216
  %128 = lshr exact i32 %127, 24
  %129 = lshr i32 %126, %128
  %130 = lshr exact i32 %127, 8
  %131 = or i32 %130, %122
  %132 = zext i32 %129 to i64
  %133 = mul nuw i64 %132, %132
  %134 = lshr i64 %133, 23
  %135 = trunc i64 %134 to i32
  %136 = and i32 %135, 16777216
  %137 = lshr exact i32 %136, 24
  %138 = lshr i32 %135, %137
  %139 = lshr exact i32 %136, 9
  %140 = or i32 %139, %131
  %141 = zext i32 %138 to i64
  %142 = mul nuw i64 %141, %141
  %143 = lshr i64 %142, 23
  %144 = trunc i64 %143 to i32
  %145 = and i32 %144, 16777216
  %146 = lshr exact i32 %145, 24
  %147 = lshr i32 %144, %146
  %148 = lshr exact i32 %145, 10
  %149 = or i32 %148, %140
  %150 = zext i32 %147 to i64
  %151 = mul nuw i64 %150, %150
  %152 = lshr i64 %151, 23
  %153 = trunc i64 %152 to i32
  %154 = and i32 %153, 16777216
  %155 = lshr exact i32 %154, 24
  %156 = lshr i32 %153, %155
  %157 = lshr exact i32 %154, 11
  %158 = or i32 %157, %149
  %159 = zext i32 %156 to i64
  %160 = mul nuw i64 %159, %159
  %161 = lshr i64 %160, 23
  %162 = trunc i64 %161 to i32
  %163 = and i32 %162, 16777216
  %164 = lshr exact i32 %163, 24
  %165 = lshr i32 %162, %164
  %166 = lshr exact i32 %163, 12
  %167 = or i32 %166, %158
  %168 = zext i32 %165 to i64
  %169 = mul nuw i64 %168, %168
  %170 = lshr i64 %169, 23
  %171 = trunc i64 %170 to i32
  %172 = and i32 %171, 16777216
  %173 = lshr exact i32 %172, 24
  %174 = lshr i32 %171, %173
  %175 = lshr exact i32 %172, 13
  %176 = or i32 %175, %167
  %177 = zext i32 %174 to i64
  %178 = mul nuw i64 %177, %177
  %179 = lshr i64 %178, 23
  %180 = trunc i64 %179 to i32
  %181 = and i32 %180, 16777216
  %182 = lshr exact i32 %181, 24
  %183 = lshr i32 %180, %182
  %184 = lshr exact i32 %181, 14
  %185 = or i32 %184, %176
  %186 = zext i32 %183 to i64
  %187 = mul nuw i64 %186, %186
  %188 = lshr i64 %187, 23
  %189 = trunc i64 %188 to i32
  %190 = and i32 %189, 16777216
  %191 = lshr exact i32 %190, 24
  %192 = lshr i32 %189, %191
  %193 = lshr exact i32 %190, 15
  %194 = or i32 %193, %185
  %195 = zext i32 %192 to i64
  %196 = mul nuw i64 %195, %195
  %197 = lshr i64 %196, 23
  %198 = trunc i64 %197 to i32
  %199 = and i32 %198, 16777216
  %200 = lshr exact i32 %199, 24
  %201 = lshr i32 %198, %200
  %202 = lshr exact i32 %199, 16
  %203 = or i32 %202, %194
  %204 = zext i32 %201 to i64
  %205 = mul nuw i64 %204, %204
  %206 = lshr i64 %205, 23
  %207 = trunc i64 %206 to i32
  %208 = and i32 %207, 16777216
  %209 = lshr exact i32 %208, 24
  %210 = lshr i32 %207, %209
  %211 = lshr exact i32 %208, 17
  %212 = or i32 %211, %203
  %213 = zext i32 %210 to i64
  %214 = mul nuw i64 %213, %213
  %215 = lshr i64 %214, 23
  %216 = trunc i64 %215 to i32
  %217 = and i32 %216, 16777216
  %218 = lshr exact i32 %217, 24
  %219 = lshr i32 %216, %218
  %220 = lshr exact i32 %217, 18
  %221 = or i32 %220, %212
  %222 = zext i32 %219 to i64
  %223 = mul nuw i64 %222, %222
  %224 = lshr i64 %223, 23
  %225 = trunc i64 %224 to i32
  %226 = and i32 %225, 16777216
  %227 = lshr exact i32 %226, 24
  %228 = lshr i32 %225, %227
  %229 = lshr exact i32 %226, 19
  %230 = or i32 %229, %221
  %231 = zext i32 %228 to i64
  %232 = mul nuw i64 %231, %231
  %233 = lshr i64 %232, 23
  %234 = trunc i64 %233 to i32
  %235 = and i32 %234, 16777216
  %236 = lshr exact i32 %235, 24
  %237 = lshr i32 %234, %236
  %238 = lshr exact i32 %235, 20
  %239 = or i32 %238, %230
  %240 = zext i32 %237 to i64
  %241 = mul nuw i64 %240, %240
  %242 = lshr i64 %241, 23
  %243 = trunc i64 %242 to i32
  %244 = and i32 %243, 16777216
  %245 = lshr exact i32 %244, 24
  %246 = lshr i32 %243, %245
  %247 = lshr exact i32 %244, 21
  %248 = or i32 %247, %239
  %249 = zext i32 %246 to i64
  %250 = mul nuw i64 %249, %249
  %251 = lshr i64 %250, 23
  %252 = trunc i64 %251 to i32
  %253 = and i32 %252, 16777216
  %254 = lshr exact i32 %253, 24
  %255 = lshr i32 %252, %254
  %256 = lshr exact i32 %253, 22
  %257 = or i32 %256, %248
  %258 = zext i32 %255 to i64
  %259 = mul nuw i64 %258, %258
  %260 = lshr i64 %259, 23
  %261 = trunc i64 %260 to i32
  %262 = and i32 %261, 16777216
  %263 = lshr exact i32 %262, 24
  %264 = lshr i32 %261, %263
  %265 = lshr exact i32 %262, 23
  %266 = or i32 %265, %257
  %267 = zext i32 %264 to i64
  %268 = mul nuw i64 %267, %267
  %269 = lshr i64 %268, 47
  %270 = trunc i64 %269 to i32
  %271 = and i32 %270, 1
  %272 = or i32 %271, %266
  %273 = icmp slt i32 %31, 127
  br i1 %273, label %280, label %274

274:                                              ; preds = %65
  %ctlz.sh25 = lshr i32 %272, 1
  %ctlz.step26 = or i32 %272, %ctlz.sh25
  %ctlz.sh27 = lshr i32 %ctlz.step26, 2
  %ctlz.step28 = or i32 %ctlz.step26, %ctlz.sh27
  %ctlz.sh29 = lshr i32 %ctlz.step28, 4
  %ctlz.step30 = or i32 %ctlz.step28, %ctlz.sh29
  %ctlz.sh31 = lshr i32 %ctlz.step30, 8
  %ctlz.step32 = or i32 %ctlz.step30, %ctlz.sh31
  %ctlz.sh33 = lshr i32 %ctlz.step32, 16
  %ctlz.step34 = or i32 %ctlz.step32, %ctlz.sh33
  %275 = xor i32 %ctlz.step34, -1
  %cppop.and135 = and i32 %275, 1431655765
  %ctpop.sh36 = lshr i32 %275, 1
  %cppop.and237 = and i32 %ctpop.sh36, 1431655765
  %ctpop.step38 = add i32 %cppop.and135, %cppop.and237
  %cppop.and139 = and i32 %ctpop.step38, 858993459
  %ctpop.sh40 = lshr i32 %ctpop.step38, 2
  %cppop.and241 = and i32 %ctpop.sh40, 858993459
  %ctpop.step42 = add i32 %cppop.and139, %cppop.and241
  %cppop.and143 = and i32 %ctpop.step42, 252645135
  %ctpop.sh44 = lshr i32 %ctpop.step42, 4
  %cppop.and245 = and i32 %ctpop.sh44, 252645135
  %ctpop.step46 = add i32 %cppop.and143, %cppop.and245
  %cppop.and147 = and i32 %ctpop.step46, 16711935
  %ctpop.sh48 = lshr i32 %ctpop.step46, 8
  %cppop.and249 = and i32 %ctpop.sh48, 16711935
  %ctpop.step50 = add i32 %cppop.and147, %cppop.and249
  %cppop.and151 = and i32 %ctpop.step50, 65535
  %ctpop.sh52 = lshr i32 %ctpop.step50, 16
  %cppop.and253 = and i32 %ctpop.sh52, 65535
  %ctpop.step54 = add i32 %cppop.and151, %cppop.and253
  %ctpop.part55 = add i32 %ctpop.step54, 0
  %276 = add nsw i32 %ctpop.part55, -1
  %277 = sub nuw nsw i32 134, %ctpop.part55
  %278 = shl i32 %272, %276
  %279 = tail call fastcc i32 @roundAndPackFloat32(i8 noundef zeroext 0, i32 noundef %277, i32 noundef %278, %struct.float_status* noundef nonnull %1) #30
  br label %287

280:                                              ; preds = %65
  %281 = sub i32 0, %272
  %ctlz.sh56 = lshr i32 %281, 1
  %ctlz.step57 = or i32 %281, %ctlz.sh56
  %ctlz.sh58 = lshr i32 %ctlz.step57, 2
  %ctlz.step59 = or i32 %ctlz.step57, %ctlz.sh58
  %ctlz.sh60 = lshr i32 %ctlz.step59, 4
  %ctlz.step61 = or i32 %ctlz.step59, %ctlz.sh60
  %ctlz.sh62 = lshr i32 %ctlz.step61, 8
  %ctlz.step63 = or i32 %ctlz.step61, %ctlz.sh62
  %ctlz.sh64 = lshr i32 %ctlz.step63, 16
  %ctlz.step65 = or i32 %ctlz.step63, %ctlz.sh64
  %282 = xor i32 %ctlz.step65, -1
  %cppop.and166 = and i32 %282, 1431655765
  %ctpop.sh67 = lshr i32 %282, 1
  %cppop.and268 = and i32 %ctpop.sh67, 1431655765
  %ctpop.step69 = add i32 %cppop.and166, %cppop.and268
  %cppop.and170 = and i32 %ctpop.step69, 858993459
  %ctpop.sh71 = lshr i32 %ctpop.step69, 2
  %cppop.and272 = and i32 %ctpop.sh71, 858993459
  %ctpop.step73 = add i32 %cppop.and170, %cppop.and272
  %cppop.and174 = and i32 %ctpop.step73, 252645135
  %ctpop.sh75 = lshr i32 %ctpop.step73, 4
  %cppop.and276 = and i32 %ctpop.sh75, 252645135
  %ctpop.step77 = add i32 %cppop.and174, %cppop.and276
  %cppop.and178 = and i32 %ctpop.step77, 16711935
  %ctpop.sh79 = lshr i32 %ctpop.step77, 8
  %cppop.and280 = and i32 %ctpop.sh79, 16711935
  %ctpop.step81 = add i32 %cppop.and178, %cppop.and280
  %cppop.and182 = and i32 %ctpop.step81, 65535
  %ctpop.sh83 = lshr i32 %ctpop.step81, 16
  %cppop.and284 = and i32 %ctpop.sh83, 65535
  %ctpop.step85 = add i32 %cppop.and182, %cppop.and284
  %ctpop.part86 = add i32 %ctpop.step85, 0
  %283 = add nsw i32 %ctpop.part86, -1
  %284 = sub nuw nsw i32 134, %ctpop.part86
  %285 = shl i32 %281, %283
  %286 = tail call fastcc i32 @roundAndPackFloat32(i8 noundef zeroext 1, i32 noundef %284, i32 noundef %285, %struct.float_status* noundef nonnull %1) #30
  br label %287

287:                                              ; preds = %57, %59, %53, %23, %280, %274, %40, %34
  %288 = phi i32 [ -4194304, %34 ], [ %18, %40 ], [ %279, %274 ], [ %286, %280 ], [ -8388608, %23 ], [ %64, %59 ], [ -4194304, %53 ], [ 0, %57 ]
  ret i32 %288
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @float32_eq(i32 noundef %0, i32 noundef %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i32 %0, 2139095040
  %9 = icmp ne i32 %8, 0
  %10 = and i32 %0, 8388607
  %11 = icmp eq i32 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i32 %0, -2147483648
  br label %18

18:                                               ; preds = %7, %13
  %19 = phi i32 [ %0, %7 ], [ %17, %13 ]
  %20 = and i32 %1, 2139095040
  %21 = icmp ne i32 %20, 0
  %22 = and i32 %1, 8388607
  %23 = icmp eq i32 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i32 %1, -2147483648
  br label %30

30:                                               ; preds = %3, %18, %25
  %31 = phi i32 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i32 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = and i32 %31, 2139095040
  %34 = icmp ne i32 %33, 2139095040
  %35 = and i32 %31, 8388607
  %36 = icmp eq i32 %35, 0
  %37 = or i1 %34, %36
  br i1 %37, label %38, label %44

38:                                               ; preds = %30
  %39 = and i32 %32, 2139095040
  %40 = icmp ne i32 %39, 2139095040
  %41 = and i32 %32, 8388607
  %42 = icmp eq i32 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %48, label %44

44:                                               ; preds = %38, %30
  %45 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %46 = load i8, i8* %45, align 1
  %47 = or i8 %46, 1
  store i8 %47, i8* %45, align 1
  br label %55

48:                                               ; preds = %38
  %49 = icmp eq i32 %31, %32
  %50 = or i32 %32, %31
  %51 = and i32 %50, 2147483647
  %52 = icmp eq i32 %51, 0
  %53 = or i1 %49, %52
  %54 = zext i1 %53 to i32
  br label %55

55:                                               ; preds = %48, %44
  %56 = phi i32 [ 0, %44 ], [ %54, %48 ]
  ret i32 %56
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @float32_le(i32 noundef %0, i32 noundef %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i32 %0, 2139095040
  %9 = icmp ne i32 %8, 0
  %10 = and i32 %0, 8388607
  %11 = icmp eq i32 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i32 %0, -2147483648
  br label %18

18:                                               ; preds = %7, %13
  %19 = phi i32 [ %0, %7 ], [ %17, %13 ]
  %20 = and i32 %1, 2139095040
  %21 = icmp ne i32 %20, 0
  %22 = and i32 %1, 8388607
  %23 = icmp eq i32 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i32 %1, -2147483648
  br label %30

30:                                               ; preds = %3, %18, %25
  %31 = phi i32 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i32 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = and i32 %31, 2139095040
  %34 = icmp ne i32 %33, 2139095040
  %35 = and i32 %31, 8388607
  %36 = icmp eq i32 %35, 0
  %37 = or i1 %34, %36
  br i1 %37, label %38, label %44

38:                                               ; preds = %30
  %39 = and i32 %32, 2139095040
  %40 = icmp ne i32 %39, 2139095040
  %41 = and i32 %32, 8388607
  %42 = icmp eq i32 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %48, label %44

44:                                               ; preds = %38, %30
  %45 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %46 = load i8, i8* %45, align 1
  %47 = or i8 %46, 1
  store i8 %47, i8* %45, align 1
  br label %66

48:                                               ; preds = %38
  %49 = lshr i32 %31, 31
  %50 = trunc i32 %49 to i8
  %51 = lshr i32 %32, 31
  %52 = trunc i32 %51 to i8
  %53 = icmp eq i8 %50, %52
  br i1 %53, label %60, label %54

54:                                               ; preds = %48
  %55 = icmp slt i32 %31, 0
  %56 = or i32 %32, %31
  %57 = and i32 %56, 2147483647
  %58 = icmp eq i32 %57, 0
  %59 = or i1 %55, %58
  br label %66

60:                                               ; preds = %48
  %61 = icmp eq i32 %31, %32
  %62 = icmp ult i32 %31, %32
  %63 = zext i1 %62 to i8
  %64 = icmp ne i8 %50, %63
  %65 = or i1 %61, %64
  br label %66

66:                                               ; preds = %60, %54, %44
  %67 = phi i1 [ false, %44 ], [ %59, %54 ], [ %65, %60 ]
  %68 = zext i1 %67 to i32
  ret i32 %68
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @float32_lt(i32 noundef %0, i32 noundef %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i32 %0, 2139095040
  %9 = icmp ne i32 %8, 0
  %10 = and i32 %0, 8388607
  %11 = icmp eq i32 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i32 %0, -2147483648
  br label %18

18:                                               ; preds = %7, %13
  %19 = phi i32 [ %0, %7 ], [ %17, %13 ]
  %20 = and i32 %1, 2139095040
  %21 = icmp ne i32 %20, 0
  %22 = and i32 %1, 8388607
  %23 = icmp eq i32 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i32 %1, -2147483648
  br label %30

30:                                               ; preds = %3, %18, %25
  %31 = phi i32 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i32 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = and i32 %31, 2139095040
  %34 = icmp ne i32 %33, 2139095040
  %35 = and i32 %31, 8388607
  %36 = icmp eq i32 %35, 0
  %37 = or i1 %34, %36
  br i1 %37, label %38, label %44

38:                                               ; preds = %30
  %39 = and i32 %32, 2139095040
  %40 = icmp ne i32 %39, 2139095040
  %41 = and i32 %32, 8388607
  %42 = icmp eq i32 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %48, label %44

44:                                               ; preds = %38, %30
  %45 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %46 = load i8, i8* %45, align 1
  %47 = or i8 %46, 1
  store i8 %47, i8* %45, align 1
  br label %66

48:                                               ; preds = %38
  %49 = lshr i32 %31, 31
  %50 = trunc i32 %49 to i8
  %51 = lshr i32 %32, 31
  %52 = trunc i32 %51 to i8
  %53 = icmp eq i8 %50, %52
  br i1 %53, label %60, label %54

54:                                               ; preds = %48
  %55 = or i32 %32, %31
  %56 = and i32 %55, 2147483647
  %57 = icmp ne i32 %56, 0
  %58 = icmp slt i32 %31, 0
  %59 = and i1 %58, %57
  br label %66

60:                                               ; preds = %48
  %61 = icmp ne i32 %31, %32
  %62 = icmp ult i32 %31, %32
  %63 = zext i1 %62 to i8
  %64 = icmp ne i8 %50, %63
  %65 = and i1 %61, %64
  br label %66

66:                                               ; preds = %60, %54, %44
  %67 = phi i1 [ false, %44 ], [ %59, %54 ], [ %65, %60 ]
  %68 = zext i1 %67 to i32
  ret i32 %68
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @float32_unordered(i32 noundef %0, i32 noundef %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %28, label %7

7:                                                ; preds = %3
  %8 = and i32 %0, 2139095040
  %9 = icmp ne i32 %8, 0
  %10 = and i32 %0, 8388607
  %11 = icmp eq i32 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %17, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  br label %17

17:                                               ; preds = %7, %13
  %18 = phi i32 [ %0, %7 ], [ 0, %13 ]
  %19 = and i32 %1, 2139095040
  %20 = icmp ne i32 %19, 0
  %21 = and i32 %1, 8388607
  %22 = icmp eq i32 %21, 0
  %23 = or i1 %20, %22
  br i1 %23, label %28, label %24

24:                                               ; preds = %17
  %25 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %26 = load i8, i8* %25, align 1
  %27 = or i8 %26, 64
  store i8 %27, i8* %25, align 1
  br label %28

28:                                               ; preds = %3, %17, %24
  %29 = phi i32 [ %18, %24 ], [ %18, %17 ], [ %0, %3 ]
  %30 = phi i32 [ 0, %24 ], [ %1, %17 ], [ %1, %3 ]
  %31 = and i32 %29, 2139095040
  %32 = icmp ne i32 %31, 2139095040
  %33 = and i32 %29, 8388607
  %34 = icmp eq i32 %33, 0
  %35 = or i1 %32, %34
  br i1 %35, label %36, label %42

36:                                               ; preds = %28
  %37 = and i32 %30, 2139095040
  %38 = icmp ne i32 %37, 2139095040
  %39 = and i32 %30, 8388607
  %40 = icmp eq i32 %39, 0
  %41 = or i1 %38, %40
  br i1 %41, label %46, label %42

42:                                               ; preds = %36, %28
  %43 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %44 = load i8, i8* %43, align 1
  %45 = or i8 %44, 1
  store i8 %45, i8* %43, align 1
  br label %46

46:                                               ; preds = %36, %42
  %47 = phi i32 [ 1, %42 ], [ 0, %36 ]
  ret i32 %47
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @float32_eq_quiet(i32 noundef %0, i32 noundef %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i32 %0, 2139095040
  %9 = icmp ne i32 %8, 0
  %10 = and i32 %0, 8388607
  %11 = icmp eq i32 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i32 %0, -2147483648
  br label %18

18:                                               ; preds = %7, %13
  %19 = phi i32 [ %0, %7 ], [ %17, %13 ]
  %20 = and i32 %1, 2139095040
  %21 = icmp ne i32 %20, 0
  %22 = and i32 %1, 8388607
  %23 = icmp eq i32 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i32 %1, -2147483648
  br label %30

30:                                               ; preds = %3, %18, %25
  %31 = phi i32 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i32 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = and i32 %31, 2139095040
  %34 = icmp ne i32 %33, 2139095040
  %35 = and i32 %31, 8388607
  %36 = icmp eq i32 %35, 0
  %37 = or i1 %34, %36
  br i1 %37, label %38, label %44

38:                                               ; preds = %30
  %39 = and i32 %32, 2139095040
  %40 = icmp ne i32 %39, 2139095040
  %41 = and i32 %32, 8388607
  %42 = icmp eq i32 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %60, label %44

44:                                               ; preds = %38, %30
  %45 = and i32 %31, 2143289344
  %46 = icmp ne i32 %45, 2139095040
  %47 = and i32 %31, 4194303
  %48 = icmp eq i32 %47, 0
  %49 = or i1 %46, %48
  br i1 %49, label %50, label %56

50:                                               ; preds = %44
  %51 = and i32 %32, 2143289344
  %52 = icmp ne i32 %51, 2139095040
  %53 = and i32 %32, 4194303
  %54 = icmp eq i32 %53, 0
  %55 = or i1 %52, %54
  br i1 %55, label %67, label %56

56:                                               ; preds = %50, %44
  %57 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %58 = load i8, i8* %57, align 1
  %59 = or i8 %58, 1
  store i8 %59, i8* %57, align 1
  br label %67

60:                                               ; preds = %38
  %61 = icmp eq i32 %31, %32
  %62 = or i32 %32, %31
  %63 = and i32 %62, 2147483647
  %64 = icmp eq i32 %63, 0
  %65 = or i1 %61, %64
  %66 = zext i1 %65 to i32
  br label %67

67:                                               ; preds = %50, %56, %60
  %68 = phi i32 [ %66, %60 ], [ 0, %56 ], [ 0, %50 ]
  ret i32 %68
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @float32_le_quiet(i32 noundef %0, i32 noundef %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i32 %0, 2139095040
  %9 = icmp ne i32 %8, 0
  %10 = and i32 %0, 8388607
  %11 = icmp eq i32 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i32 %0, -2147483648
  br label %18

18:                                               ; preds = %7, %13
  %19 = phi i32 [ %0, %7 ], [ %17, %13 ]
  %20 = and i32 %1, 2139095040
  %21 = icmp ne i32 %20, 0
  %22 = and i32 %1, 8388607
  %23 = icmp eq i32 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i32 %1, -2147483648
  br label %30

30:                                               ; preds = %3, %18, %25
  %31 = phi i32 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i32 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = and i32 %31, 2139095040
  %34 = icmp ne i32 %33, 2139095040
  %35 = and i32 %31, 8388607
  %36 = icmp eq i32 %35, 0
  %37 = or i1 %34, %36
  br i1 %37, label %38, label %44

38:                                               ; preds = %30
  %39 = and i32 %32, 2139095040
  %40 = icmp ne i32 %39, 2139095040
  %41 = and i32 %32, 8388607
  %42 = icmp eq i32 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %60, label %44

44:                                               ; preds = %38, %30
  %45 = and i32 %31, 2143289344
  %46 = icmp ne i32 %45, 2139095040
  %47 = and i32 %31, 4194303
  %48 = icmp eq i32 %47, 0
  %49 = or i1 %46, %48
  br i1 %49, label %50, label %56

50:                                               ; preds = %44
  %51 = and i32 %32, 2143289344
  %52 = icmp ne i32 %51, 2139095040
  %53 = and i32 %32, 4194303
  %54 = icmp eq i32 %53, 0
  %55 = or i1 %52, %54
  br i1 %55, label %78, label %56

56:                                               ; preds = %50, %44
  %57 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %58 = load i8, i8* %57, align 1
  %59 = or i8 %58, 1
  store i8 %59, i8* %57, align 1
  br label %78

60:                                               ; preds = %38
  %61 = lshr i32 %31, 31
  %62 = trunc i32 %61 to i8
  %63 = lshr i32 %32, 31
  %64 = trunc i32 %63 to i8
  %65 = icmp eq i8 %62, %64
  br i1 %65, label %72, label %66

66:                                               ; preds = %60
  %67 = icmp slt i32 %31, 0
  %68 = or i32 %32, %31
  %69 = and i32 %68, 2147483647
  %70 = icmp eq i32 %69, 0
  %71 = or i1 %67, %70
  br label %78

72:                                               ; preds = %60
  %73 = icmp eq i32 %31, %32
  %74 = icmp ult i32 %31, %32
  %75 = zext i1 %74 to i8
  %76 = icmp ne i8 %62, %75
  %77 = or i1 %73, %76
  br label %78

78:                                               ; preds = %50, %56, %72, %66
  %79 = phi i1 [ %71, %66 ], [ %77, %72 ], [ false, %56 ], [ false, %50 ]
  %80 = zext i1 %79 to i32
  ret i32 %80
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @float32_lt_quiet(i32 noundef %0, i32 noundef %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i32 %0, 2139095040
  %9 = icmp ne i32 %8, 0
  %10 = and i32 %0, 8388607
  %11 = icmp eq i32 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i32 %0, -2147483648
  br label %18

18:                                               ; preds = %7, %13
  %19 = phi i32 [ %0, %7 ], [ %17, %13 ]
  %20 = and i32 %1, 2139095040
  %21 = icmp ne i32 %20, 0
  %22 = and i32 %1, 8388607
  %23 = icmp eq i32 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i32 %1, -2147483648
  br label %30

30:                                               ; preds = %3, %18, %25
  %31 = phi i32 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i32 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = and i32 %31, 2139095040
  %34 = icmp ne i32 %33, 2139095040
  %35 = and i32 %31, 8388607
  %36 = icmp eq i32 %35, 0
  %37 = or i1 %34, %36
  br i1 %37, label %38, label %44

38:                                               ; preds = %30
  %39 = and i32 %32, 2139095040
  %40 = icmp ne i32 %39, 2139095040
  %41 = and i32 %32, 8388607
  %42 = icmp eq i32 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %60, label %44

44:                                               ; preds = %38, %30
  %45 = and i32 %31, 2143289344
  %46 = icmp ne i32 %45, 2139095040
  %47 = and i32 %31, 4194303
  %48 = icmp eq i32 %47, 0
  %49 = or i1 %46, %48
  br i1 %49, label %50, label %56

50:                                               ; preds = %44
  %51 = and i32 %32, 2143289344
  %52 = icmp ne i32 %51, 2139095040
  %53 = and i32 %32, 4194303
  %54 = icmp eq i32 %53, 0
  %55 = or i1 %52, %54
  br i1 %55, label %78, label %56

56:                                               ; preds = %50, %44
  %57 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %58 = load i8, i8* %57, align 1
  %59 = or i8 %58, 1
  store i8 %59, i8* %57, align 1
  br label %78

60:                                               ; preds = %38
  %61 = lshr i32 %31, 31
  %62 = trunc i32 %61 to i8
  %63 = lshr i32 %32, 31
  %64 = trunc i32 %63 to i8
  %65 = icmp eq i8 %62, %64
  br i1 %65, label %72, label %66

66:                                               ; preds = %60
  %67 = or i32 %32, %31
  %68 = and i32 %67, 2147483647
  %69 = icmp ne i32 %68, 0
  %70 = icmp slt i32 %31, 0
  %71 = and i1 %70, %69
  br label %78

72:                                               ; preds = %60
  %73 = icmp ne i32 %31, %32
  %74 = icmp ult i32 %31, %32
  %75 = zext i1 %74 to i8
  %76 = icmp ne i8 %62, %75
  %77 = and i1 %73, %76
  br label %78

78:                                               ; preds = %50, %56, %72, %66
  %79 = phi i1 [ %71, %66 ], [ %77, %72 ], [ false, %56 ], [ false, %50 ]
  %80 = zext i1 %79 to i32
  ret i32 %80
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @float32_unordered_quiet(i32 noundef %0, i32 noundef %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %28, label %7

7:                                                ; preds = %3
  %8 = and i32 %0, 2139095040
  %9 = icmp ne i32 %8, 0
  %10 = and i32 %0, 8388607
  %11 = icmp eq i32 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %17, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  br label %17

17:                                               ; preds = %7, %13
  %18 = phi i32 [ %0, %7 ], [ 0, %13 ]
  %19 = and i32 %1, 2139095040
  %20 = icmp ne i32 %19, 0
  %21 = and i32 %1, 8388607
  %22 = icmp eq i32 %21, 0
  %23 = or i1 %20, %22
  br i1 %23, label %28, label %24

24:                                               ; preds = %17
  %25 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %26 = load i8, i8* %25, align 1
  %27 = or i8 %26, 64
  store i8 %27, i8* %25, align 1
  br label %28

28:                                               ; preds = %3, %17, %24
  %29 = phi i32 [ %18, %24 ], [ %18, %17 ], [ %0, %3 ]
  %30 = phi i32 [ 0, %24 ], [ %1, %17 ], [ %1, %3 ]
  %31 = and i32 %29, 2139095040
  %32 = icmp ne i32 %31, 2139095040
  %33 = and i32 %29, 8388607
  %34 = icmp eq i32 %33, 0
  %35 = or i1 %32, %34
  br i1 %35, label %36, label %42

36:                                               ; preds = %28
  %37 = and i32 %30, 2139095040
  %38 = icmp ne i32 %37, 2139095040
  %39 = and i32 %30, 8388607
  %40 = icmp eq i32 %39, 0
  %41 = or i1 %38, %40
  br i1 %41, label %58, label %42

42:                                               ; preds = %36, %28
  %43 = and i32 %29, 2143289344
  %44 = icmp ne i32 %43, 2139095040
  %45 = and i32 %29, 4194303
  %46 = icmp eq i32 %45, 0
  %47 = or i1 %44, %46
  br i1 %47, label %48, label %54

48:                                               ; preds = %42
  %49 = and i32 %30, 2143289344
  %50 = icmp ne i32 %49, 2139095040
  %51 = and i32 %30, 4194303
  %52 = icmp eq i32 %51, 0
  %53 = or i1 %50, %52
  br i1 %53, label %58, label %54

54:                                               ; preds = %48, %42
  %55 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %56 = load i8, i8* %55, align 1
  %57 = or i8 %56, 1
  store i8 %57, i8* %55, align 1
  br label %58

58:                                               ; preds = %36, %48, %54
  %59 = phi i32 [ 1, %54 ], [ 1, %48 ], [ 0, %36 ]
  ret i32 %59
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define i32 @float64_to_int32(i64 noundef %0, %struct.float_status* nocapture noundef %1) local_unnamed_addr #14 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = and i64 %0, 9218868437227405312
  %8 = icmp ne i64 %7, 0
  %9 = and i64 %0, 4503599627370495
  %10 = icmp eq i64 %9, 0
  %11 = or i1 %8, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, 64
  store i8 %15, i8* %13, align 1
  %16 = and i64 %0, -9223372036854775808
  br label %17

17:                                               ; preds = %2, %6, %12
  %18 = phi i64 [ %16, %12 ], [ %0, %6 ], [ %0, %2 ]
  %19 = and i64 %18, 4503599627370495
  %20 = lshr i64 %18, 52
  %21 = trunc i64 %20 to i32
  %22 = and i32 %21, 2047
  %23 = lshr i64 %18, 63
  %24 = trunc i64 %23 to i8
  %25 = icmp eq i32 %22, 0
  br i1 %25, label %41, label %26

26:                                               ; preds = %17
  %27 = or i64 %19, 4503599627370496
  %28 = icmp ult i32 %22, 1068
  br i1 %28, label %29, label %45

29:                                               ; preds = %26
  %30 = icmp ugt i32 %22, 1004
  br i1 %30, label %31, label %41

31:                                               ; preds = %29
  %32 = sub nuw nsw i32 1068, %22
  %33 = add nuw nsw i64 %20, 20
  %34 = zext i32 %32 to i64
  %35 = lshr i64 %27, %34
  %36 = and i64 %33, 63
  %37 = shl i64 %27, %36
  %38 = icmp ne i64 %37, 0
  %39 = zext i1 %38 to i64
  %40 = or i64 %35, %39
  br label %45

41:                                               ; preds = %17, %29
  %42 = phi i64 [ 1, %29 ], [ %19, %17 ]
  %43 = icmp ne i64 %42, 0
  %44 = zext i1 %43 to i64
  br label %45

45:                                               ; preds = %41, %31, %26
  %46 = phi i64 [ %27, %26 ], [ %40, %31 ], [ %44, %41 ]
  %47 = icmp eq i32 %22, 2047
  %48 = icmp ne i64 %19, 0
  %49 = and i1 %48, %47
  %50 = select i1 %49, i8 0, i8 %24
  %51 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 1
  %52 = load i8, i8* %51, align 1
  %53 = icmp eq i8 %52, 0
  br i1 %53, label %64, label %54

54:                                               ; preds = %45
  %55 = icmp eq i8 %52, 3
  br i1 %55, label %64, label %56

56:                                               ; preds = %54
  %57 = icmp eq i8 %50, 0
  br i1 %57, label %61, label %58

58:                                               ; preds = %56
  %59 = icmp eq i8 %52, 2
  %60 = select i1 %59, i64 0, i64 127
  br label %64

61:                                               ; preds = %56
  %62 = icmp eq i8 %52, 1
  %63 = select i1 %62, i64 0, i64 127
  br label %64

64:                                               ; preds = %61, %58, %54, %45
  %65 = phi i64 [ 64, %45 ], [ 0, %54 ], [ %60, %58 ], [ %63, %61 ]
  %66 = trunc i64 %46 to i8
  %67 = and i8 %66, 127
  %68 = add i64 %65, %46
  %69 = lshr i64 %68, 7
  %70 = icmp eq i8 %67, 64
  %71 = and i1 %53, %70
  %72 = zext i1 %71 to i64
  %73 = xor i64 %72, -1
  %74 = and i64 %69, %73
  %75 = trunc i64 %74 to i32
  %76 = icmp eq i8 %50, 0
  %77 = sub nsw i32 0, %75
  %78 = select i1 %76, i32 %75, i32 %77
  %79 = icmp ult i64 %68, 549755813888
  br i1 %79, label %80, label %86

80:                                               ; preds = %64
  %81 = icmp eq i32 %78, 0
  br i1 %81, label %91, label %82

82:                                               ; preds = %80
  %83 = lshr i32 %78, 31
  %84 = zext i8 %50 to i32
  %85 = icmp eq i32 %83, %84
  br i1 %85, label %91, label %86

86:                                               ; preds = %82, %64
  %87 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %88 = load i8, i8* %87, align 1
  %89 = or i8 %88, 1
  store i8 %89, i8* %87, align 1
  %90 = select i1 %76, i32 2147483647, i32 -2147483648
  br label %97

91:                                               ; preds = %82, %80
  %92 = icmp eq i8 %67, 0
  br i1 %92, label %97, label %93

93:                                               ; preds = %91
  %94 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %95 = load i8, i8* %94, align 1
  %96 = or i8 %95, 32
  store i8 %96, i8* %94, align 1
  br label %97

97:                                               ; preds = %86, %91, %93
  %98 = phi i32 [ %90, %86 ], [ %78, %93 ], [ %78, %91 ]
  ret i32 %98
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @float64_to_int32_round_to_zero(i64 noundef %0, %struct.float_status* nocapture noundef %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = and i64 %0, 9218868437227405312
  %8 = icmp ne i64 %7, 0
  %9 = and i64 %0, 4503599627370495
  %10 = icmp eq i64 %9, 0
  %11 = or i1 %8, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, 64
  store i8 %15, i8* %13, align 1
  %16 = and i64 %0, -9223372036854775808
  br label %17

17:                                               ; preds = %2, %6, %12
  %18 = phi i64 [ %16, %12 ], [ %0, %6 ], [ %0, %2 ]
  %19 = and i64 %18, 4503599627370495
  %20 = lshr i64 %18, 52
  %21 = trunc i64 %20 to i32
  %22 = and i32 %21, 2047
  %23 = lshr i64 %18, 63
  %24 = trunc i64 %23 to i8
  %25 = icmp ugt i32 %22, 1054
  br i1 %25, label %26, label %31

26:                                               ; preds = %17
  %27 = icmp eq i32 %22, 2047
  %28 = icmp ne i64 %19, 0
  %29 = and i1 %28, %27
  %30 = select i1 %29, i8 0, i8 %24
  br label %53

31:                                               ; preds = %17
  %32 = icmp ult i32 %22, 1023
  br i1 %32, label %33, label %41

33:                                               ; preds = %31
  %34 = icmp ne i32 %22, 0
  %35 = icmp ne i64 %19, 0
  %36 = or i1 %35, %34
  br i1 %36, label %37, label %67

37:                                               ; preds = %33
  %38 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %39 = load i8, i8* %38, align 1
  %40 = or i8 %39, 32
  store i8 %40, i8* %38, align 1
  br label %67

41:                                               ; preds = %31
  %42 = or i64 %19, 4503599627370496
  %43 = sub nuw nsw i32 1075, %22
  %44 = zext i32 %43 to i64
  %45 = lshr i64 %42, %44
  %46 = trunc i64 %45 to i32
  %47 = icmp sgt i64 %18, -1
  %48 = sub nsw i32 0, %46
  %49 = select i1 %47, i32 %46, i32 %48
  %50 = lshr i32 %49, 31
  %51 = trunc i64 %23 to i32
  %52 = icmp eq i32 %50, %51
  br i1 %52, label %60, label %53

53:                                               ; preds = %26, %41
  %54 = phi i8 [ %24, %41 ], [ %30, %26 ]
  %55 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %56 = load i8, i8* %55, align 1
  %57 = or i8 %56, 1
  store i8 %57, i8* %55, align 1
  %58 = icmp eq i8 %54, 0
  %59 = select i1 %58, i32 2147483647, i32 -2147483648
  br label %67

60:                                               ; preds = %41
  %61 = shl i64 %45, %44
  %62 = icmp eq i64 %61, %42
  br i1 %62, label %67, label %63

63:                                               ; preds = %60
  %64 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %65 = load i8, i8* %64, align 1
  %66 = or i8 %65, 32
  store i8 %66, i8* %64, align 1
  br label %67

67:                                               ; preds = %60, %63, %37, %33, %53
  %68 = phi i32 [ %59, %53 ], [ 0, %33 ], [ 0, %37 ], [ %49, %63 ], [ %49, %60 ]
  ret i32 %68
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @float64_to_int16_round_to_zero(i64 noundef %0, %struct.float_status* nocapture noundef %1) local_unnamed_addr #2 {
  %3 = and i64 %0, 4503599627370495
  %4 = lshr i64 %0, 52
  %5 = trunc i64 %4 to i32
  %6 = and i32 %5, 2047
  %7 = lshr i64 %0, 63
  %8 = trunc i64 %7 to i8
  %9 = icmp ugt i32 %6, 1038
  br i1 %9, label %10, label %15

10:                                               ; preds = %2
  %11 = icmp eq i32 %6, 2047
  %12 = icmp ne i64 %3, 0
  %13 = and i1 %12, %11
  %14 = select i1 %13, i8 0, i8 %8
  br label %38

15:                                               ; preds = %2
  %16 = icmp ult i32 %6, 1023
  br i1 %16, label %17, label %25

17:                                               ; preds = %15
  %18 = icmp ne i32 %6, 0
  %19 = icmp ne i64 %3, 0
  %20 = or i1 %19, %18
  br i1 %20, label %21, label %52

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %23 = load i8, i8* %22, align 1
  %24 = or i8 %23, 32
  store i8 %24, i8* %22, align 1
  br label %52

25:                                               ; preds = %15
  %26 = or i64 %3, 4503599627370496
  %27 = sub nuw nsw i32 1075, %6
  %28 = zext i32 %27 to i64
  %29 = lshr i64 %26, %28
  %30 = trunc i64 %29 to i32
  %31 = icmp sgt i64 %0, -1
  %32 = sub nsw i32 0, %30
  %33 = select i1 %31, i32 %30, i32 %32
  %34 = lshr i32 %33, 15
  %35 = and i32 %34, 1
  %36 = trunc i64 %7 to i32
  %37 = icmp eq i32 %35, %36
  br i1 %37, label %45, label %38

38:                                               ; preds = %10, %25
  %39 = phi i8 [ %8, %25 ], [ %14, %10 ]
  %40 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %41 = load i8, i8* %40, align 1
  %42 = or i8 %41, 1
  store i8 %42, i8* %40, align 1
  %43 = icmp eq i8 %39, 0
  %44 = select i1 %43, i32 32767, i32 -32768
  br label %52

45:                                               ; preds = %25
  %46 = shl i64 %29, %28
  %47 = icmp eq i64 %46, %26
  br i1 %47, label %52, label %48

48:                                               ; preds = %45
  %49 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %50 = load i8, i8* %49, align 1
  %51 = or i8 %50, 32
  store i8 %51, i8* %49, align 1
  br label %52

52:                                               ; preds = %45, %48, %21, %17, %38
  %53 = phi i32 [ %44, %38 ], [ 0, %17 ], [ 0, %21 ], [ %33, %48 ], [ %33, %45 ]
  ret i32 %53
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define i64 @float64_to_int64(i64 noundef %0, %struct.float_status* nocapture noundef %1) local_unnamed_addr #14 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = and i64 %0, 9218868437227405312
  %8 = icmp ne i64 %7, 0
  %9 = and i64 %0, 4503599627370495
  %10 = icmp eq i64 %9, 0
  %11 = or i1 %8, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, 64
  store i8 %15, i8* %13, align 1
  %16 = and i64 %0, -9223372036854775808
  br label %17

17:                                               ; preds = %2, %6, %12
  %18 = phi i64 [ %16, %12 ], [ %0, %6 ], [ %0, %2 ]
  %19 = and i64 %18, 4503599627370495
  %20 = lshr i64 %18, 52
  %21 = trunc i64 %20 to i32
  %22 = and i32 %21, 2047
  %23 = lshr i64 %18, 63
  %24 = icmp eq i32 %22, 0
  br i1 %24, label %55, label %25

25:                                               ; preds = %17
  %26 = or i64 %19, 4503599627370496
  %27 = add nsw i32 %22, -1075
  %28 = icmp ugt i32 %22, 1074
  br i1 %28, label %29, label %44

29:                                               ; preds = %25
  %30 = icmp ugt i32 %22, 1086
  br i1 %30, label %31, label %41

31:                                               ; preds = %29
  %32 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %33 = load i8, i8* %32, align 1
  %34 = or i8 %33, 1
  store i8 %34, i8* %32, align 1
  %35 = icmp sgt i64 %18, -1
  br i1 %35, label %117, label %36

36:                                               ; preds = %31
  %37 = icmp eq i32 %22, 2047
  %38 = icmp ne i64 %26, 4503599627370496
  %39 = and i1 %38, %37
  %40 = select i1 %39, i64 9223372036854775807, i64 -9223372036854775808
  br label %117

41:                                               ; preds = %29
  %42 = zext i32 %27 to i64
  %43 = shl i64 %26, %42
  br label %59

44:                                               ; preds = %25
  %45 = icmp ugt i32 %22, 1011
  br i1 %45, label %46, label %53

46:                                               ; preds = %44
  %47 = sub nuw nsw i32 1075, %22
  %48 = add nuw nsw i64 %20, 13
  %49 = and i64 %48, 63
  %50 = shl i64 %26, %49
  %51 = zext i32 %47 to i64
  %52 = lshr i64 %26, %51
  br label %59

53:                                               ; preds = %44
  %54 = icmp eq i32 %22, 1011
  br i1 %54, label %59, label %55

55:                                               ; preds = %17, %53
  %56 = phi i64 [ 1, %53 ], [ %19, %17 ]
  %57 = icmp ne i64 %56, 0
  %58 = zext i1 %57 to i64
  br label %59

59:                                               ; preds = %55, %46, %53, %41
  %60 = phi i64 [ %43, %41 ], [ %52, %46 ], [ 0, %55 ], [ 0, %53 ]
  %61 = phi i64 [ 0, %41 ], [ %50, %46 ], [ %58, %55 ], [ %26, %53 ]
  %62 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 1
  %63 = load i8, i8* %62, align 1
  %64 = icmp eq i8 %63, 0
  %65 = lshr i64 %61, 63
  %66 = trunc i64 %65 to i8
  br i1 %64, label %81, label %67

67:                                               ; preds = %59
  %68 = icmp eq i8 %63, 3
  br i1 %68, label %94, label %69

69:                                               ; preds = %67
  %70 = icmp sgt i64 %18, -1
  br i1 %70, label %76, label %71

71:                                               ; preds = %69
  %72 = icmp eq i8 %63, 1
  %73 = icmp ne i64 %61, 0
  %74 = and i1 %73, %72
  %75 = zext i1 %74 to i8
  br label %81

76:                                               ; preds = %69
  %77 = icmp eq i8 %63, 2
  %78 = icmp ne i64 %61, 0
  %79 = and i1 %78, %77
  %80 = zext i1 %79 to i8
  br label %81

81:                                               ; preds = %76, %71, %59
  %82 = phi i8 [ %66, %59 ], [ %75, %71 ], [ %80, %76 ]
  %83 = icmp eq i8 %82, 0
  br i1 %83, label %94, label %84

84:                                               ; preds = %81
  %85 = add i64 %60, 1
  %86 = icmp eq i64 %85, 0
  br i1 %86, label %105, label %87

87:                                               ; preds = %84
  %88 = and i64 %61, 9223372036854775807
  %89 = icmp eq i64 %88, 0
  %90 = and i1 %89, %64
  %91 = zext i1 %90 to i64
  %92 = xor i64 %91, -1
  %93 = and i64 %85, %92
  br label %94

94:                                               ; preds = %87, %81, %67
  %95 = phi i64 [ %93, %87 ], [ %60, %81 ], [ %60, %67 ]
  %96 = icmp sgt i64 %18, -1
  %97 = sub nsw i64 0, %95
  %98 = select i1 %96, i64 %95, i64 %97
  %99 = icmp eq i64 %98, 0
  %100 = lshr i64 %98, 63
  %101 = trunc i64 %100 to i32
  %102 = trunc i64 %23 to i32
  %103 = icmp eq i32 %101, %102
  %104 = select i1 %99, i1 true, i1 %103
  br i1 %104, label %111, label %105

105:                                              ; preds = %94, %84
  %106 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %107 = load i8, i8* %106, align 1
  %108 = or i8 %107, 1
  store i8 %108, i8* %106, align 1
  %109 = icmp sgt i64 %18, -1
  %110 = select i1 %109, i64 9223372036854775807, i64 -9223372036854775808
  br label %117

111:                                              ; preds = %94
  %112 = icmp eq i64 %61, 0
  br i1 %112, label %117, label %113

113:                                              ; preds = %111
  %114 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %115 = load i8, i8* %114, align 1
  %116 = or i8 %115, 32
  store i8 %116, i8* %114, align 1
  br label %117

117:                                              ; preds = %113, %111, %105, %36, %31
  %118 = phi i64 [ 9223372036854775807, %31 ], [ %40, %36 ], [ %110, %105 ], [ %98, %113 ], [ %98, %111 ]
  ret i64 %118
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i64 @float64_to_int64_round_to_zero(i64 noundef %0, %struct.float_status* nocapture noundef %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = and i64 %0, 9218868437227405312
  %8 = icmp ne i64 %7, 0
  %9 = and i64 %0, 4503599627370495
  %10 = icmp eq i64 %9, 0
  %11 = or i1 %8, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, 64
  store i8 %15, i8* %13, align 1
  %16 = and i64 %0, -9223372036854775808
  br label %17

17:                                               ; preds = %2, %6, %12
  %18 = phi i64 [ %16, %12 ], [ %0, %6 ], [ %0, %2 ]
  %19 = and i64 %18, 4503599627370495
  %20 = lshr i64 %18, 52
  %21 = trunc i64 %20 to i32
  %22 = and i32 %21, 2047
  %23 = icmp eq i32 %22, 0
  %24 = or i64 %19, 4503599627370496
  %25 = select i1 %23, i64 %19, i64 %24
  %26 = add nsw i32 %22, -1075
  %27 = icmp ugt i32 %22, 1074
  br i1 %27, label %28, label %45

28:                                               ; preds = %17
  %29 = icmp ugt i32 %22, 1085
  br i1 %29, label %30, label %42

30:                                               ; preds = %28
  %31 = icmp eq i64 %18, -4332462841530417152
  br i1 %31, label %41, label %32

32:                                               ; preds = %30
  %33 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %34 = load i8, i8* %33, align 1
  %35 = or i8 %34, 1
  store i8 %35, i8* %33, align 1
  %36 = icmp sgt i64 %18, -1
  br i1 %36, label %72, label %37

37:                                               ; preds = %32
  %38 = icmp eq i32 %22, 2047
  %39 = icmp ne i64 %25, 4503599627370496
  %40 = select i1 %38, i1 %39, i1 false
  br i1 %40, label %72, label %41

41:                                               ; preds = %37, %30
  br label %72

42:                                               ; preds = %28
  %43 = zext i32 %26 to i64
  %44 = shl i64 %25, %43
  br label %67

45:                                               ; preds = %17
  %46 = icmp ult i32 %22, 1022
  br i1 %46, label %47, label %55

47:                                               ; preds = %45
  %48 = zext i32 %22 to i64
  %49 = or i64 %25, %48
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %72, label %51

51:                                               ; preds = %47
  %52 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %53 = load i8, i8* %52, align 1
  %54 = or i8 %53, 32
  store i8 %54, i8* %52, align 1
  br label %72

55:                                               ; preds = %45
  %56 = sub nuw nsw i32 1075, %22
  %57 = zext i32 %56 to i64
  %58 = lshr i64 %25, %57
  %59 = and i32 %26, 63
  %60 = zext i32 %59 to i64
  %61 = shl i64 %25, %60
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %67, label %63

63:                                               ; preds = %55
  %64 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %65 = load i8, i8* %64, align 1
  %66 = or i8 %65, 32
  store i8 %66, i8* %64, align 1
  br label %67

67:                                               ; preds = %55, %63, %42
  %68 = phi i64 [ %44, %42 ], [ %58, %63 ], [ %58, %55 ]
  %69 = icmp sgt i64 %18, -1
  %70 = sub nsw i64 0, %68
  %71 = select i1 %69, i64 %68, i64 %70
  br label %72

72:                                               ; preds = %47, %51, %32, %37, %67, %41
  %73 = phi i64 [ -9223372036854775808, %41 ], [ %71, %67 ], [ 9223372036854775807, %37 ], [ 9223372036854775807, %32 ], [ 0, %51 ], [ 0, %47 ]
  ret i64 %73
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define i32 @float16_to_float32(i16 noundef zeroext %0, i8 noundef zeroext %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #14 {
  %4 = lshr i16 %0, 15
  %5 = zext i16 %4 to i32
  %6 = lshr i16 %0, 10
  %7 = and i16 %6, 31
  %8 = and i16 %0, 1023
  %9 = zext i16 %8 to i32
  %10 = icmp eq i16 %7, 31
  %11 = icmp ne i8 %1, 0
  %12 = and i1 %11, %10
  br i1 %12, label %13, label %44

13:                                               ; preds = %3
  %14 = icmp eq i16 %8, 0
  br i1 %14, label %41, label %15

15:                                               ; preds = %13
  %16 = zext i16 %0 to i32
  %17 = and i32 %16, 32256
  %18 = icmp ne i32 %17, 31744
  %19 = and i32 %16, 511
  %20 = icmp eq i32 %19, 0
  %21 = or i1 %18, %20
  br i1 %21, label %26, label %22

22:                                               ; preds = %15
  %23 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %24 = load i8, i8* %23, align 1, !noalias !58
  %25 = or i8 %24, 1
  store i8 %25, i8* %23, align 1, !noalias !58
  br label %26

26:                                               ; preds = %15, %22
  %27 = zext i16 %0 to i64
  %28 = shl i64 %27, 54
  %29 = getelementptr %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %30 = load i8, i8* %29, align 1
  %31 = lshr exact i64 %28, 41
  %32 = icmp ne i8 %30, 0
  %33 = icmp eq i64 %28, 0
  %34 = or i1 %33, %32
  %35 = zext i16 %4 to i64
  %36 = shl nuw nsw i64 %35, 31
  %37 = or i64 %36, %31
  %38 = trunc i64 %37 to i32
  %39 = or i32 %38, 2139095040
  %40 = select i1 %34, i32 -4194304, i32 %39
  br label %65

41:                                               ; preds = %13
  %42 = shl nuw i32 %5, 31
  %43 = or i32 %42, 2139095040
  br label %65

44:                                               ; preds = %3
  %45 = zext i16 %7 to i32
  %46 = icmp eq i16 %7, 0
  br i1 %46, label %47, label %56

47:                                               ; preds = %44
  %48 = icmp eq i16 %8, 0
  br i1 %48, label %49, label %51

49:                                               ; preds = %47
  %50 = shl nuw i32 %5, 31
  br label %65

51:                                               ; preds = %47
  %ctlz.sh = lshr i32 %9, 1
  %ctlz.step = or i32 %9, %ctlz.sh
  %ctlz.sh1 = lshr i32 %ctlz.step, 2
  %ctlz.step2 = or i32 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i32 %ctlz.step2, 4
  %ctlz.step4 = or i32 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i32 %ctlz.step4, 8
  %ctlz.step6 = or i32 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i32 %ctlz.step6, 16
  %ctlz.step8 = or i32 %ctlz.step6, %ctlz.sh7
  %52 = xor i32 %ctlz.step8, -1
  %cppop.and1 = and i32 %52, 1431655765
  %ctpop.sh = lshr i32 %52, 1
  %cppop.and2 = and i32 %ctpop.sh, 1431655765
  %ctpop.step = add i32 %cppop.and1, %cppop.and2
  %cppop.and19 = and i32 %ctpop.step, 858993459
  %ctpop.sh10 = lshr i32 %ctpop.step, 2
  %cppop.and211 = and i32 %ctpop.sh10, 858993459
  %ctpop.step12 = add i32 %cppop.and19, %cppop.and211
  %cppop.and113 = and i32 %ctpop.step12, 252645135
  %ctpop.sh14 = lshr i32 %ctpop.step12, 4
  %cppop.and215 = and i32 %ctpop.sh14, 252645135
  %ctpop.step16 = add i32 %cppop.and113, %cppop.and215
  %cppop.and117 = and i32 %ctpop.step16, 16711935
  %ctpop.sh18 = lshr i32 %ctpop.step16, 8
  %cppop.and219 = and i32 %ctpop.sh18, 16711935
  %ctpop.step20 = add i32 %cppop.and117, %cppop.and219
  %cppop.and121 = and i32 %ctpop.step20, 65535
  %ctpop.sh22 = lshr i32 %ctpop.step20, 16
  %cppop.and223 = and i32 %ctpop.sh22, 65535
  %ctpop.step24 = add i32 %cppop.and121, %cppop.and223
  %ctpop.part = add i32 %ctpop.step24, 0
  %53 = add nsw i32 %ctpop.part, -21
  %54 = shl nuw nsw i32 %9, %53
  %55 = sub nsw i32 21, %ctpop.part
  br label %56

56:                                               ; preds = %51, %44
  %57 = phi i32 [ %55, %51 ], [ %45, %44 ]
  %58 = phi i32 [ %54, %51 ], [ %9, %44 ]
  %59 = shl i32 %58, 13
  %60 = shl nuw i32 %5, 31
  %61 = shl nsw i32 %57, 23
  %62 = or i32 %60, 939524096
  %63 = add i32 %62, %61
  %64 = add i32 %63, %59
  br label %65

65:                                               ; preds = %49, %56, %41, %26
  %66 = phi i32 [ %40, %26 ], [ %43, %41 ], [ %64, %56 ], [ %50, %49 ]
  ret i32 %66
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define zeroext i16 @float32_to_float16(i32 noundef %0, i8 noundef zeroext %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #14 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %18, label %7

7:                                                ; preds = %3
  %8 = and i32 %0, 2139095040
  %9 = icmp ne i32 %8, 0
  %10 = and i32 %0, 8388607
  %11 = icmp eq i32 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i32 %0, -2147483648
  br label %18

18:                                               ; preds = %3, %7, %13
  %19 = phi i32 [ %17, %13 ], [ %0, %7 ], [ %0, %3 ]
  %20 = and i32 %19, 8388607
  %21 = lshr i32 %19, 23
  %22 = and i32 %21, 255
  %23 = lshr i32 %19, 31
  %24 = icmp eq i32 %22, 255
  br i1 %24, label %25, label %69

25:                                               ; preds = %18
  %26 = icmp eq i32 %20, 0
  br i1 %26, label %56, label %27

27:                                               ; preds = %25
  %28 = and i32 %19, 2143289344
  %29 = icmp ne i32 %28, 2139095040
  %30 = and i32 %19, 4194303
  %31 = icmp eq i32 %30, 0
  %32 = or i1 %29, %31
  br i1 %32, label %37, label %33

33:                                               ; preds = %27
  %34 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %35 = load i8, i8* %34, align 1, !noalias !61
  %36 = or i8 %35, 1
  store i8 %36, i8* %34, align 1, !noalias !61
  br label %37

37:                                               ; preds = %27, %33
  %38 = zext i32 %19 to i64
  %39 = shl i64 %38, 41
  %40 = getelementptr %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %41 = load i8, i8* %40, align 1
  %42 = lshr i64 %39, 54
  %43 = icmp ne i8 %41, 0
  %44 = icmp ult i64 %39, 18014398509481984
  %45 = or i1 %44, %43
  %46 = trunc i32 %23 to i16
  %47 = shl nuw i16 %46, 15
  %48 = trunc i64 %42 to i16
  %49 = or i16 %47, %48
  %50 = or i16 %49, 31744
  %51 = select i1 %45, i16 -512, i16 %50
  %52 = icmp eq i8 %1, 0
  br i1 %52, label %53, label %167

53:                                               ; preds = %37
  %54 = shl nuw nsw i32 %23, 15
  %55 = trunc i32 %54 to i16
  br label %167

56:                                               ; preds = %25
  %57 = icmp eq i8 %1, 0
  br i1 %57, label %58, label %65

58:                                               ; preds = %56
  %59 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %60 = load i8, i8* %59, align 1
  %61 = or i8 %60, 1
  store i8 %61, i8* %59, align 1
  %62 = shl nuw nsw i32 %23, 15
  %63 = trunc i32 %62 to i16
  %64 = or i16 %63, 32767
  br label %167

65:                                               ; preds = %56
  %66 = shl nuw nsw i32 %23, 15
  %67 = trunc i32 %66 to i16
  %68 = or i16 %67, 31744
  br label %167

69:                                               ; preds = %18
  %70 = or i32 %22, %20
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %72, label %75

72:                                               ; preds = %69
  %73 = shl nuw nsw i32 %23, 15
  %74 = trunc i32 %73 to i16
  br label %167

75:                                               ; preds = %69
  %76 = or i32 %20, 8388608
  %77 = add nsw i32 %22, -127
  %78 = icmp ult i32 %22, 113
  br i1 %78, label %79, label %86

79:                                               ; preds = %75
  %80 = icmp ugt i32 %22, 102
  %81 = add nsw i32 %22, -102
  %82 = lshr i32 16777215, %81
  %83 = select i1 %80, i32 %82, i32 16777215
  %84 = and i32 %83, %76
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %118, label %89

86:                                               ; preds = %75
  %87 = and i32 %19, 8191
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %126, label %89

89:                                               ; preds = %86, %79
  %90 = phi i32 [ %87, %86 ], [ %84, %79 ]
  %91 = phi i32 [ 8191, %86 ], [ %83, %79 ]
  %92 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %93 = load i8, i8* %92, align 1
  %94 = or i8 %93, 16
  store i8 %94, i8* %92, align 1
  %95 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 1
  %96 = load i8, i8* %95, align 1
  %97 = sext i8 %96 to i32
  switch i32 %97, label %111 [
    i32 0, label %98
    i32 2, label %105
    i32 1, label %108
  ]

98:                                               ; preds = %89
  %99 = add nuw nsw i32 %91, 1
  %100 = lshr i32 %99, 1
  %101 = icmp eq i32 %90, %100
  br i1 %101, label %102, label %111

102:                                              ; preds = %98
  %103 = and i32 %76, 16777214
  %104 = and i32 %103, %99
  br label %111

105:                                              ; preds = %89
  %106 = icmp slt i32 %19, 0
  %107 = select i1 %106, i32 0, i32 %91
  br label %111

108:                                              ; preds = %89
  %109 = icmp slt i32 %19, 0
  %110 = select i1 %109, i32 %91, i32 0
  br label %111

111:                                              ; preds = %89, %98, %102, %108, %105
  %112 = phi i32 [ %110, %108 ], [ %107, %105 ], [ %104, %102 ], [ %100, %98 ], [ 0, %89 ]
  %113 = add i32 %112, %76
  %114 = icmp ugt i32 %113, 16777215
  br i1 %114, label %115, label %126

115:                                              ; preds = %111
  %116 = lshr i32 %113, 1
  %117 = add nsw i32 %22, -126
  br label %126

118:                                              ; preds = %79
  %119 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 0
  %120 = load i8, i8* %119, align 1
  %121 = icmp eq i8 %120, 1
  br i1 %121, label %122, label %126

122:                                              ; preds = %118
  %123 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %124 = load i8, i8* %123, align 1
  %125 = or i8 %124, 16
  store i8 %125, i8* %123, align 1
  br label %126

126:                                              ; preds = %86, %118, %122, %111, %115
  %127 = phi i32 [ %117, %115 ], [ %77, %111 ], [ %77, %122 ], [ %77, %118 ], [ %77, %86 ]
  %128 = phi i32 [ %116, %115 ], [ %113, %111 ], [ %76, %122 ], [ %76, %118 ], [ %76, %86 ]
  %129 = icmp eq i8 %1, 0
  br i1 %129, label %139, label %130

130:                                              ; preds = %126
  %131 = icmp sgt i32 %127, 15
  br i1 %131, label %132, label %148

132:                                              ; preds = %130
  %133 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %134 = load i8, i8* %133, align 1
  %135 = or i8 %134, 40
  store i8 %135, i8* %133, align 1
  %136 = shl nuw nsw i32 %23, 15
  %137 = trunc i32 %136 to i16
  %138 = or i16 %137, 31744
  br label %167

139:                                              ; preds = %126
  %140 = icmp sgt i32 %127, 16
  br i1 %140, label %141, label %148

141:                                              ; preds = %139
  %142 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %143 = load i8, i8* %142, align 1
  %144 = or i8 %143, 33
  store i8 %144, i8* %142, align 1
  %145 = shl nuw nsw i32 %23, 15
  %146 = trunc i32 %145 to i16
  %147 = or i16 %146, 32767
  br label %167

148:                                              ; preds = %139, %130
  %149 = icmp slt i32 %127, -24
  br i1 %149, label %150, label %153

150:                                              ; preds = %148
  %151 = shl nuw nsw i32 %23, 15
  %152 = trunc i32 %151 to i16
  br label %167

153:                                              ; preds = %148
  %154 = icmp slt i32 %127, -14
  %155 = sub nsw i32 -14, %127
  %156 = select i1 %154, i32 %155, i32 0
  %157 = lshr i32 %128, %156
  %158 = lshr i32 %157, 13
  %159 = trunc i32 %158 to i16
  %160 = shl nuw nsw i32 %23, 15
  %161 = shl nsw i32 %127, 10
  %162 = add i32 %161, 14336
  %163 = select i1 %154, i32 0, i32 %162
  %164 = add nuw nsw i32 %163, %160
  %165 = trunc i32 %164 to i16
  %166 = add i16 %165, %159
  br label %167

167:                                              ; preds = %53, %37, %153, %150, %141, %132, %72, %65, %58
  %168 = phi i16 [ %68, %65 ], [ %64, %58 ], [ %74, %72 ], [ %138, %132 ], [ %152, %150 ], [ %166, %153 ], [ %147, %141 ], [ %55, %53 ], [ %51, %37 ]
  ret i16 %168
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define { i64, i16 } @float64_to_floatx80(i64 noundef %0, %struct.float_status* nocapture noundef %1) local_unnamed_addr #14 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = and i64 %0, 9218868437227405312
  %8 = icmp ne i64 %7, 0
  %9 = and i64 %0, 4503599627370495
  %10 = icmp eq i64 %9, 0
  %11 = or i1 %8, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, 64
  store i8 %15, i8* %13, align 1
  %16 = and i64 %0, -9223372036854775808
  br label %17

17:                                               ; preds = %2, %6, %12
  %18 = phi i64 [ %16, %12 ], [ %0, %6 ], [ %0, %2 ]
  %19 = and i64 %18, 4503599627370495
  %20 = lshr i64 %18, 52
  %21 = trunc i64 %20 to i32
  %22 = and i32 %21, 2047
  %23 = lshr i64 %18, 63
  %24 = trunc i64 %23 to i16
  switch i32 %22, label %67 [
    i32 2047, label %25
    i32 0, label %54
  ]

25:                                               ; preds = %17
  %26 = icmp eq i64 %19, 0
  br i1 %26, label %51, label %27

27:                                               ; preds = %25
  %28 = and i64 %18, 9221120237041090560
  %29 = icmp ne i64 %28, 9218868437227405312
  %30 = and i64 %18, 2251799813685247
  %31 = icmp eq i64 %30, 0
  %32 = or i1 %29, %31
  br i1 %32, label %37, label %33

33:                                               ; preds = %27
  %34 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %35 = load i8, i8* %34, align 1, !noalias !64
  %36 = or i8 %35, 1
  store i8 %36, i8* %34, align 1, !noalias !64
  br label %37

37:                                               ; preds = %27, %33
  %38 = shl i64 %18, 12
  %39 = getelementptr %struct.float_status, %struct.float_status* %1, i64 0, i32 6
  %40 = load i8, i8* %39, align 1
  %41 = icmp ne i8 %40, 0
  %42 = icmp eq i64 %38, 0
  %43 = or i1 %42, %41
  %44 = lshr exact i64 %38, 1
  %45 = or i64 %44, -9223372036854775808
  %46 = shl nuw i16 %24, 15
  %47 = or i16 %46, 32767
  %48 = select i1 %43, i64 -4611686018427387904, i64 %45
  %49 = select i1 %43, i16 -1, i16 %47
  %50 = insertvalue { i64, i16 } poison, i64 %48, 0
  br label %78

51:                                               ; preds = %25
  %52 = shl nuw i16 %24, 15
  %53 = or i16 %52, 32767
  br label %78

54:                                               ; preds = %17
  %55 = icmp eq i64 %19, 0
  br i1 %55, label %56, label %58

56:                                               ; preds = %54
  %57 = shl nuw i16 %24, 15
  br label %78

58:                                               ; preds = %54
  %ctlz.sh = lshr i64 %19, 1
  %ctlz.step = or i64 %19, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %59 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %59, 6148914691236517205
  %ctpop.sh = lshr i64 %59, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %60 = trunc i64 %ctpop.part to i32
  %61 = shl nuw nsw i32 %60, 24
  %62 = add nsw i32 %61, -184549376
  %63 = ashr exact i32 %62, 24
  %64 = zext i32 %63 to i64
  %65 = shl i64 %19, %64
  %66 = sub nsw i32 1, %63
  br label %67

67:                                               ; preds = %17, %58
  %68 = phi i64 [ %19, %17 ], [ %65, %58 ]
  %69 = phi i32 [ %22, %17 ], [ %66, %58 ]
  %70 = shl i64 %68, 11
  %71 = or i64 %70, -9223372036854775808
  %72 = trunc i64 %23 to i32
  %73 = shl nuw nsw i32 %72, 15
  %74 = or i32 %73, 15360
  %75 = add nsw i32 %74, %69
  %76 = trunc i32 %75 to i16
  %77 = insertvalue { i64, i16 } poison, i64 %71, 0
  br label %78

78:                                               ; preds = %67, %56, %51, %37
  %79 = phi { i64, i16 } [ %50, %37 ], [ { i64 -9223372036854775808, i16 poison }, %51 ], [ { i64 0, i16 poison }, %56 ], [ %77, %67 ]
  %80 = phi i16 [ %49, %37 ], [ %53, %51 ], [ %57, %56 ], [ %76, %67 ]
  %81 = insertvalue { i64, i16 } %79, i16 %80, 1
  ret { i64, i16 } %81
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define { i64, i64 } @float64_to_float128(i64 noundef %0, %struct.float_status* nocapture noundef %1) local_unnamed_addr #14 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = and i64 %0, 9218868437227405312
  %8 = icmp ne i64 %7, 0
  %9 = and i64 %0, 4503599627370495
  %10 = icmp eq i64 %9, 0
  %11 = or i1 %8, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, 64
  store i8 %15, i8* %13, align 1
  %16 = and i64 %0, -9223372036854775808
  br label %17

17:                                               ; preds = %2, %6, %12
  %18 = phi i64 [ %16, %12 ], [ %0, %6 ], [ %0, %2 ]
  %19 = and i64 %18, 4503599627370495
  %20 = lshr i64 %18, 52
  %21 = trunc i64 %20 to i32
  %22 = and i32 %21, 2047
  %23 = and i64 %18, -9223372036854775808
  switch i32 %22, label %60 [
    i32 2047, label %24
    i32 0, label %49
  ]

24:                                               ; preds = %17
  %25 = icmp eq i64 %19, 0
  br i1 %25, label %47, label %26

26:                                               ; preds = %24
  %27 = and i64 %18, 9221120237041090560
  %28 = icmp ne i64 %27, 9218868437227405312
  %29 = and i64 %18, 2251799813685247
  %30 = icmp eq i64 %29, 0
  %31 = or i1 %28, %30
  br i1 %31, label %36, label %32

32:                                               ; preds = %26
  %33 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %34 = load i8, i8* %33, align 1, !noalias !67
  %35 = or i8 %34, 1
  store i8 %35, i8* %33, align 1, !noalias !67
  br label %36

36:                                               ; preds = %26, %32
  %37 = getelementptr %struct.float_status, %struct.float_status* %1, i64 0, i32 6
  %38 = load i8, i8* %37, align 1
  %39 = icmp eq i8 %38, 0
  %40 = lshr i64 %18, 4
  %41 = shl i64 %18, 60
  %42 = or i64 %40, %23
  %43 = or i64 %42, 9223090561878065152
  %44 = select i1 %39, i64 %43, i64 -140737488355328
  %45 = select i1 %39, i64 %41, i64 0
  %46 = insertvalue { i64, i64 } poison, i64 %45, 0
  br label %71

47:                                               ; preds = %24
  %48 = or i64 %23, 9223090561878065152
  br label %71

49:                                               ; preds = %17
  %50 = icmp eq i64 %19, 0
  br i1 %50, label %71, label %51

51:                                               ; preds = %49
  %ctlz.sh = lshr i64 %19, 1
  %ctlz.step = or i64 %19, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %52 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %52, 6148914691236517205
  %ctpop.sh = lshr i64 %52, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %53 = trunc i64 %ctpop.part to i32
  %54 = shl nuw nsw i32 %53, 24
  %55 = add nsw i32 %54, -184549376
  %56 = ashr exact i32 %55, 24
  %57 = zext i32 %56 to i64
  %58 = shl i64 %19, %57
  %59 = sub nsw i32 0, %56
  br label %60

60:                                               ; preds = %17, %51
  %61 = phi i64 [ %19, %17 ], [ %58, %51 ]
  %62 = phi i32 [ %22, %17 ], [ %59, %51 ]
  %63 = lshr i64 %61, 4
  %64 = shl i64 %61, 60
  %65 = add nsw i32 %62, 15360
  %66 = zext i32 %65 to i64
  %67 = shl nuw nsw i64 %66, 48
  %68 = or i64 %63, %23
  %69 = add nuw i64 %68, %67
  %70 = insertvalue { i64, i64 } poison, i64 %64, 0
  br label %71

71:                                               ; preds = %49, %60, %47, %36
  %72 = phi { i64, i64 } [ %46, %36 ], [ { i64 0, i64 poison }, %47 ], [ %70, %60 ], [ { i64 0, i64 poison }, %49 ]
  %73 = phi i64 [ %44, %36 ], [ %48, %47 ], [ %69, %60 ], [ %23, %49 ]
  %74 = insertvalue { i64, i64 } %72, i64 %73, 1
  ret { i64, i64 } %74
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i64 @float64_round_to_int(i64 noundef %0, %struct.float_status* nocapture noundef %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = and i64 %0, 9218868437227405312
  %8 = icmp ne i64 %7, 0
  %9 = and i64 %0, 4503599627370495
  %10 = icmp eq i64 %9, 0
  %11 = or i1 %8, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, 64
  store i8 %15, i8* %13, align 1
  %16 = and i64 %0, -9223372036854775808
  br label %17

17:                                               ; preds = %2, %6, %12
  %18 = phi i64 [ %16, %12 ], [ %0, %6 ], [ %0, %2 ]
  %19 = lshr i64 %18, 52
  %20 = trunc i64 %19 to i32
  %21 = and i32 %20, 2047
  %22 = icmp ugt i32 %21, 1074
  br i1 %22, label %23, label %51

23:                                               ; preds = %17
  %24 = icmp ne i32 %21, 2047
  %25 = and i64 %18, 4503599627370495
  %26 = icmp eq i64 %25, 0
  %27 = or i1 %26, %24
  br i1 %27, label %109, label %28

28:                                               ; preds = %23
  %29 = and i64 %18, 9221120237041090560
  %30 = icmp eq i64 %29, 9218868437227405312
  %31 = and i64 %18, 2251799813685247
  %32 = icmp ne i64 %31, 0
  %33 = and i1 %30, %32
  br i1 %33, label %34, label %41

34:                                               ; preds = %28
  %35 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %36 = load i8, i8* %35, align 1
  %37 = or i8 %36, 1
  store i8 %37, i8* %35, align 1
  %38 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 6
  %39 = load i8, i8* %38, align 1
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %45, label %109

41:                                               ; preds = %28
  %42 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 6
  %43 = load i8, i8* %42, align 1
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %45, label %109

45:                                               ; preds = %41, %34
  %46 = icmp ne i64 %29, 9218868437227405312
  %47 = icmp eq i64 %31, 0
  %48 = or i1 %46, %47
  %49 = or i64 %18, 2251799813685248
  %50 = select i1 %48, i64 %18, i64 %49
  br label %109

51:                                               ; preds = %17
  %52 = icmp ult i32 %21, 1023
  br i1 %52, label %53, label %77

53:                                               ; preds = %51
  %54 = and i64 %18, 9223372036854775807
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %109, label %56

56:                                               ; preds = %53
  %57 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %58 = load i8, i8* %57, align 1
  %59 = or i8 %58, 32
  store i8 %59, i8* %57, align 1
  %60 = and i64 %18, -9223372036854775808
  %61 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 1
  %62 = load i8, i8* %61, align 1
  %63 = sext i8 %62 to i32
  switch i32 %63, label %109 [
    i32 0, label %64
    i32 1, label %71
    i32 2, label %74
  ]

64:                                               ; preds = %56
  %65 = icmp ne i32 %21, 1022
  %66 = and i64 %18, 4503599627370495
  %67 = icmp eq i64 %66, 0
  %68 = or i1 %67, %65
  %69 = or i64 %60, 4607182418800017408
  %70 = select i1 %68, i64 %60, i64 %69
  br label %109

71:                                               ; preds = %56
  %72 = icmp slt i64 %18, 0
  %73 = select i1 %72, i64 -4616189618054758400, i64 0
  br label %109

74:                                               ; preds = %56
  %75 = icmp sgt i64 %18, -1
  %76 = select i1 %75, i64 4607182418800017408, i64 -9223372036854775808
  br label %109

77:                                               ; preds = %51
  %78 = sub nuw nsw i32 1075, %21
  %79 = zext i32 %78 to i64
  %80 = shl nuw nsw i64 1, %79
  %81 = add nsw i64 %80, -1
  %82 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 1
  %83 = load i8, i8* %82, align 1
  switch i8 %83, label %92 [
    i8 0, label %84
    i8 3, label %100
  ]

84:                                               ; preds = %77
  %85 = lshr i64 %80, 1
  %86 = add i64 %85, %18
  %87 = and i64 %86, %81
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %89, label %100

89:                                               ; preds = %84
  %90 = xor i64 %80, -1
  %91 = and i64 %86, %90
  br label %100

92:                                               ; preds = %77
  %93 = lshr i64 %18, 63
  %94 = trunc i64 %93 to i8
  %95 = icmp eq i8 %83, 2
  %96 = zext i1 %95 to i8
  %97 = icmp eq i8 %94, %96
  %98 = select i1 %97, i64 0, i64 %81
  %99 = add i64 %98, %18
  br label %100

100:                                              ; preds = %92, %77, %84, %89
  %101 = phi i64 [ %91, %89 ], [ %86, %84 ], [ %18, %77 ], [ %99, %92 ]
  %102 = sub nsw i64 0, %80
  %103 = and i64 %101, %102
  %104 = icmp eq i64 %103, %18
  br i1 %104, label %109, label %105

105:                                              ; preds = %100
  %106 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %107 = load i8, i8* %106, align 1
  %108 = or i8 %107, 32
  store i8 %108, i8* %106, align 1
  br label %109

109:                                              ; preds = %64, %56, %45, %34, %41, %100, %105, %53, %23, %74, %71
  %110 = phi i64 [ %76, %74 ], [ %73, %71 ], [ %18, %23 ], [ %18, %53 ], [ %103, %105 ], [ %18, %100 ], [ %50, %45 ], [ -2251799813685248, %34 ], [ -2251799813685248, %41 ], [ %60, %56 ], [ %70, %64 ]
  ret i64 %110
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i64 @float64_trunc_to_int(i64 noundef %0, %struct.float_status* nocapture noundef %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 1
  %4 = load i8, i8* %3, align 1
  store i8 3, i8* %3, align 1
  %5 = tail call i64 @float64_round_to_int(i64 noundef %0, %struct.float_status* noundef %1)
  store i8 %4, i8* %3, align 1
  ret i64 %5
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define i64 @float64_sub(i64 noundef %0, i64 noundef %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #14 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i64 %0, 9218868437227405312
  %9 = icmp ne i64 %8, 0
  %10 = and i64 %0, 4503599627370495
  %11 = icmp eq i64 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i64 %0, -9223372036854775808
  br label %18

18:                                               ; preds = %7, %13
  %19 = phi i64 [ %0, %7 ], [ %17, %13 ]
  %20 = and i64 %1, 9218868437227405312
  %21 = icmp ne i64 %20, 0
  %22 = and i64 %1, 4503599627370495
  %23 = icmp eq i64 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i64 %1, -9223372036854775808
  br label %30

30:                                               ; preds = %3, %18, %25
  %31 = phi i64 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i64 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = lshr i64 %31, 63
  %34 = trunc i64 %33 to i8
  %35 = lshr i64 %32, 63
  %36 = trunc i64 %35 to i8
  %37 = icmp eq i8 %34, %36
  br i1 %37, label %38, label %40

38:                                               ; preds = %30
  %39 = tail call fastcc i64 @subFloat64Sigs(i64 noundef %31, i64 noundef %32, i8 noundef zeroext %34, %struct.float_status* noundef nonnull %2)
  br label %42

40:                                               ; preds = %30
  %41 = tail call fastcc i64 @addFloat64Sigs(i64 noundef %31, i64 noundef %32, i8 noundef zeroext %34, %struct.float_status* noundef nonnull %2)
  br label %42

42:                                               ; preds = %40, %38
  %43 = phi i64 [ %39, %38 ], [ %41, %40 ]
  ret i64 %43
}

; Function Attrs: nofree nosync nounwind uwtable
define i64 @float64_div(i64 noundef %0, i64 noundef %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #20 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i64 %0, 9218868437227405312
  %9 = icmp ne i64 %8, 0
  %10 = and i64 %0, 4503599627370495
  %11 = icmp eq i64 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i64 %0, -9223372036854775808
  br label %18

18:                                               ; preds = %7, %13
  %19 = phi i64 [ %0, %7 ], [ %17, %13 ]
  %20 = and i64 %1, 9218868437227405312
  %21 = icmp ne i64 %20, 0
  %22 = and i64 %1, 4503599627370495
  %23 = icmp eq i64 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i64 %1, -9223372036854775808
  br label %30

30:                                               ; preds = %3, %18, %25
  %31 = phi i64 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i64 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = and i64 %31, 4503599627370495
  %34 = lshr i64 %31, 52
  %35 = trunc i64 %34 to i32
  %36 = and i32 %35, 2047
  %37 = and i64 %32, 4503599627370495
  %38 = lshr i64 %32, 52
  %39 = trunc i64 %38 to i32
  %40 = and i32 %39, 2047
  %41 = xor i64 %32, %31
  %42 = lshr i64 %41, 63
  %43 = trunc i64 %42 to i8
  %44 = icmp eq i32 %36, 2047
  br i1 %44, label %45, label %166

45:                                               ; preds = %30
  %46 = icmp eq i64 %33, 0
  br i1 %46, label %101, label %47

47:                                               ; preds = %45
  %48 = shl i64 %31, 1
  %49 = icmp ult i64 %48, -4503599627370496
  %50 = and i64 %31, 9221120237041090560
  %51 = icmp eq i64 %50, 9218868437227405312
  %52 = and i64 %31, 2251799813685247
  %53 = icmp ne i64 %52, 0
  %54 = and i1 %51, %53
  %55 = shl i64 %32, 1
  %56 = icmp ugt i64 %55, -4503599627370497
  %57 = and i64 %32, 9221120237041090560
  %58 = icmp eq i64 %57, 9218868437227405312
  %59 = and i64 %32, 2251799813685247
  %60 = icmp ne i64 %59, 0
  %61 = and i1 %58, %60
  %62 = zext i1 %61 to i8
  %63 = or i1 %54, %61
  br i1 %63, label %64, label %68

64:                                               ; preds = %47
  %65 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %66 = load i8, i8* %65, align 1
  %67 = or i8 %66, 1
  store i8 %67, i8* %65, align 1
  br label %68

68:                                               ; preds = %64, %47
  %69 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %70 = load i8, i8* %69, align 1
  %71 = icmp eq i8 %70, 0
  br i1 %71, label %72, label %372

72:                                               ; preds = %68
  %73 = icmp ult i64 %48, %55
  br i1 %73, label %79, label %74

74:                                               ; preds = %72
  %75 = icmp ult i64 %55, %48
  br i1 %75, label %79, label %76

76:                                               ; preds = %74
  %77 = icmp ult i64 %31, %32
  %78 = zext i1 %77 to i8
  br label %79

79:                                               ; preds = %76, %74, %72
  %80 = phi i8 [ %78, %76 ], [ 0, %72 ], [ 1, %74 ]
  br i1 %54, label %86, label %81

81:                                               ; preds = %79
  br i1 %49, label %89, label %82

82:                                               ; preds = %81
  %83 = or i8 %80, %62
  %84 = icmp eq i8 %83, 0
  %85 = and i1 %56, %84
  br i1 %85, label %89, label %95

86:                                               ; preds = %79
  %87 = icmp eq i8 %80, 0
  %88 = select i1 %61, i1 %87, i1 %56
  br i1 %88, label %89, label %95

89:                                               ; preds = %86, %82, %81
  %90 = icmp ne i64 %57, 9218868437227405312
  %91 = icmp eq i64 %59, 0
  %92 = or i1 %90, %91
  %93 = or i64 %32, 2251799813685248
  %94 = select i1 %92, i64 %32, i64 %93
  br label %372

95:                                               ; preds = %86, %82
  %96 = icmp ne i64 %50, 9218868437227405312
  %97 = icmp eq i64 %52, 0
  %98 = or i1 %96, %97
  %99 = or i64 %31, 2251799813685248
  %100 = select i1 %98, i64 %31, i64 %99
  br label %372

101:                                              ; preds = %45
  %102 = icmp eq i32 %40, 2047
  br i1 %102, label %103, label %163

103:                                              ; preds = %101
  %104 = icmp eq i64 %37, 0
  br i1 %104, label %159, label %105

105:                                              ; preds = %103
  %106 = shl i64 %31, 1
  %107 = icmp ult i64 %106, -4503599627370496
  %108 = and i64 %31, 9221120237041090560
  %109 = icmp eq i64 %108, 9218868437227405312
  %110 = and i64 %31, 2251799813685247
  %111 = icmp ne i64 %110, 0
  %112 = and i1 %109, %111
  %113 = shl i64 %32, 1
  %114 = icmp ugt i64 %113, -4503599627370497
  %115 = and i64 %32, 9221120237041090560
  %116 = icmp eq i64 %115, 9218868437227405312
  %117 = and i64 %32, 2251799813685247
  %118 = icmp ne i64 %117, 0
  %119 = and i1 %116, %118
  %120 = zext i1 %119 to i8
  %121 = or i1 %112, %119
  br i1 %121, label %122, label %126

122:                                              ; preds = %105
  %123 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %124 = load i8, i8* %123, align 1
  %125 = or i8 %124, 1
  store i8 %125, i8* %123, align 1
  br label %126

126:                                              ; preds = %122, %105
  %127 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %128 = load i8, i8* %127, align 1
  %129 = icmp eq i8 %128, 0
  br i1 %129, label %130, label %372

130:                                              ; preds = %126
  %131 = icmp ult i64 %106, %113
  br i1 %131, label %137, label %132

132:                                              ; preds = %130
  %133 = icmp ult i64 %113, %106
  br i1 %133, label %137, label %134

134:                                              ; preds = %132
  %135 = icmp ult i64 %31, %32
  %136 = zext i1 %135 to i8
  br label %137

137:                                              ; preds = %134, %132, %130
  %138 = phi i8 [ %136, %134 ], [ 0, %130 ], [ 1, %132 ]
  br i1 %112, label %144, label %139

139:                                              ; preds = %137
  br i1 %107, label %147, label %140

140:                                              ; preds = %139
  %141 = or i8 %138, %120
  %142 = icmp eq i8 %141, 0
  %143 = and i1 %114, %142
  br i1 %143, label %147, label %153

144:                                              ; preds = %137
  %145 = icmp eq i8 %138, 0
  %146 = select i1 %119, i1 %145, i1 %114
  br i1 %146, label %147, label %153

147:                                              ; preds = %144, %140, %139
  %148 = icmp ne i64 %115, 9218868437227405312
  %149 = icmp eq i64 %117, 0
  %150 = or i1 %148, %149
  %151 = or i64 %32, 2251799813685248
  %152 = select i1 %150, i64 %32, i64 %151
  br label %372

153:                                              ; preds = %144, %140
  %154 = icmp ne i64 %108, 9218868437227405312
  %155 = icmp eq i64 %110, 0
  %156 = or i1 %154, %155
  %157 = or i64 %31, 2251799813685248
  %158 = select i1 %156, i64 %31, i64 %157
  br label %372

159:                                              ; preds = %103
  %160 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %161 = load i8, i8* %160, align 1
  %162 = or i8 %161, 1
  store i8 %162, i8* %160, align 1
  br label %372

163:                                              ; preds = %101
  %164 = and i64 %41, -9223372036854775808
  %165 = or i64 %164, 9218868437227405312
  br label %372

166:                                              ; preds = %30
  switch i32 %40, label %248 [
    i32 2047, label %167
    i32 0, label %225
  ]

167:                                              ; preds = %166
  %168 = icmp eq i64 %37, 0
  br i1 %168, label %223, label %169

169:                                              ; preds = %167
  %170 = shl i64 %31, 1
  %171 = icmp ult i64 %170, -4503599627370496
  %172 = and i64 %31, 9221120237041090560
  %173 = icmp eq i64 %172, 9218868437227405312
  %174 = and i64 %31, 2251799813685247
  %175 = icmp ne i64 %174, 0
  %176 = and i1 %173, %175
  %177 = shl i64 %32, 1
  %178 = icmp ugt i64 %177, -4503599627370497
  %179 = and i64 %32, 9221120237041090560
  %180 = icmp eq i64 %179, 9218868437227405312
  %181 = and i64 %32, 2251799813685247
  %182 = icmp ne i64 %181, 0
  %183 = and i1 %180, %182
  %184 = zext i1 %183 to i8
  %185 = or i1 %176, %183
  br i1 %185, label %186, label %190

186:                                              ; preds = %169
  %187 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %188 = load i8, i8* %187, align 1
  %189 = or i8 %188, 1
  store i8 %189, i8* %187, align 1
  br label %190

190:                                              ; preds = %186, %169
  %191 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %192 = load i8, i8* %191, align 1
  %193 = icmp eq i8 %192, 0
  br i1 %193, label %194, label %372

194:                                              ; preds = %190
  %195 = icmp ult i64 %170, %177
  br i1 %195, label %201, label %196

196:                                              ; preds = %194
  %197 = icmp ult i64 %177, %170
  br i1 %197, label %201, label %198

198:                                              ; preds = %196
  %199 = icmp ult i64 %31, %32
  %200 = zext i1 %199 to i8
  br label %201

201:                                              ; preds = %198, %196, %194
  %202 = phi i8 [ %200, %198 ], [ 0, %194 ], [ 1, %196 ]
  br i1 %176, label %208, label %203

203:                                              ; preds = %201
  br i1 %171, label %211, label %204

204:                                              ; preds = %203
  %205 = or i8 %202, %184
  %206 = icmp eq i8 %205, 0
  %207 = and i1 %178, %206
  br i1 %207, label %211, label %217

208:                                              ; preds = %201
  %209 = icmp eq i8 %202, 0
  %210 = select i1 %183, i1 %209, i1 %178
  br i1 %210, label %211, label %217

211:                                              ; preds = %208, %204, %203
  %212 = icmp ne i64 %179, 9218868437227405312
  %213 = icmp eq i64 %181, 0
  %214 = or i1 %212, %213
  %215 = or i64 %32, 2251799813685248
  %216 = select i1 %214, i64 %32, i64 %215
  br label %372

217:                                              ; preds = %208, %204
  %218 = icmp ne i64 %172, 9218868437227405312
  %219 = icmp eq i64 %174, 0
  %220 = or i1 %218, %219
  %221 = or i64 %31, 2251799813685248
  %222 = select i1 %220, i64 %31, i64 %221
  br label %372

223:                                              ; preds = %167
  %224 = and i64 %41, -9223372036854775808
  br label %372

225:                                              ; preds = %166
  %226 = icmp eq i64 %37, 0
  br i1 %226, label %227, label %239

227:                                              ; preds = %225
  %228 = zext i32 %36 to i64
  %229 = or i64 %33, %228
  %230 = icmp eq i64 %229, 0
  %231 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %232 = load i8, i8* %231, align 1
  br i1 %230, label %233, label %235

233:                                              ; preds = %227
  %234 = or i8 %232, 1
  store i8 %234, i8* %231, align 1
  br label %372

235:                                              ; preds = %227
  %236 = or i8 %232, 4
  store i8 %236, i8* %231, align 1
  %237 = and i64 %41, -9223372036854775808
  %238 = or i64 %237, 9218868437227405312
  br label %372

239:                                              ; preds = %225
  %ctlz.sh = lshr i64 %37, 1
  %ctlz.step = or i64 %37, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %240 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %240, 6148914691236517205
  %ctpop.sh = lshr i64 %240, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %241 = trunc i64 %ctpop.part to i32
  %242 = shl nuw nsw i32 %241, 24
  %243 = add nsw i32 %242, -184549376
  %244 = ashr exact i32 %243, 24
  %245 = zext i32 %244 to i64
  %246 = shl i64 %37, %245
  %247 = sub nsw i32 1, %244
  br label %248

248:                                              ; preds = %166, %239
  %249 = phi i64 [ %37, %166 ], [ %246, %239 ]
  %250 = phi i32 [ %40, %166 ], [ %247, %239 ]
  %251 = icmp eq i32 %36, 0
  br i1 %251, label %252, label %265

252:                                              ; preds = %248
  %253 = icmp eq i64 %33, 0
  br i1 %253, label %254, label %256

254:                                              ; preds = %252
  %255 = and i64 %41, -9223372036854775808
  br label %372

256:                                              ; preds = %252
  %ctlz.sh31 = lshr i64 %33, 1
  %ctlz.step32 = or i64 %33, %ctlz.sh31
  %ctlz.sh33 = lshr i64 %ctlz.step32, 2
  %ctlz.step34 = or i64 %ctlz.step32, %ctlz.sh33
  %ctlz.sh35 = lshr i64 %ctlz.step34, 4
  %ctlz.step36 = or i64 %ctlz.step34, %ctlz.sh35
  %ctlz.sh37 = lshr i64 %ctlz.step36, 8
  %ctlz.step38 = or i64 %ctlz.step36, %ctlz.sh37
  %ctlz.sh39 = lshr i64 %ctlz.step38, 16
  %ctlz.step40 = or i64 %ctlz.step38, %ctlz.sh39
  %ctlz.sh41 = lshr i64 %ctlz.step40, 32
  %ctlz.step42 = or i64 %ctlz.step40, %ctlz.sh41
  %257 = xor i64 %ctlz.step42, -1
  %cppop.and143 = and i64 %257, 6148914691236517205
  %ctpop.sh44 = lshr i64 %257, 1
  %cppop.and245 = and i64 %ctpop.sh44, 6148914691236517205
  %ctpop.step46 = add i64 %cppop.and143, %cppop.and245
  %cppop.and147 = and i64 %ctpop.step46, 3689348814741910323
  %ctpop.sh48 = lshr i64 %ctpop.step46, 2
  %cppop.and249 = and i64 %ctpop.sh48, 3689348814741910323
  %ctpop.step50 = add i64 %cppop.and147, %cppop.and249
  %cppop.and151 = and i64 %ctpop.step50, 1085102592571150095
  %ctpop.sh52 = lshr i64 %ctpop.step50, 4
  %cppop.and253 = and i64 %ctpop.sh52, 1085102592571150095
  %ctpop.step54 = add i64 %cppop.and151, %cppop.and253
  %cppop.and155 = and i64 %ctpop.step54, 71777214294589695
  %ctpop.sh56 = lshr i64 %ctpop.step54, 8
  %cppop.and257 = and i64 %ctpop.sh56, 71777214294589695
  %ctpop.step58 = add i64 %cppop.and155, %cppop.and257
  %cppop.and159 = and i64 %ctpop.step58, 281470681808895
  %ctpop.sh60 = lshr i64 %ctpop.step58, 16
  %cppop.and261 = and i64 %ctpop.sh60, 281470681808895
  %ctpop.step62 = add i64 %cppop.and159, %cppop.and261
  %cppop.and163 = and i64 %ctpop.step62, 4294967295
  %ctpop.sh64 = lshr i64 %ctpop.step62, 32
  %cppop.and265 = and i64 %ctpop.sh64, 4294967295
  %ctpop.step66 = add i64 %cppop.and163, %cppop.and265
  %ctpop.part67 = add i64 %ctpop.step66, 0
  %258 = trunc i64 %ctpop.part67 to i32
  %259 = shl nuw nsw i32 %258, 24
  %260 = add nsw i32 %259, -184549376
  %261 = ashr exact i32 %260, 24
  %262 = zext i32 %261 to i64
  %263 = shl i64 %33, %262
  %264 = sub nsw i32 1, %261
  br label %265

265:                                              ; preds = %256, %248
  %266 = phi i64 [ %263, %256 ], [ %33, %248 ]
  %267 = phi i32 [ %264, %256 ], [ %36, %248 ]
  %268 = sub nsw i32 %267, %250
  %269 = shl i64 %266, 10
  %270 = or i64 %269, 4611686018427387904
  %271 = shl i64 %249, 11
  %272 = or i64 %271, -9223372036854775808
  %273 = shl i64 %270, 1
  %274 = icmp ugt i64 %272, %273
  %275 = xor i1 %274, true
  %276 = zext i1 %275 to i64
  %277 = lshr exact i64 %270, %276
  %278 = select i1 %274, i32 1021, i32 1022
  %279 = add nsw i32 %268, %278
  %280 = icmp ugt i64 %272, %277
  br i1 %280, label %281, label %369

281:                                              ; preds = %265
  %282 = lshr i64 %272, 32
  %283 = and i64 %272, -4294967296
  %284 = icmp ugt i64 %283, %277
  br i1 %284, label %285, label %288

285:                                              ; preds = %281
  %286 = udiv i64 %277, %282
  %287 = shl i64 %286, 32
  br label %288

288:                                              ; preds = %285, %281
  %289 = phi i64 [ %287, %285 ], [ -4294967296, %281 ]
  %290 = lshr exact i64 %289, 32
  %291 = and i64 %271, 4294965248
  %292 = mul nuw i64 %290, %291
  %293 = mul nuw i64 %290, %282
  %294 = lshr i64 %292, 32
  %295 = shl i64 %292, 32
  %296 = sub i64 0, %295
  %297 = icmp ne i64 %295, 0
  %298 = sext i1 %297 to i64
  %299 = add nuw i64 %293, %294
  %300 = sub i64 %277, %299
  %301 = add i64 %300, %298
  %302 = icmp slt i64 %301, 0
  br i1 %302, label %303, label %316

303:                                              ; preds = %288
  %304 = shl i64 %249, 43
  br label %305

305:                                              ; preds = %305, %303
  %306 = phi i64 [ %289, %303 ], [ %309, %305 ]
  %307 = phi i64 [ %301, %303 ], [ %314, %305 ]
  %308 = phi i64 [ %296, %303 ], [ %310, %305 ]
  %309 = add i64 %306, -4294967296
  %310 = add i64 %308, %304
  %311 = add i64 %307, %282
  %312 = icmp ult i64 %310, %308
  %313 = zext i1 %312 to i64
  %314 = add i64 %311, %313
  %315 = icmp slt i64 %314, 0
  br i1 %315, label %305, label %316, !llvm.loop !50

316:                                              ; preds = %305, %288
  %317 = phi i64 [ %296, %288 ], [ %310, %305 ]
  %318 = phi i64 [ %301, %288 ], [ %314, %305 ]
  %319 = phi i64 [ %289, %288 ], [ %309, %305 ]
  %320 = tail call i64 @llvm.fshl.i64(i64 %318, i64 %317, i64 32) #30
  %321 = icmp ugt i64 %283, %320
  br i1 %321, label %322, label %324

322:                                              ; preds = %316
  %323 = udiv i64 %320, %282
  br label %324

324:                                              ; preds = %316, %322
  %325 = phi i64 [ %323, %322 ], [ 4294967295, %316 ]
  %326 = or i64 %325, %319
  %327 = and i64 %326, 511
  %328 = icmp ult i64 %327, 3
  br i1 %328, label %329, label %369

329:                                              ; preds = %324
  %330 = lshr i64 %326, 32
  %331 = and i64 %326, 4294967295
  %332 = mul nuw i64 %331, %291
  %333 = mul nuw i64 %330, %291
  %334 = mul nuw i64 %331, %282
  %335 = mul nuw i64 %330, %282
  %336 = add i64 %333, %334
  %337 = icmp ult i64 %336, %334
  %338 = select i1 %337, i64 -4294967296, i64 0
  %339 = lshr i64 %336, 32
  %340 = shl i64 %336, 32
  %341 = add i64 %340, %332
  %342 = icmp ult i64 %341, %340
  %343 = sext i1 %342 to i64
  %344 = sub i64 0, %341
  %345 = icmp ne i64 %341, 0
  %346 = sext i1 %345 to i64
  %347 = add i64 %335, %339
  %348 = sub i64 %277, %347
  %349 = add i64 %348, %338
  %350 = add i64 %349, %343
  %351 = add i64 %350, %346
  %352 = icmp slt i64 %351, 0
  br i1 %352, label %353, label %363

353:                                              ; preds = %329, %353
  %354 = phi i64 [ %357, %353 ], [ %326, %329 ]
  %355 = phi i64 [ %358, %353 ], [ %344, %329 ]
  %356 = phi i64 [ %361, %353 ], [ %351, %329 ]
  %357 = add i64 %354, -1
  %358 = add i64 %355, %272
  %359 = icmp ult i64 %358, %355
  %360 = zext i1 %359 to i64
  %361 = add nsw i64 %356, %360
  %362 = icmp slt i64 %361, 0
  br i1 %362, label %353, label %363, !llvm.loop !70

363:                                              ; preds = %353, %329
  %364 = phi i64 [ %344, %329 ], [ %358, %353 ]
  %365 = phi i64 [ %326, %329 ], [ %357, %353 ]
  %366 = icmp ne i64 %364, 0
  %367 = zext i1 %366 to i64
  %368 = or i64 %365, %367
  br label %369

369:                                              ; preds = %265, %363, %324
  %370 = phi i64 [ %368, %363 ], [ %326, %324 ], [ -1, %265 ]
  %371 = tail call fastcc i64 @roundAndPackFloat64(i8 noundef zeroext %43, i32 noundef %279, i64 noundef %370, %struct.float_status* noundef %2)
  br label %372

372:                                              ; preds = %217, %211, %190, %153, %147, %126, %95, %89, %68, %369, %254, %235, %233, %223, %163, %159
  %373 = phi i64 [ -2251799813685248, %159 ], [ %165, %163 ], [ %224, %223 ], [ -2251799813685248, %233 ], [ %238, %235 ], [ %255, %254 ], [ %371, %369 ], [ %94, %89 ], [ %100, %95 ], [ -2251799813685248, %68 ], [ %152, %147 ], [ %158, %153 ], [ -2251799
  ret i64 %373
}

; Function Attrs: nofree nosync nounwind uwtable
define i64 @float64_rem(i64 noundef %0, i64 noundef %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #20 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i64 %0, 9218868437227405312
  %9 = icmp ne i64 %8, 0
  %10 = and i64 %0, 4503599627370495
  %11 = icmp eq i64 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i64 %0, -9223372036854775808
  br label %18

18:                                               ; preds = %7, %13
  %19 = phi i64 [ %0, %7 ], [ %17, %13 ]
  %20 = and i64 %1, 9218868437227405312
  %21 = icmp ne i64 %20, 0
  %22 = and i64 %1, 4503599627370495
  %23 = icmp eq i64 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i64 %1, -9223372036854775808
  br label %30

30:                                               ; preds = %3, %18, %25
  %31 = phi i64 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i64 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = and i64 %31, 4503599627370495
  %34 = lshr i64 %31, 52
  %35 = trunc i64 %34 to i32
  %36 = and i32 %35, 2047
  %37 = lshr i64 %31, 63
  %38 = trunc i64 %37 to i8
  %39 = and i64 %32, 4503599627370495
  %40 = lshr i64 %32, 52
  %41 = trunc i64 %40 to i32
  %42 = and i32 %41, 2047
  %43 = icmp eq i32 %36, 2047
  br i1 %43, label %44, label %108

44:                                               ; preds = %30
  %45 = icmp eq i64 %33, 0
  br i1 %45, label %46, label %50

46:                                               ; preds = %44
  %47 = icmp eq i32 %42, 2047
  %48 = icmp ne i64 %39, 0
  %49 = and i1 %48, %47
  br i1 %49, label %50, label %104

50:                                               ; preds = %46, %44
  %51 = shl i64 %31, 1
  %52 = icmp ult i64 %51, -4503599627370496
  %53 = and i64 %31, 9221120237041090560
  %54 = icmp eq i64 %53, 9218868437227405312
  %55 = and i64 %31, 2251799813685247
  %56 = icmp ne i64 %55, 0
  %57 = and i1 %54, %56
  %58 = shl i64 %32, 1
  %59 = icmp ugt i64 %58, -4503599627370497
  %60 = and i64 %32, 9221120237041090560
  %61 = icmp eq i64 %60, 9218868437227405312
  %62 = and i64 %32, 2251799813685247
  %63 = icmp ne i64 %62, 0
  %64 = and i1 %61, %63
  %65 = zext i1 %64 to i8
  %66 = or i1 %57, %64
  br i1 %66, label %67, label %71

67:                                               ; preds = %50
  %68 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %69 = load i8, i8* %68, align 1
  %70 = or i8 %69, 1
  store i8 %70, i8* %68, align 1
  br label %71

71:                                               ; preds = %67, %50
  %72 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %73 = load i8, i8* %72, align 1
  %74 = icmp eq i8 %73, 0
  br i1 %74, label %75, label %400

75:                                               ; preds = %71
  %76 = icmp ult i64 %51, %58
  br i1 %76, label %82, label %77

77:                                               ; preds = %75
  %78 = icmp ult i64 %58, %51
  br i1 %78, label %82, label %79

79:                                               ; preds = %77
  %80 = icmp ult i64 %31, %32
  %81 = zext i1 %80 to i8
  br label %82

82:                                               ; preds = %79, %77, %75
  %83 = phi i8 [ %81, %79 ], [ 0, %75 ], [ 1, %77 ]
  br i1 %57, label %89, label %84

84:                                               ; preds = %82
  br i1 %52, label %92, label %85

85:                                               ; preds = %84
  %86 = or i8 %83, %65
  %87 = icmp eq i8 %86, 0
  %88 = and i1 %59, %87
  br i1 %88, label %92, label %98

89:                                               ; preds = %82
  %90 = icmp eq i8 %83, 0
  %91 = select i1 %64, i1 %90, i1 %59
  br i1 %91, label %92, label %98

92:                                               ; preds = %89, %85, %84
  %93 = icmp ne i64 %60, 9218868437227405312
  %94 = icmp eq i64 %62, 0
  %95 = or i1 %93, %94
  %96 = or i64 %32, 2251799813685248
  %97 = select i1 %95, i64 %32, i64 %96
  br label %400

98:                                               ; preds = %89, %85
  %99 = icmp ne i64 %53, 9218868437227405312
  %100 = icmp eq i64 %55, 0
  %101 = or i1 %99, %100
  %102 = or i64 %31, 2251799813685248
  %103 = select i1 %101, i64 %31, i64 %102
  br label %400

104:                                              ; preds = %46
  %105 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %106 = load i8, i8* %105, align 1
  %107 = or i8 %106, 1
  store i8 %107, i8* %105, align 1
  br label %400

108:                                              ; preds = %30
  switch i32 %42, label %180 [
    i32 2047, label %109
    i32 0, label %165
  ]

109:                                              ; preds = %108
  %110 = icmp eq i64 %39, 0
  br i1 %110, label %400, label %111

111:                                              ; preds = %109
  %112 = shl i64 %31, 1
  %113 = icmp ult i64 %112, -4503599627370496
  %114 = and i64 %31, 9221120237041090560
  %115 = icmp eq i64 %114, 9218868437227405312
  %116 = and i64 %31, 2251799813685247
  %117 = icmp ne i64 %116, 0
  %118 = and i1 %115, %117
  %119 = shl i64 %32, 1
  %120 = icmp ugt i64 %119, -4503599627370497
  %121 = and i64 %32, 9221120237041090560
  %122 = icmp eq i64 %121, 9218868437227405312
  %123 = and i64 %32, 2251799813685247
  %124 = icmp ne i64 %123, 0
  %125 = and i1 %122, %124
  %126 = zext i1 %125 to i8
  %127 = or i1 %118, %125
  br i1 %127, label %128, label %132

128:                                              ; preds = %111
  %129 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %130 = load i8, i8* %129, align 1
  %131 = or i8 %130, 1
  store i8 %131, i8* %129, align 1
  br label %132

132:                                              ; preds = %128, %111
  %133 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %134 = load i8, i8* %133, align 1
  %135 = icmp eq i8 %134, 0
  br i1 %135, label %136, label %400

136:                                              ; preds = %132
  %137 = icmp ult i64 %112, %119
  br i1 %137, label %143, label %138

138:                                              ; preds = %136
  %139 = icmp ult i64 %119, %112
  br i1 %139, label %143, label %140

140:                                              ; preds = %138
  %141 = icmp ult i64 %31, %32
  %142 = zext i1 %141 to i8
  br label %143

143:                                              ; preds = %140, %138, %136
  %144 = phi i8 [ %142, %140 ], [ 0, %136 ], [ 1, %138 ]
  br i1 %118, label %150, label %145

145:                                              ; preds = %143
  br i1 %113, label %153, label %146

146:                                              ; preds = %145
  %147 = or i8 %144, %126
  %148 = icmp eq i8 %147, 0
  %149 = and i1 %120, %148
  br i1 %149, label %153, label %159

150:                                              ; preds = %143
  %151 = icmp eq i8 %144, 0
  %152 = select i1 %125, i1 %151, i1 %120
  br i1 %152, label %153, label %159

153:                                              ; preds = %150, %146, %145
  %154 = icmp ne i64 %121, 9218868437227405312
  %155 = icmp eq i64 %123, 0
  %156 = or i1 %154, %155
  %157 = or i64 %32, 2251799813685248
  %158 = select i1 %156, i64 %32, i64 %157
  br label %400

159:                                              ; preds = %150, %146
  %160 = icmp ne i64 %114, 9218868437227405312
  %161 = icmp eq i64 %116, 0
  %162 = or i1 %160, %161
  %163 = or i64 %31, 2251799813685248
  %164 = select i1 %162, i64 %31, i64 %163
  br label %400

165:                                              ; preds = %108
  %166 = icmp eq i64 %39, 0
  br i1 %166, label %167, label %171

167:                                              ; preds = %165
  %168 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %169 = load i8, i8* %168, align 1
  %170 = or i8 %169, 1
  store i8 %170, i8* %168, align 1
  br label %400

171:                                              ; preds = %165
  %ctlz.sh = lshr i64 %39, 1
  %ctlz.step = or i64 %39, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %172 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %172, 6148914691236517205
  %ctpop.sh = lshr i64 %172, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %173 = trunc i64 %ctpop.part to i32
  %174 = shl nuw nsw i32 %173, 24
  %175 = add nsw i32 %174, -184549376
  %176 = ashr exact i32 %175, 24
  %177 = zext i32 %176 to i64
  %178 = shl i64 %39, %177
  %179 = sub nsw i32 1, %176
  br label %180

180:                                              ; preds = %108, %171
  %181 = phi i32 [ %42, %108 ], [ %179, %171 ]
  %182 = phi i64 [ %39, %108 ], [ %178, %171 ]
  %183 = icmp eq i32 %36, 0
  br i1 %183, label %184, label %195

184:                                              ; preds = %180
  %185 = icmp eq i64 %33, 0
  br i1 %185, label %400, label %186

186:                                              ; preds = %184
  %ctlz.sh31 = lshr i64 %33, 1
  %ctlz.step32 = or i64 %33, %ctlz.sh31
  %ctlz.sh33 = lshr i64 %ctlz.step32, 2
  %ctlz.step34 = or i64 %ctlz.step32, %ctlz.sh33
  %ctlz.sh35 = lshr i64 %ctlz.step34, 4
  %ctlz.step36 = or i64 %ctlz.step34, %ctlz.sh35
  %ctlz.sh37 = lshr i64 %ctlz.step36, 8
  %ctlz.step38 = or i64 %ctlz.step36, %ctlz.sh37
  %ctlz.sh39 = lshr i64 %ctlz.step38, 16
  %ctlz.step40 = or i64 %ctlz.step38, %ctlz.sh39
  %ctlz.sh41 = lshr i64 %ctlz.step40, 32
  %ctlz.step42 = or i64 %ctlz.step40, %ctlz.sh41
  %187 = xor i64 %ctlz.step42, -1
  %cppop.and143 = and i64 %187, 6148914691236517205
  %ctpop.sh44 = lshr i64 %187, 1
  %cppop.and245 = and i64 %ctpop.sh44, 6148914691236517205
  %ctpop.step46 = add i64 %cppop.and143, %cppop.and245
  %cppop.and147 = and i64 %ctpop.step46, 3689348814741910323
  %ctpop.sh48 = lshr i64 %ctpop.step46, 2
  %cppop.and249 = and i64 %ctpop.sh48, 3689348814741910323
  %ctpop.step50 = add i64 %cppop.and147, %cppop.and249
  %cppop.and151 = and i64 %ctpop.step50, 1085102592571150095
  %ctpop.sh52 = lshr i64 %ctpop.step50, 4
  %cppop.and253 = and i64 %ctpop.sh52, 1085102592571150095
  %ctpop.step54 = add i64 %cppop.and151, %cppop.and253
  %cppop.and155 = and i64 %ctpop.step54, 71777214294589695
  %ctpop.sh56 = lshr i64 %ctpop.step54, 8
  %cppop.and257 = and i64 %ctpop.sh56, 71777214294589695
  %ctpop.step58 = add i64 %cppop.and155, %cppop.and257
  %cppop.and159 = and i64 %ctpop.step58, 281470681808895
  %ctpop.sh60 = lshr i64 %ctpop.step58, 16
  %cppop.and261 = and i64 %ctpop.sh60, 281470681808895
  %ctpop.step62 = add i64 %cppop.and159, %cppop.and261
  %cppop.and163 = and i64 %ctpop.step62, 4294967295
  %ctpop.sh64 = lshr i64 %ctpop.step62, 32
  %cppop.and265 = and i64 %ctpop.sh64, 4294967295
  %ctpop.step66 = add i64 %cppop.and163, %cppop.and265
  %ctpop.part67 = add i64 %ctpop.step66, 0
  %188 = trunc i64 %ctpop.part67 to i32
  %189 = shl nuw nsw i32 %188, 24
  %190 = add nsw i32 %189, -184549376
  %191 = ashr exact i32 %190, 24
  %192 = zext i32 %191 to i64
  %193 = shl i64 %33, %192
  %194 = sub nsw i32 1, %191
  br label %195

195:                                              ; preds = %186, %180
  %196 = phi i32 [ %194, %186 ], [ %36, %180 ]
  %197 = phi i64 [ %193, %186 ], [ %33, %180 ]
  %198 = sub nsw i32 %196, %181
  %199 = shl i64 %197, 11
  %200 = or i64 %199, -9223372036854775808
  %201 = shl i64 %182, 11
  %202 = or i64 %201, -9223372036854775808
  %203 = icmp slt i32 %198, 0
  br i1 %203, label %204, label %208

204:                                              ; preds = %195
  %205 = icmp eq i32 %198, -1
  br i1 %205, label %206, label %400

206:                                              ; preds = %204
  %207 = lshr exact i64 %200, 1
  br label %343

208:                                              ; preds = %195
  %209 = icmp uge i64 %200, %202
  %210 = zext i1 %209 to i64
  %211 = select i1 %209, i64 %202, i64 0
  %212 = sub nsw i64 %200, %211
  %213 = add nsw i32 %198, -64
  %214 = icmp ugt i32 %198, 64
  br i1 %214, label %215, label %275

215:                                              ; preds = %208
  %216 = lshr i64 %202, 32
  %217 = and i64 %202, -4294967296
  %218 = and i64 %201, 4294965248
  %219 = shl i64 %182, 43
  %220 = lshr exact i64 %202, 2
  br label %221

221:                                              ; preds = %215, %266
  %222 = phi i32 [ %213, %215 ], [ %273, %266 ]
  %223 = phi i64 [ %212, %215 ], [ %272, %266 ]
  %224 = icmp ugt i64 %202, %223
  br i1 %224, label %225, label %266

225:                                              ; preds = %221
  %226 = icmp ugt i64 %217, %223
  br i1 %226, label %227, label %230

227:                                              ; preds = %225
  %228 = udiv i64 %223, %216
  %229 = shl i64 %228, 32
  br label %230

230:                                              ; preds = %227, %225
  %231 = phi i64 [ %229, %227 ], [ -4294967296, %225 ]
  %232 = lshr exact i64 %231, 32
  %233 = mul nuw i64 %232, %218
  %234 = mul nuw i64 %232, %216
  %235 = lshr i64 %233, 32
  %236 = shl i64 %233, 32
  %237 = sub i64 0, %236
  %238 = icmp ne i64 %236, 0
  %239 = sext i1 %238 to i64
  %240 = add i64 %234, %235
  %241 = sub i64 %223, %240
  %242 = add i64 %241, %239
  %243 = icmp slt i64 %242, 0
  br i1 %243, label %244, label %255

244:                                              ; preds = %230, %244
  %245 = phi i64 [ %248, %244 ], [ %231, %230 ]
  %246 = phi i64 [ %253, %244 ], [ %242, %230 ]
  %247 = phi i64 [ %249, %244 ], [ %237, %230 ]
  %248 = add i64 %245, -4294967296
  %249 = add i64 %247, %219
  %250 = add i64 %246, %216
  %251 = icmp ult i64 %249, %247
  %252 = zext i1 %251 to i64
  %253 = add i64 %250, %252
  %254 = icmp slt i64 %253, 0
  br i1 %254, label %244, label %255, !llvm.loop !50

255:                                              ; preds = %244, %230
  %256 = phi i64 [ %237, %230 ], [ %249, %244 ]
  %257 = phi i64 [ %242, %230 ], [ %253, %244 ]
  %258 = phi i64 [ %231, %230 ], [ %248, %244 ]
  %259 = tail call i64 @llvm.fshl.i64(i64 %257, i64 %256, i64 32) #30
  %260 = icmp ugt i64 %217, %259
  br i1 %260, label %261, label %263

261:                                              ; preds = %255
  %262 = udiv i64 %259, %216
  br label %263

263:                                              ; preds = %261, %255
  %264 = phi i64 [ %262, %261 ], [ 4294967295, %255 ]
  %265 = or i64 %264, %258
  br label %266

266:                                              ; preds = %221, %263
  %267 = phi i64 [ %265, %263 ], [ -1, %221 ]
  %268 = sub i64 %267, 2
  %269 = icmp ult i64 %267, 2
  %270 = select i1 %269, i64 0, i64 %268
  %271 = mul i64 %220, %270
  %272 = sub i64 0, %271
  %273 = add nsw i32 %222, -62
  %274 = icmp sgt i32 %222, 62
  br i1 %274, label %221, label %275, !llvm.loop !71

275:                                              ; preds = %266, %208
  %276 = phi i64 [ %212, %208 ], [ %272, %266 ]
  %277 = phi i32 [ %213, %208 ], [ %273, %266 ]
  %278 = phi i64 [ %210, %208 ], [ %270, %266 ]
  %279 = icmp sgt i32 %277, -64
  br i1 %279, label %280, label %343

280:                                              ; preds = %275
  %281 = icmp ugt i64 %202, %276
  br i1 %281, label %282, label %328

282:                                              ; preds = %280
  %283 = lshr i64 %202, 32
  %284 = and i64 %202, -4294967296
  %285 = icmp ugt i64 %284, %276
  br i1 %285, label %286, label %289

286:                                              ; preds = %282
  %287 = udiv i64 %276, %283
  %288 = shl i64 %287, 32
  br label %289

289:                                              ; preds = %286, %282
  %290 = phi i64 [ %288, %286 ], [ -4294967296, %282 ]
  %291 = lshr exact i64 %290, 32
  %292 = and i64 %201, 4294965248
  %293 = mul nuw i64 %291, %292
  %294 = mul nuw i64 %291, %283
  %295 = lshr i64 %293, 32
  %296 = shl i64 %293, 32
  %297 = sub i64 0, %296
  %298 = icmp ne i64 %296, 0
  %299 = sext i1 %298 to i64
  %300 = add nuw i64 %294, %295
  %301 = sub i64 %276, %300
  %302 = add i64 %301, %299
  %303 = icmp slt i64 %302, 0
  br i1 %303, label %304, label %317

304:                                              ; preds = %289
  %305 = shl i64 %182, 43
  br label %306

306:                                              ; preds = %306, %304
  %307 = phi i64 [ %290, %304 ], [ %310, %306 ]
  %308 = phi i64 [ %302, %304 ], [ %315, %306 ]
  %309 = phi i64 [ %297, %304 ], [ %311, %306 ]
  %310 = add i64 %307, -4294967296
  %311 = add i64 %309, %305
  %312 = add i64 %308, %283
  %313 = icmp ult i64 %311, %309
  %314 = zext i1 %313 to i64
  %315 = add i64 %312, %314
  %316 = icmp slt i64 %315, 0
  br i1 %316, label %306, label %317, !llvm.loop !50

317:                                              ; preds = %306, %289
  %318 = phi i64 [ %297, %289 ], [ %311, %306 ]
  %319 = phi i64 [ %302, %289 ], [ %315, %306 ]
  %320 = phi i64 [ %290, %289 ], [ %310, %306 ]
  %321 = tail call i64 @llvm.fshl.i64(i64 %319, i64 %318, i64 32) #30
  %322 = icmp ugt i64 %284, %321
  br i1 %322, label %323, label %325

323:                                              ; preds = %317
  %324 = udiv i64 %321, %283
  br label %325

325:                                              ; preds = %323, %317
  %326 = phi i64 [ %324, %323 ], [ 4294967295, %317 ]
  %327 = or i64 %326, %320
  br label %328

328:                                              ; preds = %280, %325
  %329 = phi i64 [ %327, %325 ], [ -1, %280 ]
  %330 = sub i64 %329, 2
  %331 = icmp ult i64 %329, 2
  %332 = select i1 %331, i64 0, i64 %330
  %333 = sub i32 0, %277
  %334 = zext i32 %333 to i64
  %335 = lshr i64 %332, %334
  %336 = lshr exact i64 %202, 2
  %337 = lshr i64 %276, 1
  %338 = add nsw i32 %277, 63
  %339 = zext i32 %338 to i64
  %340 = shl i64 %337, %339
  %341 = mul i64 %335, %336
  %342 = sub i64 %340, %341
  br label %348

343:                                              ; preds = %206, %275
  %344 = phi i64 [ 0, %206 ], [ %278, %275 ]
  %345 = phi i64 [ %207, %206 ], [ %276, %275 ]
  %346 = lshr i64 %345, 2
  %347 = lshr exact i64 %202, 2
  br label %348

348:                                              ; preds = %328, %343
  %349 = phi i64 [ %342, %328 ], [ %346, %343 ]
  %350 = phi i64 [ %336, %328 ], [ %347, %343 ]
  %351 = phi i64 [ %335, %328 ], [ %344, %343 ]
  %352 = add i64 %351, 1
  %353 = sub i64 %349, %350
  %354 = icmp sgt i64 %353, -1
  br i1 %354, label %355, label %370, !llvm.loop !72

355:                                              ; preds = %348
  %356 = add i64 %351, 2
  %357 = sub i64 %353, %350
  %358 = icmp sgt i64 %357, -1
  br i1 %358, label %359, label %370, !llvm.loop !72

359:                                              ; preds = %355
  %360 = add i64 %351, 3
  %361 = sub i64 %357, %350
  %362 = icmp sgt i64 %361, -1
  br i1 %362, label %363, label %370, !llvm.loop !72

363:                                              ; preds = %359
  %364 = add i64 %351, 4
  %365 = sub i64 %361, %350
  %366 = icmp sgt i64 %365, -1
  br i1 %366, label %367, label %370, !llvm.loop !72

367:                                              ; preds = %363
  %368 = add i64 %351, 5
  %369 = sub i64 %365, %350
  br label %370

370:                                              ; preds = %367, %363, %359, %355, %348
  %371 = phi i64 [ %349, %348 ], [ %353, %355 ], [ %357, %359 ], [ %361, %363 ], [ %365, %367 ]
  %372 = phi i64 [ %352, %348 ], [ %356, %355 ], [ %360, %359 ], [ %364, %363 ], [ %368, %367 ]
  %373 = phi i64 [ %353, %348 ], [ %357, %355 ], [ %361, %359 ], [ %365, %363 ], [ %369, %367 ]
  %374 = add i64 %373, %371
  %375 = icmp slt i64 %374, 0
  br i1 %375, label %381, label %376

376:                                              ; preds = %370
  %377 = icmp ne i64 %374, 0
  %378 = and i64 %372, 1
  %379 = icmp eq i64 %378, 0
  %380 = select i1 %377, i1 true, i1 %379
  br i1 %380, label %385, label %381

381:                                              ; preds = %370, %376
  %382 = lshr i64 %371, 63
  %383 = trunc i64 %382 to i8
  %384 = icmp sgt i64 %371, -1
  br i1 %384, label %389, label %385

385:                                              ; preds = %376, %381
  %386 = phi i8 [ %383, %381 ], [ 1, %376 ]
  %387 = phi i64 [ %371, %381 ], [ %373, %376 ]
  %388 = sub i64 0, %387
  br label %389

389:                                              ; preds = %385, %381
  %390 = phi i8 [ %383, %381 ], [ %386, %385 ]
  %391 = phi i64 [ %371, %381 ], [ %388, %385 ]
  %392 = xor i8 %390, %38
  %ctlz.sh68 = lshr i64 %391, 1
  %ctlz.step69 = or i64 %391, %ctlz.sh68
  %ctlz.sh70 = lshr i64 %ctlz.step69, 2
  %ctlz.step71 = or i64 %ctlz.step69, %ctlz.sh70
  %ctlz.sh72 = lshr i64 %ctlz.step71, 4
  %ctlz.step73 = or i64 %ctlz.step71, %ctlz.sh72
  %ctlz.sh74 = lshr i64 %ctlz.step73, 8
  %ctlz.step75 = or i64 %ctlz.step73, %ctlz.sh74
  %ctlz.sh76 = lshr i64 %ctlz.step75, 16
  %ctlz.step77 = or i64 %ctlz.step75, %ctlz.sh76
  %ctlz.sh78 = lshr i64 %ctlz.step77, 32
  %ctlz.step79 = or i64 %ctlz.step77, %ctlz.sh78
  %393 = xor i64 %ctlz.step79, -1
  %cppop.and180 = and i64 %393, 6148914691236517205
  %ctpop.sh81 = lshr i64 %393, 1
  %cppop.and282 = and i64 %ctpop.sh81, 6148914691236517205
  %ctpop.step83 = add i64 %cppop.and180, %cppop.and282
  %cppop.and184 = and i64 %ctpop.step83, 3689348814741910323
  %ctpop.sh85 = lshr i64 %ctpop.step83, 2
  %cppop.and286 = and i64 %ctpop.sh85, 3689348814741910323
  %ctpop.step87 = add i64 %cppop.and184, %cppop.and286
  %cppop.and188 = and i64 %ctpop.step87, 1085102592571150095
  %ctpop.sh89 = lshr i64 %ctpop.step87, 4
  %cppop.and290 = and i64 %ctpop.sh89, 1085102592571150095
  %ctpop.step91 = add i64 %cppop.and188, %cppop.and290
  %cppop.and192 = and i64 %ctpop.step91, 71777214294589695
  %ctpop.sh93 = lshr i64 %ctpop.step91, 8
  %cppop.and294 = and i64 %ctpop.sh93, 71777214294589695
  %ctpop.step95 = add i64 %cppop.and192, %cppop.and294
  %cppop.and196 = and i64 %ctpop.step95, 281470681808895
  %ctpop.sh97 = lshr i64 %ctpop.step95, 16
  %cppop.and298 = and i64 %ctpop.sh97, 281470681808895
  %ctpop.step99 = add i64 %cppop.and196, %cppop.and298
  %cppop.and1100 = and i64 %ctpop.step99, 4294967295
  %ctpop.sh101 = lshr i64 %ctpop.step99, 32
  %cppop.and2102 = and i64 %ctpop.sh101, 4294967295
  %ctpop.step103 = add i64 %cppop.and1100, %cppop.and2102
  %ctpop.part104 = add i64 %ctpop.step103, 0
  %394 = trunc i64 %ctpop.part104 to i32
  %395 = add nsw i32 %394, -1
  %396 = sub nsw i32 %181, %395
  %397 = zext i32 %395 to i64
  %398 = shl i64 %391, %397
  %399 = tail call fastcc i64 @roundAndPackFloat64(i8 noundef zeroext %392, i32 noundef %396, i64 noundef %398, %struct.float_status* noundef %2) #30
  br label %400

400:                                              ; preds = %159, %153, %132, %98, %92, %71, %204, %184, %109, %389, %167, %104
  %401 = phi i64 [ -2251799813685248, %104 ], [ -2251799813685248, %167 ], [ %399, %389 ], [ %31, %109 ], [ %31, %184 ], [ %31, %204 ], [ %97, %92 ], [ %103, %98 ], [ -2251799813685248, %71 ], [ %158, %153 ], [ %164, %159 ], [ -2251799813685248, %132 ]
  ret i64 %401
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define i64 @float64_muladd(i64 noundef %0, i64 noundef %1, i64 noundef %2, i32 noundef %3, %struct.float_status* nocapture noundef %4) local_unnamed_addr #14 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = bitcast i64* %6 to i8*
  %11 = bitcast i64* %7 to i8*
  %12 = bitcast i64* %8 to i8*
  %13 = bitcast i64* %9 to i8*
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 5
  %15 = load i8, i8* %14, align 1
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %52, label %17

17:                                               ; preds = %5
  %18 = and i64 %0, 9218868437227405312
  %19 = icmp ne i64 %18, 0
  %20 = and i64 %0, 4503599627370495
  %21 = icmp eq i64 %20, 0
  %22 = or i1 %19, %21
  br i1 %22, label %28, label %23

23:                                               ; preds = %17
  %24 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %25 = load i8, i8* %24, align 1
  %26 = or i8 %25, 64
  store i8 %26, i8* %24, align 1
  %27 = and i64 %0, -9223372036854775808
  br label %28

28:                                               ; preds = %17, %23
  %29 = phi i64 [ %0, %17 ], [ %27, %23 ]
  %30 = and i64 %1, 9218868437227405312
  %31 = icmp ne i64 %30, 0
  %32 = and i64 %1, 4503599627370495
  %33 = icmp eq i64 %32, 0
  %34 = or i1 %31, %33
  br i1 %34, label %40, label %35

35:                                               ; preds = %28
  %36 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %37 = load i8, i8* %36, align 1
  %38 = or i8 %37, 64
  store i8 %38, i8* %36, align 1
  %39 = and i64 %1, -9223372036854775808
  br label %40

40:                                               ; preds = %28, %35
  %41 = phi i64 [ %1, %28 ], [ %39, %35 ]
  %42 = and i64 %2, 9218868437227405312
  %43 = icmp ne i64 %42, 0
  %44 = and i64 %2, 4503599627370495
  %45 = icmp eq i64 %44, 0
  %46 = or i1 %43, %45
  br i1 %46, label %52, label %47

47:                                               ; preds = %40
  %48 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %49 = load i8, i8* %48, align 1
  %50 = or i8 %49, 64
  store i8 %50, i8* %48, align 1
  %51 = and i64 %2, -9223372036854775808
  br label %52

52:                                               ; preds = %5, %40, %47
  %53 = phi i64 [ %41, %47 ], [ %41, %40 ], [ %1, %5 ]
  %54 = phi i64 [ %29, %47 ], [ %29, %40 ], [ %0, %5 ]
  %55 = phi i64 [ %51, %47 ], [ %2, %40 ], [ %2, %5 ]
  %56 = and i64 %54, 4503599627370495
  %57 = lshr i64 %54, 52
  %58 = trunc i64 %57 to i32
  %59 = and i32 %58, 2047
  %60 = and i64 %53, 4503599627370495
  %61 = lshr i64 %53, 52
  %62 = trunc i64 %61 to i32
  %63 = and i32 %62, 2047
  %64 = and i64 %55, 4503599627370495
  %65 = lshr i64 %55, 52
  %66 = trunc i64 %65 to i32
  %67 = and i32 %66, 2047
  %68 = lshr i64 %55, 63
  %69 = trunc i64 %68 to i8
  %70 = icmp eq i32 %59, 0
  %71 = icmp eq i64 %56, 0
  %72 = and i1 %71, %70
  %73 = icmp eq i32 %63, 2047
  %74 = and i1 %73, %72
  %75 = icmp eq i64 %60, 0
  %76 = and i1 %75, %74
  br i1 %76, label %92, label %77

77:                                               ; preds = %52
  %78 = icmp eq i32 %59, 2047
  %79 = and i1 %71, %78
  %80 = icmp eq i32 %63, 0
  %81 = and i1 %80, %79
  %82 = and i1 %75, %81
  %83 = icmp ne i64 %56, 0
  %84 = and i1 %83, %78
  %85 = icmp ne i64 %60, 0
  %86 = and i1 %85, %73
  %87 = select i1 %84, i1 true, i1 %86
  br i1 %87, label %96, label %88

88:                                               ; preds = %77
  %89 = icmp eq i32 %67, 2047
  %90 = icmp ne i64 %64, 0
  %91 = and i1 %90, %89
  br i1 %91, label %96, label %149

92:                                               ; preds = %52
  %93 = icmp eq i32 %67, 2047
  %94 = icmp ne i64 %64, 0
  %95 = and i1 %94, %93
  br i1 %95, label %96, label %150

96:                                               ; preds = %92, %88, %77
  %97 = shl i64 %54, 1
  %98 = icmp ugt i64 %97, -4503599627370497
  %99 = and i64 %54, 9221120237041090560
  %100 = icmp eq i64 %99, 9218868437227405312
  %101 = and i64 %54, 2251799813685247
  %102 = icmp ne i64 %101, 0
  %103 = and i1 %100, %102
  %104 = shl i64 %53, 1
  %105 = icmp ugt i64 %104, -4503599627370497
  %106 = and i64 %53, 9221120237041090560
  %107 = icmp eq i64 %106, 9218868437227405312
  %108 = and i64 %53, 2251799813685247
  %109 = icmp ne i64 %108, 0
  %110 = and i1 %107, %109
  %111 = and i64 %55, 9221120237041090560
  %112 = icmp eq i64 %111, 9218868437227405312
  %113 = and i64 %55, 2251799813685247
  %114 = icmp ne i64 %113, 0
  %115 = and i1 %112, %114
  %116 = or i1 %110, %103
  %117 = or i1 %116, %115
  br i1 %117, label %118, label %122

118:                                              ; preds = %96
  %119 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %120 = load i8, i8* %119, align 1
  %121 = or i8 %120, 1
  store i8 %121, i8* %119, align 1
  br label %122

122:                                              ; preds = %118, %96
  %123 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 6
  %124 = load i8, i8* %123, align 1
  %125 = icmp eq i8 %124, 0
  br i1 %125, label %126, label %418

126:                                              ; preds = %122
  %127 = or i1 %105, %110
  %128 = select i1 %127, i32 1, i32 2
  %129 = or i1 %98, %103
  %130 = select i1 %129, i32 0, i32 %128
  switch i32 %130, label %418 [
    i32 0, label %131
    i32 1, label %137
    i32 2, label %143
  ]

131:                                              ; preds = %126
  %132 = icmp ne i64 %99, 9218868437227405312
  %133 = icmp eq i64 %101, 0
  %134 = or i1 %132, %133
  %135 = or i64 %54, 2251799813685248
  %136 = select i1 %134, i64 %54, i64 %135
  br label %418

137:                                              ; preds = %126
  %138 = icmp ne i64 %106, 9218868437227405312
  %139 = icmp eq i64 %108, 0
  %140 = or i1 %138, %139
  %141 = or i64 %53, 2251799813685248
  %142 = select i1 %140, i64 %53, i64 %141
  br label %418

143:                                              ; preds = %126
  %144 = icmp ne i64 %111, 9218868437227405312
  %145 = icmp eq i64 %113, 0
  %146 = or i1 %144, %145
  %147 = or i64 %55, 2251799813685248
  %148 = select i1 %146, i64 %55, i64 %147
  br label %418

149:                                              ; preds = %88
  br i1 %82, label %150, label %154

150:                                              ; preds = %92, %149
  %151 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %152 = load i8, i8* %151, align 1
  %153 = or i8 %152, 1
  store i8 %153, i8* %151, align 1
  br label %418

154:                                              ; preds = %149
  %155 = trunc i32 %3 to i8
  %156 = and i8 %155, 1
  %157 = xor i8 %156, %69
  %158 = and i32 %3, 3
  %159 = icmp ne i32 %158, 0
  %160 = xor i64 %54, %53
  %161 = lshr i64 %160, 63
  %162 = trunc i64 %161 to i8
  %163 = lshr i8 %155, 1
  %164 = and i8 %163, 1
  %165 = xor i8 %164, %162
  %166 = or i1 %73, %78
  %167 = zext i32 %59 to i64
  %168 = or i64 %56, %167
  %169 = icmp eq i64 %168, 0
  %170 = zext i32 %63 to i64
  %171 = or i64 %60, %170
  %172 = icmp eq i64 %171, 0
  %173 = select i1 %169, i1 true, i1 %172
  br i1 %89, label %174, label %188

174:                                              ; preds = %154
  %175 = xor i1 %166, true
  %176 = icmp eq i8 %165, %157
  %177 = select i1 %175, i1 true, i1 %176
  br i1 %177, label %182, label %178

178:                                              ; preds = %174
  %179 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %180 = load i8, i8* %179, align 1
  %181 = or i8 %180, 1
  store i8 %181, i8* %179, align 1
  br label %418

182:                                              ; preds = %174
  %183 = zext i1 %159 to i8
  %184 = xor i8 %157, %183
  %185 = zext i8 %184 to i64
  %186 = shl nuw i64 %185, 63
  %187 = or i64 %186, 9218868437227405312
  br label %418

188:                                              ; preds = %154
  br i1 %166, label %189, label %195

189:                                              ; preds = %188
  %190 = zext i1 %159 to i8
  %191 = xor i8 %165, %190
  %192 = zext i8 %191 to i64
  %193 = shl nuw i64 %192, 63
  %194 = or i64 %193, 9218868437227405312
  br label %418

195:                                              ; preds = %188
  br i1 %173, label %196, label %228

196:                                              ; preds = %195
  %197 = icmp eq i32 %67, 0
  br i1 %197, label %198, label %225

198:                                              ; preds = %196
  %199 = icmp eq i64 %64, 0
  br i1 %199, label %200, label %213

200:                                              ; preds = %198
  %201 = icmp eq i8 %165, %157
  br i1 %201, label %207, label %202

202:                                              ; preds = %200
  %203 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 1
  %204 = load i8, i8* %203, align 1
  %205 = icmp eq i8 %204, 1
  %206 = zext i1 %205 to i8
  br label %207

207:                                              ; preds = %202, %200
  %208 = phi i8 [ %157, %200 ], [ %206, %202 ]
  %209 = zext i1 %159 to i8
  %210 = xor i8 %208, %209
  %211 = zext i8 %210 to i64
  %212 = shl i64 %211, 63
  br label %418

213:                                              ; preds = %198
  %214 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 4
  %215 = load i8, i8* %214, align 1
  %216 = icmp eq i8 %215, 0
  br i1 %216, label %225, label %217

217:                                              ; preds = %213
  %218 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %219 = load i8, i8* %218, align 1
  %220 = or i8 %219, -128
  store i8 %220, i8* %218, align 1
  %221 = zext i1 %159 to i8
  %222 = xor i8 %157, %221
  %223 = zext i8 %222 to i64
  %224 = shl nuw i64 %223, 63
  br label %418

225:                                              ; preds = %213, %196
  %226 = select i1 %159, i64 -9223372036854775808, i64 0
  %227 = xor i64 %55, %226
  br label %418

228:                                              ; preds = %195
  br i1 %70, label %229, label %238

229:                                              ; preds = %228
  %ctlz.sh = lshr i64 %56, 1
  %ctlz.step = or i64 %56, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %230 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %230, 6148914691236517205
  %ctpop.sh = lshr i64 %230, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %231 = trunc i64 %ctpop.part to i32
  %232 = shl nuw nsw i32 %231, 24
  %233 = add nsw i32 %232, -184549376
  %234 = ashr exact i32 %233, 24
  %235 = zext i32 %234 to i64
  %236 = shl i64 %56, %235
  %237 = sub nsw i32 1, %234
  br label %238

238:                                              ; preds = %229, %228
  %239 = phi i32 [ %237, %229 ], [ %59, %228 ]
  %240 = phi i64 [ %236, %229 ], [ %56, %228 ]
  br i1 %80, label %241, label %250

241:                                              ; preds = %238
  %ctlz.sh31 = lshr i64 %60, 1
  %ctlz.step32 = or i64 %60, %ctlz.sh31
  %ctlz.sh33 = lshr i64 %ctlz.step32, 2
  %ctlz.step34 = or i64 %ctlz.step32, %ctlz.sh33
  %ctlz.sh35 = lshr i64 %ctlz.step34, 4
  %ctlz.step36 = or i64 %ctlz.step34, %ctlz.sh35
  %ctlz.sh37 = lshr i64 %ctlz.step36, 8
  %ctlz.step38 = or i64 %ctlz.step36, %ctlz.sh37
  %ctlz.sh39 = lshr i64 %ctlz.step38, 16
  %ctlz.step40 = or i64 %ctlz.step38, %ctlz.sh39
  %ctlz.sh41 = lshr i64 %ctlz.step40, 32
  %ctlz.step42 = or i64 %ctlz.step40, %ctlz.sh41
  %242 = xor i64 %ctlz.step42, -1
  %cppop.and143 = and i64 %242, 6148914691236517205
  %ctpop.sh44 = lshr i64 %242, 1
  %cppop.and245 = and i64 %ctpop.sh44, 6148914691236517205
  %ctpop.step46 = add i64 %cppop.and143, %cppop.and245
  %cppop.and147 = and i64 %ctpop.step46, 3689348814741910323
  %ctpop.sh48 = lshr i64 %ctpop.step46, 2
  %cppop.and249 = and i64 %ctpop.sh48, 3689348814741910323
  %ctpop.step50 = add i64 %cppop.and147, %cppop.and249
  %cppop.and151 = and i64 %ctpop.step50, 1085102592571150095
  %ctpop.sh52 = lshr i64 %ctpop.step50, 4
  %cppop.and253 = and i64 %ctpop.sh52, 1085102592571150095
  %ctpop.step54 = add i64 %cppop.and151, %cppop.and253
  %cppop.and155 = and i64 %ctpop.step54, 71777214294589695
  %ctpop.sh56 = lshr i64 %ctpop.step54, 8
  %cppop.and257 = and i64 %ctpop.sh56, 71777214294589695
  %ctpop.step58 = add i64 %cppop.and155, %cppop.and257
  %cppop.and159 = and i64 %ctpop.step58, 281470681808895
  %ctpop.sh60 = lshr i64 %ctpop.step58, 16
  %cppop.and261 = and i64 %ctpop.sh60, 281470681808895
  %ctpop.step62 = add i64 %cppop.and159, %cppop.and261
  %cppop.and163 = and i64 %ctpop.step62, 4294967295
  %ctpop.sh64 = lshr i64 %ctpop.step62, 32
  %cppop.and265 = and i64 %ctpop.sh64, 4294967295
  %ctpop.step66 = add i64 %cppop.and163, %cppop.and265
  %ctpop.part67 = add i64 %ctpop.step66, 0
  %243 = trunc i64 %ctpop.part67 to i32
  %244 = shl nuw nsw i32 %243, 24
  %245 = add nsw i32 %244, -184549376
  %246 = ashr exact i32 %245, 24
  %247 = zext i32 %246 to i64
  %248 = shl i64 %60, %247
  %249 = sub nsw i32 1, %246
  br label %250

250:                                              ; preds = %241, %238
  %251 = phi i32 [ %249, %241 ], [ %63, %238 ]
  %252 = phi i64 [ %248, %241 ], [ %60, %238 ]
  %253 = add nsw i32 %251, %239
  %254 = add nsw i32 %253, -1022
  %255 = shl i64 %240, 10
  %256 = or i64 %255, 4611686018427387904
  %257 = shl i64 %252, 11
  %258 = or i64 %257, -9223372036854775808
  call fastcc void @mul64To128(i64 noundef %256, i64 noundef %258, i64* noundef nonnull %6, i64* noundef nonnull %7)
  %259 = load i64, i64* %6, align 8
  %260 = and i64 %259, 4611686018427387904
  %261 = icmp eq i64 %260, 0
  br i1 %261, label %262, label %267

262:                                              ; preds = %250
  %263 = load i64, i64* %7, align 8
  %264 = shl i64 %263, 1
  store i64 %264, i64* %7, align 8
  %265 = tail call i64 @llvm.fshl.i64(i64 %259, i64 %263, i64 1)
  store i64 %265, i64* %6, align 8
  %266 = add nsw i32 %253, -1023
  br label %267

267:                                              ; preds = %262, %250
  %268 = phi i64 [ %265, %262 ], [ %259, %250 ]
  %269 = phi i32 [ %266, %262 ], [ %254, %250 ]
  %270 = zext i1 %159 to i8
  %271 = xor i8 %165, %270
  %272 = icmp eq i32 %67, 0
  br i1 %272, label %273, label %291

273:                                              ; preds = %267
  %274 = icmp eq i64 %64, 0
  br i1 %274, label %275, label %282

275:                                              ; preds = %273
  %276 = load i64, i64* %7, align 8
  %277 = icmp ne i64 %276, 0
  %278 = zext i1 %277 to i64
  %279 = or i64 %268, %278
  %280 = add nsw i32 %269, -1
  %281 = tail call fastcc i64 @roundAndPackFloat64(i8 noundef zeroext %271, i32 noundef %280, i64 noundef %279, %struct.float_status* noundef nonnull %4)
  br label %418

282:                                              ; preds = %273
  %ctlz.sh68 = lshr i64 %64, 1
  %ctlz.step69 = or i64 %64, %ctlz.sh68
  %ctlz.sh70 = lshr i64 %ctlz.step69, 2
  %ctlz.step71 = or i64 %ctlz.step69, %ctlz.sh70
  %ctlz.sh72 = lshr i64 %ctlz.step71, 4
  %ctlz.step73 = or i64 %ctlz.step71, %ctlz.sh72
  %ctlz.sh74 = lshr i64 %ctlz.step73, 8
  %ctlz.step75 = or i64 %ctlz.step73, %ctlz.sh74
  %ctlz.sh76 = lshr i64 %ctlz.step75, 16
  %ctlz.step77 = or i64 %ctlz.step75, %ctlz.sh76
  %ctlz.sh78 = lshr i64 %ctlz.step77, 32
  %ctlz.step79 = or i64 %ctlz.step77, %ctlz.sh78
  %283 = xor i64 %ctlz.step79, -1
  %cppop.and180 = and i64 %283, 6148914691236517205
  %ctpop.sh81 = lshr i64 %283, 1
  %cppop.and282 = and i64 %ctpop.sh81, 6148914691236517205
  %ctpop.step83 = add i64 %cppop.and180, %cppop.and282
  %cppop.and184 = and i64 %ctpop.step83, 3689348814741910323
  %ctpop.sh85 = lshr i64 %ctpop.step83, 2
  %cppop.and286 = and i64 %ctpop.sh85, 3689348814741910323
  %ctpop.step87 = add i64 %cppop.and184, %cppop.and286
  %cppop.and188 = and i64 %ctpop.step87, 1085102592571150095
  %ctpop.sh89 = lshr i64 %ctpop.step87, 4
  %cppop.and290 = and i64 %ctpop.sh89, 1085102592571150095
  %ctpop.step91 = add i64 %cppop.and188, %cppop.and290
  %cppop.and192 = and i64 %ctpop.step91, 71777214294589695
  %ctpop.sh93 = lshr i64 %ctpop.step91, 8
  %cppop.and294 = and i64 %ctpop.sh93, 71777214294589695
  %ctpop.step95 = add i64 %cppop.and192, %cppop.and294
  %cppop.and196 = and i64 %ctpop.step95, 281470681808895
  %ctpop.sh97 = lshr i64 %ctpop.step95, 16
  %cppop.and298 = and i64 %ctpop.sh97, 281470681808895
  %ctpop.step99 = add i64 %cppop.and196, %cppop.and298
  %cppop.and1100 = and i64 %ctpop.step99, 4294967295
  %ctpop.sh101 = lshr i64 %ctpop.step99, 32
  %cppop.and2102 = and i64 %ctpop.sh101, 4294967295
  %ctpop.step103 = add i64 %cppop.and1100, %cppop.and2102
  %ctpop.part104 = add i64 %ctpop.step103, 0
  %284 = trunc i64 %ctpop.part104 to i32
  %285 = shl nuw nsw i32 %284, 24
  %286 = add nsw i32 %285, -184549376
  %287 = ashr exact i32 %286, 24
  %288 = zext i32 %287 to i64
  %289 = shl i64 %64, %288
  %290 = sub nsw i32 1, %287
  br label %291

291:                                              ; preds = %282, %267
  %292 = phi i32 [ %290, %282 ], [ %67, %267 ]
  %293 = phi i64 [ %289, %282 ], [ %64, %267 ]
  %294 = shl i64 %293, 10
  store i64 0, i64* %9, align 8
  %295 = or i64 %294, 4611686018427387904
  store i64 %295, i64* %8, align 8
  %296 = sub nsw i32 %269, %292
  %297 = icmp eq i8 %165, %157
  %298 = icmp sgt i32 %296, 0
  br i1 %297, label %299, label %336

299:                                              ; preds = %291
  br i1 %298, label %300, label %303

300:                                              ; preds = %299
  call fastcc void @shift128RightJamming(i64 noundef %295, i64 noundef 0, i32 noundef %296, i64* noundef nonnull %8, i64* noundef nonnull %9)
  %301 = load i64, i64* %8, align 8
  %302 = load i64, i64* %9, align 8
  br label %309

303:                                              ; preds = %299
  %304 = icmp slt i32 %296, 0
  br i1 %304, label %305, label %309

305:                                              ; preds = %303
  %306 = load i64, i64* %7, align 8
  %307 = sub nsw i32 0, %296
  call fastcc void @shift128RightJamming(i64 noundef %268, i64 noundef %306, i32 noundef %307, i64* noundef nonnull %6, i64* noundef nonnull %7)
  %308 = load i64, i64* %6, align 8
  br label %309

309:                                              ; preds = %303, %305, %300
  %310 = phi i64 [ %302, %300 ], [ 0, %305 ], [ 0, %303 ]
  %311 = phi i64 [ %301, %300 ], [ %295, %305 ], [ %295, %303 ]
  %312 = phi i64 [ %268, %300 ], [ %308, %305 ], [ %268, %303 ]
  %313 = phi i32 [ %269, %300 ], [ %292, %305 ], [ %292, %303 ]
  %314 = load i64, i64* %7, align 8
  %315 = add i64 %310, %314
  %316 = add i64 %311, %312
  %317 = icmp ult i64 %315, %314
  %318 = zext i1 %317 to i64
  %319 = add i64 %316, %318
  %320 = icmp slt i64 %319, 0
  br i1 %320, label %321, label %326

321:                                              ; preds = %309
  %322 = tail call i64 @llvm.fshl.i64(i64 %319, i64 %315, i64 63)
  %323 = and i64 %315, 1
  %324 = or i64 %322, %323
  %325 = lshr i64 %319, 1
  br label %328

326:                                              ; preds = %309
  %327 = add nsw i32 %313, -1
  br label %328

328:                                              ; preds = %326, %321
  %329 = phi i64 [ %325, %321 ], [ %319, %326 ]
  %330 = phi i64 [ %324, %321 ], [ %315, %326 ]
  %331 = phi i32 [ %313, %321 ], [ %327, %326 ]
  %332 = icmp ne i64 %330, 0
  %333 = zext i1 %332 to i64
  %334 = or i64 %329, %333
  %335 = tail call fastcc i64 @roundAndPackFloat64(i8 noundef zeroext %271, i32 noundef %331, i64 noundef %334, %struct.float_status* noundef nonnull %4)
  br label %418

336:                                              ; preds = %291
  br i1 %298, label %337, label %346

337:                                              ; preds = %336
  call fastcc void @shift128RightJamming(i64 noundef %295, i64 noundef 0, i32 noundef %296, i64* noundef nonnull %8, i64* noundef nonnull %9)
  %338 = load i64, i64* %7, align 8
  %339 = load i64, i64* %8, align 8
  %340 = load i64, i64* %9, align 8
  %341 = sub i64 %338, %340
  %342 = sub i64 %268, %339
  %343 = icmp ult i64 %338, %340
  %344 = sext i1 %343 to i64
  %345 = add i64 %342, %344
  br label %381

346:                                              ; preds = %336
  %347 = icmp slt i32 %296, 0
  %348 = load i64, i64* %7, align 8
  br i1 %347, label %349, label %359

349:                                              ; preds = %346
  %350 = sub nsw i32 0, %296
  call fastcc void @shift128RightJamming(i64 noundef %268, i64 noundef %348, i32 noundef %350, i64* noundef nonnull %6, i64* noundef nonnull %7)
  %351 = load i64, i64* %6, align 8
  %352 = load i64, i64* %7, align 8
  %353 = sub i64 0, %352
  %354 = sub i64 %295, %351
  %355 = icmp ne i64 %352, 0
  %356 = sext i1 %355 to i64
  %357 = add i64 %354, %356
  %358 = xor i8 %271, 1
  br label %381

359:                                              ; preds = %346
  %360 = icmp ugt i64 %268, %295
  %361 = icmp eq i64 %268, %295
  %362 = icmp ne i64 %348, 0
  %363 = and i1 %361, %362
  %364 = or i1 %360, %363
  br i1 %364, label %365, label %367

365:                                              ; preds = %359
  %366 = sub i64 %268, %295
  br label %381

367:                                              ; preds = %359
  %368 = icmp ult i64 %268, %295
  br i1 %368, label %369, label %375

369:                                              ; preds = %367
  %370 = sub i64 0, %348
  %371 = sub i64 %295, %268
  %372 = sext i1 %362 to i64
  %373 = add i64 %371, %372
  %374 = xor i8 %271, 1
  br label %381

375:                                              ; preds = %367
  %376 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 1
  %377 = load i8, i8* %376, align 1
  %378 = icmp eq i8 %377, 1
  %379 = xor i1 %159, %378
  %380 = select i1 %379, i64 -9223372036854775808, i64 0
  br label %418

381:                                              ; preds = %349, %369, %365, %337
  %382 = phi i64 [ %345, %337 ], [ %357, %349 ], [ %373, %369 ], [ %366, %365 ]
  %383 = phi i64 [ %341, %337 ], [ %353, %349 ], [ %370, %369 ], [ %348, %365 ]
  %384 = phi i8 [ %271, %337 ], [ %358, %349 ], [ %374, %369 ], [ %271, %365 ]
  %385 = phi i32 [ %269, %337 ], [ %292, %349 ], [ %269, %369 ], [ %269, %365 ]
  %386 = icmp eq i64 %382, 0
  br i1 %386, label %405, label %387

387:                                              ; preds = %381
  %ctlz.sh105 = lshr i64 %382, 1
  %ctlz.step106 = or i64 %382, %ctlz.sh105
  %ctlz.sh107 = lshr i64 %ctlz.step106, 2
  %ctlz.step108 = or i64 %ctlz.step106, %ctlz.sh107
  %ctlz.sh109 = lshr i64 %ctlz.step108, 4
  %ctlz.step110 = or i64 %ctlz.step108, %ctlz.sh109
  %ctlz.sh111 = lshr i64 %ctlz.step110, 8
  %ctlz.step112 = or i64 %ctlz.step110, %ctlz.sh111
  %ctlz.sh113 = lshr i64 %ctlz.step112, 16
  %ctlz.step114 = or i64 %ctlz.step112, %ctlz.sh113
  %ctlz.sh115 = lshr i64 %ctlz.step114, 32
  %ctlz.step116 = or i64 %ctlz.step114, %ctlz.sh115
  %388 = xor i64 %ctlz.step116, -1
  %cppop.and1117 = and i64 %388, 6148914691236517205
  %ctpop.sh118 = lshr i64 %388, 1
  %cppop.and2119 = and i64 %ctpop.sh118, 6148914691236517205
  %ctpop.step120 = add i64 %cppop.and1117, %cppop.and2119
  %cppop.and1121 = and i64 %ctpop.step120, 3689348814741910323
  %ctpop.sh122 = lshr i64 %ctpop.step120, 2
  %cppop.and2123 = and i64 %ctpop.sh122, 3689348814741910323
  %ctpop.step124 = add i64 %cppop.and1121, %cppop.and2123
  %cppop.and1125 = and i64 %ctpop.step124, 1085102592571150095
  %ctpop.sh126 = lshr i64 %ctpop.step124, 4
  %cppop.and2127 = and i64 %ctpop.sh126, 1085102592571150095
  %ctpop.step128 = add i64 %cppop.and1125, %cppop.and2127
  %cppop.and1129 = and i64 %ctpop.step128, 71777214294589695
  %ctpop.sh130 = lshr i64 %ctpop.step128, 8
  %cppop.and2131 = and i64 %ctpop.sh130, 71777214294589695
  %ctpop.step132 = add i64 %cppop.and1129, %cppop.and2131
  %cppop.and1133 = and i64 %ctpop.step132, 281470681808895
  %ctpop.sh134 = lshr i64 %ctpop.step132, 16
  %cppop.and2135 = and i64 %ctpop.sh134, 281470681808895
  %ctpop.step136 = add i64 %cppop.and1133, %cppop.and2135
  %cppop.and1137 = and i64 %ctpop.step136, 4294967295
  %ctpop.sh138 = lshr i64 %ctpop.step136, 32
  %cppop.and2139 = and i64 %ctpop.sh138, 4294967295
  %ctpop.step140 = add i64 %cppop.and1137, %cppop.and2139
  %ctpop.part141 = add i64 %ctpop.step140, 0
  %389 = trunc i64 %ctpop.part141 to i32
  %390 = add nsw i32 %389, -1
  %391 = zext i32 %390 to i64
  %392 = shl i64 %383, %391
  %393 = icmp eq i32 %390, 0
  br i1 %393, label %400, label %394

394:                                              ; preds = %387
  %395 = shl i64 %382, %391
  %396 = sub nsw i64 1, %ctpop.part141
  %397 = and i64 %396, 63
  %398 = lshr i64 %383, %397
  %399 = or i64 %395, %398
  br label %400

400:                                              ; preds = %387, %394
  %401 = phi i64 [ %399, %394 ], [ %382, %387 ]
  %402 = icmp ne i64 %392, 0
  %403 = zext i1 %402 to i64
  %404 = or i64 %401, %403
  br label %412

405:                                              ; preds = %381
  %ctlz.sh142 = lshr i64 %383, 1
  %ctlz.step143 = or i64 %383, %ctlz.sh142
  %ctlz.sh144 = lshr i64 %ctlz.step143, 2
  %ctlz.step145 = or i64 %ctlz.step143, %ctlz.sh144
  %ctlz.sh146 = lshr i64 %ctlz.step145, 4
  %ctlz.step147 = or i64 %ctlz.step145, %ctlz.sh146
  %ctlz.sh148 = lshr i64 %ctlz.step147, 8
  %ctlz.step149 = or i64 %ctlz.step147, %ctlz.sh148
  %ctlz.sh150 = lshr i64 %ctlz.step149, 16
  %ctlz.step151 = or i64 %ctlz.step149, %ctlz.sh150
  %ctlz.sh152 = lshr i64 %ctlz.step151, 32
  %ctlz.step153 = or i64 %ctlz.step151, %ctlz.sh152
  %406 = xor i64 %ctlz.step153, -1
  %cppop.and1154 = and i64 %406, 6148914691236517205
  %ctpop.sh155 = lshr i64 %406, 1
  %cppop.and2156 = and i64 %ctpop.sh155, 6148914691236517205
  %ctpop.step157 = add i64 %cppop.and1154, %cppop.and2156
  %cppop.and1158 = and i64 %ctpop.step157, 3689348814741910323
  %ctpop.sh159 = lshr i64 %ctpop.step157, 2
  %cppop.and2160 = and i64 %ctpop.sh159, 3689348814741910323
  %ctpop.step161 = add i64 %cppop.and1158, %cppop.and2160
  %cppop.and1162 = and i64 %ctpop.step161, 1085102592571150095
  %ctpop.sh163 = lshr i64 %ctpop.step161, 4
  %cppop.and2164 = and i64 %ctpop.sh163, 1085102592571150095
  %ctpop.step165 = add i64 %cppop.and1162, %cppop.and2164
  %cppop.and1166 = and i64 %ctpop.step165, 71777214294589695
  %ctpop.sh167 = lshr i64 %ctpop.step165, 8
  %cppop.and2168 = and i64 %ctpop.sh167, 71777214294589695
  %ctpop.step169 = add i64 %cppop.and1166, %cppop.and2168
  %cppop.and1170 = and i64 %ctpop.step169, 281470681808895
  %ctpop.sh171 = lshr i64 %ctpop.step169, 16
  %cppop.and2172 = and i64 %ctpop.sh171, 281470681808895
  %ctpop.step173 = add i64 %cppop.and1170, %cppop.and2172
  %cppop.and1174 = and i64 %ctpop.step173, 4294967295
  %ctpop.sh175 = lshr i64 %ctpop.step173, 32
  %cppop.and2176 = and i64 %ctpop.sh175, 4294967295
  %ctpop.step177 = add i64 %cppop.and1174, %cppop.and2176
  %ctpop.part178 = add i64 %ctpop.step177, 0
  %407 = trunc i64 %ctpop.part178 to i32
  %408 = add nuw nsw i64 %ctpop.part178, 4294967295
  %409 = and i64 %408, 4294967295
  %410 = shl i64 %383, %409
  %411 = add nuw nsw i32 %407, 63
  br label %412

412:                                              ; preds = %400, %405
  %413 = phi i64 [ %410, %405 ], [ %404, %400 ]
  %414 = phi i32 [ %411, %405 ], [ %390, %400 ]
  %415 = xor i32 %414, -1
  %416 = add i32 %385, %415
  %417 = tail call fastcc i64 @roundAndPackFloat64(i8 noundef zeroext %384, i32 noundef %416, i64 noundef %413, %struct.float_status* noundef nonnull %4)
  br label %418

418:                                              ; preds = %143, %137, %131, %126, %122, %412, %375, %328, %275, %225, %217, %207, %189, %182, %178, %150
  %419 = phi i64 [ -2251799813685248, %150 ], [ -2251799813685248, %178 ], [ %187, %182 ], [ %194, %189 ], [ %212, %207 ], [ %224, %217 ], [ %227, %225 ], [ %335, %328 ], [ %417, %412 ], [ %380, %375 ], [ %281, %275 ], [ %148, %143 ], [ %142, %137 ], [ %
  ret i64 %419
}

; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind uwtable willreturn writeonly
define internal fastcc void @mul64To128(i64 noundef %0, i64 noundef %1, i64* nocapture noundef writeonly %2, i64* nocapture noundef writeonly %3) unnamed_addr #26 {
  %5 = lshr i64 %0, 32
  %6 = lshr i64 %1, 32
  %7 = and i64 %0, 4294967295
  %8 = and i64 %1, 4294967295
  %9 = mul nuw i64 %8, %7
  %10 = mul nuw i64 %6, %7
  %11 = mul nuw i64 %8, %5
  %12 = mul nuw i64 %6, %5
  %13 = add i64 %10, %11
  %14 = icmp ult i64 %13, %11
  %15 = select i1 %14, i64 4294967296, i64 0
  %16 = lshr i64 %13, 32
  %17 = shl i64 %13, 32
  %18 = add i64 %17, %9
  %19 = icmp ult i64 %18, %17
  %20 = zext i1 %19 to i64
  %21 = add nuw i64 %16, %12
  %22 = add i64 %21, %15
  %23 = add i64 %22, %20
  store i64 %18, i64* %3, align 8
  store i64 %23, i64* %2, align 8
  ret void
}

; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind uwtable willreturn writeonly
define internal fastcc void @shift128RightJamming(i64 noundef %0, i64 noundef %1, i32 noundef %2, i64* nocapture noundef writeonly %3, i64* nocapture noundef writeonly %4) unnamed_addr #26 {
  %6 = trunc i32 %2 to i8
  %7 = sub i8 0, %6
  %8 = and i8 %7, 63
  %9 = icmp eq i32 %2, 0
  br i1 %9, label %45, label %10

10:                                               ; preds = %5
  %11 = icmp slt i32 %2, 64
  br i1 %11, label %12, label %23

12:                                               ; preds = %10
  %13 = zext i8 %8 to i64
  %14 = shl i64 %0, %13
  %15 = zext i32 %2 to i64
  %16 = lshr i64 %1, %15
  %17 = or i64 %14, %16
  %18 = shl i64 %1, %13
  %19 = icmp ne i64 %18, 0
  %20 = zext i1 %19 to i64
  %21 = or i64 %17, %20
  %22 = lshr i64 %0, %15
  br label %45

23:                                               ; preds = %10
  %24 = icmp eq i32 %2, 64
  br i1 %24, label %25, label %29

25:                                               ; preds = %23
  %26 = icmp ne i64 %1, 0
  %27 = zext i1 %26 to i64
  %28 = or i64 %27, %0
  br label %45

29:                                               ; preds = %23
  %30 = icmp ult i32 %2, 128
  br i1 %30, label %31, label %41

31:                                               ; preds = %29
  %32 = and i32 %2, 63
  %33 = zext i32 %32 to i64
  %34 = lshr i64 %0, %33
  %35 = zext i8 %8 to i64
  %36 = shl i64 %0, %35
  %37 = or i64 %36, %1
  %38 = icmp ne i64 %37, 0
  %39 = zext i1 %38 to i64
  %40 = or i64 %34, %39
  br label %45

41:                                               ; preds = %29
  %42 = or i64 %1, %0
  %43 = icmp ne i64 %42, 0
  %44 = zext i1 %43 to i64
  br label %45

45:                                               ; preds = %25, %41, %31, %5, %12
  %46 = phi i64 [ %21, %12 ], [ %1, %5 ], [ %28, %25 ], [ %40, %31 ], [ %44, %41 ]
  %47 = phi i64 [ %22, %12 ], [ %0, %5 ], [ 0, %25 ], [ 0, %31 ], [ 0, %41 ]
  store i64 %46, i64* %4, align 8
  store i64 %47, i64* %3, align 8
  ret void
}

; Function Attrs: nofree nosync nounwind uwtable
define i64 @float64_sqrt(i64 noundef %0, %struct.float_status* nocapture noundef %1) local_unnamed_addr #20 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = and i64 %0, 9218868437227405312
  %8 = icmp ne i64 %7, 0
  %9 = and i64 %0, 4503599627370495
  %10 = icmp eq i64 %9, 0
  %11 = or i1 %8, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, 64
  store i8 %15, i8* %13, align 1
  %16 = and i64 %0, -9223372036854775808
  br label %17

17:                                               ; preds = %2, %6, %12
  %18 = phi i64 [ %16, %12 ], [ %0, %6 ], [ %0, %2 ]
  %19 = and i64 %18, 4503599627370495
  %20 = lshr i64 %18, 52
  %21 = trunc i64 %20 to i32
  %22 = and i32 %21, 2047
  %23 = icmp eq i32 %22, 2047
  br i1 %23, label %24, label %55

24:                                               ; preds = %17
  %25 = icmp eq i64 %19, 0
  br i1 %25, label %49, label %26

26:                                               ; preds = %24
  %27 = and i64 %18, 9221120237041090560
  %28 = icmp eq i64 %27, 9218868437227405312
  %29 = and i64 %18, 2251799813685247
  %30 = icmp ne i64 %29, 0
  %31 = and i1 %28, %30
  br i1 %31, label %32, label %39

32:                                               ; preds = %26
  %33 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %34 = load i8, i8* %33, align 1
  %35 = or i8 %34, 1
  store i8 %35, i8* %33, align 1
  %36 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 6
  %37 = load i8, i8* %36, align 1
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %43, label %218

39:                                               ; preds = %26
  %40 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 6
  %41 = load i8, i8* %40, align 1
  %42 = icmp eq i8 %41, 0
  br i1 %42, label %43, label %218

43:                                               ; preds = %39, %32
  %44 = icmp ne i64 %27, 9218868437227405312
  %45 = icmp eq i64 %29, 0
  %46 = or i1 %44, %45
  %47 = or i64 %18, 2251799813685248
  %48 = select i1 %46, i64 %18, i64 %47
  br label %218

49:                                               ; preds = %24
  %50 = icmp sgt i64 %18, -1
  br i1 %50, label %218, label %51

51:                                               ; preds = %49
  %52 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %53 = load i8, i8* %52, align 1
  %54 = or i8 %53, 1
  store i8 %54, i8* %52, align 1
  br label %218

55:                                               ; preds = %17
  %56 = icmp sgt i64 %18, -1
  br i1 %56, label %65, label %57

57:                                               ; preds = %55
  %58 = zext i32 %22 to i64
  %59 = or i64 %19, %58
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %218, label %61

61:                                               ; preds = %57
  %62 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %63 = load i8, i8* %62, align 1
  %64 = or i8 %63, 1
  store i8 %64, i8* %62, align 1
  br label %218

65:                                               ; preds = %55
  %66 = icmp eq i32 %22, 0
  br i1 %66, label %67, label %78

67:                                               ; preds = %65
  %68 = icmp eq i64 %19, 0
  br i1 %68, label %218, label %69

69:                                               ; preds = %67
  %ctlz.sh = lshr i64 %19, 1
  %ctlz.step = or i64 %19, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %70 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %70, 6148914691236517205
  %ctpop.sh = lshr i64 %70, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %71 = trunc i64 %ctpop.part to i32
  %72 = shl nuw nsw i32 %71, 24
  %73 = add nsw i32 %72, -184549376
  %74 = ashr exact i32 %73, 24
  %75 = zext i32 %74 to i64
  %76 = shl i64 %19, %75
  %77 = sub nsw i32 1, %74
  br label %78

78:                                               ; preds = %69, %65
  %79 = phi i64 [ %76, %69 ], [ %19, %65 ]
  %80 = phi i32 [ %77, %69 ], [ %22, %65 ]
  %81 = add nsw i32 %80, -1023
  %82 = ashr i32 %81, 1
  %83 = add nsw i32 %82, 1022
  %84 = or i64 %79, 4503599627370496
  %85 = lshr i64 %84, 21
  %86 = trunc i64 %85 to i32
  %87 = lshr i32 %86, 27
  %88 = trunc i32 %87 to i8
  %89 = and i8 %88, 15
  %90 = and i32 %80, 1
  %91 = icmp eq i32 %90, 0
  %92 = lshr i32 %86, 17
  br i1 %91, label %105, label %93

93:                                               ; preds = %78
  %94 = add nuw nsw i32 %92, 16384
  %95 = zext i8 %89 to i64
  %96 = getelementptr inbounds [16 x i16], [16 x i16]* @estimateSqrt32.sqrtOddAdjustments, i64 0, i64 %95
  %97 = load i16, i16* %96, align 2
  %98 = zext i16 %97 to i32
  %99 = sub nsw i32 %94, %98
  %100 = udiv i32 %86, %99
  %101 = shl i32 %100, 14
  %102 = shl nsw i32 %99, 15
  %103 = add i32 %102, %101
  %104 = lshr i32 %86, 1
  br label %120

105:                                              ; preds = %78
  %106 = or i32 %92, 32768
  %107 = zext i8 %89 to i64
  %108 = getelementptr inbounds [16 x i16], [16 x i16]* @estimateSqrt32.sqrtEvenAdjustments, i64 0, i64 %107
  %109 = load i16, i16* %108, align 2
  %110 = zext i16 %109 to i32
  %111 = sub nsw i32 %106, %110
  %112 = udiv i32 %86, %111
  %113 = add i32 %111, %112
  %114 = icmp ugt i32 %113, 131071
  %115 = shl i32 %113, 15
  %116 = select i1 %114, i32 -32768, i32 %115
  %117 = icmp ugt i32 %116, %86
  br i1 %117, label %120, label %118

118:                                              ; preds = %105
  %119 = ashr i32 %86, 1
  br label %130

120:                                              ; preds = %105, %93
  %121 = phi i32 [ %104, %93 ], [ %86, %105 ]
  %122 = phi i32 [ %103, %93 ], [ %116, %105 ]
  %123 = zext i32 %121 to i64
  %124 = shl nuw nsw i64 %123, 31
  %125 = zext i32 %122 to i64
  %126 = udiv i64 %124, %125
  %127 = trunc i64 %126 to i32
  %128 = lshr i32 %122, 1
  %129 = add i32 %128, %127
  br label %130

130:                                              ; preds = %118, %120
  %131 = phi i32 [ %129, %120 ], [ %119, %118 ]
  %132 = zext i32 %131 to i64
  %133 = sub nuw nsw i32 9, %90
  %134 = zext i32 %133 to i64
  %135 = shl i64 %84, %134
  %136 = shl nuw i64 %132, 32
  %137 = icmp ugt i64 %136, %135
  br i1 %137, label %138, label %161

138:                                              ; preds = %130
  %139 = udiv i64 %135, %132
  %140 = shl i64 %139, 32
  %141 = and i64 %139, 4294967295
  %142 = mul nuw i64 %141, %132
  %143 = sub i64 %135, %142
  %144 = icmp slt i64 %143, 0
  br i1 %144, label %145, label %151

145:                                              ; preds = %138, %145
  %146 = phi i64 [ %148, %145 ], [ %140, %138 ]
  %147 = phi i64 [ %149, %145 ], [ %143, %138 ]
  %148 = add i64 %146, -4294967296
  %149 = add i64 %147, %132
  %150 = icmp slt i64 %149, 0
  br i1 %150, label %145, label %151, !llvm.loop !50

151:                                              ; preds = %145, %138
  %152 = phi i64 [ %143, %138 ], [ %149, %145 ]
  %153 = phi i64 [ %140, %138 ], [ %148, %145 ]
  %154 = shl i64 %152, 32
  %155 = icmp ugt i64 %136, %154
  br i1 %155, label %156, label %158

156:                                              ; preds = %151
  %157 = udiv i64 %154, %132
  br label %158

158:                                              ; preds = %156, %151
  %159 = phi i64 [ %157, %156 ], [ 4294967295, %151 ]
  %160 = or i64 %159, %153
  br label %161

161:                                              ; preds = %130, %158
  %162 = phi i64 [ %160, %158 ], [ -1, %130 ]
  %163 = shl nuw nsw i64 %132, 30
  %164 = add i64 %162, %163
  %165 = and i64 %164, 510
  %166 = icmp ult i64 %165, 6
  br i1 %166, label %167, label %215

167:                                              ; preds = %161
  %168 = lshr i64 %164, 32
  %169 = and i64 %164, 4294967295
  %170 = mul nuw i64 %169, %169
  %171 = mul nuw i64 %168, %169
  %172 = mul nuw i64 %168, %168
  %173 = shl i64 %171, 1
  %174 = icmp ult i64 %173, %171
  %175 = select i1 %174, i64 -4294967296, i64 0
  %176 = lshr i64 %173, 32
  %177 = shl i64 %171, 33
  %178 = add i64 %177, %170
  %179 = icmp ult i64 %178, %177
  %180 = sext i1 %179 to i64
  %181 = sub i64 0, %178
  %182 = icmp ne i64 %178, 0
  %183 = sext i1 %182 to i64
  %184 = add nuw i64 %172, %176
  %185 = sub i64 %135, %184
  %186 = add i64 %185, %175
  %187 = add i64 %186, %180
  %188 = add i64 %187, %183
  %189 = icmp slt i64 %188, 0
  br i1 %189, label %190, label %207

190:                                              ; preds = %167
  %191 = shl i64 %164, 1
  br label %192

192:                                              ; preds = %190, %192
  %193 = phi i64 [ %198, %192 ], [ %191, %190 ]
  %194 = phi i64 [ %197, %192 ], [ %164, %190 ]
  %195 = phi i64 [ %201, %192 ], [ %181, %190 ]
  %196 = phi i64 [ %205, %192 ], [ %188, %190 ]
  %197 = add i64 %194, -1
  %198 = add i64 %193, -2
  %199 = lshr i64 %197, 63
  %200 = or i64 %198, 1
  %201 = add i64 %200, %195
  %202 = add nsw i64 %199, %196
  %203 = icmp ult i64 %201, %195
  %204 = zext i1 %203 to i64
  %205 = add nsw i64 %202, %204
  %206 = icmp slt i64 %205, 0
  br i1 %206, label %192, label %207, !llvm.loop !73

207:                                              ; preds = %192, %167
  %208 = phi i64 [ %188, %167 ], [ %205, %192 ]
  %209 = phi i64 [ %181, %167 ], [ %201, %192 ]
  %210 = phi i64 [ %164, %167 ], [ %197, %192 ]
  %211 = or i64 %209, %208
  %212 = icmp ne i64 %211, 0
  %213 = zext i1 %212 to i64
  %214 = or i64 %210, %213
  br label %215

215:                                              ; preds = %207, %161
  %216 = phi i64 [ %214, %207 ], [ %164, %161 ]
  %217 = tail call fastcc i64 @roundAndPackFloat64(i8 noundef zeroext 0, i32 noundef %83, i64 noundef %216, %struct.float_status* noundef %1)
  br label %218

218:                                              ; preds = %43, %32, %39, %67, %57, %49, %215, %61, %51
  %219 = phi i64 [ -2251799813685248, %51 ], [ -2251799813685248, %61 ], [ %217, %215 ], [ %18, %49 ], [ %18, %57 ], [ 0, %67 ], [ %48, %43 ], [ -2251799813685248, %32 ], [ -2251799813685248, %39 ]
  ret i64 %219
}

; Function Attrs: nofree nosync nounwind uwtable
define i64 @float64_log2(i64 noundef %0, %struct.float_status* nocapture noundef %1) local_unnamed_addr #20 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = and i64 %0, 9218868437227405312
  %8 = icmp ne i64 %7, 0
  %9 = and i64 %0, 4503599627370495
  %10 = icmp eq i64 %9, 0
  %11 = or i1 %8, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, 64
  store i8 %15, i8* %13, align 1
  %16 = and i64 %0, -9223372036854775808
  br label %17

17:                                               ; preds = %2, %6, %12
  %18 = phi i64 [ %16, %12 ], [ %0, %6 ], [ %0, %2 ]
  %19 = and i64 %18, 4503599627370495
  %20 = lshr i64 %18, 52
  %21 = trunc i64 %20 to i32
  %22 = and i32 %21, 2047
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %35

24:                                               ; preds = %17
  %25 = icmp eq i64 %19, 0
  br i1 %25, label %124, label %26

26:                                               ; preds = %24
  %ctlz.sh = lshr i64 %19, 1
  %ctlz.step = or i64 %19, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %27 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %27, 6148914691236517205
  %ctpop.sh = lshr i64 %27, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %28 = trunc i64 %ctpop.part to i32
  %29 = shl nuw nsw i32 %28, 24
  %30 = add nsw i32 %29, -184549376
  %31 = ashr exact i32 %30, 24
  %32 = zext i32 %31 to i64
  %33 = shl i64 %19, %32
  %34 = sub nsw i32 1, %31
  br label %35

35:                                               ; preds = %26, %17
  %36 = phi i64 [ %33, %26 ], [ %19, %17 ]
  %37 = phi i32 [ %34, %26 ], [ %22, %17 ]
  %38 = icmp sgt i64 %18, -1
  br i1 %38, label %43, label %39

39:                                               ; preds = %35
  %40 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %41 = load i8, i8* %40, align 1
  %42 = or i8 %41, 1
  store i8 %42, i8* %40, align 1
  br label %124

43:                                               ; preds = %35
  %44 = icmp eq i32 %37, 2047
  br i1 %44, label %45, label %70

45:                                               ; preds = %43
  %46 = icmp eq i64 %36, 0
  br i1 %46, label %124, label %47

47:                                               ; preds = %45
  %48 = icmp ugt i64 %18, 9221120237041090559
  %49 = and i64 %18, 9221120237041090560
  %50 = icmp eq i64 %49, 9218868437227405312
  %51 = and i64 %18, 2251799813685247
  %52 = icmp ne i64 %51, 0
  %53 = and i1 %50, %52
  br i1 %53, label %54, label %58

54:                                               ; preds = %47
  %55 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %56 = load i8, i8* %55, align 1
  %57 = or i8 %56, 1
  store i8 %57, i8* %55, align 1
  br label %58

58:                                               ; preds = %54, %47
  %59 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 6
  %60 = load i8, i8* %59, align 1
  %61 = icmp eq i8 %60, 0
  br i1 %61, label %62, label %124

62:                                               ; preds = %58
  %63 = or i1 %48, %53
  br i1 %63, label %64, label %124

64:                                               ; preds = %62
  %65 = icmp ne i64 %49, 9218868437227405312
  %66 = icmp eq i64 %51, 0
  %67 = or i1 %65, %66
  %68 = or i64 %18, 2251799813685248
  %69 = select i1 %67, i64 %18, i64 %68
  br label %124

70:                                               ; preds = %43
  %71 = add nsw i32 %37, 3073
  %72 = or i64 %36, 4503599627370496
  %73 = zext i32 %71 to i64
  %74 = shl i64 %73, 52
  br label %75

75:                                               ; preds = %70, %75
  %76 = phi i64 [ 2251799813685248, %70 ], [ %103, %75 ]
  %77 = phi i64 [ %74, %70 ], [ %102, %75 ]
  %78 = phi i64 [ %72, %70 ], [ %100, %75 ]
  %79 = lshr i64 %78, 32
  %80 = and i64 %78, 4294967295
  %81 = mul nuw i64 %80, %80
  %82 = mul nuw i64 %79, %80
  %83 = mul nuw i64 %79, %79
  %84 = shl i64 %82, 1
  %85 = icmp ult i64 %84, %82
  %86 = select i1 %85, i64 4294967296, i64 0
  %87 = lshr i64 %84, 32
  %88 = shl i64 %82, 33
  %89 = add i64 %88, %81
  %90 = icmp ult i64 %89, %88
  %91 = zext i1 %90 to i64
  %92 = add nuw i64 %87, %83
  %93 = add i64 %92, %86
  %94 = add i64 %93, %91
  %95 = tail call i64 @llvm.fshl.i64(i64 %94, i64 %89, i64 12)
  %96 = and i64 %95, 9007199254740992
  %97 = icmp eq i64 %96, 0
  %98 = xor i1 %97, true
  %99 = zext i1 %98 to i64
  %100 = lshr i64 %95, %99
  %101 = select i1 %97, i64 0, i64 %76
  %102 = or i64 %101, %77
  %103 = lshr i64 %76, 1
  %104 = icmp ult i64 %76, 2
  br i1 %104, label %105, label %75, !llvm.loop !74

105:                                              ; preds = %75
  %106 = icmp slt i32 %37, 1023
  br i1 %106, label %115, label %107

107:                                              ; preds = %105
  %ctlz.sh31 = lshr i64 %102, 1
  %ctlz.step32 = or i64 %102, %ctlz.sh31
  %ctlz.sh33 = lshr i64 %ctlz.step32, 2
  %ctlz.step34 = or i64 %ctlz.step32, %ctlz.sh33
  %ctlz.sh35 = lshr i64 %ctlz.step34, 4
  %ctlz.step36 = or i64 %ctlz.step34, %ctlz.sh35
  %ctlz.sh37 = lshr i64 %ctlz.step36, 8
  %ctlz.step38 = or i64 %ctlz.step36, %ctlz.sh37
  %ctlz.sh39 = lshr i64 %ctlz.step38, 16
  %ctlz.step40 = or i64 %ctlz.step38, %ctlz.sh39
  %ctlz.sh41 = lshr i64 %ctlz.step40, 32
  %ctlz.step42 = or i64 %ctlz.step40, %ctlz.sh41
  %108 = xor i64 %ctlz.step42, -1
  %cppop.and143 = and i64 %108, 6148914691236517205
  %ctpop.sh44 = lshr i64 %108, 1
  %cppop.and245 = and i64 %ctpop.sh44, 6148914691236517205
  %ctpop.step46 = add i64 %cppop.and143, %cppop.and245
  %cppop.and147 = and i64 %ctpop.step46, 3689348814741910323
  %ctpop.sh48 = lshr i64 %ctpop.step46, 2
  %cppop.and249 = and i64 %ctpop.sh48, 3689348814741910323
  %ctpop.step50 = add i64 %cppop.and147, %cppop.and249
  %cppop.and151 = and i64 %ctpop.step50, 1085102592571150095
  %ctpop.sh52 = lshr i64 %ctpop.step50, 4
  %cppop.and253 = and i64 %ctpop.sh52, 1085102592571150095
  %ctpop.step54 = add i64 %cppop.and151, %cppop.and253
  %cppop.and155 = and i64 %ctpop.step54, 71777214294589695
  %ctpop.sh56 = lshr i64 %ctpop.step54, 8
  %cppop.and257 = and i64 %ctpop.sh56, 71777214294589695
  %ctpop.step58 = add i64 %cppop.and155, %cppop.and257
  %cppop.and159 = and i64 %ctpop.step58, 281470681808895
  %ctpop.sh60 = lshr i64 %ctpop.step58, 16
  %cppop.and261 = and i64 %ctpop.sh60, 281470681808895
  %ctpop.step62 = add i64 %cppop.and159, %cppop.and261
  %cppop.and163 = and i64 %ctpop.step62, 4294967295
  %ctpop.sh64 = lshr i64 %ctpop.step62, 32
  %cppop.and265 = and i64 %ctpop.sh64, 4294967295
  %ctpop.step66 = add i64 %cppop.and163, %cppop.and265
  %ctpop.part67 = add i64 %ctpop.step66, 0
  %109 = trunc i64 %ctpop.part67 to i32
  %110 = add nuw nsw i64 %ctpop.part67, 4294967295
  %111 = sub nuw nsw i32 1033, %109
  %112 = and i64 %110, 4294967295
  %113 = shl i64 %102, %112
  %114 = tail call fastcc i64 @roundAndPackFloat64(i8 noundef zeroext 0, i32 noundef %111, i64 noundef %113, %struct.float_status* noundef %1) #30
  br label %124

115:                                              ; preds = %105
  %116 = sub i64 0, %102
  %ctlz.sh68 = lshr i64 %116, 1
  %ctlz.step69 = or i64 %116, %ctlz.sh68
  %ctlz.sh70 = lshr i64 %ctlz.step69, 2
  %ctlz.step71 = or i64 %ctlz.step69, %ctlz.sh70
  %ctlz.sh72 = lshr i64 %ctlz.step71, 4
  %ctlz.step73 = or i64 %ctlz.step71, %ctlz.sh72
  %ctlz.sh74 = lshr i64 %ctlz.step73, 8
  %ctlz.step75 = or i64 %ctlz.step73, %ctlz.sh74
  %ctlz.sh76 = lshr i64 %ctlz.step75, 16
  %ctlz.step77 = or i64 %ctlz.step75, %ctlz.sh76
  %ctlz.sh78 = lshr i64 %ctlz.step77, 32
  %ctlz.step79 = or i64 %ctlz.step77, %ctlz.sh78
  %117 = xor i64 %ctlz.step79, -1
  %cppop.and180 = and i64 %117, 6148914691236517205
  %ctpop.sh81 = lshr i64 %117, 1
  %cppop.and282 = and i64 %ctpop.sh81, 6148914691236517205
  %ctpop.step83 = add i64 %cppop.and180, %cppop.and282
  %cppop.and184 = and i64 %ctpop.step83, 3689348814741910323
  %ctpop.sh85 = lshr i64 %ctpop.step83, 2
  %cppop.and286 = and i64 %ctpop.sh85, 3689348814741910323
  %ctpop.step87 = add i64 %cppop.and184, %cppop.and286
  %cppop.and188 = and i64 %ctpop.step87, 1085102592571150095
  %ctpop.sh89 = lshr i64 %ctpop.step87, 4
  %cppop.and290 = and i64 %ctpop.sh89, 1085102592571150095
  %ctpop.step91 = add i64 %cppop.and188, %cppop.and290
  %cppop.and192 = and i64 %ctpop.step91, 71777214294589695
  %ctpop.sh93 = lshr i64 %ctpop.step91, 8
  %cppop.and294 = and i64 %ctpop.sh93, 71777214294589695
  %ctpop.step95 = add i64 %cppop.and192, %cppop.and294
  %cppop.and196 = and i64 %ctpop.step95, 281470681808895
  %ctpop.sh97 = lshr i64 %ctpop.step95, 16
  %cppop.and298 = and i64 %ctpop.sh97, 281470681808895
  %ctpop.step99 = add i64 %cppop.and196, %cppop.and298
  %cppop.and1100 = and i64 %ctpop.step99, 4294967295
  %ctpop.sh101 = lshr i64 %ctpop.step99, 32
  %cppop.and2102 = and i64 %ctpop.sh101, 4294967295
  %ctpop.step103 = add i64 %cppop.and1100, %cppop.and2102
  %ctpop.part104 = add i64 %ctpop.step103, 0
  %118 = trunc i64 %ctpop.part104 to i32
  %119 = add nuw nsw i64 %ctpop.part104, 4294967295
  %120 = sub nuw nsw i32 1033, %118
  %121 = and i64 %119, 4294967295
  %122 = shl i64 %116, %121
  %123 = tail call fastcc i64 @roundAndPackFloat64(i8 noundef zeroext 1, i32 noundef %120, i64 noundef %122, %struct.float_status* noundef %1) #30
  br label %124

124:                                              ; preds = %62, %64, %58, %24, %115, %107, %45, %39
  %125 = phi i64 [ -2251799813685248, %39 ], [ %18, %45 ], [ %114, %107 ], [ %123, %115 ], [ -4503599627370496, %24 ], [ %69, %64 ], [ -2251799813685248, %58 ], [ 0, %62 ]
  ret i64 %125
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @float64_eq(i64 noundef %0, i64 noundef %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i64 %0, 9218868437227405312
  %9 = icmp ne i64 %8, 0
  %10 = and i64 %0, 4503599627370495
  %11 = icmp eq i64 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i64 %0, -9223372036854775808
  br label %18

18:                                               ; preds = %7, %13
  %19 = phi i64 [ %0, %7 ], [ %17, %13 ]
  %20 = and i64 %1, 9218868437227405312
  %21 = icmp ne i64 %20, 0
  %22 = and i64 %1, 4503599627370495
  %23 = icmp eq i64 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i64 %1, -9223372036854775808
  br label %30

30:                                               ; preds = %3, %18, %25
  %31 = phi i64 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i64 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = and i64 %31, 9218868437227405312
  %34 = icmp ne i64 %33, 9218868437227405312
  %35 = and i64 %31, 4503599627370495
  %36 = icmp eq i64 %35, 0
  %37 = or i1 %34, %36
  br i1 %37, label %38, label %44

38:                                               ; preds = %30
  %39 = and i64 %32, 9218868437227405312
  %40 = icmp ne i64 %39, 9218868437227405312
  %41 = and i64 %32, 4503599627370495
  %42 = icmp eq i64 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %48, label %44

44:                                               ; preds = %38, %30
  %45 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %46 = load i8, i8* %45, align 1
  %47 = or i8 %46, 1
  store i8 %47, i8* %45, align 1
  br label %55

48:                                               ; preds = %38
  %49 = icmp eq i64 %31, %32
  %50 = or i64 %32, %31
  %51 = and i64 %50, 9223372036854775807
  %52 = icmp eq i64 %51, 0
  %53 = or i1 %49, %52
  %54 = zext i1 %53 to i32
  br label %55

55:                                               ; preds = %48, %44
  %56 = phi i32 [ 0, %44 ], [ %54, %48 ]
  ret i32 %56
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @float64_le(i64 noundef %0, i64 noundef %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i64 %0, 9218868437227405312
  %9 = icmp ne i64 %8, 0
  %10 = and i64 %0, 4503599627370495
  %11 = icmp eq i64 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i64 %0, -9223372036854775808
  br label %18

18:                                               ; preds = %7, %13
  %19 = phi i64 [ %0, %7 ], [ %17, %13 ]
  %20 = and i64 %1, 9218868437227405312
  %21 = icmp ne i64 %20, 0
  %22 = and i64 %1, 4503599627370495
  %23 = icmp eq i64 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i64 %1, -9223372036854775808
  br label %30

30:                                               ; preds = %3, %18, %25
  %31 = phi i64 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i64 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = and i64 %31, 9218868437227405312
  %34 = icmp ne i64 %33, 9218868437227405312
  %35 = and i64 %31, 4503599627370495
  %36 = icmp eq i64 %35, 0
  %37 = or i1 %34, %36
  br i1 %37, label %38, label %44

38:                                               ; preds = %30
  %39 = and i64 %32, 9218868437227405312
  %40 = icmp ne i64 %39, 9218868437227405312
  %41 = and i64 %32, 4503599627370495
  %42 = icmp eq i64 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %48, label %44

44:                                               ; preds = %38, %30
  %45 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %46 = load i8, i8* %45, align 1
  %47 = or i8 %46, 1
  store i8 %47, i8* %45, align 1
  br label %66

48:                                               ; preds = %38
  %49 = lshr i64 %31, 63
  %50 = trunc i64 %49 to i8
  %51 = lshr i64 %32, 63
  %52 = trunc i64 %51 to i8
  %53 = icmp eq i8 %50, %52
  br i1 %53, label %60, label %54

54:                                               ; preds = %48
  %55 = icmp slt i64 %31, 0
  %56 = or i64 %32, %31
  %57 = and i64 %56, 9223372036854775807
  %58 = icmp eq i64 %57, 0
  %59 = or i1 %55, %58
  br label %66

60:                                               ; preds = %48
  %61 = icmp eq i64 %31, %32
  %62 = icmp ult i64 %31, %32
  %63 = zext i1 %62 to i8
  %64 = icmp ne i8 %50, %63
  %65 = or i1 %61, %64
  br label %66

66:                                               ; preds = %60, %54, %44
  %67 = phi i1 [ false, %44 ], [ %59, %54 ], [ %65, %60 ]
  %68 = zext i1 %67 to i32
  ret i32 %68
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @float64_lt(i64 noundef %0, i64 noundef %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i64 %0, 9218868437227405312
  %9 = icmp ne i64 %8, 0
  %10 = and i64 %0, 4503599627370495
  %11 = icmp eq i64 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i64 %0, -9223372036854775808
  br label %18

18:                                               ; preds = %7, %13
  %19 = phi i64 [ %0, %7 ], [ %17, %13 ]
  %20 = and i64 %1, 9218868437227405312
  %21 = icmp ne i64 %20, 0
  %22 = and i64 %1, 4503599627370495
  %23 = icmp eq i64 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i64 %1, -9223372036854775808
  br label %30

30:                                               ; preds = %3, %18, %25
  %31 = phi i64 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i64 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = and i64 %31, 9218868437227405312
  %34 = icmp ne i64 %33, 9218868437227405312
  %35 = and i64 %31, 4503599627370495
  %36 = icmp eq i64 %35, 0
  %37 = or i1 %34, %36
  br i1 %37, label %38, label %44

38:                                               ; preds = %30
  %39 = and i64 %32, 9218868437227405312
  %40 = icmp ne i64 %39, 9218868437227405312
  %41 = and i64 %32, 4503599627370495
  %42 = icmp eq i64 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %48, label %44

44:                                               ; preds = %38, %30
  %45 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %46 = load i8, i8* %45, align 1
  %47 = or i8 %46, 1
  store i8 %47, i8* %45, align 1
  br label %66

48:                                               ; preds = %38
  %49 = lshr i64 %31, 63
  %50 = trunc i64 %49 to i8
  %51 = lshr i64 %32, 63
  %52 = trunc i64 %51 to i8
  %53 = icmp eq i8 %50, %52
  br i1 %53, label %60, label %54

54:                                               ; preds = %48
  %55 = icmp slt i64 %31, 0
  %56 = or i64 %32, %31
  %57 = and i64 %56, 9223372036854775807
  %58 = icmp ne i64 %57, 0
  %59 = and i1 %55, %58
  br label %66

60:                                               ; preds = %48
  %61 = icmp ne i64 %31, %32
  %62 = icmp ult i64 %31, %32
  %63 = zext i1 %62 to i8
  %64 = icmp ne i8 %50, %63
  %65 = and i1 %61, %64
  br label %66

66:                                               ; preds = %60, %54, %44
  %67 = phi i1 [ false, %44 ], [ %59, %54 ], [ %65, %60 ]
  %68 = zext i1 %67 to i32
  ret i32 %68
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @float64_unordered(i64 noundef %0, i64 noundef %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %28, label %7

7:                                                ; preds = %3
  %8 = and i64 %0, 9218868437227405312
  %9 = icmp ne i64 %8, 0
  %10 = and i64 %0, 4503599627370495
  %11 = icmp eq i64 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %17, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  br label %17

17:                                               ; preds = %7, %13
  %18 = phi i64 [ %0, %7 ], [ 0, %13 ]
  %19 = and i64 %1, 9218868437227405312
  %20 = icmp ne i64 %19, 0
  %21 = and i64 %1, 4503599627370495
  %22 = icmp eq i64 %21, 0
  %23 = or i1 %20, %22
  br i1 %23, label %28, label %24

24:                                               ; preds = %17
  %25 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %26 = load i8, i8* %25, align 1
  %27 = or i8 %26, 64
  store i8 %27, i8* %25, align 1
  br label %28

28:                                               ; preds = %3, %17, %24
  %29 = phi i64 [ %18, %24 ], [ %18, %17 ], [ %0, %3 ]
  %30 = phi i64 [ 0, %24 ], [ %1, %17 ], [ %1, %3 ]
  %31 = and i64 %29, 9218868437227405312
  %32 = icmp ne i64 %31, 9218868437227405312
  %33 = and i64 %29, 4503599627370495
  %34 = icmp eq i64 %33, 0
  %35 = or i1 %32, %34
  br i1 %35, label %36, label %42

36:                                               ; preds = %28
  %37 = and i64 %30, 9218868437227405312
  %38 = icmp ne i64 %37, 9218868437227405312
  %39 = and i64 %30, 4503599627370495
  %40 = icmp eq i64 %39, 0
  %41 = or i1 %38, %40
  br i1 %41, label %46, label %42

42:                                               ; preds = %36, %28
  %43 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %44 = load i8, i8* %43, align 1
  %45 = or i8 %44, 1
  store i8 %45, i8* %43, align 1
  br label %46

46:                                               ; preds = %36, %42
  %47 = phi i32 [ 1, %42 ], [ 0, %36 ]
  ret i32 %47
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @float64_eq_quiet(i64 noundef %0, i64 noundef %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i64 %0, 9218868437227405312
  %9 = icmp ne i64 %8, 0
  %10 = and i64 %0, 4503599627370495
  %11 = icmp eq i64 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i64 %0, -9223372036854775808
  br label %18

18:                                               ; preds = %7, %13
  %19 = phi i64 [ %0, %7 ], [ %17, %13 ]
  %20 = and i64 %1, 9218868437227405312
  %21 = icmp ne i64 %20, 0
  %22 = and i64 %1, 4503599627370495
  %23 = icmp eq i64 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i64 %1, -9223372036854775808
  br label %30

30:                                               ; preds = %3, %18, %25
  %31 = phi i64 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i64 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = and i64 %31, 9218868437227405312
  %34 = icmp ne i64 %33, 9218868437227405312
  %35 = and i64 %31, 4503599627370495
  %36 = icmp eq i64 %35, 0
  %37 = or i1 %34, %36
  br i1 %37, label %38, label %44

38:                                               ; preds = %30
  %39 = and i64 %32, 9218868437227405312
  %40 = icmp ne i64 %39, 9218868437227405312
  %41 = and i64 %32, 4503599627370495
  %42 = icmp eq i64 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %60, label %44

44:                                               ; preds = %38, %30
  %45 = and i64 %31, 9221120237041090560
  %46 = icmp ne i64 %45, 9218868437227405312
  %47 = and i64 %31, 2251799813685247
  %48 = icmp eq i64 %47, 0
  %49 = or i1 %46, %48
  br i1 %49, label %50, label %56

50:                                               ; preds = %44
  %51 = and i64 %32, 9221120237041090560
  %52 = icmp ne i64 %51, 9218868437227405312
  %53 = and i64 %32, 2251799813685247
  %54 = icmp eq i64 %53, 0
  %55 = or i1 %52, %54
  br i1 %55, label %67, label %56

56:                                               ; preds = %50, %44
  %57 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %58 = load i8, i8* %57, align 1
  %59 = or i8 %58, 1
  store i8 %59, i8* %57, align 1
  br label %67

60:                                               ; preds = %38
  %61 = icmp eq i64 %31, %32
  %62 = or i64 %32, %31
  %63 = and i64 %62, 9223372036854775807
  %64 = icmp eq i64 %63, 0
  %65 = or i1 %61, %64
  %66 = zext i1 %65 to i32
  br label %67

67:                                               ; preds = %50, %56, %60
  %68 = phi i32 [ %66, %60 ], [ 0, %56 ], [ 0, %50 ]
  ret i32 %68
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @float64_le_quiet(i64 noundef %0, i64 noundef %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i64 %0, 9218868437227405312
  %9 = icmp ne i64 %8, 0
  %10 = and i64 %0, 4503599627370495
  %11 = icmp eq i64 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i64 %0, -9223372036854775808
  br label %18

18:                                               ; preds = %7, %13
  %19 = phi i64 [ %0, %7 ], [ %17, %13 ]
  %20 = and i64 %1, 9218868437227405312
  %21 = icmp ne i64 %20, 0
  %22 = and i64 %1, 4503599627370495
  %23 = icmp eq i64 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i64 %1, -9223372036854775808
  br label %30

30:                                               ; preds = %3, %18, %25
  %31 = phi i64 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i64 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = and i64 %31, 9218868437227405312
  %34 = icmp ne i64 %33, 9218868437227405312
  %35 = and i64 %31, 4503599627370495
  %36 = icmp eq i64 %35, 0
  %37 = or i1 %34, %36
  br i1 %37, label %38, label %44

38:                                               ; preds = %30
  %39 = and i64 %32, 9218868437227405312
  %40 = icmp ne i64 %39, 9218868437227405312
  %41 = and i64 %32, 4503599627370495
  %42 = icmp eq i64 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %60, label %44

44:                                               ; preds = %38, %30
  %45 = and i64 %31, 9221120237041090560
  %46 = icmp ne i64 %45, 9218868437227405312
  %47 = and i64 %31, 2251799813685247
  %48 = icmp eq i64 %47, 0
  %49 = or i1 %46, %48
  br i1 %49, label %50, label %56

50:                                               ; preds = %44
  %51 = and i64 %32, 9221120237041090560
  %52 = icmp ne i64 %51, 9218868437227405312
  %53 = and i64 %32, 2251799813685247
  %54 = icmp eq i64 %53, 0
  %55 = or i1 %52, %54
  br i1 %55, label %78, label %56

56:                                               ; preds = %50, %44
  %57 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %58 = load i8, i8* %57, align 1
  %59 = or i8 %58, 1
  store i8 %59, i8* %57, align 1
  br label %78

60:                                               ; preds = %38
  %61 = lshr i64 %31, 63
  %62 = trunc i64 %61 to i8
  %63 = lshr i64 %32, 63
  %64 = trunc i64 %63 to i8
  %65 = icmp eq i8 %62, %64
  br i1 %65, label %72, label %66

66:                                               ; preds = %60
  %67 = icmp slt i64 %31, 0
  %68 = or i64 %32, %31
  %69 = and i64 %68, 9223372036854775807
  %70 = icmp eq i64 %69, 0
  %71 = or i1 %67, %70
  br label %78

72:                                               ; preds = %60
  %73 = icmp eq i64 %31, %32
  %74 = icmp ult i64 %31, %32
  %75 = zext i1 %74 to i8
  %76 = icmp ne i8 %62, %75
  %77 = or i1 %73, %76
  br label %78

78:                                               ; preds = %50, %56, %72, %66
  %79 = phi i1 [ %71, %66 ], [ %77, %72 ], [ false, %56 ], [ false, %50 ]
  %80 = zext i1 %79 to i32
  ret i32 %80
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @float64_lt_quiet(i64 noundef %0, i64 noundef %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i64 %0, 9218868437227405312
  %9 = icmp ne i64 %8, 0
  %10 = and i64 %0, 4503599627370495
  %11 = icmp eq i64 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i64 %0, -9223372036854775808
  br label %18

18:                                               ; preds = %7, %13
  %19 = phi i64 [ %0, %7 ], [ %17, %13 ]
  %20 = and i64 %1, 9218868437227405312
  %21 = icmp ne i64 %20, 0
  %22 = and i64 %1, 4503599627370495
  %23 = icmp eq i64 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i64 %1, -9223372036854775808
  br label %30

30:                                               ; preds = %3, %18, %25
  %31 = phi i64 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i64 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = and i64 %31, 9218868437227405312
  %34 = icmp ne i64 %33, 9218868437227405312
  %35 = and i64 %31, 4503599627370495
  %36 = icmp eq i64 %35, 0
  %37 = or i1 %34, %36
  br i1 %37, label %38, label %44

38:                                               ; preds = %30
  %39 = and i64 %32, 9218868437227405312
  %40 = icmp ne i64 %39, 9218868437227405312
  %41 = and i64 %32, 4503599627370495
  %42 = icmp eq i64 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %60, label %44

44:                                               ; preds = %38, %30
  %45 = and i64 %31, 9221120237041090560
  %46 = icmp ne i64 %45, 9218868437227405312
  %47 = and i64 %31, 2251799813685247
  %48 = icmp eq i64 %47, 0
  %49 = or i1 %46, %48
  br i1 %49, label %50, label %56

50:                                               ; preds = %44
  %51 = and i64 %32, 9221120237041090560
  %52 = icmp ne i64 %51, 9218868437227405312
  %53 = and i64 %32, 2251799813685247
  %54 = icmp eq i64 %53, 0
  %55 = or i1 %52, %54
  br i1 %55, label %78, label %56

56:                                               ; preds = %50, %44
  %57 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %58 = load i8, i8* %57, align 1
  %59 = or i8 %58, 1
  store i8 %59, i8* %57, align 1
  br label %78

60:                                               ; preds = %38
  %61 = lshr i64 %31, 63
  %62 = trunc i64 %61 to i8
  %63 = lshr i64 %32, 63
  %64 = trunc i64 %63 to i8
  %65 = icmp eq i8 %62, %64
  br i1 %65, label %72, label %66

66:                                               ; preds = %60
  %67 = icmp slt i64 %31, 0
  %68 = or i64 %32, %31
  %69 = and i64 %68, 9223372036854775807
  %70 = icmp ne i64 %69, 0
  %71 = and i1 %67, %70
  br label %78

72:                                               ; preds = %60
  %73 = icmp ne i64 %31, %32
  %74 = icmp ult i64 %31, %32
  %75 = zext i1 %74 to i8
  %76 = icmp ne i8 %62, %75
  %77 = and i1 %73, %76
  br label %78

78:                                               ; preds = %50, %56, %72, %66
  %79 = phi i1 [ %71, %66 ], [ %77, %72 ], [ false, %56 ], [ false, %50 ]
  %80 = zext i1 %79 to i32
  ret i32 %80
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @float64_unordered_quiet(i64 noundef %0, i64 noundef %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %28, label %7

7:                                                ; preds = %3
  %8 = and i64 %0, 9218868437227405312
  %9 = icmp ne i64 %8, 0
  %10 = and i64 %0, 4503599627370495
  %11 = icmp eq i64 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %17, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  br label %17

17:                                               ; preds = %7, %13
  %18 = phi i64 [ %0, %7 ], [ 0, %13 ]
  %19 = and i64 %1, 9218868437227405312
  %20 = icmp ne i64 %19, 0
  %21 = and i64 %1, 4503599627370495
  %22 = icmp eq i64 %21, 0
  %23 = or i1 %20, %22
  br i1 %23, label %28, label %24

24:                                               ; preds = %17
  %25 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %26 = load i8, i8* %25, align 1
  %27 = or i8 %26, 64
  store i8 %27, i8* %25, align 1
  br label %28

28:                                               ; preds = %3, %17, %24
  %29 = phi i64 [ %18, %24 ], [ %18, %17 ], [ %0, %3 ]
  %30 = phi i64 [ 0, %24 ], [ %1, %17 ], [ %1, %3 ]
  %31 = and i64 %29, 9218868437227405312
  %32 = icmp ne i64 %31, 9218868437227405312
  %33 = and i64 %29, 4503599627370495
  %34 = icmp eq i64 %33, 0
  %35 = or i1 %32, %34
  br i1 %35, label %36, label %42

36:                                               ; preds = %28
  %37 = and i64 %30, 9218868437227405312
  %38 = icmp ne i64 %37, 9218868437227405312
  %39 = and i64 %30, 4503599627370495
  %40 = icmp eq i64 %39, 0
  %41 = or i1 %38, %40
  br i1 %41, label %58, label %42

42:                                               ; preds = %36, %28
  %43 = and i64 %29, 9221120237041090560
  %44 = icmp ne i64 %43, 9218868437227405312
  %45 = and i64 %29, 2251799813685247
  %46 = icmp eq i64 %45, 0
  %47 = or i1 %44, %46
  br i1 %47, label %48, label %54

48:                                               ; preds = %42
  %49 = and i64 %30, 9221120237041090560
  %50 = icmp ne i64 %49, 9218868437227405312
  %51 = and i64 %30, 2251799813685247
  %52 = icmp eq i64 %51, 0
  %53 = or i1 %50, %52
  br i1 %53, label %58, label %54

54:                                               ; preds = %48, %42
  %55 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %56 = load i8, i8* %55, align 1
  %57 = or i8 %56, 1
  store i8 %57, i8* %55, align 1
  br label %58

58:                                               ; preds = %36, %48, %54
  %59 = phi i32 [ 1, %54 ], [ 1, %48 ], [ 0, %36 ]
  ret i32 %59
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define i32 @floatx80_to_int32(i64 %0, i16 %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #14 {
  %4 = and i16 %1, 32767
  %5 = zext i16 %4 to i32
  %6 = lshr i16 %1, 15
  %7 = trunc i16 %6 to i8
  %8 = icmp eq i16 %4, 32767
  %9 = and i64 %0, 9223372036854775807
  %10 = icmp eq i64 %9, 0
  %11 = select i1 %10, i8 %7, i8 0
  %12 = select i1 %8, i8 %11, i8 %7
  %13 = sub nsw i32 16439, %5
  %14 = icmp sgt i32 %13, 1
  %15 = select i1 %14, i32 %13, i32 1
  %16 = icmp ult i32 %15, 64
  br i1 %16, label %17, label %27

17:                                               ; preds = %3
  %18 = zext i32 %15 to i64
  %19 = lshr i64 %0, %18
  %20 = sub nsw i32 0, %15
  %21 = and i32 %20, 63
  %22 = zext i32 %21 to i64
  %23 = shl i64 %0, %22
  %24 = icmp ne i64 %23, 0
  %25 = zext i1 %24 to i64
  %26 = or i64 %19, %25
  br label %30

27:                                               ; preds = %3
  %28 = icmp ne i64 %0, 0
  %29 = zext i1 %28 to i64
  br label %30

30:                                               ; preds = %17, %27
  %31 = phi i64 [ %26, %17 ], [ %29, %27 ]
  %32 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 1
  %33 = load i8, i8* %32, align 1
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %45, label %35

35:                                               ; preds = %30
  %36 = icmp eq i8 %33, 3
  br i1 %36, label %45, label %37

37:                                               ; preds = %35
  %38 = icmp eq i8 %12, 0
  br i1 %38, label %42, label %39

39:                                               ; preds = %37
  %40 = icmp eq i8 %33, 2
  %41 = select i1 %40, i64 0, i64 127
  br label %45

42:                                               ; preds = %37
  %43 = icmp eq i8 %33, 1
  %44 = select i1 %43, i64 0, i64 127
  br label %45

45:                                               ; preds = %42, %39, %35, %30
  %46 = phi i64 [ 64, %30 ], [ 0, %35 ], [ %41, %39 ], [ %44, %42 ]
  %47 = trunc i64 %31 to i8
  %48 = and i8 %47, 127
  %49 = add i64 %46, %31
  %50 = lshr i64 %49, 7
  %51 = icmp eq i8 %48, 64
  %52 = and i1 %34, %51
  %53 = zext i1 %52 to i64
  %54 = xor i64 %53, -1
  %55 = and i64 %50, %54
  %56 = trunc i64 %55 to i32
  %57 = icmp eq i8 %12, 0
  %58 = sub nsw i32 0, %56
  %59 = select i1 %57, i32 %56, i32 %58
  %60 = icmp ult i64 %49, 549755813888
  br i1 %60, label %61, label %67

61:                                               ; preds = %45
  %62 = icmp eq i32 %59, 0
  br i1 %62, label %72, label %63

63:                                               ; preds = %61
  %64 = lshr i32 %59, 31
  %65 = zext i8 %12 to i32
  %66 = icmp eq i32 %64, %65
  br i1 %66, label %72, label %67

67:                                               ; preds = %63, %45
  %68 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %69 = load i8, i8* %68, align 1
  %70 = or i8 %69, 1
  store i8 %70, i8* %68, align 1
  %71 = select i1 %57, i32 2147483647, i32 -2147483648
  br label %78

72:                                               ; preds = %63, %61
  %73 = icmp eq i8 %48, 0
  br i1 %73, label %78, label %74

74:                                               ; preds = %72
  %75 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %76 = load i8, i8* %75, align 1
  %77 = or i8 %76, 32
  store i8 %77, i8* %75, align 1
  br label %78

78:                                               ; preds = %67, %72, %74
  %79 = phi i32 [ %71, %67 ], [ %59, %74 ], [ %59, %72 ]
  ret i32 %79
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @floatx80_to_int32_round_to_zero(i64 %0, i16 %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #2 {
  %4 = and i16 %1, 32767
  %5 = zext i16 %4 to i64
  %6 = lshr i16 %1, 15
  %7 = trunc i16 %6 to i8
  %8 = icmp ugt i16 %4, 16414
  br i1 %8, label %9, label %15

9:                                                ; preds = %3
  %10 = icmp ne i16 %4, 32767
  %11 = and i64 %0, 9223372036854775807
  %12 = icmp eq i64 %11, 0
  %13 = select i1 %10, i1 true, i1 %12
  %14 = select i1 %13, i8 %7, i8 0
  br label %36

15:                                               ; preds = %3
  %16 = icmp ult i16 %4, 16383
  br i1 %16, label %17, label %25

17:                                               ; preds = %15
  %18 = icmp ne i16 %4, 0
  %19 = icmp ne i64 %0, 0
  %20 = select i1 %18, i1 true, i1 %19
  br i1 %20, label %21, label %50

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %23 = load i8, i8* %22, align 1
  %24 = or i8 %23, 32
  store i8 %24, i8* %22, align 1
  br label %50

25:                                               ; preds = %15
  %26 = sub nsw i64 16446, %5
  %27 = and i64 %26, 4294967295
  %28 = lshr i64 %0, %27
  %29 = trunc i64 %28 to i32
  %30 = icmp sgt i16 %1, -1
  %31 = sub nsw i32 0, %29
  %32 = select i1 %30, i32 %29, i32 %31
  %33 = lshr i32 %32, 31
  %34 = zext i16 %6 to i32
  %35 = icmp eq i32 %33, %34
  br i1 %35, label %43, label %36

36:                                               ; preds = %9, %25
  %37 = phi i8 [ %7, %25 ], [ %14, %9 ]
  %38 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %39 = load i8, i8* %38, align 1
  %40 = or i8 %39, 1
  store i8 %40, i8* %38, align 1
  %41 = icmp eq i8 %37, 0
  %42 = select i1 %41, i32 2147483647, i32 -2147483648
  br label %50

43:                                               ; preds = %25
  %44 = shl i64 %28, %27
  %45 = icmp eq i64 %44, %0
  br i1 %45, label %50, label %46

46:                                               ; preds = %43
  %47 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %48 = load i8, i8* %47, align 1
  %49 = or i8 %48, 32
  store i8 %49, i8* %47, align 1
  br label %50

50:                                               ; preds = %43, %46, %21, %17, %36
  %51 = phi i32 [ %42, %36 ], [ 0, %17 ], [ 0, %21 ], [ %32, %46 ], [ %32, %43 ]
  ret i32 %51
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define i64 @floatx80_to_int64(i64 %0, i16 %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #14 {
  %4 = and i16 %1, 32767
  %5 = zext i16 %4 to i32
  %6 = lshr i16 %1, 15
  %7 = icmp ugt i16 %4, 16445
  br i1 %7, label %8, label %20

8:                                                ; preds = %3
  %9 = icmp eq i16 %4, 16446
  br i1 %9, label %35, label %10

10:                                               ; preds = %8
  %11 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %12 = load i8, i8* %11, align 1
  %13 = or i8 %12, 1
  store i8 %13, i8* %11, align 1
  %14 = icmp sgt i16 %1, -1
  br i1 %14, label %93, label %15

15:                                               ; preds = %10
  %16 = icmp eq i16 %4, 32767
  %17 = icmp ne i64 %0, -9223372036854775808
  %18 = select i1 %16, i1 %17, i1 false
  %19 = select i1 %18, i64 9223372036854775807, i64 -9223372036854775808
  br label %93

20:                                               ; preds = %3
  %21 = icmp ugt i16 %4, 16382
  br i1 %21, label %22, label %30

22:                                               ; preds = %20
  %23 = sub nuw nsw i32 16446, %5
  %24 = add nuw nsw i32 %5, 2
  %25 = and i32 %24, 63
  %26 = zext i32 %25 to i64
  %27 = shl i64 %0, %26
  %28 = zext i32 %23 to i64
  %29 = lshr i64 %0, %28
  br label %35

30:                                               ; preds = %20
  %31 = icmp eq i16 %4, 16382
  br i1 %31, label %35, label %32

32:                                               ; preds = %30
  %33 = icmp ne i64 %0, 0
  %34 = zext i1 %33 to i64
  br label %35

35:                                               ; preds = %32, %22, %30, %8
  %36 = phi i64 [ %0, %8 ], [ %29, %22 ], [ 0, %32 ], [ 0, %30 ]
  %37 = phi i64 [ 0, %8 ], [ %27, %22 ], [ %34, %32 ], [ %0, %30 ]
  %38 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 1
  %39 = load i8, i8* %38, align 1
  %40 = icmp eq i8 %39, 0
  %41 = lshr i64 %37, 63
  %42 = trunc i64 %41 to i8
  br i1 %40, label %57, label %43

43:                                               ; preds = %35
  %44 = icmp eq i8 %39, 3
  br i1 %44, label %70, label %45

45:                                               ; preds = %43
  %46 = icmp sgt i16 %1, -1
  br i1 %46, label %52, label %47

47:                                               ; preds = %45
  %48 = icmp eq i8 %39, 1
  %49 = icmp ne i64 %37, 0
  %50 = and i1 %49, %48
  %51 = zext i1 %50 to i8
  br label %57

52:                                               ; preds = %45
  %53 = icmp eq i8 %39, 2
  %54 = icmp ne i64 %37, 0
  %55 = and i1 %54, %53
  %56 = zext i1 %55 to i8
  br label %57

57:                                               ; preds = %52, %47, %35
  %58 = phi i8 [ %42, %35 ], [ %51, %47 ], [ %56, %52 ]
  %59 = icmp eq i8 %58, 0
  br i1 %59, label %70, label %60

60:                                               ; preds = %57
  %61 = add i64 %36, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %81, label %63

63:                                               ; preds = %60
  %64 = and i64 %37, 9223372036854775807
  %65 = icmp eq i64 %64, 0
  %66 = and i1 %65, %40
  %67 = zext i1 %66 to i64
  %68 = xor i64 %67, -1
  %69 = and i64 %61, %68
  br label %70

70:                                               ; preds = %63, %57, %43
  %71 = phi i64 [ %69, %63 ], [ %36, %57 ], [ %36, %43 ]
  %72 = icmp sgt i16 %1, -1
  %73 = sub nsw i64 0, %71
  %74 = select i1 %72, i64 %71, i64 %73
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %87, label %76

76:                                               ; preds = %70
  %77 = lshr i64 %74, 63
  %78 = trunc i64 %77 to i32
  %79 = zext i16 %6 to i32
  %80 = icmp eq i32 %78, %79
  br i1 %80, label %87, label %81

81:                                               ; preds = %76, %60
  %82 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %83 = load i8, i8* %82, align 1
  %84 = or i8 %83, 1
  store i8 %84, i8* %82, align 1
  %85 = icmp sgt i16 %1, -1
  %86 = select i1 %85, i64 9223372036854775807, i64 -9223372036854775808
  br label %93

87:                                               ; preds = %76, %70
  %88 = icmp eq i64 %37, 0
  br i1 %88, label %93, label %89

89:                                               ; preds = %87
  %90 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %91 = load i8, i8* %90, align 1
  %92 = or i8 %91, 32
  store i8 %92, i8* %90, align 1
  br label %93

93:                                               ; preds = %89, %87, %81, %15, %10
  %94 = phi i64 [ 9223372036854775807, %10 ], [ %19, %15 ], [ %86, %81 ], [ %74, %89 ], [ %74, %87 ]
  ret i64 %94
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i64 @floatx80_to_int64_round_to_zero(i64 %0, i16 %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #2 {
  %4 = and i16 %1, 32767
  %5 = zext i16 %4 to i32
  %6 = add nuw nsw i32 %5, 2
  %7 = icmp ugt i16 %4, 16445
  br i1 %7, label %8, label %22

8:                                                ; preds = %3
  %9 = and i64 %0, 9223372036854775807
  %10 = icmp ne i16 %1, -16322
  %11 = icmp ne i64 %9, 0
  %12 = select i1 %10, i1 true, i1 %11
  br i1 %12, label %13, label %21

13:                                               ; preds = %8
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 1
  store i8 %16, i8* %14, align 1
  %17 = icmp sgt i16 %1, -1
  br i1 %17, label %48, label %18

18:                                               ; preds = %13
  %19 = icmp eq i16 %4, 32767
  %20 = select i1 %19, i1 %11, i1 false
  br i1 %20, label %48, label %21

21:                                               ; preds = %18, %8
  br label %48

22:                                               ; preds = %3
  %23 = icmp ult i16 %4, 16383
  br i1 %23, label %24, label %32

24:                                               ; preds = %22
  %25 = zext i16 %4 to i64
  %26 = or i64 %25, %0
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %48, label %28

28:                                               ; preds = %24
  %29 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %30 = load i8, i8* %29, align 1
  %31 = or i8 %30, 32
  store i8 %31, i8* %29, align 1
  br label %48

32:                                               ; preds = %22
  %33 = sub nuw nsw i32 16446, %5
  %34 = zext i32 %33 to i64
  %35 = lshr i64 %0, %34
  %36 = and i32 %6, 63
  %37 = zext i32 %36 to i64
  %38 = shl i64 %0, %37
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %44, label %40

40:                                               ; preds = %32
  %41 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %42 = load i8, i8* %41, align 1
  %43 = or i8 %42, 32
  store i8 %43, i8* %41, align 1
  br label %44

44:                                               ; preds = %40, %32
  %45 = icmp sgt i16 %1, -1
  %46 = sub nsw i64 0, %35
  %47 = select i1 %45, i64 %35, i64 %46
  br label %48

48:                                               ; preds = %24, %28, %13, %18, %44, %21
  %49 = phi i64 [ -9223372036854775808, %21 ], [ %47, %44 ], [ 9223372036854775807, %18 ], [ 9223372036854775807, %13 ], [ 0, %28 ], [ 0, %24 ]
  ret i64 %49
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define i32 @floatx80_to_float32(i64 %0, i16 %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #14 {
  %4 = and i16 %1, 32767
  %5 = lshr i16 %1, 15
  %6 = icmp eq i16 %4, 32767
  br i1 %6, label %7, label %41

7:                                                ; preds = %3
  %8 = and i64 %0, 9223372036854775807
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %37, label %10

10:                                               ; preds = %7
  %11 = and i64 %0, -4611686018427387905
  %12 = and i64 %0, 4611686018427387903
  %13 = icmp eq i64 %12, 0
  %14 = icmp ne i64 %11, %0
  %15 = or i1 %13, %14
  br i1 %15, label %20, label %16

16:                                               ; preds = %10
  %17 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %18 = load i8, i8* %17, align 1, !noalias !75
  %19 = or i8 %18, 1
  store i8 %19, i8* %17, align 1, !noalias !75
  br label %20

20:                                               ; preds = %10, %16
  %21 = icmp sgt i64 %0, -1
  %22 = shl i64 %0, 1
  %23 = select i1 %21, i64 -9223372036854775808, i64 %22
  %24 = getelementptr %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %25 = load i8, i8* %24, align 1
  %26 = lshr i64 %23, 41
  %27 = icmp ne i8 %25, 0
  %28 = icmp ult i64 %23, 2199023255552
  %29 = select i1 %27, i1 true, i1 %28
  %30 = zext i16 %5 to i64
  %31 = shl nuw nsw i64 %30, 31
  %32 = select i1 %21, i64 2147483648, i64 %31
  %33 = or i64 %32, %26
  %34 = trunc i64 %33 to i32
  %35 = or i32 %34, 2139095040
  %36 = select i1 %29, i32 -4194304, i32 %35
  br label %56

37:                                               ; preds = %7
  %38 = zext i16 %5 to i32
  %39 = shl nuw i32 %38, 31
  %40 = or i32 %39, 2139095040
  br label %56

41:                                               ; preds = %3
  %42 = trunc i16 %5 to i8
  %43 = zext i16 %4 to i32
  %44 = lshr i64 %0, 33
  %45 = and i64 %0, 8589934591
  %46 = icmp ne i64 %45, 0
  %47 = zext i1 %46 to i64
  %48 = or i64 %44, %47
  %49 = icmp ne i16 %4, 0
  %50 = icmp ne i64 %48, 0
  %51 = select i1 %49, i1 true, i1 %50
  %52 = add nsw i32 %43, -16257
  %53 = select i1 %51, i32 %52, i32 0
  %54 = trunc i64 %48 to i32
  %55 = tail call fastcc i32 @roundAndPackFloat32(i8 noundef zeroext %42, i32 noundef %53, i32 noundef %54, %struct.float_status* noundef %2)
  br label %56

56:                                               ; preds = %41, %37, %20
  %57 = phi i32 [ %36, %20 ], [ %40, %37 ], [ %55, %41 ]
  ret i32 %57
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define i64 @floatx80_to_float64(i64 %0, i16 %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #14 {
  %4 = and i16 %1, 32767
  %5 = lshr i16 %1, 15
  %6 = icmp eq i16 %4, 32767
  br i1 %6, label %7, label %40

7:                                                ; preds = %3
  %8 = and i64 %0, 9223372036854775807
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %36, label %10

10:                                               ; preds = %7
  %11 = and i64 %0, -4611686018427387905
  %12 = and i64 %0, 4611686018427387903
  %13 = icmp eq i64 %12, 0
  %14 = icmp ne i64 %11, %0
  %15 = or i1 %13, %14
  br i1 %15, label %20, label %16

16:                                               ; preds = %10
  %17 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %18 = load i8, i8* %17, align 1, !noalias !78
  %19 = or i8 %18, 1
  store i8 %19, i8* %17, align 1, !noalias !78
  br label %20

20:                                               ; preds = %10, %16
  %21 = icmp sgt i64 %0, -1
  %22 = shl i64 %0, 1
  %23 = select i1 %21, i64 -9223372036854775808, i64 %22
  %24 = getelementptr %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %25 = load i8, i8* %24, align 1
  %26 = lshr i64 %23, 12
  %27 = icmp ne i8 %25, 0
  %28 = icmp ult i64 %23, 4096
  %29 = select i1 %27, i1 true, i1 %28
  %30 = zext i16 %5 to i64
  %31 = shl nuw i64 %30, 63
  %32 = select i1 %21, i64 -9223372036854775808, i64 %31
  %33 = or i64 %26, %32
  %34 = or i64 %33, 9218868437227405312
  %35 = select i1 %29, i64 -2251799813685248, i64 %34
  br label %52

36:                                               ; preds = %7
  %37 = zext i16 %5 to i64
  %38 = shl nuw i64 %37, 63
  %39 = or i64 %38, 9218868437227405312
  br label %52

40:                                               ; preds = %3
  %41 = trunc i16 %5 to i8
  %42 = zext i16 %4 to i32
  %43 = lshr i64 %0, 1
  %44 = and i64 %0, 1
  %45 = or i64 %43, %44
  %46 = icmp ne i16 %4, 0
  %47 = icmp ne i64 %0, 0
  %48 = select i1 %46, i1 true, i1 %47
  %49 = add nsw i32 %42, -15361
  %50 = select i1 %48, i32 %49, i32 0
  %51 = tail call fastcc i64 @roundAndPackFloat64(i8 noundef zeroext %41, i32 noundef %50, i64 noundef %45, %struct.float_status* noundef %2)
  br label %52

52:                                               ; preds = %40, %36, %20
  %53 = phi i64 [ %35, %20 ], [ %39, %36 ], [ %51, %40 ]
  ret i64 %53
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define { i64, i64 } @floatx80_to_float128(i64 %0, i16 %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #14 {
  %4 = and i16 %1, 32767
  %5 = lshr i16 %1, 15
  %6 = icmp ne i16 %4, 32767
  %7 = and i64 %0, 9223372036854775807
  %8 = icmp eq i64 %7, 0
  %9 = select i1 %6, i1 true, i1 %8
  br i1 %9, label %35, label %10

10:                                               ; preds = %3
  %11 = and i64 %0, -4611686018427387905
  %12 = and i64 %0, 4611686018427387903
  %13 = icmp eq i64 %12, 0
  %14 = icmp ne i64 %11, %0
  %15 = or i1 %13, %14
  br i1 %15, label %20, label %16

16:                                               ; preds = %10
  %17 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %18 = load i8, i8* %17, align 1, !noalias !81
  %19 = or i8 %18, 1
  store i8 %19, i8* %17, align 1, !noalias !81
  br label %20

20:                                               ; preds = %10, %16
  %21 = icmp sgt i64 %0, -1
  %22 = shl i64 %0, 1
  %23 = select i1 %21, i64 -9223372036854775808, i64 %22
  %24 = getelementptr %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %25 = load i8, i8* %24, align 1
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %27, label %45

27:                                               ; preds = %20
  %28 = lshr i64 %23, 16
  %29 = shl i64 %23, 48
  %30 = zext i16 %5 to i64
  %31 = shl nuw i64 %30, 63
  %32 = select i1 %21, i64 -9223372036854775808, i64 %31
  %33 = or i64 %28, %32
  %34 = or i64 %33, 9223090561878065152
  br label %45

35:                                               ; preds = %3
  %36 = zext i16 %5 to i64
  %37 = lshr i64 %0, 15
  %38 = and i64 %37, 281474976710655
  %39 = shl i64 %0, 49
  %40 = shl nuw i64 %36, 63
  %41 = zext i16 %4 to i64
  %42 = shl nuw nsw i64 %41, 48
  %43 = or i64 %40, %38
  %44 = or i64 %43, %42
  br label %45

45:                                               ; preds = %27, %20, %35
  %46 = phi i64 [ %39, %35 ], [ %29, %27 ], [ 0, %20 ]
  %47 = phi i64 [ %44, %35 ], [ %34, %27 ], [ -140737488355328, %20 ]
  %48 = insertvalue { i64, i64 } undef, i64 %46, 0
  %49 = insertvalue { i64, i64 } %48, i64 %47, 1
  ret { i64, i64 } %49
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define { i64, i16 } @floatx80_round_to_int(i64 %0, i16 %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #2 {
  %4 = and i16 %1, 32767
  %5 = zext i16 %4 to i64
  %6 = icmp ugt i16 %4, 16445
  br i1 %6, label %7, label %16

7:                                                ; preds = %3
  %8 = icmp ne i16 %4, 32767
  %9 = and i64 %0, 9223372036854775807
  %10 = icmp eq i64 %9, 0
  %11 = select i1 %8, i1 true, i1 %10
  br i1 %11, label %83, label %12

12:                                               ; preds = %7
  %13 = tail call fastcc { i64, i16 } @propagateFloatx80NaN(i64 %0, i16 %1, i64 %0, i16 %1, %struct.float_status* noundef %2)
  %14 = extractvalue { i64, i16 } %13, 0
  %15 = extractvalue { i64, i16 } %13, 1
  br label %83

16:                                               ; preds = %3
  %17 = icmp ult i16 %4, 16383
  br i1 %17, label %18, label %47

18:                                               ; preds = %16
  %19 = icmp eq i16 %4, 0
  %20 = and i64 %0, 9223372036854775807
  %21 = icmp eq i64 %20, 0
  %22 = select i1 %19, i1 %21, i1 false
  br i1 %22, label %83, label %23

23:                                               ; preds = %18
  %24 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %25 = load i8, i8* %24, align 1
  %26 = or i8 %25, 32
  store i8 %26, i8* %24, align 1
  %27 = and i16 %1, -32768
  %28 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 1
  %29 = load i8, i8* %28, align 1
  %30 = sext i8 %29 to i32
  switch i32 %30, label %83 [
    i32 0, label %31
    i32 1, label %37
    i32 2, label %42
  ]

31:                                               ; preds = %23
  %32 = icmp ne i16 %4, 16382
  %33 = select i1 %32, i1 true, i1 %21
  %34 = or i16 %27, 16383
  %35 = select i1 %33, i64 0, i64 -9223372036854775808
  %36 = select i1 %33, i16 %27, i16 %34
  br label %83

37:                                               ; preds = %23
  %38 = icmp sgt i16 %1, -1
  %39 = select i1 %38, { i64, i16 } zeroinitializer, { i64, i16 } { i64 -9223372036854775808, i16 -16385 }
  %40 = extractvalue { i64, i16 } %39, 1
  %41 = extractvalue { i64, i16 } %39, 0
  br label %83

42:                                               ; preds = %23
  %43 = icmp sgt i16 %1, -1
  %44 = select i1 %43, { i64, i16 } { i64 -9223372036854775808, i16 16383 }, { i64, i16 } { i64 0, i16 -32768 }
  %45 = extractvalue { i64, i16 } %44, 1
  %46 = extractvalue { i64, i16 } %44, 0
  br label %83

47:                                               ; preds = %16
  %48 = sub nsw i64 16446, %5
  %49 = and i64 %48, 4294967295
  %50 = shl nuw i64 1, %49
  %51 = add i64 %50, -1
  %52 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 1
  %53 = load i8, i8* %52, align 1
  switch i8 %53, label %62 [
    i8 0, label %54
    i8 3, label %70
  ]

54:                                               ; preds = %47
  %55 = lshr i64 %50, 1
  %56 = add i64 %55, %0
  %57 = and i64 %56, %51
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %59, label %70

59:                                               ; preds = %54
  %60 = xor i64 %50, -1
  %61 = and i64 %56, %60
  br label %70

62:                                               ; preds = %47
  %63 = lshr i16 %1, 15
  %64 = trunc i16 %63 to i8
  %65 = icmp eq i8 %53, 2
  %66 = zext i1 %65 to i8
  %67 = icmp eq i8 %64, %66
  %68 = select i1 %67, i64 0, i64 %51
  %69 = add i64 %68, %0
  br label %70

70:                                               ; preds = %62, %47, %54, %59
  %71 = phi i64 [ %61, %59 ], [ %56, %54 ], [ %0, %47 ], [ %69, %62 ]
  %72 = sub i64 0, %50
  %73 = and i64 %71, %72
  %74 = icmp eq i64 %73, 0
  %75 = zext i1 %74 to i16
  %76 = add i16 %75, %1
  %77 = select i1 %74, i64 -9223372036854775808, i64 %73
  %78 = icmp eq i64 %77, %0
  br i1 %78, label %83, label %79

79:                                               ; preds = %70
  %80 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %81 = load i8, i8* %80, align 1
  %82 = or i8 %81, 32
  store i8 %82, i8* %80, align 1
  br label %83

83:                                               ; preds = %31, %23, %18, %70, %79, %7, %42, %37, %12
  %84 = phi i64 [ %14, %12 ], [ %46, %42 ], [ %41, %37 ], [ %0, %7 ], [ %77, %79 ], [ %0, %70 ], [ %0, %18 ], [ 0, %23 ], [ %35, %31 ]
  %85 = phi i16 [ %15, %12 ], [ %45, %42 ], [ %40, %37 ], [ %1, %7 ], [ %76, %79 ], [ %76, %70 ], [ %1, %18 ], [ %27, %23 ], [ %36, %31 ]
  %86 = insertvalue { i64, i16 } poison, i64 %84, 0
  %87 = insertvalue { i64, i16 } %86, i16 %85, 1
  ret { i64, i16 } %87
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define internal fastcc { i64, i16 } @propagateFloatx80NaN(i64 %0, i16 %1, i64 %2, i16 %3, %struct.float_status* nocapture noundef %4) unnamed_addr #2 {
  %6 = and i16 %1, 32767
  %7 = icmp eq i16 %6, 32767
  %8 = and i64 %0, 4611686018427387904
  %9 = icmp eq i64 %8, 0
  %10 = xor i1 %7, true
  %11 = select i1 %10, i1 true, i1 %9
  %12 = and i64 %0, -4611686018427387905
  %13 = and i64 %0, 4611686018427387903
  %14 = icmp ne i64 %13, 0
  %15 = select i1 %7, i1 %14, i1 false
  %16 = icmp eq i64 %12, %0
  %17 = select i1 %15, i1 %16, i1 false
  %18 = and i16 %3, 32767
  %19 = icmp eq i16 %18, 32767
  %20 = and i64 %2, 4611686018427387904
  %21 = icmp ne i64 %20, 0
  %22 = select i1 %19, i1 %21, i1 false
  %23 = and i64 %2, -4611686018427387905
  %24 = and i64 %2, 4611686018427387903
  %25 = icmp ne i64 %24, 0
  %26 = select i1 %19, i1 %25, i1 false
  %27 = icmp eq i64 %23, %2
  %28 = select i1 %26, i1 %27, i1 false
  %29 = zext i1 %28 to i8
  %30 = or i1 %17, %28
  br i1 %30, label %31, label %35

31:                                               ; preds = %5
  %32 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %33 = load i8, i8* %32, align 1
  %34 = or i8 %33, 1
  store i8 %34, i8* %32, align 1
  br label %35

35:                                               ; preds = %31, %5
  %36 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 6
  %37 = load i8, i8* %36, align 1
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %39, label %72

39:                                               ; preds = %35
  %40 = icmp ult i64 %0, %2
  br i1 %40, label %46, label %41

41:                                               ; preds = %39
  %42 = icmp ult i64 %2, %0
  br i1 %42, label %46, label %43

43:                                               ; preds = %41
  %44 = icmp ult i16 %1, %3
  %45 = zext i1 %44 to i8
  br label %46

46:                                               ; preds = %41, %39, %43
  %47 = phi i8 [ %45, %43 ], [ 0, %39 ], [ 1, %41 ]
  br i1 %17, label %53, label %48

48:                                               ; preds = %46
  br i1 %11, label %56, label %49

49:                                               ; preds = %48
  %50 = or i8 %47, %29
  %51 = icmp eq i8 %50, 0
  %52 = and i1 %22, %51
  br i1 %52, label %56, label %64

53:                                               ; preds = %46
  %54 = icmp eq i8 %47, 0
  %55 = select i1 %28, i1 %54, i1 %22
  br i1 %55, label %56, label %64

56:                                               ; preds = %49, %48, %53
  %57 = icmp ne i16 %18, 32767
  %58 = icmp eq i64 %24, 0
  %59 = select i1 %57, i1 true, i1 %58
  %60 = icmp ne i64 %23, %2
  %61 = select i1 %59, i1 true, i1 %60
  %62 = or i64 %2, -4611686018427387904
  %63 = select i1 %61, i64 %2, i64 %62
  br label %72

64:                                               ; preds = %49, %53
  %65 = icmp ne i16 %6, 32767
  %66 = icmp eq i64 %13, 0
  %67 = select i1 %65, i1 true, i1 %66
  %68 = icmp ne i64 %12, %0
  %69 = select i1 %67, i1 true, i1 %68
  %70 = or i64 %0, -4611686018427387904
  %71 = select i1 %69, i64 %0, i64 %70
  br label %72

72:                                               ; preds = %35, %64, %56
  %73 = phi i64 [ %63, %56 ], [ %71, %64 ], [ -4611686018427387904, %35 ]
  %74 = phi i16 [ %3, %56 ], [ %1, %64 ], [ -1, %35 ]
  %75 = insertvalue { i64, i16 } poison, i64 %73, 0
  %76 = insertvalue { i64, i16 } %75, i16 %74, 1
  ret { i64, i16 } %76
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define { i64, i16 } @floatx80_add(i64 %0, i16 %1, i64 %2, i16 %3, %struct.float_status* nocapture noundef %4) local_unnamed_addr #14 {
  %6 = lshr i16 %1, 15
  %7 = trunc i16 %6 to i8
  %8 = lshr i16 %3, 15
  %9 = trunc i16 %8 to i8
  %10 = icmp eq i8 %7, %9
  br i1 %10, label %11, label %13

11:                                               ; preds = %5
  %12 = tail call fastcc { i64, i16 } @addFloatx80Sigs(i64 %0, i16 %1, i64 %2, i16 %3, i8 noundef zeroext %7, %struct.float_status* noundef %4)
  br label %15

13:                                               ; preds = %5
  %14 = tail call fastcc { i64, i16 } @subFloatx80Sigs(i64 %0, i16 %1, i64 %2, i16 %3, i8 noundef zeroext %7, %struct.float_status* noundef %4)
  br label %15

15:                                               ; preds = %13, %11
  %16 = phi { i64, i16 } [ %12, %11 ], [ %14, %13 ]
  ret { i64, i16 } %16
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define internal fastcc { i64, i16 } @addFloatx80Sigs(i64 %0, i16 %1, i64 %2, i16 %3, i8 noundef zeroext %4, %struct.float_status* nocapture noundef %5) unnamed_addr #14 {
  %7 = and i16 %1, 32767
  %8 = zext i16 %7 to i32
  %9 = and i16 %3, 32767
  %10 = zext i16 %9 to i32
  %11 = sub nsw i32 %8, %10
  %12 = icmp sgt i32 %11, 0
  br i1 %12, label %13, label %41

13:                                               ; preds = %6
  %14 = icmp eq i16 %7, 32767
  br i1 %14, label %15, label %22

15:                                               ; preds = %13
  %16 = and i64 %0, 9223372036854775807
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %120, label %18

18:                                               ; preds = %15
  %19 = tail call fastcc { i64, i16 } @propagateFloatx80NaN(i64 %0, i16 %1, i64 %2, i16 %3, %struct.float_status* noundef %5)
  %20 = extractvalue { i64, i16 } %19, 0
  %21 = extractvalue { i64, i16 } %19, 1
  br label %120

22:                                               ; preds = %13
  %23 = icmp eq i16 %9, 0
  %24 = sext i1 %23 to i32
  %25 = add nsw i32 %11, %24
  %26 = sub nsw i32 0, %25
  %27 = and i32 %26, 63
  %28 = icmp eq i32 %25, 0
  br i1 %28, label %93, label %29

29:                                               ; preds = %22
  %30 = icmp ult i32 %25, 64
  br i1 %30, label %31, label %36

31:                                               ; preds = %29
  %32 = zext i32 %27 to i64
  %33 = shl i64 %2, %32
  %34 = zext i32 %25 to i64
  %35 = lshr i64 %2, %34
  br label %93

36:                                               ; preds = %29
  %37 = icmp eq i32 %25, 64
  br i1 %37, label %93, label %38

38:                                               ; preds = %36
  %39 = icmp ne i64 %2, 0
  %40 = zext i1 %39 to i64
  br label %93

41:                                               ; preds = %6
  %42 = icmp slt i32 %11, 0
  br i1 %42, label %43, label %75

43:                                               ; preds = %41
  %44 = icmp eq i16 %9, 32767
  br i1 %44, label %45, label %56

45:                                               ; preds = %43
  %46 = and i64 %2, 9223372036854775807
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %52, label %48

48:                                               ; preds = %45
  %49 = tail call fastcc { i64, i16 } @propagateFloatx80NaN(i64 %0, i16 %1, i64 %2, i16 %3, %struct.float_status* noundef %5)
  %50 = extractvalue { i64, i16 } %49, 0
  %51 = extractvalue { i64, i16 } %49, 1
  br label %120

52:                                               ; preds = %45
  %53 = zext i8 %4 to i16
  %54 = shl i16 %53, 15
  %55 = or i16 %54, 32767
  br label %120

56:                                               ; preds = %43
  %57 = icmp eq i16 %7, 0
  %58 = zext i1 %57 to i32
  %59 = add nsw i32 %11, %58
  %60 = sub nsw i32 0, %59
  %61 = and i32 %59, 63
  %62 = icmp eq i32 %59, 0
  br i1 %62, label %93, label %63

63:                                               ; preds = %56
  %64 = icmp ult i32 %60, 64
  br i1 %64, label %65, label %70

65:                                               ; preds = %63
  %66 = zext i32 %61 to i64
  %67 = shl i64 %0, %66
  %68 = zext i32 %60 to i64
  %69 = lshr i64 %0, %68
  br label %93

70:                                               ; preds = %63
  %71 = icmp eq i32 %59, -64
  br i1 %71, label %93, label %72

72:                                               ; preds = %70
  %73 = icmp ne i64 %0, 0
  %74 = zext i1 %73 to i64
  br label %93

75:                                               ; preds = %41
  %76 = icmp eq i16 %7, 32767
  br i1 %76, label %77, label %85

77:                                               ; preds = %75
  %78 = or i64 %2, %0
  %79 = and i64 %78, 9223372036854775807
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %120, label %81

81:                                               ; preds = %77
  %82 = tail call fastcc { i64, i16 } @propagateFloatx80NaN(i64 %0, i16 %1, i64 %2, i16 %3, %struct.float_status* noundef %5)
  %83 = extractvalue { i64, i16 } %82, 0
  %84 = extractvalue { i64, i16 } %82, 1
  br label %120

85:                                               ; preds = %75
  %86 = add i64 %2, %0
  %87 = icmp eq i16 %7, 0
  br i1 %87, label %88, label %100

88:                                               ; preds = %85
  %ctlz.sh = lshr i64 %86, 1
  %ctlz.step = or i64 %86, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %89 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %89, 6148914691236517205
  %ctpop.sh = lshr i64 %89, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %90 = trunc i64 %ctpop.part to i32
  %91 = shl i64 %86, %ctpop.part
  %92 = sub nsw i32 1, %90
  br label %111

93:                                               ; preds = %72, %65, %56, %70, %38, %31, %22, %36
  %94 = phi i64 [ %0, %36 ], [ %0, %22 ], [ %0, %31 ], [ %0, %38 ], [ %69, %65 ], [ %0, %56 ], [ 0, %72 ], [ 0, %70 ]
  %95 = phi i64 [ 0, %36 ], [ %2, %22 ], [ %35, %31 ], [ 0, %38 ], [ %2, %65 ], [ %2, %56 ], [ %2, %72 ], [ %2, %70 ]
  %96 = phi i64 [ %2, %36 ], [ 0, %22 ], [ %33, %31 ], [ %40, %38 ], [ %67, %65 ], [ 0, %56 ], [ %74, %72 ], [ %0, %70 ]
  %97 = phi i32 [ %8, %36 ], [ %8, %22 ], [ %8, %31 ], [ %8, %38 ], [ %10, %65 ], [ %10, %56 ], [ %10, %72 ], [ %10, %70 ]
  %98 = add i64 %95, %94
  %99 = icmp slt i64 %98, 0
  br i1 %99, label %111, label %100

100:                                              ; preds = %85, %93
  %101 = phi i32 [ %97, %93 ], [ %8, %85 ]
  %102 = phi i64 [ %98, %93 ], [ %86, %85 ]
  %103 = phi i64 [ %96, %93 ], [ 0, %85 ]
  %104 = shl i64 %102, 63
  %105 = icmp ne i64 %103, 0
  %106 = zext i1 %105 to i64
  %107 = or i64 %104, %106
  %108 = lshr i64 %102, 1
  %109 = or i64 %108, -9223372036854775808
  %110 = add nuw nsw i32 %101, 1
  br label %111

111:                                              ; preds = %93, %100, %88
  %112 = phi i32 [ %97, %93 ], [ %110, %100 ], [ %92, %88 ]
  %113 = phi i64 [ %98, %93 ], [ %109, %100 ], [ %91, %88 ]
  %114 = phi i64 [ %96, %93 ], [ %107, %100 ], [ 0, %88 ]
  %115 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 3
  %116 = load i8, i8* %115, align 1
  %117 = tail call fastcc { i64, i16 } @roundAndPackFloatx80(i8 noundef signext %116, i8 noundef zeroext %4, i32 noundef %112, i64 noundef %113, i64 noundef %114, %struct.float_status* noundef %5)
  %118 = extractvalue { i64, i16 } %117, 0
  %119 = extractvalue { i64, i16 } %117, 1
  br label %120

120:                                              ; preds = %77, %15, %111, %81, %52, %48, %18
  %121 = phi i64 [ %20, %18 ], [ %118, %111 ], [ %50, %48 ], [ -9223372036854775808, %52 ], [ %83, %81 ], [ %0, %15 ], [ %0, %77 ]
  %122 = phi i16 [ %21, %18 ], [ %119, %111 ], [ %51, %48 ], [ %55, %52 ], [ %84, %81 ], [ %1, %15 ], [ %1, %77 ]
  %123 = insertvalue { i64, i16 } poison, i64 %121, 0
  %124 = insertvalue { i64, i16 } %123, i16 %122, 1
  ret { i64, i16 } %124
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define internal fastcc { i64, i16 } @subFloatx80Sigs(i64 %0, i16 %1, i64 %2, i16 %3, i8 noundef zeroext %4, %struct.float_status* nocapture noundef %5) unnamed_addr #14 {
  %7 = and i16 %1, 32767
  %8 = zext i16 %7 to i32
  %9 = and i16 %3, 32767
  %10 = zext i16 %9 to i32
  %11 = sub nsw i32 %8, %10
  %12 = icmp sgt i32 %11, 0
  br i1 %12, label %94, label %13

13:                                               ; preds = %6
  %14 = icmp slt i32 %11, 0
  br i1 %14, label %40, label %15

15:                                               ; preds = %13
  switch i32 %8, label %29 [
    i32 32767, label %16
    i32 0, label %28
  ]

16:                                               ; preds = %15
  %17 = or i64 %2, %0
  %18 = and i64 %17, 9223372036854775807
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %24, label %20

20:                                               ; preds = %16
  %21 = tail call fastcc { i64, i16 } @propagateFloatx80NaN(i64 %0, i16 %1, i64 %2, i16 %3, %struct.float_status* noundef %5)
  %22 = extractvalue { i64, i16 } %21, 0
  %23 = extractvalue { i64, i16 } %21, 1
  br label %171

24:                                               ; preds = %16
  %25 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 2
  %26 = load i8, i8* %25, align 1
  %27 = or i8 %26, 1
  store i8 %27, i8* %25, align 1
  br label %171

28:                                               ; preds = %15
  br label %29

29:                                               ; preds = %15, %28
  %30 = phi i32 [ 1, %28 ], [ %8, %15 ]
  %31 = phi i32 [ 1, %28 ], [ %10, %15 ]
  %32 = icmp ult i64 %2, %0
  br i1 %32, label %134, label %33

33:                                               ; preds = %29
  %34 = icmp ult i64 %0, %2
  br i1 %34, label %85, label %35

35:                                               ; preds = %33
  %36 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 1
  %37 = load i8, i8* %36, align 1
  %38 = icmp eq i8 %37, 1
  %39 = select i1 %38, i16 -32768, i16 0
  br label %171

40:                                               ; preds = %13
  %41 = icmp eq i16 %9, 32767
  br i1 %41, label %42, label %54

42:                                               ; preds = %40
  %43 = and i64 %2, 9223372036854775807
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %49, label %45

45:                                               ; preds = %42
  %46 = tail call fastcc { i64, i16 } @propagateFloatx80NaN(i64 %0, i16 %1, i64 %2, i16 %3, %struct.float_status* noundef %5)
  %47 = extractvalue { i64, i16 } %46, 0
  %48 = extractvalue { i64, i16 } %46, 1
  br label %171

49:                                               ; preds = %42
  %50 = xor i8 %4, -1
  %51 = zext i8 %50 to i16
  %52 = shl i16 %51, 15
  %53 = or i16 %52, 32767
  br label %171

54:                                               ; preds = %40
  %55 = icmp eq i16 %7, 0
  %56 = sext i1 %55 to i32
  %57 = sub nsw i32 %56, %11
  %58 = trunc i32 %57 to i8
  %59 = sub i8 0, %58
  %60 = and i8 %59, 63
  %61 = icmp eq i32 %57, 0
  br i1 %61, label %85, label %62

62:                                               ; preds = %54
  %63 = icmp ult i32 %57, 64
  br i1 %63, label %64, label %69

64:                                               ; preds = %62
  %65 = zext i8 %60 to i64
  %66 = shl i64 %0, %65
  %67 = zext i32 %57 to i64
  %68 = lshr i64 %0, %67
  br label %85

69:                                               ; preds = %62
  %70 = icmp eq i32 %57, 64
  br i1 %70, label %85, label %71

71:                                               ; preds = %69
  %72 = icmp ult i32 %57, 128
  br i1 %72, label %73, label %82

73:                                               ; preds = %71
  %74 = and i32 %57, 63
  %75 = zext i32 %74 to i64
  %76 = lshr i64 %0, %75
  %77 = zext i8 %60 to i64
  %78 = shl i64 %0, %77
  %79 = icmp ne i64 %78, 0
  %80 = zext i1 %79 to i64
  %81 = or i64 %76, %80
  br label %85

82:                                               ; preds = %71
  %83 = icmp ne i64 %0, 0
  %84 = zext i1 %83 to i64
  br label %85

85:                                               ; preds = %82, %73, %64, %54, %69, %33
  %86 = phi i64 [ %0, %33 ], [ %68, %64 ], [ %0, %54 ], [ 0, %73 ], [ 0, %82 ], [ 0, %69 ]
  %87 = phi i64 [ 0, %33 ], [ %66, %64 ], [ 0, %54 ], [ %81, %73 ], [ %84, %82 ], [ %0, %69 ]
  %88 = phi i32 [ %31, %33 ], [ %10, %64 ], [ %10, %54 ], [ %10, %73 ], [ %10, %82 ], [ %10, %69 ]
  %89 = sub i64 %2, %86
  %90 = icmp ne i64 %87, 0
  %91 = sext i1 %90 to i64
  %92 = add i64 %89, %91
  %93 = xor i8 %4, 1
  br label %142

94:                                               ; preds = %6
  %95 = icmp eq i16 %7, 32767
  br i1 %95, label %96, label %103

96:                                               ; preds = %94
  %97 = and i64 %0, 9223372036854775807
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %171, label %99

99:                                               ; preds = %96
  %100 = tail call fastcc { i64, i16 } @propagateFloatx80NaN(i64 %0, i16 %1, i64 %2, i16 %3, %struct.float_status* noundef %5)
  %101 = extractvalue { i64, i16 } %100, 0
  %102 = extractvalue { i64, i16 } %100, 1
  br label %171

103:                                              ; preds = %94
  %104 = icmp eq i16 %9, 0
  %105 = sext i1 %104 to i32
  %106 = add nsw i32 %11, %105
  %107 = trunc i32 %106 to i8
  %108 = sub i8 0, %107
  %109 = and i8 %108, 63
  %110 = icmp eq i32 %106, 0
  br i1 %110, label %134, label %111

111:                                              ; preds = %103
  %112 = icmp ult i32 %106, 64
  br i1 %112, label %113, label %118

113:                                              ; preds = %111
  %114 = zext i8 %109 to i64
  %115 = shl i64 %2, %114
  %116 = zext i32 %106 to i64
  %117 = lshr i64 %2, %116
  br label %134

118:                                              ; preds = %111
  %119 = icmp eq i32 %106, 64
  br i1 %119, label %134, label %120

120:                                              ; preds = %118
  %121 = icmp ult i32 %106, 128
  br i1 %121, label %122, label %131

122:                                              ; preds = %120
  %123 = and i32 %106, 63
  %124 = zext i32 %123 to i64
  %125 = lshr i64 %2, %124
  %126 = zext i8 %109 to i64
  %127 = shl i64 %2, %126
  %128 = icmp ne i64 %127, 0
  %129 = zext i1 %128 to i64
  %130 = or i64 %125, %129
  br label %134

131:                                              ; preds = %120
  %132 = icmp ne i64 %2, 0
  %133 = zext i1 %132 to i64
  br label %134

134:                                              ; preds = %131, %122, %113, %103, %118, %29
  %135 = phi i64 [ %2, %29 ], [ %117, %113 ], [ %2, %103 ], [ 0, %122 ], [ 0, %131 ], [ 0, %118 ]
  %136 = phi i64 [ 0, %29 ], [ %115, %113 ], [ 0, %103 ], [ %130, %122 ], [ %133, %131 ], [ %2, %118 ]
  %137 = phi i32 [ %30, %29 ], [ %8, %113 ], [ %8, %103 ], [ %8, %122 ], [ %8, %131 ], [ %8, %118 ]
  %138 = sub i64 %0, %135
  %139 = icmp ne i64 %136, 0
  %140 = sext i1 %139 to i64
  %141 = add i64 %138, %140
  br label %142

142:                                              ; preds = %134, %85
  %143 = phi i64 [ %141, %134 ], [ %92, %85 ]
  %144 = phi i64 [ %136, %134 ], [ %87, %85 ]
  %145 = phi i8 [ %4, %134 ], [ %93, %85 ]
  %146 = phi i32 [ %137, %134 ], [ %88, %85 ]
  %147 = sub i64 0, %144
  %148 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 3
  %149 = load i8, i8* %148, align 1
  %150 = icmp eq i64 %143, 0
  %151 = select i1 %150, i64 %147, i64 %143
  %152 = select i1 %150, i64 0, i64 %147
  %ctlz.sh = lshr i64 %151, 1
  %ctlz.step = or i64 %151, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %153 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %153, 6148914691236517205
  %ctpop.sh = lshr i64 %153, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %154 = trunc i64 %ctpop.part to i32
  %155 = icmp eq i32 %154, 0
  br i1 %155, label %162, label %156

156:                                              ; preds = %142
  %157 = shl i64 %151, %ctpop.part
  %158 = sub nsw i64 0, %ctpop.part
  %159 = and i64 %158, 63
  %160 = lshr i64 %152, %159
  %161 = or i64 %160, %157
  br label %162

162:                                              ; preds = %142, %156
  %163 = phi i64 [ %161, %156 ], [ %151, %142 ]
  %164 = shl i64 %152, %ctpop.part
  %165 = add nsw i32 %146, -64
  %166 = select i1 %150, i32 %165, i32 %146
  %167 = sub nsw i32 %166, %154
  %168 = tail call fastcc { i64, i16 } @roundAndPackFloatx80(i8 noundef signext %149, i8 noundef zeroext %145, i32 noundef %167, i64 noundef %163, i64 noundef %164, %struct.float_status* noundef nonnull %5) #30
  %169 = extractvalue { i64, i16 } %168, 0
  %170 = extractvalue { i64, i16 } %168, 1
  br label %171

171:                                              ; preds = %96, %162, %99, %49, %45, %35, %24, %20
  %172 = phi i64 [ %101, %99 ], [ %169, %162 ], [ %47, %45 ], [ -9223372036854775808, %49 ], [ %22, %20 ], [ -4611686018427387904, %24 ], [ 0, %35 ], [ %0, %96 ]
  %173 = phi i16 [ %102, %99 ], [ %170, %162 ], [ %48, %45 ], [ %53, %49 ], [ %23, %20 ], [ -1, %24 ], [ %39, %35 ], [ %1, %96 ]
  %174 = insertvalue { i64, i16 } poison, i64 %172, 0
  %175 = insertvalue { i64, i16 } %174, i16 %173, 1
  ret { i64, i16 } %175
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define internal fastcc { i64, i16 } @roundAndPackFloatx80(i8 noundef signext %0, i8 noundef zeroext %1, i32 noundef %2, i64 noundef %3, i64 noundef %4, %struct.float_status* nocapture noundef %5) unnamed_addr #2 {
  %7 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 1
  %8 = load i8, i8* %7, align 1
  %9 = icmp eq i8 %8, 0
  switch i8 %0, label %130 [
    i8 32, label %10
    i8 64, label %11
  ]

10:                                               ; preds = %6
  br label %11

11:                                               ; preds = %6, %10
  %12 = phi i64 [ 549755813888, %10 ], [ 1024, %6 ]
  %13 = phi i64 [ 1099511627775, %10 ], [ 2047, %6 ]
  %14 = icmp ne i64 %4, 0
  %15 = zext i1 %14 to i64
  %16 = or i64 %15, %3
  br i1 %9, label %27, label %17

17:                                               ; preds = %11
  %18 = icmp eq i8 %8, 3
  br i1 %18, label %27, label %19

19:                                               ; preds = %17
  %20 = icmp eq i8 %1, 0
  br i1 %20, label %24, label %21

21:                                               ; preds = %19
  %22 = icmp eq i8 %8, 2
  %23 = select i1 %22, i64 0, i64 %13
  br label %27

24:                                               ; preds = %19
  %25 = icmp eq i8 %8, 1
  %26 = select i1 %25, i64 0, i64 %13
  br label %27

27:                                               ; preds = %24, %21, %17, %11
  %28 = phi i64 [ %12, %11 ], [ 0, %17 ], [ %23, %21 ], [ %26, %24 ]
  %29 = and i64 %13, %16
  %30 = add i32 %2, -32766
  %31 = icmp ult i32 %30, -32765
  br i1 %31, label %32, label %104

32:                                               ; preds = %27
  %33 = icmp sgt i32 %2, 32766
  br i1 %33, label %159, label %34

34:                                               ; preds = %32
  %35 = icmp eq i32 %2, 32766
  %36 = xor i64 %16, -1
  %37 = icmp ugt i64 %28, %36
  %38 = select i1 %35, i1 %37, i1 false
  br i1 %38, label %159, label %39

39:                                               ; preds = %34
  %40 = icmp slt i32 %2, 1
  br i1 %40, label %41, label %104

41:                                               ; preds = %39
  %42 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 4
  %43 = load i8, i8* %42, align 1
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %51, label %45

45:                                               ; preds = %41
  %46 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 2
  %47 = load i8, i8* %46, align 1
  %48 = or i8 %47, -128
  store i8 %48, i8* %46, align 1
  %49 = zext i8 %1 to i32
  %50 = shl nuw nsw i32 %49, 15
  br label %299

51:                                               ; preds = %41
  %52 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 0
  %53 = load i8, i8* %52, align 1
  %54 = icmp eq i8 %53, 1
  %55 = icmp slt i32 %2, 0
  %56 = or i1 %55, %54
  %57 = icmp ule i64 %28, %36
  %58 = select i1 %56, i1 true, i1 %57
  %59 = sub nsw i32 1, %2
  %60 = icmp ult i32 %59, 64
  br i1 %60, label %61, label %71

61:                                               ; preds = %51
  %62 = add nsw i32 %2, 63
  %63 = zext i32 %59 to i64
  %64 = lshr i64 %16, %63
  %65 = and i32 %62, 63
  %66 = zext i32 %65 to i64
  %67 = shl i64 %16, %66
  %68 = icmp ne i64 %67, 0
  %69 = zext i1 %68 to i64
  %70 = or i64 %64, %69
  br label %74

71:                                               ; preds = %51
  %72 = icmp ne i64 %16, 0
  %73 = zext i1 %72 to i64
  br label %74

74:                                               ; preds = %61, %71
  %75 = phi i64 [ %70, %61 ], [ %73, %71 ]
  %76 = and i64 %75, %13
  %77 = icmp ne i64 %76, 0
  %78 = select i1 %58, i1 %77, i1 false
  br i1 %78, label %79, label %83

79:                                               ; preds = %74
  %80 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 2
  %81 = load i8, i8* %80, align 1
  %82 = or i8 %81, 16
  store i8 %82, i8* %80, align 1
  br label %83

83:                                               ; preds = %79, %74
  br i1 %77, label %84, label %88

84:                                               ; preds = %83
  %85 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 2
  %86 = load i8, i8* %85, align 1
  %87 = or i8 %86, 32
  store i8 %87, i8* %85, align 1
  br label %88

88:                                               ; preds = %84, %83
  %89 = add i64 %75, %28
  %90 = lshr i64 %89, 63
  %91 = trunc i64 %90 to i32
  %92 = add nuw nsw i64 %13, 1
  %93 = shl nuw nsw i64 %76, 1
  %94 = icmp eq i64 %93, %92
  %95 = select i1 %9, i1 %94, i1 false
  %96 = select i1 %95, i64 %92, i64 0
  %97 = or i64 %96, %13
  %98 = xor i64 %97, -1
  %99 = and i64 %89, %98
  %100 = zext i8 %1 to i32
  %101 = shl nuw nsw i32 %100, 15
  %102 = or i32 %101, %91
  %103 = insertvalue { i64, i16 } poison, i64 %99, 0
  br label %299

104:                                              ; preds = %39, %27
  %105 = icmp eq i64 %29, 0
  br i1 %105, label %110, label %106

106:                                              ; preds = %104
  %107 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 2
  %108 = load i8, i8* %107, align 1
  %109 = or i8 %108, 32
  store i8 %109, i8* %107, align 1
  br label %110

110:                                              ; preds = %106, %104
  %111 = add i64 %28, %16
  %112 = icmp ult i64 %111, %28
  %113 = select i1 %112, i64 -9223372036854775808, i64 %111
  %114 = zext i1 %112 to i32
  %115 = add nuw nsw i32 %114, %2
  %116 = add nuw nsw i64 %13, 1
  %117 = shl nuw nsw i64 %29, 1
  %118 = icmp eq i64 %117, %116
  %119 = select i1 %9, i1 %118, i1 false
  %120 = select i1 %119, i64 %116, i64 0
  %121 = or i64 %120, %13
  %122 = xor i64 %121, -1
  %123 = and i64 %113, %122
  %124 = icmp eq i64 %123, 0
  %125 = select i1 %124, i32 0, i32 %115
  %126 = zext i8 %1 to i32
  %127 = shl nuw nsw i32 %126, 15
  %128 = add nuw nsw i32 %125, %127
  %129 = insertvalue { i64, i16 } poison, i64 %123, 0
  br label %299

130:                                              ; preds = %6
  %131 = lshr i64 %4, 63
  %132 = trunc i64 %131 to i8
  br i1 %9, label %147, label %133

133:                                              ; preds = %130
  %134 = icmp eq i8 %8, 3
  br i1 %134, label %147, label %135

135:                                              ; preds = %133
  %136 = icmp eq i8 %1, 0
  br i1 %136, label %142, label %137

137:                                              ; preds = %135
  %138 = icmp eq i8 %8, 1
  %139 = icmp ne i64 %4, 0
  %140 = and i1 %139, %138
  %141 = zext i1 %140 to i8
  br label %147

142:                                              ; preds = %135
  %143 = icmp eq i8 %8, 2
  %144 = icmp ne i64 %4, 0
  %145 = and i1 %144, %143
  %146 = zext i1 %145 to i8
  br label %147

147:                                              ; preds = %133, %142, %137, %130
  %148 = phi i8 [ %132, %130 ], [ %141, %137 ], [ %146, %142 ], [ 0, %133 ]
  %149 = add i32 %2, -32766
  %150 = icmp ult i32 %149, -32765
  br i1 %150, label %151, label %269

151:                                              ; preds = %147
  %152 = icmp sgt i32 %2, 32766
  br i1 %152, label %159, label %153

153:                                              ; preds = %151
  %154 = icmp eq i32 %2, 32766
  %155 = icmp eq i64 %3, -1
  %156 = and i1 %154, %155
  %157 = icmp ne i8 %148, 0
  %158 = select i1 %156, i1 %157, i1 false
  br i1 %158, label %159, label %183

159:                                              ; preds = %151, %153, %34, %32
  %160 = phi i64 [ %13, %32 ], [ %13, %34 ], [ 0, %153 ], [ 0, %151 ]
  %161 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 2
  %162 = load i8, i8* %161, align 1
  %163 = or i8 %162, 40
  store i8 %163, i8* %161, align 1
  %164 = icmp eq i8 %8, 3
  br i1 %164, label %173, label %165

165:                                              ; preds = %159
  %166 = icmp ne i8 %1, 0
  %167 = icmp eq i8 %8, 2
  %168 = select i1 %166, i1 %167, i1 false
  br i1 %168, label %173, label %169

169:                                              ; preds = %165
  %170 = icmp eq i8 %1, 0
  %171 = icmp eq i8 %8, 1
  %172 = select i1 %170, i1 %171, i1 false
  br i1 %172, label %173, label %179

173:                                              ; preds = %169, %165, %159
  %174 = xor i64 %160, -1
  %175 = zext i8 %1 to i32
  %176 = shl nuw nsw i32 %175, 15
  %177 = or i32 %176, 32766
  %178 = insertvalue { i64, i16 } poison, i64 %174, 0
  br label %299

179:                                              ; preds = %169
  %180 = zext i8 %1 to i32
  %181 = shl nuw nsw i32 %180, 15
  %182 = or i32 %181, 32767
  br label %299

183:                                              ; preds = %153
  %184 = icmp slt i32 %2, 1
  br i1 %184, label %185, label %269

185:                                              ; preds = %183
  %186 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 0
  %187 = load i8, i8* %186, align 1
  %188 = icmp ne i8 %187, 1
  %189 = icmp eq i32 %2, 0
  %190 = and i1 %189, %188
  %191 = select i1 %190, i1 %157, i1 false
  %192 = icmp ne i64 %3, -1
  %193 = xor i1 %191, true
  %194 = or i1 %192, %193
  %195 = sub nsw i32 1, %2
  %196 = icmp ult i32 %195, 64
  br i1 %196, label %197, label %207

197:                                              ; preds = %185
  %198 = add nsw i32 %2, 63
  %199 = and i32 %198, 63
  %200 = zext i32 %199 to i64
  %201 = shl i64 %3, %200
  %202 = icmp ne i64 %4, 0
  %203 = zext i1 %202 to i64
  %204 = or i64 %201, %203
  %205 = zext i32 %195 to i64
  %206 = lshr i64 %3, %205
  br label %217

207:                                              ; preds = %185
  %208 = icmp eq i32 %2, -63
  br i1 %208, label %209, label %213

209:                                              ; preds = %207
  %210 = icmp ne i64 %4, 0
  %211 = zext i1 %210 to i64
  %212 = or i64 %211, %3
  br label %217

213:                                              ; preds = %207
  %214 = or i64 %4, %3
  %215 = icmp ne i64 %214, 0
  %216 = zext i1 %215 to i64
  br label %217

217:                                              ; preds = %197, %209, %213
  %218 = phi i64 [ %204, %197 ], [ %212, %209 ], [ %216, %213 ]
  %219 = phi i64 [ %206, %197 ], [ 0, %209 ], [ 0, %213 ]
  %220 = icmp ne i64 %218, 0
  %221 = select i1 %194, i1 %220, i1 false
  br i1 %221, label %222, label %226

222:                                              ; preds = %217
  %223 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 2
  %224 = load i8, i8* %223, align 1
  %225 = or i8 %224, 16
  br label %231

226:                                              ; preds = %217
  %227 = icmp eq i64 %218, 0
  br i1 %227, label %235, label %228

228:                                              ; preds = %226
  %229 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 2
  %230 = load i8, i8* %229, align 1
  br label %231

231:                                              ; preds = %228, %222
  %232 = phi i8 [ %230, %228 ], [ %225, %222 ]
  %233 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 2
  %234 = or i8 %232, 32
  store i8 %234, i8* %233, align 1
  br label %235

235:                                              ; preds = %231, %226
  br i1 %9, label %236, label %239

236:                                              ; preds = %235
  %237 = lshr i64 %218, 63
  %238 = trunc i64 %237 to i8
  br label %249

239:                                              ; preds = %235
  %240 = icmp eq i8 %1, 0
  br i1 %240, label %245, label %241

241:                                              ; preds = %239
  %242 = icmp eq i8 %8, 1
  %243 = select i1 %242, i1 %220, i1 false
  %244 = zext i1 %243 to i8
  br label %249

245:                                              ; preds = %239
  %246 = icmp eq i8 %8, 2
  %247 = select i1 %246, i1 %220, i1 false
  %248 = zext i1 %247 to i8
  br label %249

249:                                              ; preds = %241, %245, %236
  %250 = phi i8 [ %238, %236 ], [ %244, %241 ], [ %248, %245 ]
  %251 = icmp eq i8 %250, 0
  br i1 %251, label %262, label %252

252:                                              ; preds = %249
  %253 = add nuw i64 %219, 1
  %254 = and i64 %218, 9223372036854775807
  %255 = icmp eq i64 %254, 0
  %256 = and i1 %9, %255
  %257 = zext i1 %256 to i64
  %258 = xor i64 %257, -1
  %259 = and i64 %253, %258
  %260 = lshr i64 %253, 63
  %261 = trunc i64 %260 to i32
  br label %262

262:                                              ; preds = %252, %249
  %263 = phi i64 [ %219, %249 ], [ %259, %252 ]
  %264 = phi i32 [ 0, %249 ], [ %261, %252 ]
  %265 = zext i8 %1 to i32
  %266 = shl nuw nsw i32 %265, 15
  %267 = add nuw nsw i32 %264, %266
  %268 = insertvalue { i64, i16 } poison, i64 %263, 0
  br label %299

269:                                              ; preds = %183, %147
  %270 = icmp eq i64 %4, 0
  br i1 %270, label %275, label %271

271:                                              ; preds = %269
  %272 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 2
  %273 = load i8, i8* %272, align 1
  %274 = or i8 %273, 32
  store i8 %274, i8* %272, align 1
  br label %275

275:                                              ; preds = %271, %269
  %276 = icmp eq i8 %148, 0
  br i1 %276, label %289, label %277

277:                                              ; preds = %275
  %278 = add i64 %3, 1
  %279 = icmp eq i64 %278, 0
  br i1 %279, label %280, label %282

280:                                              ; preds = %277
  %281 = add nuw nsw i32 %2, 1
  br label %292

282:                                              ; preds = %277
  %283 = and i64 %4, 9223372036854775807
  %284 = icmp eq i64 %283, 0
  %285 = and i1 %284, %9
  %286 = zext i1 %285 to i64
  %287 = xor i64 %286, -1
  %288 = and i64 %278, %287
  br label %292

289:                                              ; preds = %275
  %290 = icmp eq i64 %3, 0
  %291 = select i1 %290, i32 0, i32 %2
  br label %292

292:                                              ; preds = %289, %280, %282
  %293 = phi i64 [ %3, %289 ], [ -9223372036854775808, %280 ], [ %288, %282 ]
  %294 = phi i32 [ %291, %289 ], [ %281, %280 ], [ %2, %282 ]
  %295 = zext i8 %1 to i32
  %296 = shl nuw nsw i32 %295, 15
  %297 = add nuw nsw i32 %294, %296
  %298 = insertvalue { i64, i16 } poison, i64 %293, 0
  br label %299

299:                                              ; preds = %292, %262, %179, %173, %110, %88, %45
  %300 = phi { i64, i16 } [ %178, %173 ], [ { i64 -9223372036854775808, i16 poison }, %179 ], [ %268, %262 ], [ %298, %292 ], [ { i64 0, i16 poison }, %45 ], [ %103, %88 ], [ %129, %110 ]
  %301 = phi i32 [ %177, %173 ], [ %182, %179 ], [ %267, %262 ], [ %297, %292 ], [ %50, %45 ], [ %102, %88 ], [ %128, %110 ]
  %302 = trunc i32 %301 to i16
  %303 = insertvalue { i64, i16 } %300, i16 %302, 1
  ret { i64, i16 } %303
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define { i64, i16 } @floatx80_sub(i64 %0, i16 %1, i64 %2, i16 %3, %struct.float_status* nocapture noundef %4) local_unnamed_addr #14 {
  %6 = lshr i16 %1, 15
  %7 = trunc i16 %6 to i8
  %8 = lshr i16 %3, 15
  %9 = trunc i16 %8 to i8
  %10 = icmp eq i8 %7, %9
  br i1 %10, label %11, label %13

11:                                               ; preds = %5
  %12 = tail call fastcc { i64, i16 } @subFloatx80Sigs(i64 %0, i16 %1, i64 %2, i16 %3, i8 noundef zeroext %7, %struct.float_status* noundef %4)
  br label %15

13:                                               ; preds = %5
  %14 = tail call fastcc { i64, i16 } @addFloatx80Sigs(i64 %0, i16 %1, i64 %2, i16 %3, i8 noundef zeroext %7, %struct.float_status* noundef %4)
  br label %15

15:                                               ; preds = %13, %11
  %16 = phi { i64, i16 } [ %12, %11 ], [ %14, %13 ]
  ret { i64, i16 } %16
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define { i64, i16 } @floatx80_mul(i64 %0, i16 %1, i64 %2, i16 %3, %struct.float_status* nocapture noundef %4) local_unnamed_addr #14 {
  %6 = and i16 %1, 32767
  %7 = zext i16 %6 to i32
  %8 = and i16 %3, 32767
  %9 = zext i16 %8 to i32
  %10 = xor i16 %3, %1
  %11 = lshr i16 %10, 15
  %12 = trunc i16 %11 to i8
  %13 = icmp eq i16 %6, 32767
  br i1 %13, label %14, label %32

14:                                               ; preds = %5
  %15 = and i64 %0, 9223372036854775807
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %17, label %22

17:                                               ; preds = %14
  %18 = icmp ne i16 %8, 32767
  %19 = and i64 %2, 9223372036854775807
  %20 = icmp eq i64 %19, 0
  %21 = select i1 %18, i1 true, i1 %20
  br i1 %21, label %26, label %22

22:                                               ; preds = %17, %14
  %23 = tail call fastcc { i64, i16 } @propagateFloatx80NaN(i64 %0, i16 %1, i64 %2, i16 %3, %struct.float_status* noundef %4)
  %24 = extractvalue { i64, i16 } %23, 0
  %25 = extractvalue { i64, i16 } %23, 1
  br label %111

26:                                               ; preds = %17
  %27 = zext i16 %8 to i64
  %28 = or i64 %27, %2
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %45, label %30

30:                                               ; preds = %26
  %31 = or i16 %10, 32767
  br label %111

32:                                               ; preds = %5
  %33 = icmp eq i16 %8, 32767
  br i1 %33, label %34, label %51

34:                                               ; preds = %32
  %35 = and i64 %2, 9223372036854775807
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %41, label %37

37:                                               ; preds = %34
  %38 = tail call fastcc { i64, i16 } @propagateFloatx80NaN(i64 %0, i16 %1, i64 %2, i16 %3, %struct.float_status* noundef %4)
  %39 = extractvalue { i64, i16 } %38, 0
  %40 = extractvalue { i64, i16 } %38, 1
  br label %111

41:                                               ; preds = %34
  %42 = zext i16 %6 to i64
  %43 = or i64 %42, %0
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %45, label %49

45:                                               ; preds = %41, %26
  %46 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %47 = load i8, i8* %46, align 1
  %48 = or i8 %47, 1
  store i8 %48, i8* %46, align 1
  br label %111

49:                                               ; preds = %41
  %50 = or i16 %10, 32767
  br label %111

51:                                               ; preds = %32
  %52 = icmp eq i16 %6, 0
  br i1 %52, label %53, label %62

53:                                               ; preds = %51
  %54 = icmp eq i64 %0, 0
  br i1 %54, label %55, label %57

55:                                               ; preds = %53
  %56 = and i16 %10, -32768
  br label %111

57:                                               ; preds = %53
  %ctlz.sh = lshr i64 %0, 1
  %ctlz.step = or i64 %0, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %58 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %58, 6148914691236517205
  %ctpop.sh = lshr i64 %58, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %59 = trunc i64 %ctpop.part to i32
  %60 = shl i64 %0, %ctpop.part
  %61 = sub nsw i32 1, %59
  br label %62

62:                                               ; preds = %57, %51
  %63 = phi i32 [ %61, %57 ], [ %7, %51 ]
  %64 = phi i64 [ %60, %57 ], [ %0, %51 ]
  %65 = icmp eq i16 %8, 0
  br i1 %65, label %66, label %75

66:                                               ; preds = %62
  %67 = icmp eq i64 %2, 0
  br i1 %67, label %68, label %70

68:                                               ; preds = %66
  %69 = and i16 %10, -32768
  br label %111

70:                                               ; preds = %66
  %ctlz.sh31 = lshr i64 %2, 1
  %ctlz.step32 = or i64 %2, %ctlz.sh31
  %ctlz.sh33 = lshr i64 %ctlz.step32, 2
  %ctlz.step34 = or i64 %ctlz.step32, %ctlz.sh33
  %ctlz.sh35 = lshr i64 %ctlz.step34, 4
  %ctlz.step36 = or i64 %ctlz.step34, %ctlz.sh35
  %ctlz.sh37 = lshr i64 %ctlz.step36, 8
  %ctlz.step38 = or i64 %ctlz.step36, %ctlz.sh37
  %ctlz.sh39 = lshr i64 %ctlz.step38, 16
  %ctlz.step40 = or i64 %ctlz.step38, %ctlz.sh39
  %ctlz.sh41 = lshr i64 %ctlz.step40, 32
  %ctlz.step42 = or i64 %ctlz.step40, %ctlz.sh41
  %71 = xor i64 %ctlz.step42, -1
  %cppop.and143 = and i64 %71, 6148914691236517205
  %ctpop.sh44 = lshr i64 %71, 1
  %cppop.and245 = and i64 %ctpop.sh44, 6148914691236517205
  %ctpop.step46 = add i64 %cppop.and143, %cppop.and245
  %cppop.and147 = and i64 %ctpop.step46, 3689348814741910323
  %ctpop.sh48 = lshr i64 %ctpop.step46, 2
  %cppop.and249 = and i64 %ctpop.sh48, 3689348814741910323
  %ctpop.step50 = add i64 %cppop.and147, %cppop.and249
  %cppop.and151 = and i64 %ctpop.step50, 1085102592571150095
  %ctpop.sh52 = lshr i64 %ctpop.step50, 4
  %cppop.and253 = and i64 %ctpop.sh52, 1085102592571150095
  %ctpop.step54 = add i64 %cppop.and151, %cppop.and253
  %cppop.and155 = and i64 %ctpop.step54, 71777214294589695
  %ctpop.sh56 = lshr i64 %ctpop.step54, 8
  %cppop.and257 = and i64 %ctpop.sh56, 71777214294589695
  %ctpop.step58 = add i64 %cppop.and155, %cppop.and257
  %cppop.and159 = and i64 %ctpop.step58, 281470681808895
  %ctpop.sh60 = lshr i64 %ctpop.step58, 16
  %cppop.and261 = and i64 %ctpop.sh60, 281470681808895
  %ctpop.step62 = add i64 %cppop.and159, %cppop.and261
  %cppop.and163 = and i64 %ctpop.step62, 4294967295
  %ctpop.sh64 = lshr i64 %ctpop.step62, 32
  %cppop.and265 = and i64 %ctpop.sh64, 4294967295
  %ctpop.step66 = add i64 %cppop.and163, %cppop.and265
  %ctpop.part67 = add i64 %ctpop.step66, 0
  %72 = trunc i64 %ctpop.part67 to i32
  %73 = shl i64 %2, %ctpop.part67
  %74 = sub nsw i32 1, %72
  br label %75

75:                                               ; preds = %70, %62
  %76 = phi i32 [ %74, %70 ], [ %9, %62 ]
  %77 = phi i64 [ %73, %70 ], [ %2, %62 ]
  %78 = add nsw i32 %76, %63
  %79 = add nsw i32 %78, -16382
  %80 = lshr i64 %64, 32
  %81 = lshr i64 %77, 32
  %82 = and i64 %64, 4294967295
  %83 = and i64 %77, 4294967295
  %84 = mul nuw i64 %83, %82
  %85 = mul nuw i64 %81, %82
  %86 = mul nuw i64 %83, %80
  %87 = mul nuw i64 %81, %80
  %88 = add i64 %85, %86
  %89 = icmp ult i64 %88, %86
  %90 = select i1 %89, i64 4294967296, i64 0
  %91 = lshr i64 %88, 32
  %92 = shl i64 %88, 32
  %93 = add i64 %92, %84
  %94 = icmp ult i64 %93, %92
  %95 = zext i1 %94 to i64
  %96 = add nuw i64 %91, %87
  %97 = add i64 %96, %90
  %98 = add i64 %97, %95
  %99 = icmp sgt i64 %98, 0
  %100 = shl i64 %93, 1
  %101 = tail call i64 @llvm.fshl.i64(i64 %98, i64 %93, i64 1)
  %102 = add nsw i32 %78, -16383
  %103 = select i1 %99, i64 %101, i64 %98
  %104 = select i1 %99, i64 %100, i64 %93
  %105 = select i1 %99, i32 %102, i32 %79
  %106 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 3
  %107 = load i8, i8* %106, align 1
  %108 = tail call fastcc { i64, i16 } @roundAndPackFloatx80(i8 noundef signext %107, i8 noundef zeroext %12, i32 noundef %105, i64 noundef %103, i64 noundef %104, %struct.float_status* noundef %4)
  %109 = extractvalue { i64, i16 } %108, 0
  %110 = extractvalue { i64, i16 } %108, 1
  br label %111

111:                                              ; preds = %75, %68, %55, %49, %45, %37, %30, %22
  %112 = phi i64 [ %24, %22 ], [ -4611686018427387904, %45 ], [ -9223372036854775808, %30 ], [ %39, %37 ], [ -9223372036854775808, %49 ], [ 0, %55 ], [ 0, %68 ], [ %109, %75 ]
  %113 = phi i16 [ %25, %22 ], [ -1, %45 ], [ %31, %30 ], [ %40, %37 ], [ %50, %49 ], [ %56, %55 ], [ %69, %68 ], [ %110, %75 ]
  %114 = insertvalue { i64, i16 } poison, i64 %112, 0
  %115 = insertvalue { i64, i16 } %114, i16 %113, 1
  ret { i64, i16 } %115
}

; Function Attrs: nofree nosync nounwind uwtable
define { i64, i16 } @floatx80_div(i64 %0, i16 %1, i64 %2, i16 %3, %struct.float_status* nocapture noundef %4) local_unnamed_addr #20 {
  %6 = and i16 %1, 32767
  %7 = zext i16 %6 to i32
  %8 = and i16 %3, 32767
  %9 = zext i16 %8 to i32
  %10 = xor i16 %3, %1
  %11 = lshr i16 %10, 15
  %12 = trunc i16 %11 to i8
  %13 = icmp eq i16 %6, 32767
  br i1 %13, label %14, label %32

14:                                               ; preds = %5
  %15 = and i64 %0, 9223372036854775807
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %21, label %17

17:                                               ; preds = %14
  %18 = tail call fastcc { i64, i16 } @propagateFloatx80NaN(i64 %0, i16 %1, i64 %2, i16 %3, %struct.float_status* noundef %4)
  %19 = extractvalue { i64, i16 } %18, 0
  %20 = extractvalue { i64, i16 } %18, 1
  br label %271

21:                                               ; preds = %14
  %22 = icmp eq i16 %8, 32767
  br i1 %22, label %23, label %30

23:                                               ; preds = %21
  %24 = and i64 %2, 9223372036854775807
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %48, label %26

26:                                               ; preds = %23
  %27 = tail call fastcc { i64, i16 } @propagateFloatx80NaN(i64 %0, i16 %1, i64 %2, i16 %3, %struct.float_status* noundef %4)
  %28 = extractvalue { i64, i16 } %27, 0
  %29 = extractvalue { i64, i16 } %27, 1
  br label %271

30:                                               ; preds = %21
  %31 = or i16 %10, 32767
  br label %271

32:                                               ; preds = %5
  switch i32 %9, label %62 [
    i32 32767, label %33
    i32 0, label %42
  ]

33:                                               ; preds = %32
  %34 = and i64 %2, 9223372036854775807
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %40, label %36

36:                                               ; preds = %33
  %37 = tail call fastcc { i64, i16 } @propagateFloatx80NaN(i64 %0, i16 %1, i64 %2, i16 %3, %struct.float_status* noundef %4)
  %38 = extractvalue { i64, i16 } %37, 0
  %39 = extractvalue { i64, i16 } %37, 1
  br label %271

40:                                               ; preds = %33
  %41 = and i16 %10, -32768
  br label %271

42:                                               ; preds = %32
  %43 = icmp eq i64 %2, 0
  br i1 %43, label %44, label %57

44:                                               ; preds = %42
  %45 = zext i16 %6 to i64
  %46 = or i64 %45, %0
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %48, label %52

48:                                               ; preds = %44, %23
  %49 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %50 = load i8, i8* %49, align 1
  %51 = or i8 %50, 1
  store i8 %51, i8* %49, align 1
  br label %271

52:                                               ; preds = %44
  %53 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %54 = load i8, i8* %53, align 1
  %55 = or i8 %54, 4
  store i8 %55, i8* %53, align 1
  %56 = or i16 %10, 32767
  br label %271

57:                                               ; preds = %42
  %ctlz.sh = lshr i64 %2, 1
  %ctlz.step = or i64 %2, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %58 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %58, 6148914691236517205
  %ctpop.sh = lshr i64 %58, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %59 = trunc i64 %ctpop.part to i32
  %60 = shl i64 %2, %ctpop.part
  %61 = sub nsw i32 1, %59
  br label %62

62:                                               ; preds = %32, %57
  %63 = phi i64 [ %2, %32 ], [ %60, %57 ]
  %64 = phi i32 [ %9, %32 ], [ %61, %57 ]
  %65 = icmp eq i16 %6, 0
  br i1 %65, label %66, label %75

66:                                               ; preds = %62
  %67 = icmp eq i64 %0, 0
  br i1 %67, label %68, label %70

68:                                               ; preds = %66
  %69 = and i16 %10, -32768
  br label %271

70:                                               ; preds = %66
  %ctlz.sh31 = lshr i64 %0, 1
  %ctlz.step32 = or i64 %0, %ctlz.sh31
  %ctlz.sh33 = lshr i64 %ctlz.step32, 2
  %ctlz.step34 = or i64 %ctlz.step32, %ctlz.sh33
  %ctlz.sh35 = lshr i64 %ctlz.step34, 4
  %ctlz.step36 = or i64 %ctlz.step34, %ctlz.sh35
  %ctlz.sh37 = lshr i64 %ctlz.step36, 8
  %ctlz.step38 = or i64 %ctlz.step36, %ctlz.sh37
  %ctlz.sh39 = lshr i64 %ctlz.step38, 16
  %ctlz.step40 = or i64 %ctlz.step38, %ctlz.sh39
  %ctlz.sh41 = lshr i64 %ctlz.step40, 32
  %ctlz.step42 = or i64 %ctlz.step40, %ctlz.sh41
  %71 = xor i64 %ctlz.step42, -1
  %cppop.and143 = and i64 %71, 6148914691236517205
  %ctpop.sh44 = lshr i64 %71, 1
  %cppop.and245 = and i64 %ctpop.sh44, 6148914691236517205
  %ctpop.step46 = add i64 %cppop.and143, %cppop.and245
  %cppop.and147 = and i64 %ctpop.step46, 3689348814741910323
  %ctpop.sh48 = lshr i64 %ctpop.step46, 2
  %cppop.and249 = and i64 %ctpop.sh48, 3689348814741910323
  %ctpop.step50 = add i64 %cppop.and147, %cppop.and249
  %cppop.and151 = and i64 %ctpop.step50, 1085102592571150095
  %ctpop.sh52 = lshr i64 %ctpop.step50, 4
  %cppop.and253 = and i64 %ctpop.sh52, 1085102592571150095
  %ctpop.step54 = add i64 %cppop.and151, %cppop.and253
  %cppop.and155 = and i64 %ctpop.step54, 71777214294589695
  %ctpop.sh56 = lshr i64 %ctpop.step54, 8
  %cppop.and257 = and i64 %ctpop.sh56, 71777214294589695
  %ctpop.step58 = add i64 %cppop.and155, %cppop.and257
  %cppop.and159 = and i64 %ctpop.step58, 281470681808895
  %ctpop.sh60 = lshr i64 %ctpop.step58, 16
  %cppop.and261 = and i64 %ctpop.sh60, 281470681808895
  %ctpop.step62 = add i64 %cppop.and159, %cppop.and261
  %cppop.and163 = and i64 %ctpop.step62, 4294967295
  %ctpop.sh64 = lshr i64 %ctpop.step62, 32
  %cppop.and265 = and i64 %ctpop.sh64, 4294967295
  %ctpop.step66 = add i64 %cppop.and163, %cppop.and265
  %ctpop.part67 = add i64 %ctpop.step66, 0
  %72 = trunc i64 %ctpop.part67 to i32
  %73 = shl i64 %0, %ctpop.part67
  %74 = sub nsw i32 1, %72
  br label %75

75:                                               ; preds = %70, %62
  %76 = phi i64 [ %73, %70 ], [ %0, %62 ]
  %77 = phi i32 [ %74, %70 ], [ %7, %62 ]
  %78 = sub nsw i32 %77, %64
  %79 = icmp ugt i64 %63, %76
  %80 = shl i64 %76, 63
  %81 = xor i1 %79, true
  %82 = zext i1 %81 to i64
  %83 = lshr i64 %76, %82
  %84 = select i1 %79, i64 0, i64 %80
  %85 = select i1 %79, i32 16382, i32 16383
  %86 = add nsw i32 %78, %85
  %87 = icmp ugt i64 %63, %83
  %88 = lshr i64 %63, 32
  br i1 %87, label %91, label %89

89:                                               ; preds = %75
  %90 = and i64 %63, 4294967295
  br label %136

91:                                               ; preds = %75
  %92 = and i64 %63, -4294967296
  %93 = icmp ugt i64 %92, %83
  br i1 %93, label %94, label %97

94:                                               ; preds = %91
  %95 = udiv i64 %83, %88
  %96 = shl i64 %95, 32
  br label %97

97:                                               ; preds = %94, %91
  %98 = phi i64 [ %96, %94 ], [ -4294967296, %91 ]
  %99 = lshr exact i64 %98, 32
  %100 = and i64 %63, 4294967295
  %101 = mul nuw i64 %99, %100
  %102 = mul nuw i64 %99, %88
  %103 = lshr i64 %101, 32
  %104 = shl i64 %101, 32
  %105 = sub i64 %84, %104
  %106 = icmp ult i64 %84, %104
  %107 = sext i1 %106 to i64
  %108 = add nuw i64 %102, %103
  %109 = sub i64 %83, %108
  %110 = add i64 %109, %107
  %111 = icmp slt i64 %110, 0
  br i1 %111, label %112, label %125

112:                                              ; preds = %97
  %113 = shl i64 %63, 32
  br label %114

114:                                              ; preds = %114, %112
  %115 = phi i64 [ %98, %112 ], [ %118, %114 ]
  %116 = phi i64 [ %110, %112 ], [ %123, %114 ]
  %117 = phi i64 [ %105, %112 ], [ %119, %114 ]
  %118 = add i64 %115, -4294967296
  %119 = add i64 %117, %113
  %120 = add i64 %116, %88
  %121 = icmp ult i64 %119, %117
  %122 = zext i1 %121 to i64
  %123 = add i64 %120, %122
  %124 = icmp slt i64 %123, 0
  br i1 %124, label %114, label %125, !llvm.loop !50

125:                                              ; preds = %114, %97
  %126 = phi i64 [ %105, %97 ], [ %119, %114 ]
  %127 = phi i64 [ %110, %97 ], [ %123, %114 ]
  %128 = phi i64 [ %98, %97 ], [ %118, %114 ]
  %129 = tail call i64 @llvm.fshl.i64(i64 %127, i64 %126, i64 32) #30
  %130 = icmp ugt i64 %92, %129
  br i1 %130, label %131, label %133

131:                                              ; preds = %125
  %132 = udiv i64 %129, %88
  br label %133

133:                                              ; preds = %131, %125
  %134 = phi i64 [ %132, %131 ], [ 4294967295, %125 ]
  %135 = or i64 %134, %128
  br label %136

136:                                              ; preds = %89, %133
  %137 = phi i64 [ %90, %89 ], [ %100, %133 ]
  %138 = phi i64 [ -1, %89 ], [ %135, %133 ]
  %139 = lshr i64 %138, 32
  %140 = and i64 %138, 4294967295
  %141 = mul nuw i64 %140, %137
  %142 = mul nuw i64 %139, %137
  %143 = mul nuw i64 %140, %88
  %144 = mul nuw i64 %139, %88
  %145 = add i64 %142, %143
  %146 = icmp ult i64 %145, %143
  %147 = select i1 %146, i64 -4294967296, i64 0
  %148 = lshr i64 %145, 32
  %149 = shl i64 %145, 32
  %150 = add i64 %149, %141
  %151 = icmp ult i64 %150, %149
  %152 = sext i1 %151 to i64
  %153 = sub i64 %84, %150
  %154 = icmp ult i64 %84, %150
  %155 = sext i1 %154 to i64
  %156 = add i64 %144, %148
  %157 = sub i64 %83, %156
  %158 = add i64 %157, %147
  %159 = add i64 %158, %152
  %160 = add i64 %159, %155
  %161 = icmp slt i64 %160, 0
  br i1 %161, label %162, label %172

162:                                              ; preds = %136, %162
  %163 = phi i64 [ %166, %162 ], [ %138, %136 ]
  %164 = phi i64 [ %167, %162 ], [ %153, %136 ]
  %165 = phi i64 [ %170, %162 ], [ %160, %136 ]
  %166 = add i64 %163, -1
  %167 = add i64 %164, %63
  %168 = icmp ult i64 %167, %164
  %169 = zext i1 %168 to i64
  %170 = add nsw i64 %165, %169
  %171 = icmp slt i64 %170, 0
  br i1 %171, label %162, label %172, !llvm.loop !84

172:                                              ; preds = %162, %136
  %173 = phi i64 [ %153, %136 ], [ %167, %162 ]
  %174 = phi i64 [ %138, %136 ], [ %166, %162 ]
  %175 = icmp ugt i64 %63, %173
  br i1 %175, label %176, label %264

176:                                              ; preds = %172
  %177 = and i64 %63, -4294967296
  %178 = icmp ugt i64 %177, %173
  br i1 %178, label %179, label %182

179:                                              ; preds = %176
  %180 = udiv i64 %173, %88
  %181 = shl i64 %180, 32
  br label %182

182:                                              ; preds = %179, %176
  %183 = phi i64 [ %181, %179 ], [ -4294967296, %176 ]
  %184 = lshr exact i64 %183, 32
  %185 = mul nuw i64 %184, %137
  %186 = mul nuw i64 %184, %88
  %187 = lshr i64 %185, 32
  %188 = shl i64 %185, 32
  %189 = sub i64 0, %188
  %190 = icmp ne i64 %188, 0
  %191 = sext i1 %190 to i64
  %192 = add i64 %186, %187
  %193 = sub i64 %173, %192
  %194 = add i64 %193, %191
  %195 = icmp slt i64 %194, 0
  br i1 %195, label %196, label %209

196:                                              ; preds = %182
  %197 = shl i64 %63, 32
  br label %198

198:                                              ; preds = %198, %196
  %199 = phi i64 [ %183, %196 ], [ %202, %198 ]
  %200 = phi i64 [ %194, %196 ], [ %207, %198 ]
  %201 = phi i64 [ %189, %196 ], [ %203, %198 ]
  %202 = add i64 %199, -4294967296
  %203 = add i64 %201, %197
  %204 = add i64 %200, %88
  %205 = icmp ult i64 %203, %201
  %206 = zext i1 %205 to i64
  %207 = add i64 %204, %206
  %208 = icmp slt i64 %207, 0
  br i1 %208, label %198, label %209, !llvm.loop !50

209:                                              ; preds = %198, %182
  %210 = phi i64 [ %189, %182 ], [ %203, %198 ]
  %211 = phi i64 [ %194, %182 ], [ %207, %198 ]
  %212 = phi i64 [ %183, %182 ], [ %202, %198 ]
  %213 = tail call i64 @llvm.fshl.i64(i64 %211, i64 %210, i64 32) #30
  %214 = icmp ugt i64 %177, %213
  br i1 %214, label %215, label %217

215:                                              ; preds = %209
  %216 = udiv i64 %213, %88
  br label %217

217:                                              ; preds = %209, %215
  %218 = phi i64 [ %216, %215 ], [ 4294967295, %209 ]
  %219 = or i64 %218, %212
  %220 = shl i64 %219, 1
  %221 = icmp ult i64 %220, 9
  br i1 %221, label %222, label %264

222:                                              ; preds = %217
  %223 = lshr i64 %219, 32
  %224 = and i64 %219, 4294967295
  %225 = mul nuw i64 %224, %137
  %226 = mul nuw i64 %223, %137
  %227 = mul nuw i64 %224, %88
  %228 = mul nuw i64 %223, %88
  %229 = add i64 %226, %227
  %230 = icmp ult i64 %229, %227
  %231 = select i1 %230, i64 -4294967296, i64 0
  %232 = lshr i64 %229, 32
  %233 = shl i64 %229, 32
  %234 = add i64 %233, %225
  %235 = icmp ult i64 %234, %233
  %236 = sext i1 %235 to i64
  %237 = sub i64 0, %234
  %238 = icmp ne i64 %234, 0
  %239 = sext i1 %238 to i64
  %240 = add i64 %228, %232
  %241 = sub i64 %173, %240
  %242 = add i64 %241, %231
  %243 = add i64 %242, %236
  %244 = add i64 %243, %239
  %245 = icmp slt i64 %244, 0
  br i1 %245, label %246, label %256

246:                                              ; preds = %222, %246
  %247 = phi i64 [ %250, %246 ], [ %219, %222 ]
  %248 = phi i64 [ %251, %246 ], [ %237, %222 ]
  %249 = phi i64 [ %254, %246 ], [ %244, %222 ]
  %250 = add i64 %247, -1
  %251 = add i64 %248, %63
  %252 = icmp ult i64 %251, %248
  %253 = zext i1 %252 to i64
  %254 = add nsw i64 %249, %253
  %255 = icmp slt i64 %254, 0
  br i1 %255, label %246, label %256, !llvm.loop !85

256:                                              ; preds = %246, %222
  %257 = phi i64 [ %244, %222 ], [ 0, %246 ]
  %258 = phi i64 [ %237, %222 ], [ %251, %246 ]
  %259 = phi i64 [ %219, %222 ], [ %250, %246 ]
  %260 = or i64 %258, %257
  %261 = icmp ne i64 %260, 0
  %262 = zext i1 %261 to i64
  %263 = or i64 %259, %262
  br label %264

264:                                              ; preds = %172, %256, %217
  %265 = phi i64 [ %263, %256 ], [ %219, %217 ], [ -1, %172 ]
  %266 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 3
  %267 = load i8, i8* %266, align 1
  %268 = tail call fastcc { i64, i16 } @roundAndPackFloatx80(i8 noundef signext %267, i8 noundef zeroext %12, i32 noundef %86, i64 noundef %174, i64 noundef %265, %struct.float_status* noundef %4)
  %269 = extractvalue { i64, i16 } %268, 0
  %270 = extractvalue { i64, i16 } %268, 1
  br label %271

271:                                              ; preds = %264, %68, %52, %48, %40, %36, %30, %26, %17
  %272 = phi i64 [ %19, %17 ], [ %28, %26 ], [ -4611686018427387904, %48 ], [ -9223372036854775808, %30 ], [ %38, %36 ], [ 0, %40 ], [ -9223372036854775808, %52 ], [ 0, %68 ], [ %269, %264 ]
  %273 = phi i16 [ %20, %17 ], [ %29, %26 ], [ -1, %48 ], [ %31, %30 ], [ %39, %36 ], [ %41, %40 ], [ %56, %52 ], [ %69, %68 ], [ %270, %264 ]
  %274 = insertvalue { i64, i16 } poison, i64 %272, 0
  %275 = insertvalue { i64, i16 } %274, i16 %273, 1
  ret { i64, i16 } %275
}

; Function Attrs: nofree nosync nounwind uwtable
define { i64, i16 } @floatx80_rem(i64 %0, i16 %1, i64 %2, i16 %3, %struct.float_status* nocapture noundef %4) local_unnamed_addr #20 {
  %6 = and i16 %1, 32767
  %7 = zext i16 %6 to i32
  %8 = lshr i16 %1, 15
  %9 = trunc i16 %8 to i8
  %10 = and i16 %3, 32767
  %11 = zext i16 %10 to i32
  %12 = icmp eq i16 %6, 32767
  br i1 %12, label %13, label %25

13:                                               ; preds = %5
  %14 = and i64 %0, 9223372036854775807
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %16, label %21

16:                                               ; preds = %13
  %17 = icmp ne i16 %10, 32767
  %18 = and i64 %2, 9223372036854775807
  %19 = icmp eq i64 %18, 0
  %20 = select i1 %17, i1 true, i1 %19
  br i1 %20, label %35, label %21

21:                                               ; preds = %16, %13
  %22 = tail call fastcc { i64, i16 } @propagateFloatx80NaN(i64 %0, i16 %1, i64 %2, i16 %3, %struct.float_status* noundef %4)
  %23 = extractvalue { i64, i16 } %22, 0
  %24 = extractvalue { i64, i16 } %22, 1
  br label %320

25:                                               ; preds = %5
  switch i32 %11, label %44 [
    i32 32767, label %26
    i32 0, label %33
  ]

26:                                               ; preds = %25
  %27 = and i64 %2, 9223372036854775807
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %320, label %29

29:                                               ; preds = %26
  %30 = tail call fastcc { i64, i16 } @propagateFloatx80NaN(i64 %0, i16 %1, i64 %2, i16 %3, %struct.float_status* noundef %4)
  %31 = extractvalue { i64, i16 } %30, 0
  %32 = extractvalue { i64, i16 } %30, 1
  br label %320

33:                                               ; preds = %25
  %34 = icmp eq i64 %2, 0
  br i1 %34, label %35, label %39

35:                                               ; preds = %33, %16
  %36 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %37 = load i8, i8* %36, align 1
  %38 = or i8 %37, 1
  store i8 %38, i8* %36, align 1
  br label %320

39:                                               ; preds = %33
  %ctlz.sh = lshr i64 %2, 1
  %ctlz.step = or i64 %2, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %40 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %40, 6148914691236517205
  %ctpop.sh = lshr i64 %40, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %41 = trunc i64 %ctpop.part to i32
  %42 = shl i64 %2, %ctpop.part
  %43 = sub nsw i32 1, %41
  br label %44

44:                                               ; preds = %25, %39
  %45 = phi i64 [ %2, %25 ], [ %42, %39 ]
  %46 = phi i32 [ %11, %25 ], [ %43, %39 ]
  %47 = icmp eq i16 %6, 0
  br i1 %47, label %48, label %56

48:                                               ; preds = %44
  %49 = and i64 %0, 9223372036854775807
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %320, label %51

51:                                               ; preds = %48
  %ctlz.sh31 = lshr i64 %0, 1
  %ctlz.step32 = or i64 %0, %ctlz.sh31
  %ctlz.sh33 = lshr i64 %ctlz.step32, 2
  %ctlz.step34 = or i64 %ctlz.step32, %ctlz.sh33
  %ctlz.sh35 = lshr i64 %ctlz.step34, 4
  %ctlz.step36 = or i64 %ctlz.step34, %ctlz.sh35
  %ctlz.sh37 = lshr i64 %ctlz.step36, 8
  %ctlz.step38 = or i64 %ctlz.step36, %ctlz.sh37
  %ctlz.sh39 = lshr i64 %ctlz.step38, 16
  %ctlz.step40 = or i64 %ctlz.step38, %ctlz.sh39
  %ctlz.sh41 = lshr i64 %ctlz.step40, 32
  %ctlz.step42 = or i64 %ctlz.step40, %ctlz.sh41
  %52 = xor i64 %ctlz.step42, -1
  %cppop.and143 = and i64 %52, 6148914691236517205
  %ctpop.sh44 = lshr i64 %52, 1
  %cppop.and245 = and i64 %ctpop.sh44, 6148914691236517205
  %ctpop.step46 = add i64 %cppop.and143, %cppop.and245
  %cppop.and147 = and i64 %ctpop.step46, 3689348814741910323
  %ctpop.sh48 = lshr i64 %ctpop.step46, 2
  %cppop.and249 = and i64 %ctpop.sh48, 3689348814741910323
  %ctpop.step50 = add i64 %cppop.and147, %cppop.and249
  %cppop.and151 = and i64 %ctpop.step50, 1085102592571150095
  %ctpop.sh52 = lshr i64 %ctpop.step50, 4
  %cppop.and253 = and i64 %ctpop.sh52, 1085102592571150095
  %ctpop.step54 = add i64 %cppop.and151, %cppop.and253
  %cppop.and155 = and i64 %ctpop.step54, 71777214294589695
  %ctpop.sh56 = lshr i64 %ctpop.step54, 8
  %cppop.and257 = and i64 %ctpop.sh56, 71777214294589695
  %ctpop.step58 = add i64 %cppop.and155, %cppop.and257
  %cppop.and159 = and i64 %ctpop.step58, 281470681808895
  %ctpop.sh60 = lshr i64 %ctpop.step58, 16
  %cppop.and261 = and i64 %ctpop.sh60, 281470681808895
  %ctpop.step62 = add i64 %cppop.and159, %cppop.and261
  %cppop.and163 = and i64 %ctpop.step62, 4294967295
  %ctpop.sh64 = lshr i64 %ctpop.step62, 32
  %cppop.and265 = and i64 %ctpop.sh64, 4294967295
  %ctpop.step66 = add i64 %cppop.and163, %cppop.and265
  %ctpop.part67 = add i64 %ctpop.step66, 0
  %53 = trunc i64 %ctpop.part67 to i32
  %54 = shl i64 %0, %ctpop.part67
  %55 = sub nsw i32 1, %53
  br label %56

56:                                               ; preds = %51, %44
  %57 = phi i64 [ %54, %51 ], [ %0, %44 ]
  %58 = phi i32 [ %55, %51 ], [ %7, %44 ]
  %59 = or i64 %45, -9223372036854775808
  %60 = sub nsw i32 %58, %46
  %61 = icmp slt i32 %60, 0
  br i1 %61, label %62, label %67

62:                                               ; preds = %56
  %63 = icmp eq i32 %60, -1
  br i1 %63, label %64, label %320

64:                                               ; preds = %62
  %65 = lshr i64 %57, 1
  %66 = shl i64 %57, 63
  br label %268

67:                                               ; preds = %56
  %68 = icmp uge i64 %57, %59
  %69 = zext i1 %68 to i64
  %70 = select i1 %68, i64 %59, i64 0
  %71 = sub i64 %57, %70
  %72 = add nsw i32 %60, -64
  %73 = icmp ugt i32 %60, 64
  br i1 %73, label %74, label %153

74:                                               ; preds = %67
  %75 = lshr i64 %59, 32
  %76 = and i64 %59, -4294967296
  %77 = and i64 %45, 4294967295
  %78 = shl i64 %45, 32
  br label %79

79:                                               ; preds = %74, %125
  %80 = phi i32 [ %72, %74 ], [ %151, %125 ]
  %81 = phi i64 [ 0, %74 ], [ %149, %125 ]
  %82 = phi i64 [ %71, %74 ], [ %150, %125 ]
  %83 = icmp ugt i64 %59, %82
  br i1 %83, label %84, label %125

84:                                               ; preds = %79
  %85 = icmp ugt i64 %76, %82
  br i1 %85, label %86, label %89

86:                                               ; preds = %84
  %87 = udiv i64 %82, %75
  %88 = shl i64 %87, 32
  br label %89

89:                                               ; preds = %86, %84
  %90 = phi i64 [ %88, %86 ], [ -4294967296, %84 ]
  %91 = lshr exact i64 %90, 32
  %92 = mul nuw i64 %91, %77
  %93 = mul nuw i64 %91, %75
  %94 = lshr i64 %92, 32
  %95 = shl i64 %92, 32
  %96 = sub i64 %81, %95
  %97 = icmp ult i64 %81, %95
  %98 = sext i1 %97 to i64
  %99 = add i64 %93, %94
  %100 = sub i64 %82, %99
  %101 = add i64 %100, %98
  %102 = icmp slt i64 %101, 0
  br i1 %102, label %103, label %114

103:                                              ; preds = %89, %103
  %104 = phi i64 [ %107, %103 ], [ %90, %89 ]
  %105 = phi i64 [ %112, %103 ], [ %101, %89 ]
  %106 = phi i64 [ %108, %103 ], [ %96, %89 ]
  %107 = add i64 %104, -4294967296
  %108 = add i64 %106, %78
  %109 = add i64 %105, %75
  %110 = icmp ult i64 %108, %106
  %111 = zext i1 %110 to i64
  %112 = add i64 %109, %111
  %113 = icmp slt i64 %112, 0
  br i1 %113, label %103, label %114, !llvm.loop !50

114:                                              ; preds = %103, %89
  %115 = phi i64 [ %96, %89 ], [ %108, %103 ]
  %116 = phi i64 [ %101, %89 ], [ %112, %103 ]
  %117 = phi i64 [ %90, %89 ], [ %107, %103 ]
  %118 = tail call i64 @llvm.fshl.i64(i64 %116, i64 %115, i64 32) #30
  %119 = icmp ugt i64 %76, %118
  br i1 %119, label %120, label %122

120:                                              ; preds = %114
  %121 = udiv i64 %118, %75
  br label %122

122:                                              ; preds = %120, %114
  %123 = phi i64 [ %121, %120 ], [ 4294967295, %114 ]
  %124 = or i64 %123, %117
  br label %125

125:                                              ; preds = %79, %122
  %126 = phi i64 [ %124, %122 ], [ -1, %79 ]
  %127 = sub i64 %126, 2
  %128 = icmp ult i64 %126, 2
  %129 = select i1 %128, i64 0, i64 %127
  %130 = lshr i64 %129, 32
  %131 = and i64 %129, 4294967295
  %132 = mul nuw i64 %131, %77
  %133 = mul nuw i64 %130, %77
  %134 = mul nuw i64 %131, %75
  %135 = mul nuw i64 %130, %75
  %136 = add i64 %133, %134
  %137 = lshr i64 %136, 32
  %138 = shl i64 %136, 32
  %139 = add i64 %138, %132
  %140 = icmp ult i64 %139, %138
  %141 = sext i1 %140 to i64
  %142 = sub i64 %81, %139
  %143 = icmp ult i64 %81, %139
  %144 = sext i1 %143 to i64
  %145 = add i64 %135, %137
  %146 = sub i64 %82, %145
  %147 = add i64 %146, %141
  %148 = add i64 %147, %144
  %149 = shl i64 %142, 62
  %150 = tail call i64 @llvm.fshl.i64(i64 %148, i64 %142, i64 62)
  %151 = add nsw i32 %80, -62
  %152 = icmp sgt i32 %80, 62
  br i1 %152, label %79, label %153, !llvm.loop !86

153:                                              ; preds = %125, %67
  %154 = phi i64 [ %71, %67 ], [ %150, %125 ]
  %155 = phi i64 [ 0, %67 ], [ %149, %125 ]
  %156 = phi i32 [ %72, %67 ], [ %151, %125 ]
  %157 = phi i64 [ %69, %67 ], [ %129, %125 ]
  %158 = add nsw i32 %156, 64
  %159 = icmp sgt i32 %156, -64
  br i1 %159, label %160, label %268

160:                                              ; preds = %153
  %161 = icmp ugt i64 %59, %154
  %162 = lshr i64 %59, 32
  br i1 %161, label %165, label %163

163:                                              ; preds = %160
  %164 = and i64 %45, 4294967295
  br label %210

165:                                              ; preds = %160
  %166 = and i64 %59, -4294967296
  %167 = icmp ugt i64 %166, %154
  br i1 %167, label %168, label %171

168:                                              ; preds = %165
  %169 = udiv i64 %154, %162
  %170 = shl i64 %169, 32
  br label %171

171:                                              ; preds = %168, %165
  %172 = phi i64 [ %170, %168 ], [ -4294967296, %165 ]
  %173 = lshr exact i64 %172, 32
  %174 = and i64 %45, 4294967295
  %175 = mul nuw i64 %173, %174
  %176 = mul nuw i64 %173, %162
  %177 = lshr i64 %175, 32
  %178 = shl i64 %175, 32
  %179 = sub i64 %155, %178
  %180 = icmp ult i64 %155, %178
  %181 = sext i1 %180 to i64
  %182 = add nuw i64 %176, %177
  %183 = sub i64 %154, %182
  %184 = add i64 %183, %181
  %185 = icmp slt i64 %184, 0
  br i1 %185, label %186, label %199

186:                                              ; preds = %171
  %187 = shl i64 %45, 32
  br label %188

188:                                              ; preds = %188, %186
  %189 = phi i64 [ %172, %186 ], [ %192, %188 ]
  %190 = phi i64 [ %184, %186 ], [ %197, %188 ]
  %191 = phi i64 [ %179, %186 ], [ %193, %188 ]
  %192 = add i64 %189, -4294967296
  %193 = add i64 %191, %187
  %194 = add i64 %190, %162
  %195 = icmp ult i64 %193, %191
  %196 = zext i1 %195 to i64
  %197 = add i64 %194, %196
  %198 = icmp slt i64 %197, 0
  br i1 %198, label %188, label %199, !llvm.loop !50

199:                                              ; preds = %188, %171
  %200 = phi i64 [ %179, %171 ], [ %193, %188 ]
  %201 = phi i64 [ %184, %171 ], [ %197, %188 ]
  %202 = phi i64 [ %172, %171 ], [ %192, %188 ]
  %203 = tail call i64 @llvm.fshl.i64(i64 %201, i64 %200, i64 32) #30
  %204 = icmp ugt i64 %166, %203
  br i1 %204, label %205, label %207

205:                                              ; preds = %199
  %206 = udiv i64 %203, %162
  br label %207

207:                                              ; preds = %205, %199
  %208 = phi i64 [ %206, %205 ], [ 4294967295, %199 ]
  %209 = or i64 %208, %202
  br label %210

210:                                              ; preds = %163, %207
  %211 = phi i64 [ %164, %163 ], [ %174, %207 ]
  %212 = phi i64 [ -1, %163 ], [ %209, %207 ]
  %213 = sub i64 %212, 2
  %214 = icmp ult i64 %212, 2
  %215 = select i1 %214, i64 0, i64 %213
  %216 = sub i32 0, %156
  %217 = zext i32 %216 to i64
  %218 = lshr i64 %215, %217
  %219 = shl i64 %218, %217
  %220 = lshr i64 %219, 32
  %221 = and i64 %219, 4294967295
  %222 = mul nuw i64 %221, %211
  %223 = mul nuw i64 %220, %211
  %224 = mul nuw i64 %221, %162
  %225 = mul nuw i64 %220, %162
  %226 = add i64 %223, %224
  %227 = icmp ult i64 %226, %224
  %228 = select i1 %227, i64 -4294967296, i64 0
  %229 = lshr i64 %226, 32
  %230 = shl i64 %226, 32
  %231 = add i64 %230, %222
  %232 = icmp ult i64 %231, %230
  %233 = sext i1 %232 to i64
  %234 = sub i64 %155, %231
  %235 = icmp ult i64 %155, %231
  %236 = sext i1 %235 to i64
  %237 = add i64 %225, %229
  %238 = sub i64 %154, %237
  %239 = add i64 %238, %228
  %240 = add i64 %239, %233
  %241 = add i64 %240, %236
  %242 = shl i64 %59, %217
  %243 = icmp eq i32 %156, 0
  %244 = and i32 %156, 63
  %245 = zext i32 %244 to i64
  %246 = lshr i64 %59, %245
  %247 = select i1 %243, i64 0, i64 %246
  %248 = icmp ugt i64 %241, %247
  %249 = icmp eq i64 %241, %247
  %250 = icmp uge i64 %234, %242
  %251 = and i1 %249, %250
  %252 = or i1 %248, %251
  br i1 %252, label %253, label %268

253:                                              ; preds = %210, %253
  %254 = phi i64 [ %257, %253 ], [ %218, %210 ]
  %255 = phi i64 [ %258, %253 ], [ %234, %210 ]
  %256 = phi i64 [ %262, %253 ], [ %241, %210 ]
  %257 = add i64 %254, 1
  %258 = sub i64 %255, %242
  %259 = sub i64 %256, %247
  %260 = icmp ult i64 %255, %242
  %261 = sext i1 %260 to i64
  %262 = add i64 %259, %261
  %263 = icmp ugt i64 %262, %247
  %264 = icmp eq i64 %262, %247
  %265 = icmp uge i64 %258, %242
  %266 = and i1 %264, %265
  %267 = or i1 %263, %266
  br i1 %267, label %253, label %268, !llvm.loop !87

268:                                              ; preds = %253, %64, %210, %153
  %269 = phi i32 [ %158, %153 ], [ %158, %210 ], [ 0, %64 ], [ %158, %253 ]
  %270 = phi i32 [ %156, %153 ], [ %156, %210 ], [ -64, %64 ], [ %156, %253 ]
  %271 = phi i64 [ %154, %153 ], [ %241, %210 ], [ %65, %64 ], [ %262, %253 ]
  %272 = phi i64 [ %155, %153 ], [ %234, %210 ], [ %66, %64 ], [ %258, %253 ]
  %273 = phi i64 [ %59, %153 ], [ %247, %210 ], [ %59, %64 ], [ %247, %253 ]
  %274 = phi i64 [ 0, %153 ], [ %242, %210 ], [ 0, %64 ], [ %242, %253 ]
  %275 = phi i64 [ %157, %153 ], [ %218, %210 ], [ 0, %64 ], [ %257, %253 ]
  %276 = sub i64 %274, %272
  %277 = sub i64 %273, %271
  %278 = icmp ult i64 %274, %272
  %279 = sext i1 %278 to i64
  %280 = add i64 %277, %279
  %281 = icmp ult i64 %280, %271
  %282 = icmp eq i64 %280, %271
  %283 = icmp ult i64 %276, %272
  %284 = and i1 %283, %282
  %285 = or i1 %281, %284
  br i1 %285, label %293, label %286

286:                                              ; preds = %268
  %287 = icmp eq i64 %276, %272
  %288 = and i1 %287, %282
  %289 = xor i1 %288, true
  %290 = and i64 %275, 1
  %291 = icmp eq i64 %290, 0
  %292 = select i1 %289, i1 true, i1 %291
  br i1 %292, label %295, label %293

293:                                              ; preds = %286, %268
  %294 = xor i8 %9, 1
  br label %295

295:                                              ; preds = %293, %286
  %296 = phi i64 [ %271, %286 ], [ %280, %293 ]
  %297 = phi i64 [ %272, %286 ], [ %276, %293 ]
  %298 = phi i8 [ %9, %286 ], [ %294, %293 ]
  %299 = icmp eq i64 %296, 0
  %300 = select i1 %299, i64 %297, i64 %296
  %301 = select i1 %299, i64 0, i64 %297
  %ctlz.sh68 = lshr i64 %300, 1
  %ctlz.step69 = or i64 %300, %ctlz.sh68
  %ctlz.sh70 = lshr i64 %ctlz.step69, 2
  %ctlz.step71 = or i64 %ctlz.step69, %ctlz.sh70
  %ctlz.sh72 = lshr i64 %ctlz.step71, 4
  %ctlz.step73 = or i64 %ctlz.step71, %ctlz.sh72
  %ctlz.sh74 = lshr i64 %ctlz.step73, 8
  %ctlz.step75 = or i64 %ctlz.step73, %ctlz.sh74
  %ctlz.sh76 = lshr i64 %ctlz.step75, 16
  %ctlz.step77 = or i64 %ctlz.step75, %ctlz.sh76
  %ctlz.sh78 = lshr i64 %ctlz.step77, 32
  %ctlz.step79 = or i64 %ctlz.step77, %ctlz.sh78
  %302 = xor i64 %ctlz.step79, -1
  %cppop.and180 = and i64 %302, 6148914691236517205
  %ctpop.sh81 = lshr i64 %302, 1
  %cppop.and282 = and i64 %ctpop.sh81, 6148914691236517205
  %ctpop.step83 = add i64 %cppop.and180, %cppop.and282
  %cppop.and184 = and i64 %ctpop.step83, 3689348814741910323
  %ctpop.sh85 = lshr i64 %ctpop.step83, 2
  %cppop.and286 = and i64 %ctpop.sh85, 3689348814741910323
  %ctpop.step87 = add i64 %cppop.and184, %cppop.and286
  %cppop.and188 = and i64 %ctpop.step87, 1085102592571150095
  %ctpop.sh89 = lshr i64 %ctpop.step87, 4
  %cppop.and290 = and i64 %ctpop.sh89, 1085102592571150095
  %ctpop.step91 = add i64 %cppop.and188, %cppop.and290
  %cppop.and192 = and i64 %ctpop.step91, 71777214294589695
  %ctpop.sh93 = lshr i64 %ctpop.step91, 8
  %cppop.and294 = and i64 %ctpop.sh93, 71777214294589695
  %ctpop.step95 = add i64 %cppop.and192, %cppop.and294
  %cppop.and196 = and i64 %ctpop.step95, 281470681808895
  %ctpop.sh97 = lshr i64 %ctpop.step95, 16
  %cppop.and298 = and i64 %ctpop.sh97, 281470681808895
  %ctpop.step99 = add i64 %cppop.and196, %cppop.and298
  %cppop.and1100 = and i64 %ctpop.step99, 4294967295
  %ctpop.sh101 = lshr i64 %ctpop.step99, 32
  %cppop.and2102 = and i64 %ctpop.sh101, 4294967295
  %ctpop.step103 = add i64 %cppop.and1100, %cppop.and2102
  %ctpop.part104 = add i64 %ctpop.step103, 0
  %303 = trunc i64 %ctpop.part104 to i32
  %304 = icmp eq i32 %303, 0
  br i1 %304, label %311, label %305

305:                                              ; preds = %295
  %306 = shl i64 %300, %ctpop.part104
  %307 = sub nsw i64 0, %ctpop.part104
  %308 = and i64 %307, 63
  %309 = lshr i64 %301, %308
  %310 = or i64 %309, %306
  br label %311

311:                                              ; preds = %295, %305
  %312 = phi i64 [ %310, %305 ], [ %300, %295 ]
  %313 = shl i64 %301, %ctpop.part104
  %314 = select i1 %299, i32 %270, i32 %269
  %315 = add i32 %314, %46
  %316 = sub i32 %315, %303
  %317 = tail call fastcc { i64, i16 } @roundAndPackFloatx80(i8 noundef signext 80, i8 noundef zeroext %298, i32 noundef %316, i64 noundef %312, i64 noundef %313, %struct.float_status* noundef %4) #30
  %318 = extractvalue { i64, i16 } %317, 0
  %319 = extractvalue { i64, i16 } %317, 1
  br label %320

320:                                              ; preds = %62, %48, %26, %311, %35, %29, %21
  %321 = phi i64 [ %23, %21 ], [ -4611686018427387904, %35 ], [ %31, %29 ], [ %318, %311 ], [ %0, %26 ], [ %0, %48 ], [ %0, %62 ]
  %322 = phi i16 [ %24, %21 ], [ -1, %35 ], [ %32, %29 ], [ %319, %311 ], [ %1, %26 ], [ %1, %48 ], [ %1, %62 ]
  %323 = insertvalue { i64, i16 } poison, i64 %321, 0
  %324 = insertvalue { i64, i16 } %323, i16 %322, 1
  ret { i64, i16 } %324
}

; Function Attrs: nofree nosync nounwind uwtable
define { i64, i16 } @floatx80_sqrt(i64 %0, i16 %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #20 {
  %4 = and i16 %1, 32767
  %5 = zext i16 %4 to i32
  %6 = icmp eq i16 %4, 32767
  br i1 %6, label %7, label %16

7:                                                ; preds = %3
  %8 = and i64 %0, 9223372036854775807
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %14, label %10

10:                                               ; preds = %7
  %11 = tail call fastcc { i64, i16 } @propagateFloatx80NaN(i64 %0, i16 %1, i64 %0, i16 %1, %struct.float_status* noundef %2)
  %12 = extractvalue { i64, i16 } %11, 0
  %13 = extractvalue { i64, i16 } %11, 1
  br label %308

14:                                               ; preds = %7
  %15 = icmp sgt i16 %1, -1
  br i1 %15, label %308, label %22

16:                                               ; preds = %3
  %17 = icmp sgt i16 %1, -1
  br i1 %17, label %26, label %18

18:                                               ; preds = %16
  %19 = zext i16 %4 to i64
  %20 = or i64 %19, %0
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %308, label %22

22:                                               ; preds = %18, %14
  %23 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %24 = load i8, i8* %23, align 1
  %25 = or i8 %24, 1
  store i8 %25, i8* %23, align 1
  br label %308

26:                                               ; preds = %16
  %27 = icmp eq i16 %4, 0
  br i1 %27, label %28, label %35

28:                                               ; preds = %26
  %29 = icmp eq i64 %0, 0
  br i1 %29, label %308, label %30

30:                                               ; preds = %28
  %ctlz.sh = lshr i64 %0, 1
  %ctlz.step = or i64 %0, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %31 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %31, 6148914691236517205
  %ctpop.sh = lshr i64 %31, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %32 = trunc i64 %ctpop.part to i32
  %33 = shl i64 %0, %ctpop.part
  %34 = sub nsw i32 1, %32
  br label %35

35:                                               ; preds = %30, %26
  %36 = phi i64 [ %33, %30 ], [ %0, %26 ]
  %37 = phi i32 [ %34, %30 ], [ %5, %26 ]
  %38 = add nsw i32 %37, -16383
  %39 = ashr i32 %38, 1
  %40 = add nsw i32 %39, 16383
  %41 = lshr i64 %36, 32
  %42 = trunc i64 %41 to i32
  %43 = lshr i32 %42, 27
  %44 = trunc i32 %43 to i8
  %45 = and i8 %44, 15
  %46 = and i32 %37, 1
  %47 = icmp eq i32 %46, 0
  %48 = lshr i32 %42, 17
  br i1 %47, label %61, label %49

49:                                               ; preds = %35
  %50 = add nuw nsw i32 %48, 16384
  %51 = zext i8 %45 to i64
  %52 = getelementptr inbounds [16 x i16], [16 x i16]* @estimateSqrt32.sqrtOddAdjustments, i64 0, i64 %51
  %53 = load i16, i16* %52, align 2
  %54 = zext i16 %53 to i32
  %55 = sub nsw i32 %50, %54
  %56 = udiv i32 %42, %55
  %57 = shl i32 %56, 14
  %58 = shl nsw i32 %55, 15
  %59 = add i32 %58, %57
  %60 = lshr i32 %42, 1
  br label %76

61:                                               ; preds = %35
  %62 = or i32 %48, 32768
  %63 = zext i8 %45 to i64
  %64 = getelementptr inbounds [16 x i16], [16 x i16]* @estimateSqrt32.sqrtEvenAdjustments, i64 0, i64 %63
  %65 = load i16, i16* %64, align 2
  %66 = zext i16 %65 to i32
  %67 = sub nsw i32 %62, %66
  %68 = udiv i32 %42, %67
  %69 = add i32 %67, %68
  %70 = icmp ugt i32 %69, 131071
  %71 = shl i32 %69, 15
  %72 = select i1 %70, i32 -32768, i32 %71
  %73 = icmp ugt i32 %72, %42
  br i1 %73, label %76, label %74

74:                                               ; preds = %61
  %75 = ashr i32 %42, 1
  br label %86

76:                                               ; preds = %61, %49
  %77 = phi i32 [ %60, %49 ], [ %42, %61 ]
  %78 = phi i32 [ %59, %49 ], [ %72, %61 ]
  %79 = zext i32 %77 to i64
  %80 = shl nuw nsw i64 %79, 31
  %81 = zext i32 %78 to i64
  %82 = udiv i64 %80, %81
  %83 = trunc i64 %82 to i32
  %84 = lshr i32 %78, 1
  %85 = add i32 %84, %83
  br label %86

86:                                               ; preds = %74, %76
  %87 = phi i32 [ %85, %76 ], [ %75, %74 ]
  %88 = zext i32 %87 to i64
  %89 = or i32 %46, 2
  %90 = zext i32 %89 to i64
  %91 = lshr i64 %36, %90
  %92 = sub nsw i32 0, %89
  %93 = and i32 %92, 63
  %94 = zext i32 %93 to i64
  %95 = shl i64 %36, %94
  %96 = shl nuw i64 %88, 32
  %97 = icmp ugt i64 %96, %91
  br i1 %97, label %98, label %121

98:                                               ; preds = %86
  %99 = udiv i64 %91, %88
  %100 = shl i64 %99, 32
  %101 = and i64 %99, 4294967295
  %102 = mul nuw i64 %101, %88
  %103 = sub i64 %91, %102
  %104 = icmp slt i64 %103, 0
  br i1 %104, label %105, label %111

105:                                              ; preds = %98, %105
  %106 = phi i64 [ %108, %105 ], [ %100, %98 ]
  %107 = phi i64 [ %109, %105 ], [ %103, %98 ]
  %108 = add i64 %106, -4294967296
  %109 = add i64 %107, %88
  %110 = icmp slt i64 %109, 0
  br i1 %110, label %105, label %111, !llvm.loop !50

111:                                              ; preds = %105, %98
  %112 = phi i64 [ %103, %98 ], [ %109, %105 ]
  %113 = phi i64 [ %100, %98 ], [ %108, %105 ]
  %114 = tail call i64 @llvm.fshl.i64(i64 %112, i64 %95, i64 32) #30
  %115 = icmp ugt i64 %96, %114
  br i1 %115, label %116, label %118

116:                                              ; preds = %111
  %117 = udiv i64 %114, %88
  br label %118

118:                                              ; preds = %116, %111
  %119 = phi i64 [ %117, %116 ], [ 4294967295, %111 ]
  %120 = or i64 %119, %113
  br label %121

121:                                              ; preds = %86, %118
  %122 = phi i64 [ %120, %118 ], [ -1, %86 ]
  %123 = shl nuw nsw i64 %88, 30
  %124 = add i64 %122, %123
  %125 = shl i64 %124, 1
  %126 = lshr i64 %124, 32
  %127 = and i64 %124, 4294967295
  %128 = mul nuw i64 %127, %127
  %129 = mul nuw i64 %126, %127
  %130 = mul nuw i64 %126, %126
  %131 = shl i64 %129, 1
  %132 = icmp ult i64 %131, %129
  %133 = select i1 %132, i64 -4294967296, i64 0
  %134 = lshr i64 %131, 32
  %135 = shl i64 %129, 33
  %136 = add i64 %135, %128
  %137 = icmp ult i64 %136, %135
  %138 = sext i1 %137 to i64
  %139 = sub i64 %95, %136
  %140 = icmp ult i64 %95, %136
  %141 = sext i1 %140 to i64
  %142 = add nuw i64 %130, %134
  %143 = sub i64 %91, %142
  %144 = add i64 %143, %133
  %145 = add i64 %144, %138
  %146 = add i64 %145, %141
  %147 = icmp slt i64 %146, 0
  br i1 %147, label %148, label %163

148:                                              ; preds = %121, %148
  %149 = phi i64 [ %154, %148 ], [ %125, %121 ]
  %150 = phi i64 [ %157, %148 ], [ %139, %121 ]
  %151 = phi i64 [ %161, %148 ], [ %146, %121 ]
  %152 = phi i64 [ %153, %148 ], [ %124, %121 ]
  %153 = add i64 %152, -1
  %154 = add i64 %149, -2
  %155 = lshr i64 %153, 63
  %156 = or i64 %154, 1
  %157 = add i64 %156, %150
  %158 = add nsw i64 %155, %151
  %159 = icmp ult i64 %157, %150
  %160 = zext i1 %159 to i64
  %161 = add nsw i64 %158, %160
  %162 = icmp slt i64 %161, 0
  br i1 %162, label %148, label %163, !llvm.loop !88

163:                                              ; preds = %148, %121
  %164 = phi i64 [ %139, %121 ], [ %157, %148 ]
  %165 = phi i64 [ %125, %121 ], [ %154, %148 ]
  %166 = icmp ugt i64 %165, %164
  br i1 %166, label %167, label %298

167:                                              ; preds = %163
  %168 = lshr i64 %165, 32
  %169 = and i64 %165, -4294967296
  %170 = icmp ugt i64 %169, %164
  br i1 %170, label %171, label %174

171:                                              ; preds = %167
  %172 = udiv i64 %164, %168
  %173 = shl i64 %172, 32
  br label %174

174:                                              ; preds = %171, %167
  %175 = phi i64 [ %173, %171 ], [ -4294967296, %167 ]
  %176 = lshr exact i64 %175, 32
  %177 = and i64 %165, 4294967294
  %178 = mul nuw i64 %176, %177
  %179 = mul nuw i64 %176, %168
  %180 = lshr i64 %178, 32
  %181 = shl i64 %178, 32
  %182 = sub i64 0, %181
  %183 = icmp ne i64 %181, 0
  %184 = sext i1 %183 to i64
  %185 = add nuw i64 %179, %180
  %186 = sub i64 %164, %185
  %187 = add i64 %186, %184
  %188 = icmp slt i64 %187, 0
  br i1 %188, label %189, label %202

189:                                              ; preds = %174
  %190 = shl i64 %165, 32
  br label %191

191:                                              ; preds = %191, %189
  %192 = phi i64 [ %175, %189 ], [ %195, %191 ]
  %193 = phi i64 [ %187, %189 ], [ %200, %191 ]
  %194 = phi i64 [ %182, %189 ], [ %196, %191 ]
  %195 = add i64 %192, -4294967296
  %196 = add i64 %194, %190
  %197 = add i64 %193, %168
  %198 = icmp ult i64 %196, %194
  %199 = zext i1 %198 to i64
  %200 = add i64 %197, %199
  %201 = icmp slt i64 %200, 0
  br i1 %201, label %191, label %202, !llvm.loop !50

202:                                              ; preds = %191, %174
  %203 = phi i64 [ %182, %174 ], [ %196, %191 ]
  %204 = phi i64 [ %187, %174 ], [ %200, %191 ]
  %205 = phi i64 [ %175, %174 ], [ %195, %191 ]
  %206 = tail call i64 @llvm.fshl.i64(i64 %204, i64 %203, i64 32) #30
  %207 = icmp ugt i64 %169, %206
  br i1 %207, label %208, label %210

208:                                              ; preds = %202
  %209 = udiv i64 %206, %168
  br label %210

210:                                              ; preds = %202, %208
  %211 = phi i64 [ %209, %208 ], [ 4294967295, %202 ]
  %212 = or i64 %211, %205
  %213 = and i64 %212, 4611686018427387902
  %214 = icmp ult i64 %213, 6
  br i1 %214, label %215, label %298

215:                                              ; preds = %210
  %216 = icmp eq i64 %212, 0
  %217 = select i1 %216, i64 1, i64 %212
  %218 = lshr i64 %217, 32
  %219 = and i64 %217, 4294967295
  %220 = mul nuw i64 %219, %177
  %221 = mul nuw i64 %218, %177
  %222 = mul nuw i64 %219, %168
  %223 = mul nuw i64 %218, %168
  %224 = add i64 %221, %222
  %225 = icmp ult i64 %224, %222
  %226 = select i1 %225, i64 -4294967296, i64 0
  %227 = lshr i64 %224, 32
  %228 = shl i64 %224, 32
  %229 = add i64 %228, %220
  %230 = icmp ult i64 %229, %228
  %231 = sext i1 %230 to i64
  %232 = sub i64 0, %229
  %233 = icmp ne i64 %229, 0
  %234 = sext i1 %233 to i64
  %235 = mul nuw i64 %219, %219
  %236 = mul nuw i64 %218, %219
  %237 = mul nuw i64 %218, %218
  %238 = shl i64 %236, 1
  %239 = icmp ult i64 %238, %236
  %240 = select i1 %239, i64 4294967296, i64 0
  %241 = lshr i64 %238, 32
  %242 = shl i64 %236, 33
  %243 = add i64 %242, %235
  %244 = icmp ult i64 %243, %242
  %245 = zext i1 %244 to i64
  %246 = add nuw i64 %241, %237
  %247 = add i64 %246, %240
  %248 = add i64 %247, %245
  %249 = sub i64 0, %243
  %250 = icmp ne i64 %243, 0
  %251 = sub i64 %232, %248
  %252 = icmp ugt i64 %248, %232
  %253 = zext i1 %250 to i64
  %254 = icmp ult i64 %251, %253
  %255 = sext i1 %254 to i64
  %256 = sub i64 %251, %253
  %257 = sext i1 %252 to i64
  %258 = add i64 %223, %227
  %259 = sub i64 %164, %258
  %260 = add i64 %259, %226
  %261 = add i64 %260, %231
  %262 = add i64 %261, %234
  %263 = add i64 %262, %257
  %264 = add i64 %263, %255
  %265 = icmp slt i64 %264, 0
  br i1 %265, label %266, label %288

266:                                              ; preds = %215, %266
  %267 = phi i64 [ %276, %266 ], [ %249, %215 ]
  %268 = phi i64 [ %281, %266 ], [ %256, %215 ]
  %269 = phi i64 [ %286, %266 ], [ %264, %215 ]
  %270 = phi i64 [ %271, %266 ], [ %217, %215 ]
  %271 = add i64 %270, -1
  %272 = shl i64 %271, 1
  %273 = lshr i64 %271, 63
  %274 = or i64 %272, 1
  %275 = or i64 %273, %165
  %276 = add i64 %274, %267
  %277 = icmp ult i64 %276, %267
  %278 = add i64 %275, %268
  %279 = icmp ult i64 %278, %268
  %280 = zext i1 %277 to i64
  %281 = add i64 %278, %280
  %282 = icmp ult i64 %281, %280
  %283 = zext i1 %282 to i64
  %284 = zext i1 %279 to i64
  %285 = add nsw i64 %269, %284
  %286 = add nsw i64 %285, %283
  %287 = icmp slt i64 %286, 0
  br i1 %287, label %266, label %288, !llvm.loop !89

288:                                              ; preds = %266, %215
  %289 = phi i64 [ %217, %215 ], [ %271, %266 ]
  %290 = phi i64 [ %264, %215 ], [ %286, %266 ]
  %291 = phi i64 [ %256, %215 ], [ %281, %266 ]
  %292 = phi i64 [ %249, %215 ], [ %276, %266 ]
  %293 = or i64 %291, %290
  %294 = or i64 %293, %292
  %295 = icmp ne i64 %294, 0
  %296 = zext i1 %295 to i64
  %297 = or i64 %289, %296
  br label %298

298:                                              ; preds = %163, %288, %210
  %299 = phi i64 [ %297, %288 ], [ %212, %210 ], [ -1, %163 ]
  %300 = shl i64 %299, 1
  %301 = lshr i64 %299, 63
  %302 = or i64 %301, %165
  %303 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 3
  %304 = load i8, i8* %303, align 1
  %305 = tail call fastcc { i64, i16 } @roundAndPackFloatx80(i8 noundef signext %304, i8 noundef zeroext 0, i32 noundef %40, i64 noundef %302, i64 noundef %300, %struct.float_status* noundef %2)
  %306 = extractvalue { i64, i16 } %305, 0
  %307 = extractvalue { i64, i16 } %305, 1
  br label %308

308:                                              ; preds = %28, %18, %14, %298, %22, %10
  %309 = phi i64 [ %12, %10 ], [ -4611686018427387904, %22 ], [ %306, %298 ], [ %0, %14 ], [ %0, %18 ], [ 0, %28 ]
  %310 = phi i16 [ %13, %10 ], [ -1, %22 ], [ %307, %298 ], [ 32767, %14 ], [ %1, %18 ], [ 0, %28 ]
  %311 = insertvalue { i64, i16 } poison, i64 %309, 0
  %312 = insertvalue { i64, i16 } %311, i16 %310, 1
  ret { i64, i16 } %312
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @floatx80_eq(i64 %0, i16 %1, i64 %2, i16 %3, %struct.float_status* nocapture noundef %4) local_unnamed_addr #2 {
  %6 = and i16 %1, 32767
  %7 = icmp ne i16 %6, 32767
  %8 = and i64 %0, 9223372036854775807
  %9 = icmp eq i64 %8, 0
  %10 = select i1 %7, i1 true, i1 %9
  br i1 %10, label %11, label %17

11:                                               ; preds = %5
  %12 = and i16 %3, 32767
  %13 = icmp ne i16 %12, 32767
  %14 = and i64 %2, 9223372036854775807
  %15 = icmp eq i64 %14, 0
  %16 = select i1 %13, i1 true, i1 %15
  br i1 %16, label %21, label %17

17:                                               ; preds = %11, %5
  %18 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %19 = load i8, i8* %18, align 1
  %20 = or i8 %19, 1
  store i8 %20, i8* %18, align 1
  br label %32

21:                                               ; preds = %11
  %22 = icmp eq i64 %0, %2
  br i1 %22, label %23, label %32

23:                                               ; preds = %21
  %24 = icmp eq i16 %1, %3
  br i1 %24, label %32, label %25

25:                                               ; preds = %23
  %26 = icmp eq i64 %0, 0
  br i1 %26, label %27, label %32

27:                                               ; preds = %25
  %28 = or i16 %3, %1
  %29 = and i16 %28, 32767
  %30 = icmp eq i16 %29, 0
  %31 = zext i1 %30 to i32
  br label %32

32:                                               ; preds = %21, %25, %27, %23, %17
  %33 = phi i32 [ 0, %17 ], [ 0, %21 ], [ 1, %23 ], [ 0, %25 ], [ %31, %27 ]
  ret i32 %33
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @floatx80_le(i64 %0, i16 %1, i64 %2, i16 %3, %struct.float_status* nocapture noundef %4) local_unnamed_addr #2 {
  %6 = and i16 %1, 32767
  %7 = icmp ne i16 %6, 32767
  %8 = and i64 %0, 9223372036854775807
  %9 = icmp eq i64 %8, 0
  %10 = select i1 %7, i1 true, i1 %9
  br i1 %10, label %11, label %17

11:                                               ; preds = %5
  %12 = and i16 %3, 32767
  %13 = icmp ne i16 %12, 32767
  %14 = and i64 %2, 9223372036854775807
  %15 = icmp eq i64 %14, 0
  %16 = select i1 %13, i1 true, i1 %15
  br i1 %16, label %21, label %17

17:                                               ; preds = %11, %5
  %18 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %19 = load i8, i8* %18, align 1
  %20 = or i8 %19, 1
  store i8 %20, i8* %18, align 1
  br label %49

21:                                               ; preds = %11
  %22 = lshr i16 %1, 15
  %23 = trunc i16 %22 to i8
  %24 = lshr i16 %3, 15
  %25 = trunc i16 %24 to i8
  %26 = icmp eq i8 %23, %25
  %27 = icmp sgt i16 %1, -1
  br i1 %26, label %36, label %28

28:                                               ; preds = %21
  br i1 %27, label %29, label %49

29:                                               ; preds = %28
  %30 = or i16 %3, %1
  %31 = shl i16 %30, 1
  %32 = zext i16 %31 to i64
  %33 = or i64 %2, %0
  %34 = or i64 %33, %32
  %35 = icmp eq i64 %34, 0
  br label %49

36:                                               ; preds = %21
  br i1 %27, label %43, label %37

37:                                               ; preds = %36
  %38 = icmp ult i16 %3, %1
  %39 = icmp eq i16 %3, %1
  %40 = icmp ule i64 %2, %0
  %41 = and i1 %40, %39
  %42 = or i1 %38, %41
  br label %49

43:                                               ; preds = %36
  %44 = icmp ult i16 %1, %3
  %45 = icmp eq i16 %1, %3
  %46 = icmp ule i64 %0, %2
  %47 = and i1 %46, %45
  %48 = or i1 %44, %47
  br label %49

49:                                               ; preds = %37, %43, %28, %29, %17
  %50 = phi i1 [ false, %17 ], [ true, %28 ], [ %35, %29 ], [ %42, %37 ], [ %48, %43 ]
  %51 = zext i1 %50 to i32
  ret i32 %51
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @floatx80_lt(i64 %0, i16 %1, i64 %2, i16 %3, %struct.float_status* nocapture noundef %4) local_unnamed_addr #2 {
  %6 = and i16 %1, 32767
  %7 = icmp ne i16 %6, 32767
  %8 = and i64 %0, 9223372036854775807
  %9 = icmp eq i64 %8, 0
  %10 = select i1 %7, i1 true, i1 %9
  br i1 %10, label %11, label %17

11:                                               ; preds = %5
  %12 = and i16 %3, 32767
  %13 = icmp ne i16 %12, 32767
  %14 = and i64 %2, 9223372036854775807
  %15 = icmp eq i64 %14, 0
  %16 = select i1 %13, i1 true, i1 %15
  br i1 %16, label %21, label %17

17:                                               ; preds = %11, %5
  %18 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %19 = load i8, i8* %18, align 1
  %20 = or i8 %19, 1
  store i8 %20, i8* %18, align 1
  br label %49

21:                                               ; preds = %11
  %22 = lshr i16 %1, 15
  %23 = trunc i16 %22 to i8
  %24 = lshr i16 %3, 15
  %25 = trunc i16 %24 to i8
  %26 = icmp eq i8 %23, %25
  %27 = icmp sgt i16 %1, -1
  br i1 %26, label %36, label %28

28:                                               ; preds = %21
  br i1 %27, label %49, label %29

29:                                               ; preds = %28
  %30 = or i16 %3, %1
  %31 = shl i16 %30, 1
  %32 = zext i16 %31 to i64
  %33 = or i64 %2, %0
  %34 = or i64 %33, %32
  %35 = icmp ne i64 %34, 0
  br label %49

36:                                               ; preds = %21
  br i1 %27, label %43, label %37

37:                                               ; preds = %36
  %38 = icmp ult i16 %3, %1
  %39 = icmp eq i16 %3, %1
  %40 = icmp ult i64 %2, %0
  %41 = and i1 %40, %39
  %42 = or i1 %38, %41
  br label %49

43:                                               ; preds = %36
  %44 = icmp ult i16 %1, %3
  %45 = icmp eq i16 %1, %3
  %46 = icmp ult i64 %0, %2
  %47 = and i1 %46, %45
  %48 = or i1 %44, %47
  br label %49

49:                                               ; preds = %37, %43, %28, %29, %17
  %50 = phi i1 [ false, %17 ], [ false, %28 ], [ %35, %29 ], [ %42, %37 ], [ %48, %43 ]
  %51 = zext i1 %50 to i32
  ret i32 %51
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @floatx80_unordered(i64 %0, i16 %1, i64 %2, i16 %3, %struct.float_status* nocapture noundef %4) local_unnamed_addr #2 {
  %6 = and i16 %1, 32767
  %7 = icmp ne i16 %6, 32767
  %8 = and i64 %0, 9223372036854775807
  %9 = icmp eq i64 %8, 0
  %10 = select i1 %7, i1 true, i1 %9
  br i1 %10, label %11, label %17

11:                                               ; preds = %5
  %12 = and i16 %3, 32767
  %13 = icmp ne i16 %12, 32767
  %14 = and i64 %2, 9223372036854775807
  %15 = icmp eq i64 %14, 0
  %16 = select i1 %13, i1 true, i1 %15
  br i1 %16, label %21, label %17

17:                                               ; preds = %11, %5
  %18 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %19 = load i8, i8* %18, align 1
  %20 = or i8 %19, 1
  store i8 %20, i8* %18, align 1
  br label %21

21:                                               ; preds = %11, %17
  %22 = phi i32 [ 1, %17 ], [ 0, %11 ]
  ret i32 %22
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @floatx80_eq_quiet(i64 %0, i16 %1, i64 %2, i16 %3, %struct.float_status* nocapture noundef %4) local_unnamed_addr #2 {
  %6 = and i16 %1, 32767
  %7 = icmp ne i16 %6, 32767
  %8 = and i64 %0, 9223372036854775807
  %9 = icmp eq i64 %8, 0
  %10 = select i1 %7, i1 true, i1 %9
  br i1 %10, label %11, label %17

11:                                               ; preds = %5
  %12 = and i16 %3, 32767
  %13 = icmp ne i16 %12, 32767
  %14 = and i64 %2, 9223372036854775807
  %15 = icmp eq i64 %14, 0
  %16 = select i1 %13, i1 true, i1 %15
  br i1 %16, label %37, label %17

17:                                               ; preds = %11, %5
  %18 = and i64 %0, -4611686018427387905
  %19 = and i64 %0, 4611686018427387903
  %20 = icmp eq i64 %19, 0
  %21 = select i1 %7, i1 true, i1 %20
  %22 = icmp ne i64 %18, %0
  %23 = select i1 %21, i1 true, i1 %22
  br i1 %23, label %24, label %33

24:                                               ; preds = %17
  %25 = and i64 %2, -4611686018427387905
  %26 = and i16 %3, 32767
  %27 = icmp ne i16 %26, 32767
  %28 = and i64 %2, 4611686018427387903
  %29 = icmp eq i64 %28, 0
  %30 = select i1 %27, i1 true, i1 %29
  %31 = icmp ne i64 %25, %2
  %32 = select i1 %30, i1 true, i1 %31
  br i1 %32, label %48, label %33

33:                                               ; preds = %24, %17
  %34 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %35 = load i8, i8* %34, align 1
  %36 = or i8 %35, 1
  store i8 %36, i8* %34, align 1
  br label %48

37:                                               ; preds = %11
  %38 = icmp eq i64 %0, %2
  br i1 %38, label %39, label %48

39:                                               ; preds = %37
  %40 = icmp eq i16 %1, %3
  br i1 %40, label %48, label %41

41:                                               ; preds = %39
  %42 = icmp eq i64 %0, 0
  br i1 %42, label %43, label %48

43:                                               ; preds = %41
  %44 = or i16 %3, %1
  %45 = and i16 %44, 32767
  %46 = icmp eq i16 %45, 0
  %47 = zext i1 %46 to i32
  br label %48

48:                                               ; preds = %37, %41, %43, %39, %24, %33
  %49 = phi i32 [ 0, %33 ], [ 0, %24 ], [ 0, %37 ], [ 1, %39 ], [ 0, %41 ], [ %47, %43 ]
  ret i32 %49
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @floatx80_le_quiet(i64 %0, i16 %1, i64 %2, i16 %3, %struct.float_status* nocapture noundef %4) local_unnamed_addr #2 {
  %6 = and i16 %1, 32767
  %7 = icmp ne i16 %6, 32767
  %8 = and i64 %0, 9223372036854775807
  %9 = icmp eq i64 %8, 0
  %10 = select i1 %7, i1 true, i1 %9
  br i1 %10, label %11, label %17

11:                                               ; preds = %5
  %12 = and i16 %3, 32767
  %13 = icmp ne i16 %12, 32767
  %14 = and i64 %2, 9223372036854775807
  %15 = icmp eq i64 %14, 0
  %16 = select i1 %13, i1 true, i1 %15
  br i1 %16, label %37, label %17

17:                                               ; preds = %11, %5
  %18 = and i64 %0, -4611686018427387905
  %19 = and i64 %0, 4611686018427387903
  %20 = icmp eq i64 %19, 0
  %21 = select i1 %7, i1 true, i1 %20
  %22 = icmp ne i64 %18, %0
  %23 = select i1 %21, i1 true, i1 %22
  br i1 %23, label %24, label %33

24:                                               ; preds = %17
  %25 = and i64 %2, -4611686018427387905
  %26 = and i16 %3, 32767
  %27 = icmp ne i16 %26, 32767
  %28 = and i64 %2, 4611686018427387903
  %29 = icmp eq i64 %28, 0
  %30 = select i1 %27, i1 true, i1 %29
  %31 = icmp ne i64 %25, %2
  %32 = select i1 %30, i1 true, i1 %31
  br i1 %32, label %65, label %33

33:                                               ; preds = %24, %17
  %34 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %35 = load i8, i8* %34, align 1
  %36 = or i8 %35, 1
  store i8 %36, i8* %34, align 1
  br label %65

37:                                               ; preds = %11
  %38 = lshr i16 %1, 15
  %39 = trunc i16 %38 to i8
  %40 = lshr i16 %3, 15
  %41 = trunc i16 %40 to i8
  %42 = icmp eq i8 %39, %41
  %43 = icmp sgt i16 %1, -1
  br i1 %42, label %52, label %44

44:                                               ; preds = %37
  br i1 %43, label %45, label %65

45:                                               ; preds = %44
  %46 = or i16 %3, %1
  %47 = shl i16 %46, 1
  %48 = zext i16 %47 to i64
  %49 = or i64 %2, %0
  %50 = or i64 %49, %48
  %51 = icmp eq i64 %50, 0
  br label %65

52:                                               ; preds = %37
  br i1 %43, label %59, label %53

53:                                               ; preds = %52
  %54 = icmp ult i16 %3, %1
  %55 = icmp eq i16 %3, %1
  %56 = icmp ule i64 %2, %0
  %57 = and i1 %56, %55
  %58 = or i1 %54, %57
  br label %65

59:                                               ; preds = %52
  %60 = icmp ult i16 %1, %3
  %61 = icmp eq i16 %1, %3
  %62 = icmp ule i64 %0, %2
  %63 = and i1 %62, %61
  %64 = or i1 %60, %63
  br label %65

65:                                               ; preds = %53, %59, %44, %45, %24, %33
  %66 = phi i1 [ false, %33 ], [ false, %24 ], [ true, %44 ], [ %51, %45 ], [ %58, %53 ], [ %64, %59 ]
  %67 = zext i1 %66 to i32
  ret i32 %67
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @floatx80_lt_quiet(i64 %0, i16 %1, i64 %2, i16 %3, %struct.float_status* nocapture noundef %4) local_unnamed_addr #2 {
  %6 = and i16 %1, 32767
  %7 = icmp ne i16 %6, 32767
  %8 = and i64 %0, 9223372036854775807
  %9 = icmp eq i64 %8, 0
  %10 = select i1 %7, i1 true, i1 %9
  br i1 %10, label %11, label %17

11:                                               ; preds = %5
  %12 = and i16 %3, 32767
  %13 = icmp ne i16 %12, 32767
  %14 = and i64 %2, 9223372036854775807
  %15 = icmp eq i64 %14, 0
  %16 = select i1 %13, i1 true, i1 %15
  br i1 %16, label %37, label %17

17:                                               ; preds = %11, %5
  %18 = and i64 %0, -4611686018427387905
  %19 = and i64 %0, 4611686018427387903
  %20 = icmp eq i64 %19, 0
  %21 = select i1 %7, i1 true, i1 %20
  %22 = icmp ne i64 %18, %0
  %23 = select i1 %21, i1 true, i1 %22
  br i1 %23, label %24, label %33

24:                                               ; preds = %17
  %25 = and i64 %2, -4611686018427387905
  %26 = and i16 %3, 32767
  %27 = icmp ne i16 %26, 32767
  %28 = and i64 %2, 4611686018427387903
  %29 = icmp eq i64 %28, 0
  %30 = select i1 %27, i1 true, i1 %29
  %31 = icmp ne i64 %25, %2
  %32 = select i1 %30, i1 true, i1 %31
  br i1 %32, label %65, label %33

33:                                               ; preds = %24, %17
  %34 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %35 = load i8, i8* %34, align 1
  %36 = or i8 %35, 1
  store i8 %36, i8* %34, align 1
  br label %65

37:                                               ; preds = %11
  %38 = lshr i16 %1, 15
  %39 = trunc i16 %38 to i8
  %40 = lshr i16 %3, 15
  %41 = trunc i16 %40 to i8
  %42 = icmp eq i8 %39, %41
  %43 = icmp sgt i16 %1, -1
  br i1 %42, label %52, label %44

44:                                               ; preds = %37
  br i1 %43, label %65, label %45

45:                                               ; preds = %44
  %46 = or i16 %3, %1
  %47 = shl i16 %46, 1
  %48 = zext i16 %47 to i64
  %49 = or i64 %2, %0
  %50 = or i64 %49, %48
  %51 = icmp ne i64 %50, 0
  br label %65

52:                                               ; preds = %37
  br i1 %43, label %59, label %53

53:                                               ; preds = %52
  %54 = icmp ult i16 %3, %1
  %55 = icmp eq i16 %3, %1
  %56 = icmp ult i64 %2, %0
  %57 = and i1 %56, %55
  %58 = or i1 %54, %57
  br label %65

59:                                               ; preds = %52
  %60 = icmp ult i16 %1, %3
  %61 = icmp eq i16 %1, %3
  %62 = icmp ult i64 %0, %2
  %63 = and i1 %62, %61
  %64 = or i1 %60, %63
  br label %65

65:                                               ; preds = %53, %59, %44, %45, %24, %33
  %66 = phi i1 [ false, %33 ], [ false, %24 ], [ false, %44 ], [ %51, %45 ], [ %58, %53 ], [ %64, %59 ]
  %67 = zext i1 %66 to i32
  ret i32 %67
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @floatx80_unordered_quiet(i64 %0, i16 %1, i64 %2, i16 %3, %struct.float_status* nocapture noundef %4) local_unnamed_addr #2 {
  %6 = and i16 %1, 32767
  %7 = icmp ne i16 %6, 32767
  %8 = and i64 %0, 9223372036854775807
  %9 = icmp eq i64 %8, 0
  %10 = select i1 %7, i1 true, i1 %9
  br i1 %10, label %11, label %17

11:                                               ; preds = %5
  %12 = and i16 %3, 32767
  %13 = icmp ne i16 %12, 32767
  %14 = and i64 %2, 9223372036854775807
  %15 = icmp eq i64 %14, 0
  %16 = select i1 %13, i1 true, i1 %15
  br i1 %16, label %37, label %17

17:                                               ; preds = %11, %5
  %18 = and i64 %0, -4611686018427387905
  %19 = and i64 %0, 4611686018427387903
  %20 = icmp eq i64 %19, 0
  %21 = select i1 %7, i1 true, i1 %20
  %22 = icmp ne i64 %18, %0
  %23 = select i1 %21, i1 true, i1 %22
  br i1 %23, label %24, label %33

24:                                               ; preds = %17
  %25 = and i64 %2, -4611686018427387905
  %26 = and i16 %3, 32767
  %27 = icmp ne i16 %26, 32767
  %28 = and i64 %2, 4611686018427387903
  %29 = icmp eq i64 %28, 0
  %30 = select i1 %27, i1 true, i1 %29
  %31 = icmp ne i64 %25, %2
  %32 = select i1 %30, i1 true, i1 %31
  br i1 %32, label %37, label %33

33:                                               ; preds = %24, %17
  %34 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %35 = load i8, i8* %34, align 1
  %36 = or i8 %35, 1
  store i8 %36, i8* %34, align 1
  br label %37

37:                                               ; preds = %11, %24, %33
  %38 = phi i32 [ 1, %33 ], [ 1, %24 ], [ 0, %11 ]
  ret i32 %38
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define i32 @float128_to_int32(i64 %0, i64 %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #14 {
  %4 = and i64 %1, 281474976710655
  %5 = lshr i64 %1, 48
  %6 = trunc i64 %5 to i32
  %7 = and i32 %6, 32767
  %8 = lshr i64 %1, 63
  %9 = trunc i64 %8 to i8
  %10 = icmp eq i32 %7, 32767
  %11 = or i64 %4, %0
  %12 = icmp eq i64 %11, 0
  %13 = select i1 %12, i8 %9, i8 0
  %14 = select i1 %10, i8 %13, i8 %9
  %15 = icmp eq i32 %7, 0
  %16 = icmp ne i64 %0, 0
  %17 = zext i1 %16 to i64
  %18 = or i64 %4, %17
  br i1 %15, label %34, label %19

19:                                               ; preds = %3
  %20 = or i64 %18, 281474976710656
  %21 = icmp ult i32 %7, 16424
  br i1 %21, label %22, label %38

22:                                               ; preds = %19
  %23 = icmp ugt i32 %7, 16360
  br i1 %23, label %24, label %34

24:                                               ; preds = %22
  %25 = sub nuw nsw i32 16424, %7
  %26 = add nuw nsw i64 %5, 24
  %27 = zext i32 %25 to i64
  %28 = lshr i64 %20, %27
  %29 = and i64 %26, 63
  %30 = shl i64 %20, %29
  %31 = icmp ne i64 %30, 0
  %32 = zext i1 %31 to i64
  %33 = or i64 %28, %32
  br label %38

34:                                               ; preds = %3, %22
  %35 = phi i64 [ 1, %22 ], [ %18, %3 ]
  %36 = icmp ne i64 %35, 0
  %37 = zext i1 %36 to i64
  br label %38

38:                                               ; preds = %34, %24, %19
  %39 = phi i64 [ %20, %19 ], [ %33, %24 ], [ %37, %34 ]
  %40 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 1
  %41 = load i8, i8* %40, align 1
  %42 = icmp eq i8 %41, 0
  br i1 %42, label %53, label %43

43:                                               ; preds = %38
  %44 = icmp eq i8 %41, 3
  br i1 %44, label %53, label %45

45:                                               ; preds = %43
  %46 = icmp eq i8 %14, 0
  br i1 %46, label %50, label %47

47:                                               ; preds = %45
  %48 = icmp eq i8 %41, 2
  %49 = select i1 %48, i64 0, i64 127
  br label %53

50:                                               ; preds = %45
  %51 = icmp eq i8 %41, 1
  %52 = select i1 %51, i64 0, i64 127
  br label %53

53:                                               ; preds = %50, %47, %43, %38
  %54 = phi i64 [ 64, %38 ], [ 0, %43 ], [ %49, %47 ], [ %52, %50 ]
  %55 = trunc i64 %39 to i8
  %56 = and i8 %55, 127
  %57 = add i64 %54, %39
  %58 = lshr i64 %57, 7
  %59 = icmp eq i8 %56, 64
  %60 = and i1 %42, %59
  %61 = zext i1 %60 to i64
  %62 = xor i64 %61, -1
  %63 = and i64 %58, %62
  %64 = trunc i64 %63 to i32
  %65 = icmp eq i8 %14, 0
  %66 = sub nsw i32 0, %64
  %67 = select i1 %65, i32 %64, i32 %66
  %68 = icmp ult i64 %57, 549755813888
  br i1 %68, label %69, label %75

69:                                               ; preds = %53
  %70 = icmp eq i32 %67, 0
  br i1 %70, label %80, label %71

71:                                               ; preds = %69
  %72 = lshr i32 %67, 31
  %73 = zext i8 %14 to i32
  %74 = icmp eq i32 %72, %73
  br i1 %74, label %80, label %75

75:                                               ; preds = %71, %53
  %76 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %77 = load i8, i8* %76, align 1
  %78 = or i8 %77, 1
  store i8 %78, i8* %76, align 1
  %79 = select i1 %65, i32 2147483647, i32 -2147483648
  br label %86

80:                                               ; preds = %71, %69
  %81 = icmp eq i8 %56, 0
  br i1 %81, label %86, label %82

82:                                               ; preds = %80
  %83 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %84 = load i8, i8* %83, align 1
  %85 = or i8 %84, 32
  store i8 %85, i8* %83, align 1
  br label %86

86:                                               ; preds = %75, %80, %82
  %87 = phi i32 [ %79, %75 ], [ %67, %82 ], [ %67, %80 ]
  ret i32 %87
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @float128_to_int32_round_to_zero(i64 %0, i64 %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #2 {
  %4 = and i64 %1, 281474976710655
  %5 = lshr i64 %1, 48
  %6 = trunc i64 %5 to i32
  %7 = and i32 %6, 32767
  %8 = lshr i64 %1, 63
  %9 = trunc i64 %8 to i8
  %10 = icmp ne i64 %0, 0
  %11 = zext i1 %10 to i64
  %12 = or i64 %4, %11
  %13 = icmp ugt i32 %7, 16414
  br i1 %13, label %14, label %19

14:                                               ; preds = %3
  %15 = icmp eq i32 %7, 32767
  %16 = icmp ne i64 %12, 0
  %17 = select i1 %15, i1 %16, i1 false
  %18 = select i1 %17, i8 0, i8 %9
  br label %41

19:                                               ; preds = %3
  %20 = icmp ult i32 %7, 16383
  br i1 %20, label %21, label %29

21:                                               ; preds = %19
  %22 = icmp ne i32 %7, 0
  %23 = icmp ne i64 %12, 0
  %24 = select i1 %22, i1 true, i1 %23
  br i1 %24, label %25, label %55

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 32
  store i8 %28, i8* %26, align 1
  br label %55

29:                                               ; preds = %19
  %30 = or i64 %12, 281474976710656
  %31 = sub nuw nsw i32 16431, %7
  %32 = zext i32 %31 to i64
  %33 = lshr i64 %30, %32
  %34 = trunc i64 %33 to i32
  %35 = icmp sgt i64 %1, -1
  %36 = sub nsw i32 0, %34
  %37 = select i1 %35, i32 %34, i32 %36
  %38 = lshr i32 %37, 31
  %39 = trunc i64 %8 to i32
  %40 = icmp eq i32 %38, %39
  br i1 %40, label %48, label %41

41:                                               ; preds = %14, %29
  %42 = phi i8 [ %9, %29 ], [ %18, %14 ]
  %43 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %44 = load i8, i8* %43, align 1
  %45 = or i8 %44, 1
  store i8 %45, i8* %43, align 1
  %46 = icmp eq i8 %42, 0
  %47 = select i1 %46, i32 2147483647, i32 -2147483648
  br label %55

48:                                               ; preds = %29
  %49 = shl i64 %33, %32
  %50 = icmp eq i64 %49, %30
  br i1 %50, label %55, label %51

51:                                               ; preds = %48
  %52 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %53 = load i8, i8* %52, align 1
  %54 = or i8 %53, 32
  store i8 %54, i8* %52, align 1
  br label %55

55:                                               ; preds = %48, %51, %25, %21, %41
  %56 = phi i32 [ %47, %41 ], [ 0, %21 ], [ 0, %25 ], [ %37, %51 ], [ %37, %48 ]
  ret i32 %56
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define i64 @float128_to_int64(i64 %0, i64 %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #14 {
  %4 = and i64 %1, 281474976710655
  %5 = lshr i64 %1, 48
  %6 = trunc i64 %5 to i32
  %7 = and i32 %6, 32767
  %8 = lshr i64 %1, 63
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %56, label %10

10:                                               ; preds = %3
  %11 = or i64 %4, 281474976710656
  %12 = add nsw i32 %7, -16431
  %13 = icmp ugt i32 %7, 16430
  br i1 %13, label %14, label %38

14:                                               ; preds = %10
  %15 = icmp ugt i32 %7, 16446
  br i1 %15, label %16, label %28

16:                                               ; preds = %14
  %17 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %18 = load i8, i8* %17, align 1
  %19 = or i8 %18, 1
  store i8 %19, i8* %17, align 1
  %20 = icmp sgt i64 %1, -1
  br i1 %20, label %119, label %21

21:                                               ; preds = %16
  %22 = icmp eq i32 %7, 32767
  br i1 %22, label %23, label %27

23:                                               ; preds = %21
  %24 = icmp ne i64 %0, 0
  %25 = icmp ne i64 %11, 281474976710656
  %26 = select i1 %24, i1 true, i1 %25
  br i1 %26, label %119, label %27

27:                                               ; preds = %23, %21
  br label %119

28:                                               ; preds = %14
  %29 = zext i32 %12 to i64
  %30 = shl i64 %0, %29
  %31 = icmp eq i32 %12, 0
  br i1 %31, label %61, label %32

32:                                               ; preds = %28
  %33 = shl i64 %11, %29
  %34 = sub nsw i64 47, %5
  %35 = and i64 %34, 63
  %36 = lshr i64 %0, %35
  %37 = or i64 %33, %36
  br label %61

38:                                               ; preds = %10
  %39 = icmp ugt i32 %7, 16367
  br i1 %39, label %40, label %50

40:                                               ; preds = %38
  %41 = sub nuw nsw i32 16431, %7
  %42 = add nuw nsw i64 %5, 17
  %43 = and i64 %42, 63
  %44 = shl i64 %11, %43
  %45 = icmp ne i64 %0, 0
  %46 = zext i1 %45 to i64
  %47 = or i64 %44, %46
  %48 = zext i32 %41 to i64
  %49 = lshr i64 %11, %48
  br label %61

50:                                               ; preds = %38
  %51 = icmp eq i32 %7, 16367
  br i1 %51, label %52, label %56

52:                                               ; preds = %50
  %53 = icmp ne i64 %0, 0
  %54 = zext i1 %53 to i64
  %55 = or i64 %11, %54
  br label %61

56:                                               ; preds = %3, %50
  %57 = phi i64 [ %11, %50 ], [ %4, %3 ]
  %58 = or i64 %57, %0
  %59 = icmp ne i64 %58, 0
  %60 = zext i1 %59 to i64
  br label %61

61:                                               ; preds = %56, %52, %40, %32, %28
  %62 = phi i64 [ %37, %32 ], [ %11, %28 ], [ %49, %40 ], [ 0, %52 ], [ 0, %56 ]
  %63 = phi i64 [ %30, %32 ], [ %30, %28 ], [ %47, %40 ], [ %55, %52 ], [ %60, %56 ]
  %64 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 1
  %65 = load i8, i8* %64, align 1
  %66 = icmp eq i8 %65, 0
  %67 = lshr i64 %63, 63
  %68 = trunc i64 %67 to i8
  br i1 %66, label %83, label %69

69:                                               ; preds = %61
  %70 = icmp eq i8 %65, 3
  br i1 %70, label %96, label %71

71:                                               ; preds = %69
  %72 = icmp sgt i64 %1, -1
  br i1 %72, label %78, label %73

73:                                               ; preds = %71
  %74 = icmp eq i8 %65, 1
  %75 = icmp ne i64 %63, 0
  %76 = and i1 %75, %74
  %77 = zext i1 %76 to i8
  br label %83

78:                                               ; preds = %71
  %79 = icmp eq i8 %65, 2
  %80 = icmp ne i64 %63, 0
  %81 = and i1 %80, %79
  %82 = zext i1 %81 to i8
  br label %83

83:                                               ; preds = %78, %73, %61
  %84 = phi i8 [ %68, %61 ], [ %77, %73 ], [ %82, %78 ]
  %85 = icmp eq i8 %84, 0
  br i1 %85, label %96, label %86

86:                                               ; preds = %83
  %87 = add i64 %62, 1
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %107, label %89

89:                                               ; preds = %86
  %90 = and i64 %63, 9223372036854775807
  %91 = icmp eq i64 %90, 0
  %92 = and i1 %91, %66
  %93 = zext i1 %92 to i64
  %94 = xor i64 %93, -1
  %95 = and i64 %87, %94
  br label %96

96:                                               ; preds = %89, %83, %69
  %97 = phi i64 [ %95, %89 ], [ %62, %83 ], [ %62, %69 ]
  %98 = icmp sgt i64 %1, -1
  %99 = sub nsw i64 0, %97
  %100 = select i1 %98, i64 %97, i64 %99
  %101 = icmp eq i64 %100, 0
  %102 = lshr i64 %100, 63
  %103 = trunc i64 %102 to i32
  %104 = trunc i64 %8 to i32
  %105 = icmp eq i32 %103, %104
  %106 = select i1 %101, i1 true, i1 %105
  br i1 %106, label %113, label %107

107:                                              ; preds = %96, %86
  %108 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %109 = load i8, i8* %108, align 1
  %110 = or i8 %109, 1
  store i8 %110, i8* %108, align 1
  %111 = icmp sgt i64 %1, -1
  %112 = select i1 %111, i64 9223372036854775807, i64 -9223372036854775808
  br label %119

113:                                              ; preds = %96
  %114 = icmp eq i64 %63, 0
  br i1 %114, label %119, label %115

115:                                              ; preds = %113
  %116 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %117 = load i8, i8* %116, align 1
  %118 = or i8 %117, 32
  store i8 %118, i8* %116, align 1
  br label %119

119:                                              ; preds = %115, %113, %107, %16, %23, %27
  %120 = phi i64 [ -9223372036854775808, %27 ], [ 9223372036854775807, %23 ], [ 9223372036854775807, %16 ], [ %112, %107 ], [ %100, %115 ], [ %100, %113 ]
  ret i64 %120
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i64 @float128_to_int64_round_to_zero(i64 %0, i64 %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #2 {
  %4 = and i64 %1, 281474976710655
  %5 = lshr i64 %1, 48
  %6 = trunc i64 %5 to i32
  %7 = and i32 %6, 32767
  %8 = icmp eq i32 %7, 0
  %9 = or i64 %4, 281474976710656
  %10 = select i1 %8, i64 %4, i64 %9
  %11 = add nsw i32 %7, -16431
  %12 = icmp ugt i32 %7, 16431
  br i1 %12, label %13, label %45

13:                                               ; preds = %3
  %14 = icmp ugt i32 %7, 16445
  br i1 %14, label %15, label %36

15:                                               ; preds = %13
  %16 = icmp eq i64 %1, -4594234569871327232
  %17 = icmp ult i64 %0, 562949953421312
  %18 = select i1 %16, i1 %17, i1 false
  br i1 %18, label %19, label %25

19:                                               ; preds = %15
  %20 = icmp eq i64 %0, 0
  br i1 %20, label %35, label %21

21:                                               ; preds = %19
  %22 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %23 = load i8, i8* %22, align 1
  %24 = or i8 %23, 32
  store i8 %24, i8* %22, align 1
  br label %35

25:                                               ; preds = %15
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 1
  store i8 %28, i8* %26, align 1
  %29 = icmp sgt i64 %1, -1
  br i1 %29, label %78, label %30

30:                                               ; preds = %25
  %31 = icmp ne i32 %7, 32767
  %32 = or i64 %4, %0
  %33 = icmp eq i64 %32, 0
  %34 = select i1 %31, i1 true, i1 %33
  br i1 %34, label %35, label %78

35:                                               ; preds = %30, %19, %21
  br label %78

36:                                               ; preds = %13
  %37 = zext i32 %11 to i64
  %38 = shl i64 %10, %37
  %39 = sub nsw i64 47, %5
  %40 = and i64 %39, 63
  %41 = lshr i64 %0, %40
  %42 = or i64 %38, %41
  %43 = shl i64 %0, %37
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %73, label %68

45:                                               ; preds = %3
  %46 = icmp ult i32 %7, 16383
  br i1 %46, label %47, label %56

47:                                               ; preds = %45
  %48 = zext i32 %7 to i64
  %49 = or i64 %48, %0
  %50 = or i64 %49, %10
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %78, label %52

52:                                               ; preds = %47
  %53 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %54 = load i8, i8* %53, align 1
  %55 = or i8 %54, 32
  store i8 %55, i8* %53, align 1
  br label %78

56:                                               ; preds = %45
  %57 = sub nuw nsw i32 16431, %7
  %58 = zext i32 %57 to i64
  %59 = lshr i64 %10, %58
  %60 = icmp eq i64 %0, 0
  br i1 %60, label %61, label %68

61:                                               ; preds = %56
  %62 = icmp eq i32 %11, 0
  br i1 %62, label %73, label %63

63:                                               ; preds = %61
  %64 = and i32 %11, 63
  %65 = zext i32 %64 to i64
  %66 = shl i64 %10, %65
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %73, label %68

68:                                               ; preds = %56, %63, %36
  %69 = phi i64 [ %42, %36 ], [ %59, %63 ], [ %59, %56 ]
  %70 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %71 = load i8, i8* %70, align 1
  %72 = or i8 %71, 32
  store i8 %72, i8* %70, align 1
  br label %73

73:                                               ; preds = %68, %61, %63, %36
  %74 = phi i64 [ %42, %36 ], [ %59, %63 ], [ %59, %61 ], [ %69, %68 ]
  %75 = icmp sgt i64 %1, -1
  %76 = sub nsw i64 0, %74
  %77 = select i1 %75, i64 %74, i64 %76
  br label %78

78:                                               ; preds = %47, %52, %25, %30, %73, %35
  %79 = phi i64 [ -9223372036854775808, %35 ], [ %77, %73 ], [ 9223372036854775807, %30 ], [ 9223372036854775807, %25 ], [ 0, %52 ], [ 0, %47 ]
  ret i64 %79
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define i32 @float128_to_float32(i64 %0, i64 %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #14 {
  %4 = and i64 %1, 281474976710655
  %5 = lshr i64 %1, 48
  %6 = trunc i64 %5 to i32
  %7 = and i32 %6, 32767
  %8 = lshr i64 %1, 63
  %9 = icmp eq i32 %7, 32767
  br i1 %9, label %10, label %42

10:                                               ; preds = %3
  %11 = or i64 %4, %0
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %38, label %13

13:                                               ; preds = %10
  %14 = and i64 %1, 9223231299366420480
  %15 = icmp eq i64 %14, 9223090561878065152
  br i1 %15, label %16, label %25

16:                                               ; preds = %13
  %17 = icmp eq i64 %0, 0
  %18 = and i64 %1, 140737488355327
  %19 = icmp eq i64 %18, 0
  %20 = select i1 %17, i1 %19, i1 false
  br i1 %20, label %25, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %23 = load i8, i8* %22, align 1, !noalias !90
  %24 = or i8 %23, 1
  store i8 %24, i8* %22, align 1, !noalias !90
  br label %25

25:                                               ; preds = %13, %16, %21
  %26 = tail call i64 @llvm.fshl.i64(i64 %1, i64 %0, i64 16) #30
  %27 = getelementptr %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %28 = load i8, i8* %27, align 1
  %29 = lshr i64 %26, 41
  %30 = icmp ne i8 %28, 0
  %31 = icmp ult i64 %26, 2199023255552
  %32 = select i1 %30, i1 true, i1 %31
  %33 = shl nuw nsw i64 %8, 31
  %34 = or i64 %33, %29
  %35 = trunc i64 %34 to i32
  %36 = or i32 %35, 2139095040
  %37 = select i1 %32, i32 -4194304, i32 %36
  br label %61

38:                                               ; preds = %10
  %39 = trunc i64 %8 to i32
  %40 = shl nuw i32 %39, 31
  %41 = or i32 %40, 2139095040
  br label %61

42:                                               ; preds = %3
  %43 = trunc i64 %8 to i8
  %44 = icmp ne i64 %0, 0
  %45 = zext i1 %44 to i64
  %46 = lshr i64 %4, 18
  %47 = and i64 %1, 262143
  %48 = or i64 %47, %45
  %49 = icmp ne i64 %48, 0
  %50 = zext i1 %49 to i64
  %51 = or i64 %46, %50
  %52 = trunc i64 %51 to i32
  %53 = icmp ne i32 %7, 0
  %54 = icmp ne i32 %52, 0
  %55 = select i1 %53, i1 true, i1 %54
  %56 = or i32 %52, 1073741824
  %57 = add nsw i32 %7, -16257
  %58 = select i1 %55, i32 %57, i32 0
  %59 = select i1 %55, i32 %56, i32 0
  %60 = tail call fastcc i32 @roundAndPackFloat32(i8 noundef zeroext %43, i32 noundef %58, i32 noundef %59, %struct.float_status* noundef %2)
  br label %61

61:                                               ; preds = %42, %38, %25
  %62 = phi i32 [ %37, %25 ], [ %41, %38 ], [ %60, %42 ]
  ret i32 %62
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define i64 @float128_to_float64(i64 %0, i64 %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #14 {
  %4 = and i64 %1, 281474976710655
  %5 = lshr i64 %1, 48
  %6 = trunc i64 %5 to i32
  %7 = and i32 %6, 32767
  %8 = icmp eq i32 %7, 32767
  br i1 %8, label %9, label %39

9:                                                ; preds = %3
  %10 = or i64 %4, %0
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %36, label %12

12:                                               ; preds = %9
  %13 = and i64 %1, 9223231299366420480
  %14 = icmp eq i64 %13, 9223090561878065152
  br i1 %14, label %15, label %24

15:                                               ; preds = %12
  %16 = icmp eq i64 %0, 0
  %17 = and i64 %1, 140737488355327
  %18 = icmp eq i64 %17, 0
  %19 = select i1 %16, i1 %18, i1 false
  br i1 %19, label %24, label %20

20:                                               ; preds = %15
  %21 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %22 = load i8, i8* %21, align 1, !noalias !93
  %23 = or i8 %22, 1
  store i8 %23, i8* %21, align 1, !noalias !93
  br label %24

24:                                               ; preds = %12, %15, %20
  %25 = tail call i64 @llvm.fshl.i64(i64 %1, i64 %0, i64 16) #30
  %26 = getelementptr %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %27 = load i8, i8* %26, align 1
  %28 = lshr i64 %25, 12
  %29 = icmp ne i8 %27, 0
  %30 = icmp ult i64 %25, 4096
  %31 = select i1 %29, i1 true, i1 %30
  %32 = and i64 %1, -9223372036854775808
  %33 = or i64 %32, %28
  %34 = or i64 %33, 9218868437227405312
  %35 = select i1 %31, i64 -2251799813685248, i64 %34
  br label %55

36:                                               ; preds = %9
  %37 = and i64 %1, -9223372036854775808
  %38 = or i64 %37, 9218868437227405312
  br label %55

39:                                               ; preds = %3
  %40 = lshr i64 %1, 63
  %41 = trunc i64 %40 to i8
  %42 = tail call i64 @llvm.fshl.i64(i64 %4, i64 %0, i64 14)
  %43 = and i64 %0, 1125899906842623
  %44 = icmp ne i64 %43, 0
  %45 = zext i1 %44 to i64
  %46 = or i64 %42, %45
  %47 = icmp ne i32 %7, 0
  %48 = icmp ne i64 %46, 0
  %49 = select i1 %47, i1 true, i1 %48
  %50 = or i64 %46, 4611686018427387904
  %51 = add nsw i32 %7, -15361
  %52 = select i1 %49, i64 %50, i64 0
  %53 = select i1 %49, i32 %51, i32 0
  %54 = tail call fastcc i64 @roundAndPackFloat64(i8 noundef zeroext %41, i32 noundef %53, i64 noundef %52, %struct.float_status* noundef %2)
  br label %55

55:                                               ; preds = %39, %36, %24
  %56 = phi i64 [ %35, %24 ], [ %38, %36 ], [ %54, %39 ]
  ret i64 %56
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define { i64, i16 } @float128_to_floatx80(i64 %0, i64 %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #14 {
  %4 = and i64 %1, 281474976710655
  %5 = lshr i64 %1, 48
  %6 = trunc i64 %5 to i32
  %7 = and i32 %6, 32767
  %8 = lshr i64 %1, 63
  %9 = trunc i64 %8 to i8
  switch i32 %7, label %91 [
    i32 32767, label %10
    i32 0, label %46
  ]

10:                                               ; preds = %3
  %11 = or i64 %4, %0
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %41, label %13

13:                                               ; preds = %10
  %14 = and i64 %1, 9223231299366420480
  %15 = icmp eq i64 %14, 9223090561878065152
  br i1 %15, label %16, label %25

16:                                               ; preds = %13
  %17 = icmp eq i64 %0, 0
  %18 = and i64 %1, 140737488355327
  %19 = icmp eq i64 %18, 0
  %20 = select i1 %17, i1 %19, i1 false
  br i1 %20, label %25, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %23 = load i8, i8* %22, align 1, !noalias !96
  %24 = or i8 %23, 1
  store i8 %24, i8* %22, align 1, !noalias !96
  br label %25

25:                                               ; preds = %13, %16, %21
  %26 = tail call i64 @llvm.fshl.i64(i64 %1, i64 %0, i64 16) #30
  %27 = getelementptr %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %28 = load i8, i8* %27, align 1
  %29 = icmp ne i8 %28, 0
  %30 = icmp ult i64 %26, 2
  %31 = select i1 %29, i1 true, i1 %30
  %32 = lshr i64 %26, 1
  %33 = or i64 %32, -9223372036854775808
  %34 = trunc i64 %8 to i16
  %35 = shl nuw i16 %34, 15
  %36 = or i16 %35, 32767
  %37 = select i1 %31, i64 -4611686018427387904, i64 %33
  %38 = select i1 %31, i16 -1, i16 %36
  %39 = insertvalue { i64, i16 } poison, i64 %37, 0
  %40 = insertvalue { i64, i16 } %39, i16 %38, 1
  br label %100

41:                                               ; preds = %10
  %42 = trunc i64 %8 to i16
  %43 = shl nuw i16 %42, 15
  %44 = or i16 %43, 32767
  %45 = insertvalue { i64, i16 } { i64 -9223372036854775808, i16 poison }, i16 %44, 1
  br label %100

46:                                               ; preds = %3
  %47 = or i64 %4, %0
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %49, label %53

49:                                               ; preds = %46
  %50 = trunc i64 %8 to i16
  %51 = shl nuw i16 %50, 15
  %52 = insertvalue { i64, i16 } { i64 0, i16 poison }, i16 %51, 1
  br label %100

53:                                               ; preds = %46
  %54 = icmp eq i64 %4, 0
  br i1 %54, label %55, label %75

55:                                               ; preds = %53
  %ctlz.sh = lshr i64 %0, 1
  %ctlz.step = or i64 %0, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %56 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %56, 6148914691236517205
  %ctpop.sh = lshr i64 %56, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %57 = trunc i64 %ctpop.part to i8
  %58 = add nsw i8 %57, -15
  %59 = sext i8 %58 to i32
  %60 = icmp ult i8 %57, 15
  br i1 %60, label %61, label %68

61:                                               ; preds = %55
  %62 = sub nsw i32 0, %59
  %63 = zext i32 %62 to i64
  %64 = lshr i64 %0, %63
  %65 = and i32 %59, 63
  %66 = zext i32 %65 to i64
  %67 = shl i64 %0, %66
  br label %71

68:                                               ; preds = %55
  %69 = zext i32 %59 to i64
  %70 = shl i64 %0, %69
  br label %71

71:                                               ; preds = %68, %61
  %72 = phi i64 [ %64, %61 ], [ %70, %68 ]
  %73 = phi i64 [ %67, %61 ], [ 0, %68 ]
  %74 = sub nsw i32 -63, %59
  br label %93

75:                                               ; preds = %53
  %ctlz.sh31 = lshr i64 %4, 1
  %ctlz.step32 = or i64 %4, %ctlz.sh31
  %ctlz.sh33 = lshr i64 %ctlz.step32, 2
  %ctlz.step34 = or i64 %ctlz.step32, %ctlz.sh33
  %ctlz.sh35 = lshr i64 %ctlz.step34, 4
  %ctlz.step36 = or i64 %ctlz.step34, %ctlz.sh35
  %ctlz.sh37 = lshr i64 %ctlz.step36, 8
  %ctlz.step38 = or i64 %ctlz.step36, %ctlz.sh37
  %ctlz.sh39 = lshr i64 %ctlz.step38, 16
  %ctlz.step40 = or i64 %ctlz.step38, %ctlz.sh39
  %ctlz.sh41 = lshr i64 %ctlz.step40, 32
  %ctlz.step42 = or i64 %ctlz.step40, %ctlz.sh41
  %76 = xor i64 %ctlz.step42, -1
  %cppop.and143 = and i64 %76, 6148914691236517205
  %ctpop.sh44 = lshr i64 %76, 1
  %cppop.and245 = and i64 %ctpop.sh44, 6148914691236517205
  %ctpop.step46 = add i64 %cppop.and143, %cppop.and245
  %cppop.and147 = and i64 %ctpop.step46, 3689348814741910323
  %ctpop.sh48 = lshr i64 %ctpop.step46, 2
  %cppop.and249 = and i64 %ctpop.sh48, 3689348814741910323
  %ctpop.step50 = add i64 %cppop.and147, %cppop.and249
  %cppop.and151 = and i64 %ctpop.step50, 1085102592571150095
  %ctpop.sh52 = lshr i64 %ctpop.step50, 4
  %cppop.and253 = and i64 %ctpop.sh52, 1085102592571150095
  %ctpop.step54 = add i64 %cppop.and151, %cppop.and253
  %cppop.and155 = and i64 %ctpop.step54, 71777214294589695
  %ctpop.sh56 = lshr i64 %ctpop.step54, 8
  %cppop.and257 = and i64 %ctpop.sh56, 71777214294589695
  %ctpop.step58 = add i64 %cppop.and155, %cppop.and257
  %cppop.and159 = and i64 %ctpop.step58, 281470681808895
  %ctpop.sh60 = lshr i64 %ctpop.step58, 16
  %cppop.and261 = and i64 %ctpop.sh60, 281470681808895
  %ctpop.step62 = add i64 %cppop.and159, %cppop.and261
  %cppop.and163 = and i64 %ctpop.step62, 4294967295
  %ctpop.sh64 = lshr i64 %ctpop.step62, 32
  %cppop.and265 = and i64 %ctpop.sh64, 4294967295
  %ctpop.step66 = add i64 %cppop.and163, %cppop.and265
  %ctpop.part67 = add i64 %ctpop.step66, 0
  %77 = trunc i64 %ctpop.part67 to i32
  %78 = add nsw i32 %77, -15
  %79 = zext i32 %78 to i64
  %80 = shl i64 %0, %79
  %81 = icmp eq i32 %78, 0
  br i1 %81, label %88, label %82

82:                                               ; preds = %75
  %83 = shl i64 %4, %79
  %84 = sub nsw i64 15, %ctpop.part67
  %85 = and i64 %84, 63
  %86 = lshr i64 %0, %85
  %87 = or i64 %83, %86
  br label %88

88:                                               ; preds = %82, %75
  %89 = phi i64 [ %87, %82 ], [ %4, %75 ]
  %90 = sub nsw i32 16, %77
  br label %93

91:                                               ; preds = %3
  %92 = or i64 %4, 281474976710656
  br label %93

93:                                               ; preds = %88, %71, %91
  %94 = phi i64 [ %0, %91 ], [ %73, %71 ], [ %80, %88 ]
  %95 = phi i64 [ %92, %91 ], [ %72, %71 ], [ %89, %88 ]
  %96 = phi i32 [ %7, %91 ], [ %74, %71 ], [ %90, %88 ]
  %97 = shl i64 %94, 15
  %98 = tail call i64 @llvm.fshl.i64(i64 %95, i64 %94, i64 15)
  %99 = tail call fastcc { i64, i16 } @roundAndPackFloatx80(i8 noundef signext 80, i8 noundef zeroext %9, i32 noundef %96, i64 noundef %98, i64 noundef %97, %struct.float_status* noundef %2)
  br label %100

100:                                              ; preds = %93, %49, %41, %25
  %101 = phi { i64, i16 } [ %40, %25 ], [ %45, %41 ], [ %52, %49 ], [ %99, %93 ]
  ret { i64, i16 } %101
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define { i64, i64 } @float128_round_to_int(i64 %0, i64 %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #14 {
  %4 = lshr i64 %1, 48
  %5 = trunc i64 %4 to i32
  %6 = and i32 %5, 32767
  %7 = icmp ugt i32 %6, 16430
  br i1 %7, label %8, label %65

8:                                                ; preds = %3
  %9 = icmp ugt i32 %6, 16494
  br i1 %9, label %10, label %20

10:                                               ; preds = %8
  %11 = icmp eq i32 %6, 32767
  br i1 %11, label %12, label %138

12:                                               ; preds = %10
  %13 = and i64 %1, 281474976710655
  %14 = or i64 %13, %0
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %138, label %16

16:                                               ; preds = %12
  %17 = tail call fastcc { i64, i64 } @propagateFloat128NaN(i64 %0, i64 %1, i64 %0, i64 %1, %struct.float_status* noundef %2)
  %18 = extractvalue { i64, i64 } %17, 0
  %19 = extractvalue { i64, i64 } %17, 1
  br label %138

20:                                               ; preds = %8
  %21 = sub nuw nsw i32 16494, %6
  %22 = zext i32 %21 to i64
  %23 = shl i64 2, %22
  %24 = add i64 %23, -1
  %25 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 1
  %26 = load i8, i8* %25, align 1
  switch i8 %26, label %49 [
    i8 0, label %27
    i8 3, label %60
  ]

27:                                               ; preds = %20
  %28 = icmp ult i32 %6, 16432
  br i1 %28, label %40, label %29

29:                                               ; preds = %27
  %30 = lshr exact i64 %23, 1
  %31 = add i64 %30, %0
  %32 = icmp ult i64 %31, %0
  %33 = zext i1 %32 to i64
  %34 = add i64 %33, %1
  %35 = and i64 %31, %24
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %37, label %60

37:                                               ; preds = %29
  %38 = xor i64 %23, -1
  %39 = and i64 %31, %38
  br label %60

40:                                               ; preds = %27
  %41 = icmp slt i64 %0, 0
  br i1 %41, label %42, label %60

42:                                               ; preds = %40
  %43 = add i64 %1, 1
  %44 = and i64 %0, 9223372036854775807
  %45 = icmp eq i64 %44, 0
  %46 = and i64 %43, -2
  %47 = select i1 %45, i64 %46, i64 %43
  %48 = select i1 %45, i64 -9223372036854775808, i64 %0
  br label %60

49:                                               ; preds = %20
  %50 = lshr i64 %1, 63
  %51 = trunc i64 %50 to i8
  %52 = icmp eq i8 %26, 2
  %53 = zext i1 %52 to i8
  %54 = icmp eq i8 %51, %53
  br i1 %54, label %60, label %55

55:                                               ; preds = %49
  %56 = add i64 %24, %0
  %57 = icmp ult i64 %56, %0
  %58 = zext i1 %57 to i64
  %59 = add i64 %58, %1
  br label %60

60:                                               ; preds = %42, %20, %55, %49, %37, %29, %40
  %61 = phi i64 [ %1, %49 ], [ %59, %55 ], [ %1, %20 ], [ %1, %40 ], [ %34, %37 ], [ %34, %29 ], [ %47, %42 ]
  %62 = phi i64 [ %0, %49 ], [ %56, %55 ], [ %0, %20 ], [ %0, %40 ], [ %39, %37 ], [ %31, %29 ], [ %48, %42 ]
  %63 = sub i64 0, %23
  %64 = and i64 %62, %63
  br label %128

65:                                               ; preds = %3
  %66 = icmp ult i32 %6, 16383
  br i1 %66, label %67, label %97

67:                                               ; preds = %65
  %68 = shl i64 %1, 1
  %69 = or i64 %68, %0
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %138, label %71

71:                                               ; preds = %67
  %72 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %73 = load i8, i8* %72, align 1
  %74 = or i8 %73, 32
  store i8 %74, i8* %72, align 1
  %75 = and i64 %1, -9223372036854775808
  %76 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 1
  %77 = load i8, i8* %76, align 1
  %78 = sext i8 %77 to i32
  switch i32 %78, label %138 [
    i32 0, label %79
    i32 1, label %87
    i32 2, label %92
  ]

79:                                               ; preds = %71
  %80 = icmp eq i32 %6, 16382
  br i1 %80, label %81, label %138

81:                                               ; preds = %79
  %82 = and i64 %1, 281474976710655
  %83 = or i64 %82, %0
  %84 = icmp eq i64 %83, 0
  %85 = or i64 %75, 4611404543450677248
  %86 = select i1 %84, i64 %75, i64 %85
  br label %138

87:                                               ; preds = %71
  %88 = icmp sgt i64 %1, -1
  %89 = select i1 %88, { i64, i64 } zeroinitializer, { i64, i64 } { i64 0, i64 -4611967493404098560 }
  %90 = extractvalue { i64, i64 } %89, 1
  %91 = extractvalue { i64, i64 } %89, 0
  br label %138

92:                                               ; preds = %71
  %93 = icmp sgt i64 %1, -1
  %94 = select i1 %93, { i64, i64 } { i64 0, i64 4611404543450677248 }, { i64, i64 } { i64 0, i64 -9223372036854775808 }
  %95 = extractvalue { i64, i64 } %94, 1
  %96 = extractvalue { i64, i64 } %94, 0
  br label %138

97:                                               ; preds = %65
  %98 = sub nuw nsw i32 16431, %6
  %99 = zext i32 %98 to i64
  %100 = shl nuw nsw i64 1, %99
  %101 = add nsw i64 %100, -1
  %102 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 1
  %103 = load i8, i8* %102, align 1
  switch i8 %103, label %113 [
    i8 0, label %104
    i8 3, label %124
  ]

104:                                              ; preds = %97
  %105 = lshr i64 %100, 1
  %106 = add i64 %105, %1
  %107 = and i64 %106, %101
  %108 = or i64 %107, %0
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %110, label %124

110:                                              ; preds = %104
  %111 = xor i64 %100, -1
  %112 = and i64 %106, %111
  br label %124

113:                                              ; preds = %97
  %114 = lshr i64 %1, 63
  %115 = trunc i64 %114 to i8
  %116 = icmp eq i8 %103, 2
  %117 = zext i1 %116 to i8
  %118 = icmp eq i8 %115, %117
  br i1 %118, label %124, label %119

119:                                              ; preds = %113
  %120 = icmp ne i64 %0, 0
  %121 = zext i1 %120 to i64
  %122 = or i64 %121, %1
  %123 = add i64 %101, %122
  br label %124

124:                                              ; preds = %97, %119, %113, %104, %110
  %125 = phi i64 [ %1, %113 ], [ %123, %119 ], [ %1, %97 ], [ %112, %110 ], [ %106, %104 ]
  %126 = sub nsw i64 0, %100
  %127 = and i64 %125, %126
  br label %128

128:                                              ; preds = %124, %60
  %129 = phi i64 [ %61, %60 ], [ %127, %124 ]
  %130 = phi i64 [ %64, %60 ], [ 0, %124 ]
  %131 = icmp eq i64 %130, %0
  %132 = icmp eq i64 %129, %1
  %133 = select i1 %131, i1 %132, i1 false
  br i1 %133, label %138, label %134

134:                                              ; preds = %128
  %135 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %136 = load i8, i8* %135, align 1
  %137 = or i8 %136, 32
  store i8 %137, i8* %135, align 1
  br label %138

138:                                              ; preds = %81, %71, %79, %134, %128, %67, %10, %12, %92, %87, %16
  %139 = phi i64 [ %18, %16 ], [ %96, %92 ], [ %91, %87 ], [ %0, %12 ], [ %0, %10 ], [ %0, %67 ], [ %0, %128 ], [ %130, %134 ], [ 0, %79 ], [ 0, %71 ], [ 0, %81 ]
  %140 = phi i64 [ %19, %16 ], [ %95, %92 ], [ %90, %87 ], [ %1, %12 ], [ %1, %10 ], [ %1, %67 ], [ %1, %128 ], [ %129, %134 ], [ %75, %79 ], [ %75, %71 ], [ %86, %81 ]
  %141 = insertvalue { i64, i64 } poison, i64 %139, 0
  %142 = insertvalue { i64, i64 } %141, i64 %140, 1
  ret { i64, i64 } %142
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define internal fastcc { i64, i64 } @propagateFloat128NaN(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* nocapture noundef %4) unnamed_addr #2 {
  %6 = shl i64 %1, 1
  %7 = icmp ugt i64 %6, -562949953421313
  br i1 %7, label %8, label %14

8:                                                ; preds = %5
  %9 = icmp ne i64 %0, 0
  %10 = and i64 %1, 281474976710655
  %11 = icmp ne i64 %10, 0
  %12 = select i1 %9, i1 true, i1 %11
  %13 = zext i1 %12 to i8
  br label %14

14:                                               ; preds = %5, %8
  %15 = phi i8 [ 0, %5 ], [ %13, %8 ]
  %16 = and i64 %1, 9223231299366420480
  %17 = icmp eq i64 %16, 9223090561878065152
  br i1 %17, label %18, label %24

18:                                               ; preds = %14
  %19 = icmp ne i64 %0, 0
  %20 = and i64 %1, 140737488355327
  %21 = icmp ne i64 %20, 0
  %22 = select i1 %19, i1 true, i1 %21
  %23 = zext i1 %22 to i32
  br label %24

24:                                               ; preds = %14, %18
  %25 = phi i32 [ 0, %14 ], [ %23, %18 ]
  %26 = shl i64 %3, 1
  %27 = icmp ugt i64 %26, -562949953421313
  br i1 %27, label %28, label %34

28:                                               ; preds = %24
  %29 = icmp ne i64 %2, 0
  %30 = and i64 %3, 281474976710655
  %31 = icmp ne i64 %30, 0
  %32 = select i1 %29, i1 true, i1 %31
  %33 = zext i1 %32 to i8
  br label %34

34:                                               ; preds = %24, %28
  %35 = phi i8 [ 0, %24 ], [ %33, %28 ]
  %36 = and i64 %3, 9223231299366420480
  %37 = icmp eq i64 %36, 9223090561878065152
  br i1 %37, label %38, label %44

38:                                               ; preds = %34
  %39 = icmp ne i64 %2, 0
  %40 = and i64 %3, 140737488355327
  %41 = icmp ne i64 %40, 0
  %42 = select i1 %39, i1 true, i1 %41
  %43 = zext i1 %42 to i32
  br label %44

44:                                               ; preds = %34, %38
  %45 = phi i32 [ 0, %34 ], [ %43, %38 ]
  %46 = trunc i32 %45 to i8
  %47 = or i32 %45, %25
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %53, label %49

49:                                               ; preds = %44
  %50 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %51 = load i8, i8* %50, align 1
  %52 = or i8 %51, 1
  store i8 %52, i8* %50, align 1
  br label %53

53:                                               ; preds = %49, %44
  %54 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 6
  %55 = load i8, i8* %54, align 1
  %56 = icmp eq i8 %55, 0
  br i1 %56, label %57, label %103

57:                                               ; preds = %53
  %58 = icmp ult i64 %6, %26
  %59 = icmp eq i64 %6, %26
  %60 = icmp ult i64 %0, %2
  %61 = and i1 %60, %59
  %62 = or i1 %58, %61
  br i1 %62, label %71, label %63

63:                                               ; preds = %57
  %64 = icmp ult i64 %26, %6
  %65 = icmp ult i64 %2, %0
  %66 = and i1 %65, %59
  %67 = or i1 %64, %66
  br i1 %67, label %71, label %68

68:                                               ; preds = %63
  %69 = icmp ult i64 %1, %3
  %70 = zext i1 %69 to i8
  br label %71

71:                                               ; preds = %63, %57, %68
  %72 = phi i8 [ %70, %68 ], [ 0, %57 ], [ 1, %63 ]
  %73 = icmp eq i32 %25, 0
  br i1 %73, label %80, label %74

74:                                               ; preds = %71
  %75 = icmp eq i8 %46, 0
  br i1 %75, label %78, label %76

76:                                               ; preds = %74
  %77 = icmp eq i8 %72, 0
  br i1 %77, label %87, label %95

78:                                               ; preds = %74
  %79 = icmp eq i8 %35, 0
  br i1 %79, label %95, label %87

80:                                               ; preds = %71
  %81 = icmp eq i8 %15, 0
  br i1 %81, label %87, label %82

82:                                               ; preds = %80
  %83 = icmp ne i8 %35, 0
  %84 = or i8 %72, %46
  %85 = icmp eq i8 %84, 0
  %86 = and i1 %83, %85
  br i1 %86, label %87, label %95

87:                                               ; preds = %78, %76, %80, %82
  br i1 %37, label %88, label %94

88:                                               ; preds = %87
  %89 = icmp eq i64 %2, 0
  %90 = and i64 %3, 140737488355327
  %91 = icmp eq i64 %90, 0
  %92 = select i1 %89, i1 %91, i1 false
  %93 = or i64 %3, 140737488355328
  br i1 %92, label %94, label %103

94:                                               ; preds = %88, %87
  br label %103

95:                                               ; preds = %78, %76, %82
  br i1 %17, label %96, label %102

96:                                               ; preds = %95
  %97 = icmp eq i64 %0, 0
  %98 = and i64 %1, 140737488355327
  %99 = icmp eq i64 %98, 0
  %100 = select i1 %97, i1 %99, i1 false
  %101 = or i64 %1, 140737488355328
  br i1 %100, label %102, label %103

102:                                              ; preds = %96, %95
  br label %103

103:                                              ; preds = %102, %96, %94, %88, %53
  %104 = phi i64 [ 0, %53 ], [ %2, %88 ], [ %2, %94 ], [ %0, %96 ], [ %0, %102 ]
  %105 = phi i64 [ -140737488355328, %53 ], [ %93, %88 ], [ %3, %94 ], [ %101, %96 ], [ %1, %102 ]
  %106 = insertvalue { i64, i64 } poison, i64 %104, 0
  %107 = insertvalue { i64, i64 } %106, i64 %105, 1
  ret { i64, i64 } %107
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define { i64, i64 } @float128_add(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* nocapture noundef %4) local_unnamed_addr #14 {
  %6 = lshr i64 %1, 63
  %7 = trunc i64 %6 to i8
  %8 = lshr i64 %3, 63
  %9 = trunc i64 %8 to i8
  %10 = icmp eq i8 %7, %9
  br i1 %10, label %11, label %13

11:                                               ; preds = %5
  %12 = tail call fastcc { i64, i64 } @addFloat128Sigs(i64 %0, i64 %1, i64 %2, i64 %3, i8 noundef zeroext %7, %struct.float_status* noundef %4)
  br label %15

13:                                               ; preds = %5
  %14 = tail call fastcc { i64, i64 } @subFloat128Sigs(i64 %0, i64 %1, i64 %2, i64 %3, i8 noundef zeroext %7, %struct.float_status* noundef %4)
  br label %15

15:                                               ; preds = %13, %11
  %16 = phi { i64, i64 } [ %12, %11 ], [ %14, %13 ]
  ret { i64, i64 } %16
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define internal fastcc { i64, i64 } @addFloat128Sigs(i64 %0, i64 %1, i64 %2, i64 %3, i8 noundef zeroext %4, %struct.float_status* nocapture noundef %5) unnamed_addr #14 {
  %7 = and i64 %1, 281474976710655
  %8 = lshr i64 %1, 48
  %9 = trunc i64 %8 to i32
  %10 = and i32 %9, 32767
  %11 = and i64 %3, 281474976710655
  %12 = lshr i64 %3, 48
  %13 = trunc i64 %12 to i32
  %14 = and i32 %13, 32767
  %15 = sub nsw i32 %10, %14
  %16 = icmp sgt i32 %15, 0
  br i1 %16, label %17, label %71

17:                                               ; preds = %6
  %18 = icmp eq i32 %10, 32767
  br i1 %18, label %19, label %26

19:                                               ; preds = %17
  %20 = or i64 %7, %0
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %201, label %22

22:                                               ; preds = %19
  %23 = tail call fastcc { i64, i64 } @propagateFloat128NaN(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* noundef %5)
  %24 = extractvalue { i64, i64 } %23, 0
  %25 = extractvalue { i64, i64 } %23, 1
  br label %201

26:                                               ; preds = %17
  %27 = icmp eq i32 %14, 0
  br i1 %27, label %30, label %28

28:                                               ; preds = %26
  %29 = or i64 %11, 281474976710656
  br label %33

30:                                               ; preds = %26
  %31 = add nsw i32 %15, -1
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %167, label %33

33:                                               ; preds = %28, %30
  %34 = phi i32 [ %15, %28 ], [ %31, %30 ]
  %35 = phi i64 [ %29, %28 ], [ %11, %30 ]
  %36 = trunc i32 %34 to i8
  %37 = sub i8 0, %36
  %38 = and i8 %37, 63
  %39 = icmp ult i32 %34, 64
  br i1 %39, label %40, label %48

40:                                               ; preds = %33
  %41 = zext i8 %38 to i64
  %42 = shl i64 %2, %41
  %43 = shl i64 %35, %41
  %44 = zext i32 %34 to i64
  %45 = lshr i64 %2, %44
  %46 = or i64 %43, %45
  %47 = lshr i64 %35, %44
  br label %63

48:                                               ; preds = %33
  %49 = icmp eq i32 %34, 64
  br i1 %49, label %63, label %50

50:                                               ; preds = %48
  %51 = icmp ult i32 %34, 128
  br i1 %51, label %52, label %58

52:                                               ; preds = %50
  %53 = zext i8 %38 to i64
  %54 = shl i64 %35, %53
  %55 = and i32 %34, 63
  %56 = zext i32 %55 to i64
  %57 = lshr i64 %35, %56
  br label %63

58:                                               ; preds = %50
  %59 = icmp eq i32 %34, 128
  %60 = icmp ne i64 %35, 0
  %61 = zext i1 %60 to i64
  %62 = select i1 %59, i64 %35, i64 %61
  br label %63

63:                                               ; preds = %58, %52, %48, %40
  %64 = phi i64 [ %47, %40 ], [ 0, %48 ], [ 0, %52 ], [ 0, %58 ]
  %65 = phi i64 [ %46, %40 ], [ %35, %48 ], [ %57, %52 ], [ 0, %58 ]
  %66 = phi i64 [ %42, %40 ], [ %2, %48 ], [ %54, %52 ], [ %62, %58 ]
  %67 = phi i64 [ 0, %40 ], [ 0, %48 ], [ %2, %52 ], [ %2, %58 ]
  %68 = icmp ne i64 %67, 0
  %69 = zext i1 %68 to i64
  %70 = or i64 %66, %69
  br label %167

71:                                               ; preds = %6
  %72 = icmp slt i32 %15, 0
  br i1 %72, label %73, label %129

73:                                               ; preds = %71
  %74 = icmp eq i32 %14, 32767
  br i1 %74, label %75, label %86

75:                                               ; preds = %73
  %76 = or i64 %11, %2
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %82, label %78

78:                                               ; preds = %75
  %79 = tail call fastcc { i64, i64 } @propagateFloat128NaN(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* noundef %5)
  %80 = extractvalue { i64, i64 } %79, 0
  %81 = extractvalue { i64, i64 } %79, 1
  br label %201

82:                                               ; preds = %75
  %83 = zext i8 %4 to i64
  %84 = shl i64 %83, 63
  %85 = or i64 %84, 9223090561878065152
  br label %201

86:                                               ; preds = %73
  %87 = icmp eq i32 %10, 0
  %88 = or i64 %7, 281474976710656
  %89 = select i1 %87, i64 %7, i64 %88
  %90 = sext i1 %87 to i32
  %91 = sub nsw i32 %90, %15
  %92 = trunc i32 %91 to i8
  %93 = sub i8 0, %92
  %94 = and i8 %93, 63
  %95 = icmp eq i32 %91, 0
  br i1 %95, label %167, label %96

96:                                               ; preds = %86
  %97 = icmp ult i32 %91, 64
  br i1 %97, label %98, label %106

98:                                               ; preds = %96
  %99 = zext i8 %94 to i64
  %100 = shl i64 %0, %99
  %101 = shl i64 %89, %99
  %102 = zext i32 %91 to i64
  %103 = lshr i64 %0, %102
  %104 = or i64 %101, %103
  %105 = lshr i64 %89, %102
  br label %121

106:                                              ; preds = %96
  %107 = icmp eq i32 %91, 64
  br i1 %107, label %121, label %108

108:                                              ; preds = %106
  %109 = icmp ult i32 %91, 128
  br i1 %109, label %110, label %116

110:                                              ; preds = %108
  %111 = zext i8 %94 to i64
  %112 = shl i64 %89, %111
  %113 = and i32 %91, 63
  %114 = zext i32 %113 to i64
  %115 = lshr i64 %89, %114
  br label %121

116:                                              ; preds = %108
  %117 = icmp eq i32 %91, 128
  %118 = icmp ne i64 %89, 0
  %119 = zext i1 %118 to i64
  %120 = select i1 %117, i64 %89, i64 %119
  br label %121

121:                                              ; preds = %116, %110, %106, %98
  %122 = phi i64 [ %105, %98 ], [ 0, %106 ], [ 0, %110 ], [ 0, %116 ]
  %123 = phi i64 [ %104, %98 ], [ %89, %106 ], [ %115, %110 ], [ 0, %116 ]
  %124 = phi i64 [ %100, %98 ], [ %0, %106 ], [ %112, %110 ], [ %120, %116 ]
  %125 = phi i64 [ 0, %98 ], [ 0, %106 ], [ %0, %110 ], [ %0, %116 ]
  %126 = icmp ne i64 %125, 0
  %127 = zext i1 %126 to i64
  %128 = or i64 %124, %127
  br label %167

129:                                              ; preds = %71
  %130 = icmp eq i32 %10, 32767
  br i1 %130, label %131, label %140

131:                                              ; preds = %129
  %132 = or i64 %7, %0
  %133 = or i64 %132, %2
  %134 = or i64 %133, %11
  %135 = icmp eq i64 %134, 0
  br i1 %135, label %201, label %136

136:                                              ; preds = %131
  %137 = tail call fastcc { i64, i64 } @propagateFloat128NaN(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* noundef %5)
  %138 = extractvalue { i64, i64 } %137, 0
  %139 = extractvalue { i64, i64 } %137, 1
  br label %201

140:                                              ; preds = %129
  %141 = add i64 %2, %0
  %142 = add nuw nsw i64 %11, %7
  %143 = icmp ult i64 %141, %0
  %144 = zext i1 %143 to i64
  %145 = add nuw nsw i64 %142, %144
  %146 = icmp eq i32 %10, 0
  br i1 %146, label %147, label %165

147:                                              ; preds = %140
  %148 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 4
  %149 = load i8, i8* %148, align 1
  %150 = icmp eq i8 %149, 0
  br i1 %150, label %161, label %151

151:                                              ; preds = %147
  %152 = or i64 %145, %141
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %158, label %154

154:                                              ; preds = %151
  %155 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 2
  %156 = load i8, i8* %155, align 1
  %157 = or i8 %156, -128
  store i8 %157, i8* %155, align 1
  br label %158

158:                                              ; preds = %154, %151
  %159 = zext i8 %4 to i64
  %160 = shl i64 %159, 63
  br label %201

161:                                              ; preds = %147
  %162 = zext i8 %4 to i64
  %163 = shl i64 %162, 63
  %164 = or i64 %163, %145
  br label %201

165:                                              ; preds = %140
  %166 = or i64 %145, 562949953421312
  br label %182

167:                                              ; preds = %121, %86, %63, %30
  %168 = phi i64 [ %7, %30 ], [ %7, %63 ], [ %122, %121 ], [ %89, %86 ]
  %169 = phi i64 [ %0, %30 ], [ %0, %63 ], [ %123, %121 ], [ %0, %86 ]
  %170 = phi i64 [ %11, %30 ], [ %64, %63 ], [ %11, %121 ], [ %11, %86 ]
  %171 = phi i64 [ %2, %30 ], [ %65, %63 ], [ %2, %121 ], [ %2, %86 ]
  %172 = phi i64 [ 0, %30 ], [ %70, %63 ], [ %128, %121 ], [ 0, %86 ]
  %173 = phi i32 [ %10, %30 ], [ %10, %63 ], [ %14, %121 ], [ %14, %86 ]
  %174 = or i64 %168, 281474976710656
  %175 = add i64 %171, %169
  %176 = add i64 %170, %174
  %177 = icmp ult i64 %175, %169
  %178 = zext i1 %177 to i64
  %179 = add i64 %176, %178
  %180 = add nsw i32 %173, -1
  %181 = icmp ult i64 %179, 562949953421312
  br i1 %181, label %193, label %182

182:                                              ; preds = %167, %165
  %183 = phi i64 [ %179, %167 ], [ %166, %165 ]
  %184 = phi i64 [ %175, %167 ], [ %141, %165 ]
  %185 = phi i64 [ %172, %167 ], [ 0, %165 ]
  %186 = phi i32 [ %173, %167 ], [ %10, %165 ]
  %187 = shl i64 %184, 63
  %188 = tail call i64 @llvm.fshl.i64(i64 %183, i64 %184, i64 63)
  %189 = lshr i64 %183, 1
  %190 = icmp ne i64 %185, 0
  %191 = zext i1 %190 to i64
  %192 = or i64 %187, %191
  br label %193

193:                                              ; preds = %167, %182
  %194 = phi i64 [ %179, %167 ], [ %189, %182 ]
  %195 = phi i64 [ %175, %167 ], [ %188, %182 ]
  %196 = phi i64 [ %172, %167 ], [ %192, %182 ]
  %197 = phi i32 [ %180, %167 ], [ %186, %182 ]
  %198 = tail call fastcc { i64, i64 } @roundAndPackFloat128(i8 noundef zeroext %4, i32 noundef %197, i64 noundef %194, i64 noundef %195, i64 noundef %196, %struct.float_status* noundef %5)
  %199 = extractvalue { i64, i64 } %198, 0
  %200 = extractvalue { i64, i64 } %198, 1
  br label %201

201:                                              ; preds = %131, %19, %193, %161, %158, %136, %82, %78, %22
  %202 = phi i64 [ %24, %22 ], [ %199, %193 ], [ %80, %78 ], [ 0, %82 ], [ %138, %136 ], [ 0, %158 ], [ %141, %161 ], [ %0, %19 ], [ %0, %131 ]
  %203 = phi i64 [ %25, %22 ], [ %200, %193 ], [ %81, %78 ], [ %85, %82 ], [ %139, %136 ], [ %160, %158 ], [ %164, %161 ], [ %1, %19 ], [ %1, %131 ]
  %204 = insertvalue { i64, i64 } poison, i64 %202, 0
  %205 = insertvalue { i64, i64 } %204, i64 %203, 1
  ret { i64, i64 } %205
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define internal fastcc { i64, i64 } @subFloat128Sigs(i64 %0, i64 %1, i64 %2, i64 %3, i8 noundef zeroext %4, %struct.float_status* nocapture noundef %5) unnamed_addr #14 {
  %7 = lshr i64 %1, 48
  %8 = trunc i64 %7 to i32
  %9 = and i32 %8, 32767
  %10 = lshr i64 %3, 48
  %11 = trunc i64 %10 to i32
  %12 = and i32 %11, 32767
  %13 = sub nsw i32 %9, %12
  %14 = shl i64 %0, 14
  %15 = shl i64 %1, 14
  %16 = and i64 %15, 4611686018427371520
  %17 = lshr i64 %0, 50
  %18 = or i64 %16, %17
  %19 = shl i64 %2, 14
  %20 = shl i64 %3, 14
  %21 = and i64 %20, 4611686018427371520
  %22 = lshr i64 %2, 50
  %23 = or i64 %21, %22
  %24 = icmp sgt i32 %13, 0
  br i1 %24, label %131, label %25

25:                                               ; preds = %6
  %26 = icmp slt i32 %13, 0
  br i1 %26, label %57, label %27

27:                                               ; preds = %25
  switch i32 %9, label %42 [
    i32 32767, label %28
    i32 0, label %41
  ]

28:                                               ; preds = %27
  %29 = or i64 %18, %14
  %30 = or i64 %29, %19
  %31 = or i64 %30, %23
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %37, label %33

33:                                               ; preds = %28
  %34 = tail call fastcc { i64, i64 } @propagateFloat128NaN(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* noundef %5)
  %35 = extractvalue { i64, i64 } %34, 0
  %36 = extractvalue { i64, i64 } %34, 1
  br label %244

37:                                               ; preds = %28
  %38 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 2
  %39 = load i8, i8* %38, align 1
  %40 = or i8 %39, 1
  store i8 %40, i8* %38, align 1
  br label %244

41:                                               ; preds = %27
  br label %42

42:                                               ; preds = %27, %41
  %43 = phi i32 [ 1, %41 ], [ %9, %27 ]
  %44 = phi i32 [ 1, %41 ], [ %12, %27 ]
  %45 = icmp ult i64 %23, %18
  br i1 %45, label %191, label %46

46:                                               ; preds = %42
  %47 = icmp ult i64 %18, %23
  br i1 %47, label %120, label %48

48:                                               ; preds = %46
  %49 = icmp ult i64 %19, %14
  br i1 %49, label %191, label %50

50:                                               ; preds = %48
  %51 = icmp ult i64 %14, %19
  br i1 %51, label %120, label %52

52:                                               ; preds = %50
  %53 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 1
  %54 = load i8, i8* %53, align 1
  %55 = icmp eq i8 %54, 1
  %56 = select i1 %55, i64 -9223372036854775808, i64 0
  br label %244

57:                                               ; preds = %25
  %58 = icmp eq i32 %12, 32767
  br i1 %58, label %59, label %71

59:                                               ; preds = %57
  %60 = or i64 %23, %19
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %66, label %62

62:                                               ; preds = %59
  %63 = tail call fastcc { i64, i64 } @propagateFloat128NaN(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* noundef %5)
  %64 = extractvalue { i64, i64 } %63, 0
  %65 = extractvalue { i64, i64 } %63, 1
  br label %244

66:                                               ; preds = %59
  %67 = xor i8 %4, -1
  %68 = zext i8 %67 to i64
  %69 = shl i64 %68, 63
  %70 = or i64 %69, 9223090561878065152
  br label %244

71:                                               ; preds = %57
  %72 = icmp eq i32 %9, 0
  %73 = or i64 %18, 4611686018427387904
  %74 = select i1 %72, i64 %18, i64 %73
  %75 = sext i1 %72 to i32
  %76 = sub nsw i32 %75, %13
  %77 = trunc i32 %76 to i8
  %78 = sub i8 0, %77
  %79 = and i8 %78, 63
  %80 = icmp eq i32 %76, 0
  br i1 %80, label %116, label %81

81:                                               ; preds = %71
  %82 = icmp ult i32 %76, 64
  br i1 %82, label %83, label %94

83:                                               ; preds = %81
  %84 = zext i8 %79 to i64
  %85 = shl i64 %74, %84
  %86 = zext i32 %76 to i64
  %87 = lshr i64 %14, %86
  %88 = or i64 %85, %87
  %89 = shl i64 %14, %84
  %90 = icmp ne i64 %89, 0
  %91 = zext i1 %90 to i64
  %92 = or i64 %88, %91
  %93 = lshr i64 %74, %86
  br label %116

94:                                               ; preds = %81
  %95 = icmp eq i32 %76, 64
  br i1 %95, label %96, label %100

96:                                               ; preds = %94
  %97 = icmp ne i64 %14, 0
  %98 = zext i1 %97 to i64
  %99 = or i64 %74, %98
  br label %116

100:                                              ; preds = %94
  %101 = icmp ult i32 %76, 128
  br i1 %101, label %102, label %112

102:                                              ; preds = %100
  %103 = and i32 %76, 63
  %104 = zext i32 %103 to i64
  %105 = lshr i64 %74, %104
  %106 = zext i8 %79 to i64
  %107 = shl i64 %74, %106
  %108 = or i64 %107, %14
  %109 = icmp ne i64 %108, 0
  %110 = zext i1 %109 to i64
  %111 = or i64 %105, %110
  br label %116

112:                                              ; preds = %100
  %113 = or i64 %74, %14
  %114 = icmp ne i64 %113, 0
  %115 = zext i1 %114 to i64
  br label %116

116:                                              ; preds = %71, %83, %96, %102, %112
  %117 = phi i64 [ %92, %83 ], [ %14, %71 ], [ %99, %96 ], [ %111, %102 ], [ %115, %112 ]
  %118 = phi i64 [ %93, %83 ], [ %74, %71 ], [ 0, %96 ], [ 0, %102 ], [ 0, %112 ]
  %119 = or i64 %23, 4611686018427387904
  br label %120

120:                                              ; preds = %50, %46, %116
  %121 = phi i64 [ %118, %116 ], [ %18, %46 ], [ %18, %50 ]
  %122 = phi i64 [ %117, %116 ], [ %14, %46 ], [ %14, %50 ]
  %123 = phi i64 [ %119, %116 ], [ %23, %46 ], [ %23, %50 ]
  %124 = phi i32 [ %12, %116 ], [ %44, %46 ], [ %44, %50 ]
  %125 = sub i64 %19, %122
  %126 = sub i64 %123, %121
  %127 = icmp ult i64 %19, %122
  %128 = sext i1 %127 to i64
  %129 = add i64 %126, %128
  %130 = xor i8 %4, 1
  br label %201

131:                                              ; preds = %6
  %132 = icmp eq i32 %9, 32767
  br i1 %132, label %133, label %140

133:                                              ; preds = %131
  %134 = or i64 %18, %14
  %135 = icmp eq i64 %134, 0
  br i1 %135, label %244, label %136

136:                                              ; preds = %133
  %137 = tail call fastcc { i64, i64 } @propagateFloat128NaN(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* noundef %5)
  %138 = extractvalue { i64, i64 } %137, 0
  %139 = extractvalue { i64, i64 } %137, 1
  br label %244

140:                                              ; preds = %131
  %141 = icmp eq i32 %12, 0
  br i1 %141, label %144, label %142

142:                                              ; preds = %140
  %143 = or i64 %23, 4611686018427387904
  br label %147

144:                                              ; preds = %140
  %145 = add nsw i32 %13, -1
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %187, label %147

147:                                              ; preds = %142, %144
  %148 = phi i32 [ %13, %142 ], [ %145, %144 ]
  %149 = phi i64 [ %143, %142 ], [ %23, %144 ]
  %150 = trunc i32 %148 to i8
  %151 = sub i8 0, %150
  %152 = and i8 %151, 63
  %153 = icmp ult i32 %148, 64
  br i1 %153, label %154, label %165

154:                                              ; preds = %147
  %155 = zext i8 %152 to i64
  %156 = shl i64 %149, %155
  %157 = zext i32 %148 to i64
  %158 = lshr i64 %19, %157
  %159 = or i64 %156, %158
  %160 = shl i64 %19, %155
  %161 = icmp ne i64 %160, 0
  %162 = zext i1 %161 to i64
  %163 = or i64 %159, %162
  %164 = lshr i64 %149, %157
  br label %187

165:                                              ; preds = %147
  %166 = icmp eq i32 %148, 64
  br i1 %166, label %167, label %171

167:                                              ; preds = %165
  %168 = icmp ne i64 %19, 0
  %169 = zext i1 %168 to i64
  %170 = or i64 %149, %169
  br label %187

171:                                              ; preds = %165
  %172 = icmp ult i32 %148, 128
  br i1 %172, label %173, label %183

173:                                              ; preds = %171
  %174 = and i32 %148, 63
  %175 = zext i32 %174 to i64
  %176 = lshr i64 %149, %175
  %177 = zext i8 %152 to i64
  %178 = shl i64 %149, %177
  %179 = or i64 %178, %19
  %180 = icmp ne i64 %179, 0
  %181 = zext i1 %180 to i64
  %182 = or i64 %176, %181
  br label %187

183:                                              ; preds = %171
  %184 = or i64 %149, %19
  %185 = icmp ne i64 %184, 0
  %186 = zext i1 %185 to i64
  br label %187

187:                                              ; preds = %144, %154, %167, %173, %183
  %188 = phi i64 [ %163, %154 ], [ %19, %144 ], [ %170, %167 ], [ %182, %173 ], [ %186, %183 ]
  %189 = phi i64 [ %164, %154 ], [ %23, %144 ], [ 0, %167 ], [ 0, %173 ], [ 0, %183 ]
  %190 = or i64 %18, 4611686018427387904
  br label %191

191:                                              ; preds = %48, %42, %187
  %192 = phi i64 [ %190, %187 ], [ %18, %42 ], [ %18, %48 ]
  %193 = phi i64 [ %189, %187 ], [ %23, %42 ], [ %23, %48 ]
  %194 = phi i64 [ %188, %187 ], [ %19, %42 ], [ %19, %48 ]
  %195 = phi i32 [ %9, %187 ], [ %43, %42 ], [ %43, %48 ]
  %196 = sub i64 %14, %194
  %197 = sub i64 %192, %193
  %198 = icmp ult i64 %14, %194
  %199 = sext i1 %198 to i64
  %200 = add i64 %197, %199
  br label %201

201:                                              ; preds = %191, %120
  %202 = phi i64 [ %200, %191 ], [ %129, %120 ]
  %203 = phi i64 [ %196, %191 ], [ %125, %120 ]
  %204 = phi i8 [ %4, %191 ], [ %130, %120 ]
  %205 = phi i32 [ %195, %191 ], [ %124, %120 ]
  %206 = icmp eq i64 %202, 0
  %207 = select i1 %206, i64 %203, i64 %202
  %208 = select i1 %206, i64 0, i64 %203
  %ctlz.sh = lshr i64 %207, 1
  %ctlz.step = or i64 %207, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %209 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %209, 6148914691236517205
  %ctpop.sh = lshr i64 %209, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %210 = trunc i64 %ctpop.part to i8
  %211 = add nsw i8 %210, -15
  %212 = sext i8 %211 to i32
  %213 = sub nsw i32 0, %212
  %214 = icmp ugt i8 %210, 14
  br i1 %214, label %215, label %225

215:                                              ; preds = %201
  %216 = zext i32 %212 to i64
  %217 = shl i64 %208, %216
  %218 = icmp eq i8 %211, 0
  br i1 %218, label %234, label %219

219:                                              ; preds = %215
  %220 = shl i64 %207, %216
  %221 = and i32 %213, 63
  %222 = zext i32 %221 to i64
  %223 = lshr i64 %208, %222
  %224 = or i64 %223, %220
  br label %234

225:                                              ; preds = %201
  %226 = and i8 %211, 63
  %227 = zext i8 %226 to i64
  %228 = shl i64 %208, %227
  %229 = shl i64 %207, %227
  %230 = zext i32 %213 to i64
  %231 = lshr i64 %208, %230
  %232 = or i64 %229, %231
  %233 = lshr i64 %207, %230
  br label %234

234:                                              ; preds = %215, %219, %225
  %235 = phi i64 [ %224, %219 ], [ %207, %215 ], [ %233, %225 ]
  %236 = phi i64 [ %217, %219 ], [ %217, %215 ], [ %232, %225 ]
  %237 = phi i64 [ 0, %219 ], [ 0, %215 ], [ %228, %225 ]
  %238 = select i1 %206, i32 -79, i32 -15
  %239 = add nsw i32 %205, %238
  %240 = sub nsw i32 %239, %212
  %241 = tail call fastcc { i64, i64 } @roundAndPackFloat128(i8 noundef zeroext %204, i32 noundef %240, i64 noundef %235, i64 noundef %236, i64 noundef %237, %struct.float_status* noundef %5) #30
  %242 = extractvalue { i64, i64 } %241, 0
  %243 = extractvalue { i64, i64 } %241, 1
  br label %244

244:                                              ; preds = %133, %234, %136, %66, %62, %52, %37, %33
  %245 = phi i64 [ %138, %136 ], [ %242, %234 ], [ %64, %62 ], [ 0, %66 ], [ %35, %33 ], [ 0, %37 ], [ 0, %52 ], [ %0, %133 ]
  %246 = phi i64 [ %139, %136 ], [ %243, %234 ], [ %65, %62 ], [ %70, %66 ], [ %36, %33 ], [ -140737488355328, %37 ], [ %56, %52 ], [ %1, %133 ]
  %247 = insertvalue { i64, i64 } poison, i64 %245, 0
  %248 = insertvalue { i64, i64 } %247, i64 %246, 1
  ret { i64, i64 } %248
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define internal fastcc { i64, i64 } @roundAndPackFloat128(i8 noundef zeroext %0, i32 noundef %1, i64 noundef %2, i64 noundef %3, i64 noundef %4, %struct.float_status* nocapture noundef %5) unnamed_addr #2 {
  %7 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 1
  %8 = load i8, i8* %7, align 1
  %9 = icmp eq i8 %8, 0
  %10 = lshr i64 %4, 63
  %11 = trunc i64 %10 to i8
  br i1 %9, label %26, label %12

12:                                               ; preds = %6
  %13 = icmp eq i8 %8, 3
  br i1 %13, label %26, label %14

14:                                               ; preds = %12
  %15 = icmp eq i8 %0, 0
  br i1 %15, label %21, label %16

16:                                               ; preds = %14
  %17 = icmp eq i8 %8, 1
  %18 = icmp ne i64 %4, 0
  %19 = and i1 %18, %17
  %20 = zext i1 %19 to i8
  br label %26

21:                                               ; preds = %14
  %22 = icmp eq i8 %8, 2
  %23 = icmp ne i64 %4, 0
  %24 = and i1 %23, %22
  %25 = zext i1 %24 to i8
  br label %26

26:                                               ; preds = %12, %21, %16, %6
  %27 = phi i8 [ %11, %6 ], [ %20, %16 ], [ %25, %21 ], [ 0, %12 ]
  %28 = icmp ugt i32 %1, 32764
  br i1 %28, label %29, label %147

29:                                               ; preds = %26
  %30 = icmp sgt i32 %1, 32765
  br i1 %30, label %39, label %31

31:                                               ; preds = %29
  %32 = icmp eq i32 %1, 32765
  br i1 %32, label %33, label %60

33:                                               ; preds = %31
  %34 = icmp eq i64 %2, 562949953421311
  %35 = icmp eq i64 %3, -1
  %36 = and i1 %34, %35
  %37 = icmp ne i8 %27, 0
  %38 = select i1 %36, i1 %37, i1 false
  br i1 %38, label %39, label %147

39:                                               ; preds = %33, %29
  %40 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 2
  %41 = load i8, i8* %40, align 1
  %42 = or i8 %41, 40
  store i8 %42, i8* %40, align 1
  %43 = icmp eq i8 %8, 3
  br i1 %43, label %52, label %44

44:                                               ; preds = %39
  %45 = icmp ne i8 %0, 0
  %46 = icmp eq i8 %8, 2
  %47 = select i1 %45, i1 %46, i1 false
  br i1 %47, label %52, label %48

48:                                               ; preds = %44
  %49 = icmp eq i8 %0, 0
  %50 = icmp eq i8 %8, 1
  %51 = select i1 %49, i1 %50, i1 false
  br i1 %51, label %52, label %56

52:                                               ; preds = %48, %44, %39
  %53 = zext i8 %0 to i64
  %54 = shl i64 %53, 63
  %55 = or i64 %54, 9223090561878065151
  br label %186

56:                                               ; preds = %48
  %57 = zext i8 %0 to i64
  %58 = shl i64 %57, 63
  %59 = or i64 %58, 9223090561878065152
  br label %186

60:                                               ; preds = %31
  %61 = icmp slt i32 %1, 0
  br i1 %61, label %62, label %147

62:                                               ; preds = %60
  %63 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 4
  %64 = load i8, i8* %63, align 1
  %65 = icmp eq i8 %64, 0
  br i1 %65, label %72, label %66

66:                                               ; preds = %62
  %67 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 2
  %68 = load i8, i8* %67, align 1
  %69 = or i8 %68, -128
  store i8 %69, i8* %67, align 1
  %70 = zext i8 %0 to i64
  %71 = shl i64 %70, 63
  br label %186

72:                                               ; preds = %62
  %73 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 0
  %74 = load i8, i8* %73, align 1
  %75 = icmp ne i8 %74, 1
  %76 = icmp eq i32 %1, -1
  %77 = and i1 %76, %75
  %78 = icmp ne i8 %27, 0
  %79 = select i1 %77, i1 %78, i1 false
  br i1 %79, label %85, label %80

80:                                               ; preds = %72
  %81 = sub nsw i32 0, %1
  %82 = trunc i32 %1 to i8
  %83 = and i8 %82, 63
  %84 = icmp ult i32 %81, 64
  br i1 %84, label %91, label %102

85:                                               ; preds = %72
  %86 = icmp ult i64 %2, 562949953421311
  %87 = icmp eq i64 %2, 562949953421311
  %88 = icmp ne i64 %3, -1
  %89 = and i1 %87, %88
  %90 = or i1 %86, %89
  br label %91

91:                                               ; preds = %85, %80
  %92 = phi i8 [ 63, %85 ], [ %83, %80 ]
  %93 = phi i32 [ 1, %85 ], [ %81, %80 ]
  %94 = phi i1 [ %90, %85 ], [ true, %80 ]
  %95 = zext i8 %92 to i64
  %96 = shl i64 %3, %95
  %97 = shl i64 %2, %95
  %98 = zext i32 %93 to i64
  %99 = lshr i64 %3, %98
  %100 = or i64 %97, %99
  %101 = lshr i64 %2, %98
  br label %118

102:                                              ; preds = %80
  %103 = icmp eq i32 %1, -64
  br i1 %103, label %118, label %104

104:                                              ; preds = %102
  %105 = or i64 %4, %3
  %106 = icmp ult i32 %81, 128
  br i1 %106, label %107, label %113

107:                                              ; preds = %104
  %108 = zext i8 %83 to i64
  %109 = shl i64 %2, %108
  %110 = and i32 %81, 63
  %111 = zext i32 %110 to i64
  %112 = lshr i64 %2, %111
  br label %118

113:                                              ; preds = %104
  %114 = icmp eq i32 %1, -128
  %115 = icmp ne i64 %2, 0
  %116 = zext i1 %115 to i64
  %117 = select i1 %114, i64 %2, i64 %116
  br label %118

118:                                              ; preds = %113, %107, %102, %91
  %119 = phi i1 [ %94, %91 ], [ true, %102 ], [ true, %107 ], [ true, %113 ]
  %120 = phi i64 [ %101, %91 ], [ 0, %102 ], [ 0, %107 ], [ 0, %113 ]
  %121 = phi i64 [ %100, %91 ], [ %2, %102 ], [ %112, %107 ], [ 0, %113 ]
  %122 = phi i64 [ %96, %91 ], [ %3, %102 ], [ %109, %107 ], [ %117, %113 ]
  %123 = phi i64 [ %4, %91 ], [ %4, %102 ], [ %105, %107 ], [ %105, %113 ]
  %124 = icmp ne i64 %123, 0
  %125 = zext i1 %124 to i64
  %126 = or i64 %122, %125
  %127 = icmp ne i64 %126, 0
  %128 = select i1 %119, i1 %127, i1 false
  br i1 %128, label %129, label %133

129:                                              ; preds = %118
  %130 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 2
  %131 = load i8, i8* %130, align 1
  %132 = or i8 %131, 16
  store i8 %132, i8* %130, align 1
  br label %133

133:                                              ; preds = %129, %118
  br i1 %9, label %134, label %137

134:                                              ; preds = %133
  %135 = lshr i64 %122, 63
  %136 = trunc i64 %135 to i8
  br label %147

137:                                              ; preds = %133
  %138 = icmp eq i8 %0, 0
  br i1 %138, label %143, label %139

139:                                              ; preds = %137
  %140 = icmp eq i8 %8, 1
  %141 = select i1 %140, i1 %127, i1 false
  %142 = zext i1 %141 to i8
  br label %147

143:                                              ; preds = %137
  %144 = icmp eq i8 %8, 2
  %145 = select i1 %144, i1 %127, i1 false
  %146 = zext i1 %145 to i8
  br label %147

147:                                              ; preds = %33, %60, %139, %143, %134, %26
  %148 = phi i64 [ %120, %134 ], [ %120, %143 ], [ %120, %139 ], [ %2, %60 ], [ %2, %26 ], [ %2, %33 ]
  %149 = phi i64 [ %121, %134 ], [ %121, %143 ], [ %121, %139 ], [ %3, %60 ], [ %3, %26 ], [ %3, %33 ]
  %150 = phi i64 [ %126, %134 ], [ %126, %143 ], [ %126, %139 ], [ %4, %60 ], [ %4, %26 ], [ %4, %33 ]
  %151 = phi i32 [ 0, %134 ], [ 0, %143 ], [ 0, %139 ], [ %1, %60 ], [ %1, %26 ], [ 32765, %33 ]
  %152 = phi i8 [ %136, %134 ], [ %146, %143 ], [ %142, %139 ], [ %27, %60 ], [ %27, %26 ], [ %27, %33 ]
  %153 = icmp eq i64 %150, 0
  br i1 %153, label %158, label %154

154:                                              ; preds = %147
  %155 = getelementptr inbounds %struct.float_status, %struct.float_status* %5, i64 0, i32 2
  %156 = load i8, i8* %155, align 1
  %157 = or i8 %156, 32
  store i8 %157, i8* %155, align 1
  br label %158

158:                                              ; preds = %154, %147
  %159 = icmp eq i8 %152, 0
  br i1 %159, label %171, label %160

160:                                              ; preds = %158
  %161 = add i64 %149, 1
  %162 = icmp eq i64 %149, -1
  %163 = zext i1 %162 to i64
  %164 = add i64 %148, %163
  %165 = and i64 %150, 9223372036854775807
  %166 = icmp eq i64 %165, 0
  %167 = and i1 %9, %166
  %168 = zext i1 %167 to i64
  %169 = xor i64 %168, -1
  %170 = and i64 %161, %169
  br label %175

171:                                              ; preds = %158
  %172 = or i64 %149, %148
  %173 = icmp eq i64 %172, 0
  %174 = select i1 %173, i32 0, i32 %151
  br label %175

175:                                              ; preds = %171, %160
  %176 = phi i64 [ %148, %171 ], [ %164, %160 ]
  %177 = phi i64 [ %149, %171 ], [ %170, %160 ]
  %178 = phi i32 [ %174, %171 ], [ %151, %160 ]
  %179 = zext i8 %0 to i64
  %180 = shl i64 %179, 63
  %181 = zext i32 %178 to i64
  %182 = shl nuw nsw i64 %181, 48
  %183 = add i64 %176, %180
  %184 = add i64 %183, %182
  %185 = insertvalue { i64, i64 } poison, i64 %177, 0
  br label %186

186:                                              ; preds = %175, %66, %56, %52
  %187 = phi { i64, i64 } [ { i64 -1, i64 poison }, %52 ], [ { i64 0, i64 poison }, %56 ], [ { i64 0, i64 poison }, %66 ], [ %185, %175 ]
  %188 = phi i64 [ %55, %52 ], [ %59, %56 ], [ %71, %66 ], [ %184, %175 ]
  %189 = insertvalue { i64, i64 } %187, i64 %188, 1
  ret { i64, i64 } %189
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define { i64, i64 } @float128_sub(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* nocapture noundef %4) local_unnamed_addr #14 {
  %6 = lshr i64 %1, 63
  %7 = trunc i64 %6 to i8
  %8 = lshr i64 %3, 63
  %9 = trunc i64 %8 to i8
  %10 = icmp eq i8 %7, %9
  br i1 %10, label %11, label %13

11:                                               ; preds = %5
  %12 = tail call fastcc { i64, i64 } @subFloat128Sigs(i64 %0, i64 %1, i64 %2, i64 %3, i8 noundef zeroext %7, %struct.float_status* noundef %4)
  br label %15

13:                                               ; preds = %5
  %14 = tail call fastcc { i64, i64 } @addFloat128Sigs(i64 %0, i64 %1, i64 %2, i64 %3, i8 noundef zeroext %7, %struct.float_status* noundef %4)
  br label %15

15:                                               ; preds = %13, %11
  %16 = phi { i64, i64 } [ %12, %11 ], [ %14, %13 ]
  ret { i64, i64 } %16
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define { i64, i64 } @float128_mul(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* nocapture noundef %4) local_unnamed_addr #14 {
  %6 = and i64 %1, 281474976710655
  %7 = lshr i64 %1, 48
  %8 = trunc i64 %7 to i32
  %9 = and i32 %8, 32767
  %10 = and i64 %3, 281474976710655
  %11 = lshr i64 %3, 48
  %12 = trunc i64 %11 to i32
  %13 = and i32 %12, 32767
  %14 = xor i64 %3, %1
  %15 = lshr i64 %14, 63
  %16 = trunc i64 %15 to i8
  %17 = icmp eq i32 %9, 32767
  br i1 %17, label %18, label %37

18:                                               ; preds = %5
  %19 = or i64 %6, %0
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %21, label %26

21:                                               ; preds = %18
  %22 = icmp ne i32 %13, 32767
  %23 = or i64 %10, %2
  %24 = icmp eq i64 %23, 0
  %25 = select i1 %22, i1 true, i1 %24
  br i1 %25, label %30, label %26

26:                                               ; preds = %21, %18
  %27 = tail call fastcc { i64, i64 } @propagateFloat128NaN(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* noundef %4)
  %28 = extractvalue { i64, i64 } %27, 0
  %29 = extractvalue { i64, i64 } %27, 1
  br label %269

30:                                               ; preds = %21
  %31 = zext i32 %13 to i64
  %32 = or i64 %23, %31
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %51, label %34

34:                                               ; preds = %30
  %35 = and i64 %14, -9223372036854775808
  %36 = or i64 %35, 9223090561878065152
  br label %269

37:                                               ; preds = %5
  %38 = icmp eq i32 %13, 32767
  br i1 %38, label %39, label %58

39:                                               ; preds = %37
  %40 = or i64 %10, %2
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %46, label %42

42:                                               ; preds = %39
  %43 = tail call fastcc { i64, i64 } @propagateFloat128NaN(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* noundef %4)
  %44 = extractvalue { i64, i64 } %43, 0
  %45 = extractvalue { i64, i64 } %43, 1
  br label %269

46:                                               ; preds = %39
  %47 = zext i32 %9 to i64
  %48 = or i64 %6, %0
  %49 = or i64 %48, %47
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %51, label %55

51:                                               ; preds = %46, %30
  %52 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %53 = load i8, i8* %52, align 1
  %54 = or i8 %53, 1
  store i8 %54, i8* %52, align 1
  br label %269

55:                                               ; preds = %46
  %56 = and i64 %14, -9223372036854775808
  %57 = or i64 %56, 9223090561878065152
  br label %269

58:                                               ; preds = %37
  %59 = icmp eq i32 %9, 0
  br i1 %59, label %60, label %103

60:                                               ; preds = %58
  %61 = or i64 %6, %0
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %65

63:                                               ; preds = %60
  %64 = and i64 %14, -9223372036854775808
  br label %269

65:                                               ; preds = %60
  %66 = icmp eq i64 %6, 0
  br i1 %66, label %67, label %87

67:                                               ; preds = %65
  %ctlz.sh = lshr i64 %0, 1
  %ctlz.step = or i64 %0, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %68 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %68, 6148914691236517205
  %ctpop.sh = lshr i64 %68, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %69 = trunc i64 %ctpop.part to i8
  %70 = add nsw i8 %69, -15
  %71 = sext i8 %70 to i32
  %72 = icmp ult i8 %69, 15
  br i1 %72, label %73, label %80

73:                                               ; preds = %67
  %74 = sub nsw i32 0, %71
  %75 = zext i32 %74 to i64
  %76 = lshr i64 %0, %75
  %77 = and i32 %71, 63
  %78 = zext i32 %77 to i64
  %79 = shl i64 %0, %78
  br label %83

80:                                               ; preds = %67
  %81 = zext i32 %71 to i64
  %82 = shl i64 %0, %81
  br label %83

83:                                               ; preds = %80, %73
  %84 = phi i64 [ %76, %73 ], [ %82, %80 ]
  %85 = phi i64 [ %79, %73 ], [ 0, %80 ]
  %86 = sub nsw i32 -63, %71
  br label %103

87:                                               ; preds = %65
  %ctlz.sh31 = lshr i64 %6, 1
  %ctlz.step32 = or i64 %6, %ctlz.sh31
  %ctlz.sh33 = lshr i64 %ctlz.step32, 2
  %ctlz.step34 = or i64 %ctlz.step32, %ctlz.sh33
  %ctlz.sh35 = lshr i64 %ctlz.step34, 4
  %ctlz.step36 = or i64 %ctlz.step34, %ctlz.sh35
  %ctlz.sh37 = lshr i64 %ctlz.step36, 8
  %ctlz.step38 = or i64 %ctlz.step36, %ctlz.sh37
  %ctlz.sh39 = lshr i64 %ctlz.step38, 16
  %ctlz.step40 = or i64 %ctlz.step38, %ctlz.sh39
  %ctlz.sh41 = lshr i64 %ctlz.step40, 32
  %ctlz.step42 = or i64 %ctlz.step40, %ctlz.sh41
  %88 = xor i64 %ctlz.step42, -1
  %cppop.and143 = and i64 %88, 6148914691236517205
  %ctpop.sh44 = lshr i64 %88, 1
  %cppop.and245 = and i64 %ctpop.sh44, 6148914691236517205
  %ctpop.step46 = add i64 %cppop.and143, %cppop.and245
  %cppop.and147 = and i64 %ctpop.step46, 3689348814741910323
  %ctpop.sh48 = lshr i64 %ctpop.step46, 2
  %cppop.and249 = and i64 %ctpop.sh48, 3689348814741910323
  %ctpop.step50 = add i64 %cppop.and147, %cppop.and249
  %cppop.and151 = and i64 %ctpop.step50, 1085102592571150095
  %ctpop.sh52 = lshr i64 %ctpop.step50, 4
  %cppop.and253 = and i64 %ctpop.sh52, 1085102592571150095
  %ctpop.step54 = add i64 %cppop.and151, %cppop.and253
  %cppop.and155 = and i64 %ctpop.step54, 71777214294589695
  %ctpop.sh56 = lshr i64 %ctpop.step54, 8
  %cppop.and257 = and i64 %ctpop.sh56, 71777214294589695
  %ctpop.step58 = add i64 %cppop.and155, %cppop.and257
  %cppop.and159 = and i64 %ctpop.step58, 281470681808895
  %ctpop.sh60 = lshr i64 %ctpop.step58, 16
  %cppop.and261 = and i64 %ctpop.sh60, 281470681808895
  %ctpop.step62 = add i64 %cppop.and159, %cppop.and261
  %cppop.and163 = and i64 %ctpop.step62, 4294967295
  %ctpop.sh64 = lshr i64 %ctpop.step62, 32
  %cppop.and265 = and i64 %ctpop.sh64, 4294967295
  %ctpop.step66 = add i64 %cppop.and163, %cppop.and265
  %ctpop.part67 = add i64 %ctpop.step66, 0
  %89 = trunc i64 %ctpop.part67 to i32
  %90 = add nsw i32 %89, -15
  %91 = zext i32 %90 to i64
  %92 = shl i64 %0, %91
  %93 = icmp eq i32 %90, 0
  br i1 %93, label %100, label %94

94:                                               ; preds = %87
  %95 = shl i64 %6, %91
  %96 = sub nsw i64 15, %ctpop.part67
  %97 = and i64 %96, 63
  %98 = lshr i64 %0, %97
  %99 = or i64 %95, %98
  br label %100

100:                                              ; preds = %94, %87
  %101 = phi i64 [ %99, %94 ], [ %6, %87 ]
  %102 = sub nsw i32 16, %89
  br label %103

103:                                              ; preds = %100, %83, %58
  %104 = phi i64 [ %6, %58 ], [ %84, %83 ], [ %101, %100 ]
  %105 = phi i64 [ %0, %58 ], [ %85, %83 ], [ %92, %100 ]
  %106 = phi i32 [ %9, %58 ], [ %86, %83 ], [ %102, %100 ]
  %107 = icmp eq i32 %13, 0
  br i1 %107, label %108, label %151

108:                                              ; preds = %103
  %109 = or i64 %10, %2
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %111, label %113

111:                                              ; preds = %108
  %112 = and i64 %14, -9223372036854775808
  br label %269

113:                                              ; preds = %108
  %114 = icmp eq i64 %10, 0
  br i1 %114, label %115, label %135

115:                                              ; preds = %113
  %ctlz.sh68 = lshr i64 %2, 1
  %ctlz.step69 = or i64 %2, %ctlz.sh68
  %ctlz.sh70 = lshr i64 %ctlz.step69, 2
  %ctlz.step71 = or i64 %ctlz.step69, %ctlz.sh70
  %ctlz.sh72 = lshr i64 %ctlz.step71, 4
  %ctlz.step73 = or i64 %ctlz.step71, %ctlz.sh72
  %ctlz.sh74 = lshr i64 %ctlz.step73, 8
  %ctlz.step75 = or i64 %ctlz.step73, %ctlz.sh74
  %ctlz.sh76 = lshr i64 %ctlz.step75, 16
  %ctlz.step77 = or i64 %ctlz.step75, %ctlz.sh76
  %ctlz.sh78 = lshr i64 %ctlz.step77, 32
  %ctlz.step79 = or i64 %ctlz.step77, %ctlz.sh78
  %116 = xor i64 %ctlz.step79, -1
  %cppop.and180 = and i64 %116, 6148914691236517205
  %ctpop.sh81 = lshr i64 %116, 1
  %cppop.and282 = and i64 %ctpop.sh81, 6148914691236517205
  %ctpop.step83 = add i64 %cppop.and180, %cppop.and282
  %cppop.and184 = and i64 %ctpop.step83, 3689348814741910323
  %ctpop.sh85 = lshr i64 %ctpop.step83, 2
  %cppop.and286 = and i64 %ctpop.sh85, 3689348814741910323
  %ctpop.step87 = add i64 %cppop.and184, %cppop.and286
  %cppop.and188 = and i64 %ctpop.step87, 1085102592571150095
  %ctpop.sh89 = lshr i64 %ctpop.step87, 4
  %cppop.and290 = and i64 %ctpop.sh89, 1085102592571150095
  %ctpop.step91 = add i64 %cppop.and188, %cppop.and290
  %cppop.and192 = and i64 %ctpop.step91, 71777214294589695
  %ctpop.sh93 = lshr i64 %ctpop.step91, 8
  %cppop.and294 = and i64 %ctpop.sh93, 71777214294589695
  %ctpop.step95 = add i64 %cppop.and192, %cppop.and294
  %cppop.and196 = and i64 %ctpop.step95, 281470681808895
  %ctpop.sh97 = lshr i64 %ctpop.step95, 16
  %cppop.and298 = and i64 %ctpop.sh97, 281470681808895
  %ctpop.step99 = add i64 %cppop.and196, %cppop.and298
  %cppop.and1100 = and i64 %ctpop.step99, 4294967295
  %ctpop.sh101 = lshr i64 %ctpop.step99, 32
  %cppop.and2102 = and i64 %ctpop.sh101, 4294967295
  %ctpop.step103 = add i64 %cppop.and1100, %cppop.and2102
  %ctpop.part104 = add i64 %ctpop.step103, 0
  %117 = trunc i64 %ctpop.part104 to i8
  %118 = add nsw i8 %117, -15
  %119 = sext i8 %118 to i32
  %120 = icmp ult i8 %117, 15
  br i1 %120, label %121, label %128

121:                                              ; preds = %115
  %122 = sub nsw i32 0, %119
  %123 = zext i32 %122 to i64
  %124 = lshr i64 %2, %123
  %125 = and i32 %119, 63
  %126 = zext i32 %125 to i64
  %127 = shl i64 %2, %126
  br label %131

128:                                              ; preds = %115
  %129 = zext i32 %119 to i64
  %130 = shl i64 %2, %129
  br label %131

131:                                              ; preds = %128, %121
  %132 = phi i64 [ %124, %121 ], [ %130, %128 ]
  %133 = phi i64 [ %127, %121 ], [ 0, %128 ]
  %134 = sub nsw i32 -63, %119
  br label %151

135:                                              ; preds = %113
  %ctlz.sh105 = lshr i64 %10, 1
  %ctlz.step106 = or i64 %10, %ctlz.sh105
  %ctlz.sh107 = lshr i64 %ctlz.step106, 2
  %ctlz.step108 = or i64 %ctlz.step106, %ctlz.sh107
  %ctlz.sh109 = lshr i64 %ctlz.step108, 4
  %ctlz.step110 = or i64 %ctlz.step108, %ctlz.sh109
  %ctlz.sh111 = lshr i64 %ctlz.step110, 8
  %ctlz.step112 = or i64 %ctlz.step110, %ctlz.sh111
  %ctlz.sh113 = lshr i64 %ctlz.step112, 16
  %ctlz.step114 = or i64 %ctlz.step112, %ctlz.sh113
  %ctlz.sh115 = lshr i64 %ctlz.step114, 32
  %ctlz.step116 = or i64 %ctlz.step114, %ctlz.sh115
  %136 = xor i64 %ctlz.step116, -1
  %cppop.and1117 = and i64 %136, 6148914691236517205
  %ctpop.sh118 = lshr i64 %136, 1
  %cppop.and2119 = and i64 %ctpop.sh118, 6148914691236517205
  %ctpop.step120 = add i64 %cppop.and1117, %cppop.and2119
  %cppop.and1121 = and i64 %ctpop.step120, 3689348814741910323
  %ctpop.sh122 = lshr i64 %ctpop.step120, 2
  %cppop.and2123 = and i64 %ctpop.sh122, 3689348814741910323
  %ctpop.step124 = add i64 %cppop.and1121, %cppop.and2123
  %cppop.and1125 = and i64 %ctpop.step124, 1085102592571150095
  %ctpop.sh126 = lshr i64 %ctpop.step124, 4
  %cppop.and2127 = and i64 %ctpop.sh126, 1085102592571150095
  %ctpop.step128 = add i64 %cppop.and1125, %cppop.and2127
  %cppop.and1129 = and i64 %ctpop.step128, 71777214294589695
  %ctpop.sh130 = lshr i64 %ctpop.step128, 8
  %cppop.and2131 = and i64 %ctpop.sh130, 71777214294589695
  %ctpop.step132 = add i64 %cppop.and1129, %cppop.and2131
  %cppop.and1133 = and i64 %ctpop.step132, 281470681808895
  %ctpop.sh134 = lshr i64 %ctpop.step132, 16
  %cppop.and2135 = and i64 %ctpop.sh134, 281470681808895
  %ctpop.step136 = add i64 %cppop.and1133, %cppop.and2135
  %cppop.and1137 = and i64 %ctpop.step136, 4294967295
  %ctpop.sh138 = lshr i64 %ctpop.step136, 32
  %cppop.and2139 = and i64 %ctpop.sh138, 4294967295
  %ctpop.step140 = add i64 %cppop.and1137, %cppop.and2139
  %ctpop.part141 = add i64 %ctpop.step140, 0
  %137 = trunc i64 %ctpop.part141 to i32
  %138 = add nsw i32 %137, -15
  %139 = zext i32 %138 to i64
  %140 = shl i64 %2, %139
  %141 = icmp eq i32 %138, 0
  br i1 %141, label %148, label %142

142:                                              ; preds = %135
  %143 = shl i64 %10, %139
  %144 = sub nsw i64 15, %ctpop.part141
  %145 = and i64 %144, 63
  %146 = lshr i64 %2, %145
  %147 = or i64 %143, %146
  br label %148

148:                                              ; preds = %142, %135
  %149 = phi i64 [ %147, %142 ], [ %10, %135 ]
  %150 = sub nsw i32 16, %137
  br label %151

151:                                              ; preds = %148, %131, %103
  %152 = phi i32 [ %13, %103 ], [ %150, %148 ], [ %134, %131 ]
  %153 = phi i64 [ %10, %103 ], [ %149, %148 ], [ %132, %131 ]
  %154 = phi i64 [ %2, %103 ], [ %140, %148 ], [ %133, %131 ]
  %155 = add nsw i32 %152, %106
  %156 = add nsw i32 %155, -16384
  %157 = or i64 %104, 281474976710656
  %158 = shl i64 %154, 16
  %159 = tail call i64 @llvm.fshl.i64(i64 %153, i64 %154, i64 16)
  %160 = lshr i64 %105, 32
  %161 = lshr i64 %158, 32
  %162 = and i64 %105, 4294967295
  %163 = and i64 %158, 4294901760
  %164 = mul nuw i64 %163, %162
  %165 = mul nuw i64 %161, %162
  %166 = mul nuw i64 %163, %160
  %167 = mul nuw i64 %161, %160
  %168 = add i64 %165, %166
  %169 = icmp ult i64 %168, %166
  %170 = select i1 %169, i64 4294967296, i64 0
  %171 = lshr i64 %168, 32
  %172 = shl i64 %168, 32
  %173 = add i64 %172, %164
  %174 = icmp ult i64 %173, %172
  %175 = zext i1 %174 to i64
  %176 = add nuw i64 %171, %167
  %177 = lshr i64 %159, 32
  %178 = and i64 %159, 4294967295
  %179 = mul nuw i64 %178, %162
  %180 = mul nuw i64 %177, %162
  %181 = mul nuw i64 %178, %160
  %182 = mul nuw i64 %177, %160
  %183 = add i64 %180, %181
  %184 = icmp ult i64 %183, %181
  %185 = select i1 %184, i64 4294967296, i64 0
  %186 = lshr i64 %183, 32
  %187 = shl i64 %183, 32
  %188 = add i64 %187, %179
  %189 = icmp ult i64 %188, %187
  %190 = zext i1 %189 to i64
  %191 = add nuw i64 %186, %182
  %192 = add i64 %191, %185
  %193 = add i64 %176, %188
  %194 = add i64 %193, %170
  %195 = add i64 %194, %175
  %196 = icmp ult i64 %195, %188
  %197 = zext i1 %196 to i64
  %198 = lshr i64 %157, 32
  %199 = and i64 %104, 4294967295
  %200 = mul nuw i64 %178, %199
  %201 = mul nuw i64 %177, %199
  %202 = mul nuw i64 %178, %198
  %203 = mul nuw i64 %177, %198
  %204 = add i64 %201, %202
  %205 = icmp ult i64 %204, %202
  %206 = select i1 %205, i64 4294967296, i64 0
  %207 = lshr i64 %204, 32
  %208 = shl i64 %204, 32
  %209 = add i64 %208, %200
  %210 = icmp ult i64 %209, %208
  %211 = zext i1 %210 to i64
  %212 = add i64 %192, %209
  %213 = add i64 %212, %190
  %214 = add i64 %213, %197
  %215 = icmp ult i64 %214, %209
  %216 = zext i1 %215 to i64
  %217 = mul nuw i64 %163, %199
  %218 = mul nuw i64 %161, %199
  %219 = mul nuw i64 %163, %198
  %220 = mul nuw i64 %161, %198
  %221 = add i64 %218, %219
  %222 = icmp ult i64 %221, %219
  %223 = select i1 %222, i64 4294967296, i64 0
  %224 = lshr i64 %221, 32
  %225 = shl i64 %221, 32
  %226 = add i64 %225, %217
  %227 = icmp ult i64 %226, %225
  %228 = zext i1 %227 to i64
  %229 = add nuw i64 %224, %220
  %230 = add i64 %229, %223
  %231 = add i64 %230, %228
  %232 = add i64 %195, %226
  %233 = icmp ult i64 %232, %226
  %234 = zext i1 %233 to i64
  %235 = add i64 %231, %234
  %236 = add i64 %235, %214
  %237 = icmp ult i64 %236, %214
  %238 = zext i1 %237 to i64
  %239 = add i64 %236, %105
  %240 = icmp ult i64 %239, %236
  %241 = zext i1 %240 to i64
  %242 = add i64 %203, %157
  %243 = add i64 %242, %207
  %244 = add i64 %243, %206
  %245 = add i64 %244, %211
  %246 = add i64 %245, %216
  %247 = add i64 %246, %238
  %248 = add i64 %247, %241
  %249 = icmp ne i64 %173, 0
  %250 = zext i1 %249 to i64
  %251 = or i64 %232, %250
  %252 = icmp ugt i64 %248, 562949953421311
  br i1 %252, label %253, label %261

253:                                              ; preds = %151
  %254 = shl i64 %239, 63
  %255 = tail call i64 @llvm.fshl.i64(i64 %248, i64 %239, i64 63)
  %256 = lshr i64 %248, 1
  %257 = icmp ne i64 %251, 0
  %258 = zext i1 %257 to i64
  %259 = or i64 %254, %258
  %260 = add nsw i32 %155, -16383
  br label %261

261:                                              ; preds = %253, %151
  %262 = phi i64 [ %256, %253 ], [ %248, %151 ]
  %263 = phi i64 [ %255, %253 ], [ %239, %151 ]
  %264 = phi i64 [ %259, %253 ], [ %251, %151 ]
  %265 = phi i32 [ %260, %253 ], [ %156, %151 ]
  %266 = tail call fastcc { i64, i64 } @roundAndPackFloat128(i8 noundef zeroext %16, i32 noundef %265, i64 noundef %262, i64 noundef %263, i64 noundef %264, %struct.float_status* noundef %4)
  %267 = extractvalue { i64, i64 } %266, 0
  %268 = extractvalue { i64, i64 } %266, 1
  br label %269

269:                                              ; preds = %261, %111, %63, %55, %51, %42, %34, %26
  %270 = phi i64 [ %28, %26 ], [ 0, %51 ], [ 0, %34 ], [ %44, %42 ], [ 0, %55 ], [ 0, %63 ], [ 0, %111 ], [ %267, %261 ]
  %271 = phi i64 [ %29, %26 ], [ -140737488355328, %51 ], [ %36, %34 ], [ %45, %42 ], [ %57, %55 ], [ %64, %63 ], [ %112, %111 ], [ %268, %261 ]
  %272 = insertvalue { i64, i64 } poison, i64 %270, 0
  %273 = insertvalue { i64, i64 } %272, i64 %271, 1
  ret { i64, i64 } %273
}

; Function Attrs: nofree nosync nounwind uwtable
define { i64, i64 } @float128_div(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* nocapture noundef %4) local_unnamed_addr #20 {
  %6 = and i64 %1, 281474976710655
  %7 = lshr i64 %1, 48
  %8 = trunc i64 %7 to i32
  %9 = and i32 %8, 32767
  %10 = and i64 %3, 281474976710655
  %11 = lshr i64 %3, 48
  %12 = trunc i64 %11 to i32
  %13 = and i32 %12, 32767
  %14 = xor i64 %3, %1
  %15 = lshr i64 %14, 63
  %16 = trunc i64 %15 to i8
  %17 = icmp eq i32 %9, 32767
  br i1 %17, label %18, label %37

18:                                               ; preds = %5
  %19 = or i64 %6, %0
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %25, label %21

21:                                               ; preds = %18
  %22 = tail call fastcc { i64, i64 } @propagateFloat128NaN(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* noundef %4)
  %23 = extractvalue { i64, i64 } %22, 0
  %24 = extractvalue { i64, i64 } %22, 1
  br label %436

25:                                               ; preds = %18
  %26 = icmp eq i32 %13, 32767
  br i1 %26, label %27, label %34

27:                                               ; preds = %25
  %28 = or i64 %10, %2
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %55, label %30

30:                                               ; preds = %27
  %31 = tail call fastcc { i64, i64 } @propagateFloat128NaN(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* noundef %4)
  %32 = extractvalue { i64, i64 } %31, 0
  %33 = extractvalue { i64, i64 } %31, 1
  br label %436

34:                                               ; preds = %25
  %35 = and i64 %14, -9223372036854775808
  %36 = or i64 %35, 9223090561878065152
  br label %436

37:                                               ; preds = %5
  switch i32 %13, label %103 [
    i32 32767, label %38
    i32 0, label %47
  ]

38:                                               ; preds = %37
  %39 = or i64 %10, %2
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %45, label %41

41:                                               ; preds = %38
  %42 = tail call fastcc { i64, i64 } @propagateFloat128NaN(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* noundef %4)
  %43 = extractvalue { i64, i64 } %42, 0
  %44 = extractvalue { i64, i64 } %42, 1
  br label %436

45:                                               ; preds = %38
  %46 = and i64 %14, -9223372036854775808
  br label %436

47:                                               ; preds = %37
  %48 = or i64 %10, %2
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %65

50:                                               ; preds = %47
  %51 = zext i32 %9 to i64
  %52 = or i64 %6, %0
  %53 = or i64 %52, %51
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %55, label %59

55:                                               ; preds = %50, %27
  %56 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %57 = load i8, i8* %56, align 1
  %58 = or i8 %57, 1
  store i8 %58, i8* %56, align 1
  br label %436

59:                                               ; preds = %50
  %60 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %61 = load i8, i8* %60, align 1
  %62 = or i8 %61, 4
  store i8 %62, i8* %60, align 1
  %63 = and i64 %14, -9223372036854775808
  %64 = or i64 %63, 9223090561878065152
  br label %436

65:                                               ; preds = %47
  %66 = icmp eq i64 %10, 0
  br i1 %66, label %67, label %87

67:                                               ; preds = %65
  %ctlz.sh = lshr i64 %2, 1
  %ctlz.step = or i64 %2, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %68 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %68, 6148914691236517205
  %ctpop.sh = lshr i64 %68, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %69 = trunc i64 %ctpop.part to i8
  %70 = add nsw i8 %69, -15
  %71 = sext i8 %70 to i32
  %72 = icmp ult i8 %69, 15
  br i1 %72, label %73, label %80

73:                                               ; preds = %67
  %74 = sub nsw i32 0, %71
  %75 = zext i32 %74 to i64
  %76 = lshr i64 %2, %75
  %77 = and i32 %71, 63
  %78 = zext i32 %77 to i64
  %79 = shl i64 %2, %78
  br label %83

80:                                               ; preds = %67
  %81 = zext i32 %71 to i64
  %82 = shl i64 %2, %81
  br label %83

83:                                               ; preds = %80, %73
  %84 = phi i64 [ %76, %73 ], [ %82, %80 ]
  %85 = phi i64 [ %79, %73 ], [ 0, %80 ]
  %86 = sub nsw i32 -63, %71
  br label %103

87:                                               ; preds = %65
  %ctlz.sh31 = lshr i64 %10, 1
  %ctlz.step32 = or i64 %10, %ctlz.sh31
  %ctlz.sh33 = lshr i64 %ctlz.step32, 2
  %ctlz.step34 = or i64 %ctlz.step32, %ctlz.sh33
  %ctlz.sh35 = lshr i64 %ctlz.step34, 4
  %ctlz.step36 = or i64 %ctlz.step34, %ctlz.sh35
  %ctlz.sh37 = lshr i64 %ctlz.step36, 8
  %ctlz.step38 = or i64 %ctlz.step36, %ctlz.sh37
  %ctlz.sh39 = lshr i64 %ctlz.step38, 16
  %ctlz.step40 = or i64 %ctlz.step38, %ctlz.sh39
  %ctlz.sh41 = lshr i64 %ctlz.step40, 32
  %ctlz.step42 = or i64 %ctlz.step40, %ctlz.sh41
  %88 = xor i64 %ctlz.step42, -1
  %cppop.and143 = and i64 %88, 6148914691236517205
  %ctpop.sh44 = lshr i64 %88, 1
  %cppop.and245 = and i64 %ctpop.sh44, 6148914691236517205
  %ctpop.step46 = add i64 %cppop.and143, %cppop.and245
  %cppop.and147 = and i64 %ctpop.step46, 3689348814741910323
  %ctpop.sh48 = lshr i64 %ctpop.step46, 2
  %cppop.and249 = and i64 %ctpop.sh48, 3689348814741910323
  %ctpop.step50 = add i64 %cppop.and147, %cppop.and249
  %cppop.and151 = and i64 %ctpop.step50, 1085102592571150095
  %ctpop.sh52 = lshr i64 %ctpop.step50, 4
  %cppop.and253 = and i64 %ctpop.sh52, 1085102592571150095
  %ctpop.step54 = add i64 %cppop.and151, %cppop.and253
  %cppop.and155 = and i64 %ctpop.step54, 71777214294589695
  %ctpop.sh56 = lshr i64 %ctpop.step54, 8
  %cppop.and257 = and i64 %ctpop.sh56, 71777214294589695
  %ctpop.step58 = add i64 %cppop.and155, %cppop.and257
  %cppop.and159 = and i64 %ctpop.step58, 281470681808895
  %ctpop.sh60 = lshr i64 %ctpop.step58, 16
  %cppop.and261 = and i64 %ctpop.sh60, 281470681808895
  %ctpop.step62 = add i64 %cppop.and159, %cppop.and261
  %cppop.and163 = and i64 %ctpop.step62, 4294967295
  %ctpop.sh64 = lshr i64 %ctpop.step62, 32
  %cppop.and265 = and i64 %ctpop.sh64, 4294967295
  %ctpop.step66 = add i64 %cppop.and163, %cppop.and265
  %ctpop.part67 = add i64 %ctpop.step66, 0
  %89 = trunc i64 %ctpop.part67 to i32
  %90 = add nsw i32 %89, -15
  %91 = zext i32 %90 to i64
  %92 = shl i64 %2, %91
  %93 = icmp eq i32 %90, 0
  br i1 %93, label %100, label %94

94:                                               ; preds = %87
  %95 = shl i64 %10, %91
  %96 = sub nsw i64 15, %ctpop.part67
  %97 = and i64 %96, 63
  %98 = lshr i64 %2, %97
  %99 = or i64 %95, %98
  br label %100

100:                                              ; preds = %94, %87
  %101 = phi i64 [ %99, %94 ], [ %10, %87 ]
  %102 = sub nsw i32 16, %89
  br label %103

103:                                              ; preds = %100, %83, %37
  %104 = phi i64 [ %10, %37 ], [ %84, %83 ], [ %101, %100 ]
  %105 = phi i64 [ %2, %37 ], [ %85, %83 ], [ %92, %100 ]
  %106 = phi i32 [ %13, %37 ], [ %86, %83 ], [ %102, %100 ]
  %107 = icmp eq i32 %9, 0
  br i1 %107, label %108, label %151

108:                                              ; preds = %103
  %109 = or i64 %6, %0
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %111, label %113

111:                                              ; preds = %108
  %112 = and i64 %14, -9223372036854775808
  br label %436

113:                                              ; preds = %108
  %114 = icmp eq i64 %6, 0
  br i1 %114, label %115, label %135

115:                                              ; preds = %113
  %ctlz.sh68 = lshr i64 %0, 1
  %ctlz.step69 = or i64 %0, %ctlz.sh68
  %ctlz.sh70 = lshr i64 %ctlz.step69, 2
  %ctlz.step71 = or i64 %ctlz.step69, %ctlz.sh70
  %ctlz.sh72 = lshr i64 %ctlz.step71, 4
  %ctlz.step73 = or i64 %ctlz.step71, %ctlz.sh72
  %ctlz.sh74 = lshr i64 %ctlz.step73, 8
  %ctlz.step75 = or i64 %ctlz.step73, %ctlz.sh74
  %ctlz.sh76 = lshr i64 %ctlz.step75, 16
  %ctlz.step77 = or i64 %ctlz.step75, %ctlz.sh76
  %ctlz.sh78 = lshr i64 %ctlz.step77, 32
  %ctlz.step79 = or i64 %ctlz.step77, %ctlz.sh78
  %116 = xor i64 %ctlz.step79, -1
  %cppop.and180 = and i64 %116, 6148914691236517205
  %ctpop.sh81 = lshr i64 %116, 1
  %cppop.and282 = and i64 %ctpop.sh81, 6148914691236517205
  %ctpop.step83 = add i64 %cppop.and180, %cppop.and282
  %cppop.and184 = and i64 %ctpop.step83, 3689348814741910323
  %ctpop.sh85 = lshr i64 %ctpop.step83, 2
  %cppop.and286 = and i64 %ctpop.sh85, 3689348814741910323
  %ctpop.step87 = add i64 %cppop.and184, %cppop.and286
  %cppop.and188 = and i64 %ctpop.step87, 1085102592571150095
  %ctpop.sh89 = lshr i64 %ctpop.step87, 4
  %cppop.and290 = and i64 %ctpop.sh89, 1085102592571150095
  %ctpop.step91 = add i64 %cppop.and188, %cppop.and290
  %cppop.and192 = and i64 %ctpop.step91, 71777214294589695
  %ctpop.sh93 = lshr i64 %ctpop.step91, 8
  %cppop.and294 = and i64 %ctpop.sh93, 71777214294589695
  %ctpop.step95 = add i64 %cppop.and192, %cppop.and294
  %cppop.and196 = and i64 %ctpop.step95, 281470681808895
  %ctpop.sh97 = lshr i64 %ctpop.step95, 16
  %cppop.and298 = and i64 %ctpop.sh97, 281470681808895
  %ctpop.step99 = add i64 %cppop.and196, %cppop.and298
  %cppop.and1100 = and i64 %ctpop.step99, 4294967295
  %ctpop.sh101 = lshr i64 %ctpop.step99, 32
  %cppop.and2102 = and i64 %ctpop.sh101, 4294967295
  %ctpop.step103 = add i64 %cppop.and1100, %cppop.and2102
  %ctpop.part104 = add i64 %ctpop.step103, 0
  %117 = trunc i64 %ctpop.part104 to i8
  %118 = add nsw i8 %117, -15
  %119 = sext i8 %118 to i32
  %120 = icmp ult i8 %117, 15
  br i1 %120, label %121, label %128

121:                                              ; preds = %115
  %122 = sub nsw i32 0, %119
  %123 = zext i32 %122 to i64
  %124 = lshr i64 %0, %123
  %125 = and i32 %119, 63
  %126 = zext i32 %125 to i64
  %127 = shl i64 %0, %126
  br label %131

128:                                              ; preds = %115
  %129 = zext i32 %119 to i64
  %130 = shl i64 %0, %129
  br label %131

131:                                              ; preds = %128, %121
  %132 = phi i64 [ %124, %121 ], [ %130, %128 ]
  %133 = phi i64 [ %127, %121 ], [ 0, %128 ]
  %134 = sub nsw i32 -63, %119
  br label %151

135:                                              ; preds = %113
  %ctlz.sh105 = lshr i64 %6, 1
  %ctlz.step106 = or i64 %6, %ctlz.sh105
  %ctlz.sh107 = lshr i64 %ctlz.step106, 2
  %ctlz.step108 = or i64 %ctlz.step106, %ctlz.sh107
  %ctlz.sh109 = lshr i64 %ctlz.step108, 4
  %ctlz.step110 = or i64 %ctlz.step108, %ctlz.sh109
  %ctlz.sh111 = lshr i64 %ctlz.step110, 8
  %ctlz.step112 = or i64 %ctlz.step110, %ctlz.sh111
  %ctlz.sh113 = lshr i64 %ctlz.step112, 16
  %ctlz.step114 = or i64 %ctlz.step112, %ctlz.sh113
  %ctlz.sh115 = lshr i64 %ctlz.step114, 32
  %ctlz.step116 = or i64 %ctlz.step114, %ctlz.sh115
  %136 = xor i64 %ctlz.step116, -1
  %cppop.and1117 = and i64 %136, 6148914691236517205
  %ctpop.sh118 = lshr i64 %136, 1
  %cppop.and2119 = and i64 %ctpop.sh118, 6148914691236517205
  %ctpop.step120 = add i64 %cppop.and1117, %cppop.and2119
  %cppop.and1121 = and i64 %ctpop.step120, 3689348814741910323
  %ctpop.sh122 = lshr i64 %ctpop.step120, 2
  %cppop.and2123 = and i64 %ctpop.sh122, 3689348814741910323
  %ctpop.step124 = add i64 %cppop.and1121, %cppop.and2123
  %cppop.and1125 = and i64 %ctpop.step124, 1085102592571150095
  %ctpop.sh126 = lshr i64 %ctpop.step124, 4
  %cppop.and2127 = and i64 %ctpop.sh126, 1085102592571150095
  %ctpop.step128 = add i64 %cppop.and1125, %cppop.and2127
  %cppop.and1129 = and i64 %ctpop.step128, 71777214294589695
  %ctpop.sh130 = lshr i64 %ctpop.step128, 8
  %cppop.and2131 = and i64 %ctpop.sh130, 71777214294589695
  %ctpop.step132 = add i64 %cppop.and1129, %cppop.and2131
  %cppop.and1133 = and i64 %ctpop.step132, 281470681808895
  %ctpop.sh134 = lshr i64 %ctpop.step132, 16
  %cppop.and2135 = and i64 %ctpop.sh134, 281470681808895
  %ctpop.step136 = add i64 %cppop.and1133, %cppop.and2135
  %cppop.and1137 = and i64 %ctpop.step136, 4294967295
  %ctpop.sh138 = lshr i64 %ctpop.step136, 32
  %cppop.and2139 = and i64 %ctpop.sh138, 4294967295
  %ctpop.step140 = add i64 %cppop.and1137, %cppop.and2139
  %ctpop.part141 = add i64 %ctpop.step140, 0
  %137 = trunc i64 %ctpop.part141 to i32
  %138 = add nsw i32 %137, -15
  %139 = zext i32 %138 to i64
  %140 = shl i64 %0, %139
  %141 = icmp eq i32 %138, 0
  br i1 %141, label %148, label %142

142:                                              ; preds = %135
  %143 = shl i64 %6, %139
  %144 = sub nsw i64 15, %ctpop.part141
  %145 = and i64 %144, 63
  %146 = lshr i64 %0, %145
  %147 = or i64 %143, %146
  br label %148

148:                                              ; preds = %142, %135
  %149 = phi i64 [ %147, %142 ], [ %6, %135 ]
  %150 = sub nsw i32 16, %137
  br label %151

151:                                              ; preds = %148, %131, %103
  %152 = phi i64 [ %0, %103 ], [ %133, %131 ], [ %140, %148 ]
  %153 = phi i64 [ %6, %103 ], [ %132, %131 ], [ %149, %148 ]
  %154 = phi i32 [ %9, %103 ], [ %134, %131 ], [ %150, %148 ]
  %155 = sub nsw i32 %154, %106
  %156 = add nsw i32 %155, 16381
  %157 = shl i64 %152, 15
  %158 = shl i64 %153, 15
  %159 = lshr i64 %152, 49
  %160 = or i64 %159, %158
  %161 = or i64 %160, -9223372036854775808
  %162 = shl i64 %105, 15
  %163 = shl i64 %104, 15
  %164 = or i64 %163, -9223372036854775808
  %165 = lshr i64 %105, 49
  %166 = or i64 %165, %164
  %167 = icmp ult i64 %166, %161
  %168 = icmp eq i64 %166, %161
  %169 = icmp ule i64 %162, %157
  %170 = and i1 %169, %168
  %171 = or i1 %167, %170
  %172 = lshr i64 %161, 1
  %173 = tail call i64 @llvm.fshl.i64(i64 %159, i64 %157, i64 63)
  %174 = add nsw i32 %155, 16382
  %175 = select i1 %171, i64 %173, i64 %157
  %176 = select i1 %171, i64 %172, i64 %161
  %177 = select i1 %171, i32 %174, i32 %156
  %178 = icmp ugt i64 %166, %176
  %179 = lshr i64 %164, 32
  br i1 %178, label %182, label %180

180:                                              ; preds = %151
  %181 = and i64 %166, 4294967295
  br label %227

182:                                              ; preds = %151
  %183 = and i64 %164, -4294967296
  %184 = icmp ugt i64 %183, %176
  br i1 %184, label %185, label %188

185:                                              ; preds = %182
  %186 = udiv i64 %176, %179
  %187 = shl i64 %186, 32
  br label %188

188:                                              ; preds = %185, %182
  %189 = phi i64 [ %187, %185 ], [ -4294967296, %182 ]
  %190 = lshr exact i64 %189, 32
  %191 = and i64 %166, 4294967295
  %192 = mul nuw i64 %190, %191
  %193 = mul nuw i64 %190, %179
  %194 = lshr i64 %192, 32
  %195 = shl i64 %192, 32
  %196 = sub i64 %175, %195
  %197 = icmp ult i64 %175, %195
  %198 = sext i1 %197 to i64
  %199 = add nuw i64 %193, %194
  %200 = sub i64 %176, %199
  %201 = add i64 %200, %198
  %202 = icmp slt i64 %201, 0
  br i1 %202, label %203, label %216

203:                                              ; preds = %188
  %204 = shl i64 %166, 32
  br label %205

205:                                              ; preds = %205, %203
  %206 = phi i64 [ %189, %203 ], [ %209, %205 ]
  %207 = phi i64 [ %201, %203 ], [ %214, %205 ]
  %208 = phi i64 [ %196, %203 ], [ %210, %205 ]
  %209 = add i64 %206, -4294967296
  %210 = add i64 %208, %204
  %211 = add i64 %207, %179
  %212 = icmp ult i64 %210, %208
  %213 = zext i1 %212 to i64
  %214 = add i64 %211, %213
  %215 = icmp slt i64 %214, 0
  br i1 %215, label %205, label %216, !llvm.loop !50

216:                                              ; preds = %205, %188
  %217 = phi i64 [ %196, %188 ], [ %210, %205 ]
  %218 = phi i64 [ %201, %188 ], [ %214, %205 ]
  %219 = phi i64 [ %189, %188 ], [ %209, %205 ]
  %220 = tail call i64 @llvm.fshl.i64(i64 %218, i64 %217, i64 32) #30
  %221 = icmp ugt i64 %183, %220
  br i1 %221, label %222, label %224

222:                                              ; preds = %216
  %223 = udiv i64 %220, %179
  br label %224

224:                                              ; preds = %222, %216
  %225 = phi i64 [ %223, %222 ], [ 4294967295, %216 ]
  %226 = or i64 %225, %219
  br label %227

227:                                              ; preds = %180, %224
  %228 = phi i64 [ %181, %180 ], [ %191, %224 ]
  %229 = phi i64 [ -1, %180 ], [ %226, %224 ]
  %230 = lshr i64 %162, 32
  %231 = lshr i64 %229, 32
  %232 = and i64 %162, 4294934528
  %233 = and i64 %229, 4294967295
  %234 = mul nuw i64 %233, %232
  %235 = mul nuw i64 %231, %232
  %236 = mul nuw i64 %233, %230
  %237 = mul nuw i64 %231, %230
  %238 = add i64 %235, %236
  %239 = icmp ult i64 %238, %236
  %240 = select i1 %239, i64 4294967296, i64 0
  %241 = lshr i64 %238, 32
  %242 = shl i64 %238, 32
  %243 = add i64 %242, %234
  %244 = icmp ult i64 %243, %242
  %245 = zext i1 %244 to i64
  %246 = add nuw i64 %241, %237
  %247 = add i64 %246, %240
  %248 = mul nuw i64 %233, %228
  %249 = mul nuw i64 %231, %228
  %250 = mul nuw i64 %233, %179
  %251 = mul nuw i64 %231, %179
  %252 = add i64 %249, %250
  %253 = icmp ult i64 %252, %250
  %254 = select i1 %253, i64 -4294967296, i64 0
  %255 = lshr i64 %252, 32
  %256 = shl i64 %252, 32
  %257 = add i64 %256, %248
  %258 = icmp ult i64 %257, %256
  %259 = sext i1 %258 to i64
  %260 = add i64 %247, %257
  %261 = add i64 %260, %245
  %262 = icmp ult i64 %261, %257
  %263 = sext i1 %262 to i64
  %264 = sub i64 0, %243
  %265 = icmp ne i64 %243, 0
  %266 = sub i64 %175, %261
  %267 = icmp ult i64 %175, %261
  %268 = zext i1 %265 to i64
  %269 = icmp ult i64 %266, %268
  %270 = sext i1 %269 to i64
  %271 = sub i64 %266, %268
  %272 = sext i1 %267 to i64
  %273 = add i64 %251, %255
  %274 = sub i64 %176, %273
  %275 = add i64 %274, %254
  %276 = add i64 %275, %259
  %277 = add i64 %276, %263
  %278 = add i64 %277, %272
  %279 = add i64 %278, %270
  %280 = icmp slt i64 %279, 0
  br i1 %280, label %281, label %299

281:                                              ; preds = %227, %281
  %282 = phi i64 [ %287, %281 ], [ %264, %227 ]
  %283 = phi i64 [ %292, %281 ], [ %271, %227 ]
  %284 = phi i64 [ %297, %281 ], [ %279, %227 ]
  %285 = phi i64 [ %286, %281 ], [ %229, %227 ]
  %286 = add i64 %285, -1
  %287 = add i64 %282, %162
  %288 = icmp ult i64 %287, %282
  %289 = add i64 %283, %166
  %290 = icmp ult i64 %289, %283
  %291 = zext i1 %288 to i64
  %292 = add i64 %289, %291
  %293 = icmp ult i64 %292, %291
  %294 = zext i1 %293 to i64
  %295 = zext i1 %290 to i64
  %296 = add nsw i64 %284, %295
  %297 = add nsw i64 %296, %294
  %298 = icmp slt i64 %297, 0
  br i1 %298, label %281, label %299, !llvm.loop !99

299:                                              ; preds = %281, %227
  %300 = phi i64 [ %229, %227 ], [ %286, %281 ]
  %301 = phi i64 [ %271, %227 ], [ %292, %281 ]
  %302 = phi i64 [ %264, %227 ], [ %287, %281 ]
  %303 = icmp ugt i64 %166, %301
  br i1 %303, label %304, label %428

304:                                              ; preds = %299
  %305 = and i64 %164, -4294967296
  %306 = icmp ugt i64 %305, %301
  br i1 %306, label %307, label %310

307:                                              ; preds = %304
  %308 = udiv i64 %301, %179
  %309 = shl i64 %308, 32
  br label %310

310:                                              ; preds = %307, %304
  %311 = phi i64 [ %309, %307 ], [ -4294967296, %304 ]
  %312 = lshr exact i64 %311, 32
  %313 = mul nuw i64 %312, %228
  %314 = mul nuw i64 %312, %179
  %315 = lshr i64 %313, 32
  %316 = shl i64 %313, 32
  %317 = sub i64 %302, %316
  %318 = icmp ult i64 %302, %316
  %319 = sext i1 %318 to i64
  %320 = add i64 %314, %315
  %321 = sub i64 %301, %320
  %322 = add i64 %321, %319
  %323 = icmp slt i64 %322, 0
  br i1 %323, label %324, label %337

324:                                              ; preds = %310
  %325 = shl i64 %166, 32
  br label %326

326:                                              ; preds = %326, %324
  %327 = phi i64 [ %311, %324 ], [ %330, %326 ]
  %328 = phi i64 [ %322, %324 ], [ %335, %326 ]
  %329 = phi i64 [ %317, %324 ], [ %331, %326 ]
  %330 = add i64 %327, -4294967296
  %331 = add i64 %329, %325
  %332 = add i64 %328, %179
  %333 = icmp ult i64 %331, %329
  %334 = zext i1 %333 to i64
  %335 = add i64 %332, %334
  %336 = icmp slt i64 %335, 0
  br i1 %336, label %326, label %337, !llvm.loop !50

337:                                              ; preds = %326, %310
  %338 = phi i64 [ %317, %310 ], [ %331, %326 ]
  %339 = phi i64 [ %322, %310 ], [ %335, %326 ]
  %340 = phi i64 [ %311, %310 ], [ %330, %326 ]
  %341 = tail call i64 @llvm.fshl.i64(i64 %339, i64 %338, i64 32) #30
  %342 = icmp ugt i64 %305, %341
  br i1 %342, label %343, label %345

343:                                              ; preds = %337
  %344 = udiv i64 %341, %179
  br label %345

345:                                              ; preds = %337, %343
  %346 = phi i64 [ %344, %343 ], [ 4294967295, %337 ]
  %347 = or i64 %346, %340
  %348 = and i64 %347, 16383
  %349 = icmp ult i64 %348, 5
  br i1 %349, label %350, label %428

350:                                              ; preds = %345
  %351 = lshr i64 %347, 32
  %352 = and i64 %347, 4294967295
  %353 = mul nuw i64 %352, %232
  %354 = mul nuw i64 %351, %232
  %355 = mul nuw i64 %352, %230
  %356 = mul nuw i64 %351, %230
  %357 = add i64 %354, %355
  %358 = icmp ult i64 %357, %355
  %359 = select i1 %358, i64 4294967296, i64 0
  %360 = lshr i64 %357, 32
  %361 = shl i64 %357, 32
  %362 = add i64 %361, %353
  %363 = icmp ult i64 %362, %361
  %364 = zext i1 %363 to i64
  %365 = add nuw i64 %360, %356
  %366 = add i64 %365, %359
  %367 = mul nuw i64 %352, %228
  %368 = mul nuw i64 %351, %228
  %369 = mul nuw i64 %352, %179
  %370 = mul nuw i64 %351, %179
  %371 = add i64 %368, %369
  %372 = icmp ult i64 %371, %369
  %373 = select i1 %372, i64 -4294967296, i64 0
  %374 = lshr i64 %371, 32
  %375 = shl i64 %371, 32
  %376 = add i64 %375, %367
  %377 = icmp ult i64 %376, %375
  %378 = sext i1 %377 to i64
  %379 = add i64 %366, %376
  %380 = add i64 %379, %364
  %381 = icmp ult i64 %380, %376
  %382 = sext i1 %381 to i64
  %383 = sub i64 0, %362
  %384 = icmp ne i64 %362, 0
  %385 = sub i64 %302, %380
  %386 = icmp ult i64 %302, %380
  %387 = zext i1 %384 to i64
  %388 = icmp ult i64 %385, %387
  %389 = sext i1 %388 to i64
  %390 = sub i64 %385, %387
  %391 = sext i1 %386 to i64
  %392 = add i64 %370, %374
  %393 = sub i64 %301, %392
  %394 = add i64 %393, %373
  %395 = add i64 %394, %378
  %396 = add i64 %395, %382
  %397 = add i64 %396, %391
  %398 = add i64 %397, %389
  %399 = icmp slt i64 %398, 0
  br i1 %399, label %400, label %418

400:                                              ; preds = %350, %400
  %401 = phi i64 [ %406, %400 ], [ %383, %350 ]
  %402 = phi i64 [ %411, %400 ], [ %390, %350 ]
  %403 = phi i64 [ %416, %400 ], [ %398, %350 ]
  %404 = phi i64 [ %405, %400 ], [ %347, %350 ]
  %405 = add i64 %404, -1
  %406 = add i64 %401, %162
  %407 = icmp ult i64 %406, %401
  %408 = add i64 %402, %166
  %409 = icmp ult i64 %408, %402
  %410 = zext i1 %407 to i64
  %411 = add i64 %408, %410
  %412 = icmp ult i64 %411, %410
  %413 = zext i1 %412 to i64
  %414 = zext i1 %409 to i64
  %415 = add nsw i64 %403, %414
  %416 = add nsw i64 %415, %413
  %417 = icmp slt i64 %416, 0
  br i1 %417, label %400, label %418, !llvm.loop !100

418:                                              ; preds = %400, %350
  %419 = phi i64 [ %347, %350 ], [ %405, %400 ]
  %420 = phi i64 [ %398, %350 ], [ %416, %400 ]
  %421 = phi i64 [ %390, %350 ], [ %411, %400 ]
  %422 = phi i64 [ %383, %350 ], [ %406, %400 ]
  %423 = or i64 %421, %420
  %424 = or i64 %423, %422
  %425 = icmp ne i64 %424, 0
  %426 = zext i1 %425 to i64
  %427 = or i64 %419, %426
  br label %428

428:                                              ; preds = %299, %418, %345
  %429 = phi i64 [ %427, %418 ], [ %347, %345 ], [ -1, %299 ]
  %430 = shl i64 %429, 49
  %431 = tail call i64 @llvm.fshl.i64(i64 %300, i64 %429, i64 49)
  %432 = lshr i64 %300, 15
  %433 = tail call fastcc { i64, i64 } @roundAndPackFloat128(i8 noundef zeroext %16, i32 noundef %177, i64 noundef %432, i64 noundef %431, i64 noundef %430, %struct.float_status* noundef %4)
  %434 = extractvalue { i64, i64 } %433, 0
  %435 = extractvalue { i64, i64 } %433, 1
  br label %436

436:                                              ; preds = %428, %111, %59, %55, %45, %41, %34, %30, %21
  %437 = phi i64 [ %23, %21 ], [ %32, %30 ], [ 0, %55 ], [ 0, %34 ], [ %43, %41 ], [ 0, %45 ], [ 0, %59 ], [ 0, %111 ], [ %434, %428 ]
  %438 = phi i64 [ %24, %21 ], [ %33, %30 ], [ -140737488355328, %55 ], [ %36, %34 ], [ %44, %41 ], [ %46, %45 ], [ %64, %59 ], [ %112, %111 ], [ %435, %428 ]
  %439 = insertvalue { i64, i64 } poison, i64 %437, 0
  %440 = insertvalue { i64, i64 } %439, i64 %438, 1
  ret { i64, i64 } %440
}

; Function Attrs: nofree nosync nounwind uwtable
define { i64, i64 } @float128_rem(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* nocapture noundef %4) local_unnamed_addr #20 {
  %6 = and i64 %1, 281474976710655
  %7 = lshr i64 %1, 48
  %8 = trunc i64 %7 to i32
  %9 = and i32 %8, 32767
  %10 = lshr i64 %1, 63
  %11 = trunc i64 %10 to i8
  %12 = and i64 %3, 281474976710655
  %13 = lshr i64 %3, 48
  %14 = trunc i64 %13 to i32
  %15 = and i32 %14, 32767
  %16 = icmp eq i32 %9, 32767
  br i1 %16, label %17, label %29

17:                                               ; preds = %5
  %18 = or i64 %6, %0
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %20, label %25

20:                                               ; preds = %17
  %21 = icmp ne i32 %15, 32767
  %22 = or i64 %12, %2
  %23 = icmp eq i64 %22, 0
  %24 = select i1 %21, i1 true, i1 %23
  br i1 %24, label %40, label %25

25:                                               ; preds = %20, %17
  %26 = tail call fastcc { i64, i64 } @propagateFloat128NaN(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* noundef %4)
  %27 = extractvalue { i64, i64 } %26, 0
  %28 = extractvalue { i64, i64 } %26, 1
  br label %478

29:                                               ; preds = %5
  switch i32 %15, label %82 [
    i32 32767, label %30
    i32 0, label %37
  ]

30:                                               ; preds = %29
  %31 = or i64 %12, %2
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %478, label %33

33:                                               ; preds = %30
  %34 = tail call fastcc { i64, i64 } @propagateFloat128NaN(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* noundef %4)
  %35 = extractvalue { i64, i64 } %34, 0
  %36 = extractvalue { i64, i64 } %34, 1
  br label %478

37:                                               ; preds = %29
  %38 = or i64 %12, %2
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %40, label %44

40:                                               ; preds = %37, %20
  %41 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %42 = load i8, i8* %41, align 1
  %43 = or i8 %42, 1
  store i8 %43, i8* %41, align 1
  br label %478

44:                                               ; preds = %37
  %45 = icmp eq i64 %12, 0
  br i1 %45, label %46, label %66

46:                                               ; preds = %44
  %ctlz.sh = lshr i64 %2, 1
  %ctlz.step = or i64 %2, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %47 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %47, 6148914691236517205
  %ctpop.sh = lshr i64 %47, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %48 = trunc i64 %ctpop.part to i8
  %49 = add nsw i8 %48, -15
  %50 = sext i8 %49 to i32
  %51 = icmp ult i8 %48, 15
  br i1 %51, label %52, label %59

52:                                               ; preds = %46
  %53 = sub nsw i32 0, %50
  %54 = zext i32 %53 to i64
  %55 = lshr i64 %2, %54
  %56 = and i32 %50, 63
  %57 = zext i32 %56 to i64
  %58 = shl i64 %2, %57
  br label %62

59:                                               ; preds = %46
  %60 = zext i32 %50 to i64
  %61 = shl i64 %2, %60
  br label %62

62:                                               ; preds = %59, %52
  %63 = phi i64 [ %55, %52 ], [ %61, %59 ]
  %64 = phi i64 [ %58, %52 ], [ 0, %59 ]
  %65 = sub nsw i32 -63, %50
  br label %82

66:                                               ; preds = %44
  %ctlz.sh31 = lshr i64 %12, 1
  %ctlz.step32 = or i64 %12, %ctlz.sh31
  %ctlz.sh33 = lshr i64 %ctlz.step32, 2
  %ctlz.step34 = or i64 %ctlz.step32, %ctlz.sh33
  %ctlz.sh35 = lshr i64 %ctlz.step34, 4
  %ctlz.step36 = or i64 %ctlz.step34, %ctlz.sh35
  %ctlz.sh37 = lshr i64 %ctlz.step36, 8
  %ctlz.step38 = or i64 %ctlz.step36, %ctlz.sh37
  %ctlz.sh39 = lshr i64 %ctlz.step38, 16
  %ctlz.step40 = or i64 %ctlz.step38, %ctlz.sh39
  %ctlz.sh41 = lshr i64 %ctlz.step40, 32
  %ctlz.step42 = or i64 %ctlz.step40, %ctlz.sh41
  %67 = xor i64 %ctlz.step42, -1
  %cppop.and143 = and i64 %67, 6148914691236517205
  %ctpop.sh44 = lshr i64 %67, 1
  %cppop.and245 = and i64 %ctpop.sh44, 6148914691236517205
  %ctpop.step46 = add i64 %cppop.and143, %cppop.and245
  %cppop.and147 = and i64 %ctpop.step46, 3689348814741910323
  %ctpop.sh48 = lshr i64 %ctpop.step46, 2
  %cppop.and249 = and i64 %ctpop.sh48, 3689348814741910323
  %ctpop.step50 = add i64 %cppop.and147, %cppop.and249
  %cppop.and151 = and i64 %ctpop.step50, 1085102592571150095
  %ctpop.sh52 = lshr i64 %ctpop.step50, 4
  %cppop.and253 = and i64 %ctpop.sh52, 1085102592571150095
  %ctpop.step54 = add i64 %cppop.and151, %cppop.and253
  %cppop.and155 = and i64 %ctpop.step54, 71777214294589695
  %ctpop.sh56 = lshr i64 %ctpop.step54, 8
  %cppop.and257 = and i64 %ctpop.sh56, 71777214294589695
  %ctpop.step58 = add i64 %cppop.and155, %cppop.and257
  %cppop.and159 = and i64 %ctpop.step58, 281470681808895
  %ctpop.sh60 = lshr i64 %ctpop.step58, 16
  %cppop.and261 = and i64 %ctpop.sh60, 281470681808895
  %ctpop.step62 = add i64 %cppop.and159, %cppop.and261
  %cppop.and163 = and i64 %ctpop.step62, 4294967295
  %ctpop.sh64 = lshr i64 %ctpop.step62, 32
  %cppop.and265 = and i64 %ctpop.sh64, 4294967295
  %ctpop.step66 = add i64 %cppop.and163, %cppop.and265
  %ctpop.part67 = add i64 %ctpop.step66, 0
  %68 = trunc i64 %ctpop.part67 to i32
  %69 = add nsw i32 %68, -15
  %70 = zext i32 %69 to i64
  %71 = shl i64 %2, %70
  %72 = icmp eq i32 %69, 0
  br i1 %72, label %79, label %73

73:                                               ; preds = %66
  %74 = shl i64 %12, %70
  %75 = sub nsw i64 15, %ctpop.part67
  %76 = and i64 %75, 63
  %77 = lshr i64 %2, %76
  %78 = or i64 %74, %77
  br label %79

79:                                               ; preds = %73, %66
  %80 = phi i64 [ %78, %73 ], [ %12, %66 ]
  %81 = sub nsw i32 16, %68
  br label %82

82:                                               ; preds = %79, %62, %29
  %83 = phi i64 [ %12, %29 ], [ %63, %62 ], [ %80, %79 ]
  %84 = phi i64 [ %2, %29 ], [ %64, %62 ], [ %71, %79 ]
  %85 = phi i32 [ %15, %29 ], [ %65, %62 ], [ %81, %79 ]
  %86 = icmp eq i32 %9, 0
  br i1 %86, label %87, label %128

87:                                               ; preds = %82
  %88 = or i64 %6, %0
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %478, label %90

90:                                               ; preds = %87
  %91 = icmp eq i64 %6, 0
  br i1 %91, label %92, label %112

92:                                               ; preds = %90
  %ctlz.sh68 = lshr i64 %0, 1
  %ctlz.step69 = or i64 %0, %ctlz.sh68
  %ctlz.sh70 = lshr i64 %ctlz.step69, 2
  %ctlz.step71 = or i64 %ctlz.step69, %ctlz.sh70
  %ctlz.sh72 = lshr i64 %ctlz.step71, 4
  %ctlz.step73 = or i64 %ctlz.step71, %ctlz.sh72
  %ctlz.sh74 = lshr i64 %ctlz.step73, 8
  %ctlz.step75 = or i64 %ctlz.step73, %ctlz.sh74
  %ctlz.sh76 = lshr i64 %ctlz.step75, 16
  %ctlz.step77 = or i64 %ctlz.step75, %ctlz.sh76
  %ctlz.sh78 = lshr i64 %ctlz.step77, 32
  %ctlz.step79 = or i64 %ctlz.step77, %ctlz.sh78
  %93 = xor i64 %ctlz.step79, -1
  %cppop.and180 = and i64 %93, 6148914691236517205
  %ctpop.sh81 = lshr i64 %93, 1
  %cppop.and282 = and i64 %ctpop.sh81, 6148914691236517205
  %ctpop.step83 = add i64 %cppop.and180, %cppop.and282
  %cppop.and184 = and i64 %ctpop.step83, 3689348814741910323
  %ctpop.sh85 = lshr i64 %ctpop.step83, 2
  %cppop.and286 = and i64 %ctpop.sh85, 3689348814741910323
  %ctpop.step87 = add i64 %cppop.and184, %cppop.and286
  %cppop.and188 = and i64 %ctpop.step87, 1085102592571150095
  %ctpop.sh89 = lshr i64 %ctpop.step87, 4
  %cppop.and290 = and i64 %ctpop.sh89, 1085102592571150095
  %ctpop.step91 = add i64 %cppop.and188, %cppop.and290
  %cppop.and192 = and i64 %ctpop.step91, 71777214294589695
  %ctpop.sh93 = lshr i64 %ctpop.step91, 8
  %cppop.and294 = and i64 %ctpop.sh93, 71777214294589695
  %ctpop.step95 = add i64 %cppop.and192, %cppop.and294
  %cppop.and196 = and i64 %ctpop.step95, 281470681808895
  %ctpop.sh97 = lshr i64 %ctpop.step95, 16
  %cppop.and298 = and i64 %ctpop.sh97, 281470681808895
  %ctpop.step99 = add i64 %cppop.and196, %cppop.and298
  %cppop.and1100 = and i64 %ctpop.step99, 4294967295
  %ctpop.sh101 = lshr i64 %ctpop.step99, 32
  %cppop.and2102 = and i64 %ctpop.sh101, 4294967295
  %ctpop.step103 = add i64 %cppop.and1100, %cppop.and2102
  %ctpop.part104 = add i64 %ctpop.step103, 0
  %94 = trunc i64 %ctpop.part104 to i8
  %95 = add nsw i8 %94, -15
  %96 = sext i8 %95 to i32
  %97 = icmp ult i8 %94, 15
  br i1 %97, label %98, label %105

98:                                               ; preds = %92
  %99 = sub nsw i32 0, %96
  %100 = zext i32 %99 to i64
  %101 = lshr i64 %0, %100
  %102 = and i32 %96, 63
  %103 = zext i32 %102 to i64
  %104 = shl i64 %0, %103
  br label %108

105:                                              ; preds = %92
  %106 = zext i32 %96 to i64
  %107 = shl i64 %0, %106
  br label %108

108:                                              ; preds = %105, %98
  %109 = phi i64 [ %101, %98 ], [ %107, %105 ]
  %110 = phi i64 [ %104, %98 ], [ 0, %105 ]
  %111 = sub nsw i32 -63, %96
  br label %128

112:                                              ; preds = %90
  %ctlz.sh105 = lshr i64 %6, 1
  %ctlz.step106 = or i64 %6, %ctlz.sh105
  %ctlz.sh107 = lshr i64 %ctlz.step106, 2
  %ctlz.step108 = or i64 %ctlz.step106, %ctlz.sh107
  %ctlz.sh109 = lshr i64 %ctlz.step108, 4
  %ctlz.step110 = or i64 %ctlz.step108, %ctlz.sh109
  %ctlz.sh111 = lshr i64 %ctlz.step110, 8
  %ctlz.step112 = or i64 %ctlz.step110, %ctlz.sh111
  %ctlz.sh113 = lshr i64 %ctlz.step112, 16
  %ctlz.step114 = or i64 %ctlz.step112, %ctlz.sh113
  %ctlz.sh115 = lshr i64 %ctlz.step114, 32
  %ctlz.step116 = or i64 %ctlz.step114, %ctlz.sh115
  %113 = xor i64 %ctlz.step116, -1
  %cppop.and1117 = and i64 %113, 6148914691236517205
  %ctpop.sh118 = lshr i64 %113, 1
  %cppop.and2119 = and i64 %ctpop.sh118, 6148914691236517205
  %ctpop.step120 = add i64 %cppop.and1117, %cppop.and2119
  %cppop.and1121 = and i64 %ctpop.step120, 3689348814741910323
  %ctpop.sh122 = lshr i64 %ctpop.step120, 2
  %cppop.and2123 = and i64 %ctpop.sh122, 3689348814741910323
  %ctpop.step124 = add i64 %cppop.and1121, %cppop.and2123
  %cppop.and1125 = and i64 %ctpop.step124, 1085102592571150095
  %ctpop.sh126 = lshr i64 %ctpop.step124, 4
  %cppop.and2127 = and i64 %ctpop.sh126, 1085102592571150095
  %ctpop.step128 = add i64 %cppop.and1125, %cppop.and2127
  %cppop.and1129 = and i64 %ctpop.step128, 71777214294589695
  %ctpop.sh130 = lshr i64 %ctpop.step128, 8
  %cppop.and2131 = and i64 %ctpop.sh130, 71777214294589695
  %ctpop.step132 = add i64 %cppop.and1129, %cppop.and2131
  %cppop.and1133 = and i64 %ctpop.step132, 281470681808895
  %ctpop.sh134 = lshr i64 %ctpop.step132, 16
  %cppop.and2135 = and i64 %ctpop.sh134, 281470681808895
  %ctpop.step136 = add i64 %cppop.and1133, %cppop.and2135
  %cppop.and1137 = and i64 %ctpop.step136, 4294967295
  %ctpop.sh138 = lshr i64 %ctpop.step136, 32
  %cppop.and2139 = and i64 %ctpop.sh138, 4294967295
  %ctpop.step140 = add i64 %cppop.and1137, %cppop.and2139
  %ctpop.part141 = add i64 %ctpop.step140, 0
  %114 = trunc i64 %ctpop.part141 to i32
  %115 = add nsw i32 %114, -15
  %116 = zext i32 %115 to i64
  %117 = shl i64 %0, %116
  %118 = icmp eq i32 %115, 0
  br i1 %118, label %125, label %119

119:                                              ; preds = %112
  %120 = shl i64 %6, %116
  %121 = sub nsw i64 15, %ctpop.part141
  %122 = and i64 %121, 63
  %123 = lshr i64 %0, %122
  %124 = or i64 %120, %123
  br label %125

125:                                              ; preds = %119, %112
  %126 = phi i64 [ %124, %119 ], [ %6, %112 ]
  %127 = sub nsw i32 16, %114
  br label %128

128:                                              ; preds = %125, %108, %82
  %129 = phi i64 [ %0, %82 ], [ %110, %108 ], [ %117, %125 ]
  %130 = phi i64 [ %6, %82 ], [ %109, %108 ], [ %126, %125 ]
  %131 = phi i32 [ %9, %82 ], [ %111, %108 ], [ %127, %125 ]
  %132 = sub nsw i32 %131, %85
  %133 = icmp slt i32 %132, -1
  br i1 %133, label %478, label %134

134:                                              ; preds = %128
  %135 = or i64 %130, 281474976710656
  %136 = icmp eq i32 %132, -1
  %137 = select i1 %136, i64 50, i64 49
  %138 = select i1 %136, i64 14, i64 15
  %139 = shl i64 %129, %138
  %140 = shl i64 %135, %138
  %141 = lshr i64 %129, %137
  %142 = or i64 %141, %140
  %143 = shl i64 %84, 15
  %144 = shl i64 %83, 15
  %145 = or i64 %144, -9223372036854775808
  %146 = lshr i64 %84, 49
  %147 = or i64 %146, %145
  %148 = icmp ugt i64 %142, %147
  %149 = icmp eq i64 %142, %147
  %150 = icmp uge i64 %139, %143
  %151 = and i1 %150, %149
  %152 = or i1 %148, %151
  %153 = zext i1 %152 to i64
  br i1 %152, label %154, label %160

154:                                              ; preds = %134
  %155 = sub i64 %139, %143
  %156 = sub i64 %142, %147
  %157 = icmp ult i64 %139, %143
  %158 = sext i1 %157 to i64
  %159 = add i64 %156, %158
  br label %160

160:                                              ; preds = %154, %134
  %161 = phi i64 [ %139, %134 ], [ %155, %154 ]
  %162 = phi i64 [ %142, %134 ], [ %159, %154 ]
  %163 = add nsw i32 %132, -64
  %164 = icmp sgt i32 %132, 64
  br i1 %164, label %165, label %266

165:                                              ; preds = %160
  %166 = lshr i64 %145, 32
  %167 = and i64 %145, -4294967296
  %168 = and i64 %147, 4294967295
  %169 = shl i64 %147, 32
  %170 = lshr i64 %143, 32
  %171 = and i64 %143, 4294934528
  br label %172

172:                                              ; preds = %165, %218
  %173 = phi i32 [ %163, %165 ], [ %264, %218 ]
  %174 = phi i64 [ %162, %165 ], [ %263, %218 ]
  %175 = phi i64 [ %161, %165 ], [ %259, %218 ]
  %176 = icmp ugt i64 %147, %174
  br i1 %176, label %177, label %218

177:                                              ; preds = %172
  %178 = icmp ugt i64 %167, %174
  br i1 %178, label %179, label %182

179:                                              ; preds = %177
  %180 = udiv i64 %174, %166
  %181 = shl i64 %180, 32
  br label %182

182:                                              ; preds = %179, %177
  %183 = phi i64 [ %181, %179 ], [ -4294967296, %177 ]
  %184 = lshr exact i64 %183, 32
  %185 = mul nuw i64 %184, %168
  %186 = mul nuw i64 %184, %166
  %187 = lshr i64 %185, 32
  %188 = shl i64 %185, 32
  %189 = sub i64 %175, %188
  %190 = icmp ult i64 %175, %188
  %191 = sext i1 %190 to i64
  %192 = add i64 %186, %187
  %193 = sub i64 %174, %192
  %194 = add i64 %193, %191
  %195 = icmp slt i64 %194, 0
  br i1 %195, label %196, label %207

196:                                              ; preds = %182, %196
  %197 = phi i64 [ %200, %196 ], [ %183, %182 ]
  %198 = phi i64 [ %205, %196 ], [ %194, %182 ]
  %199 = phi i64 [ %201, %196 ], [ %189, %182 ]
  %200 = add i64 %197, -4294967296
  %201 = add i64 %199, %169
  %202 = add i64 %198, %166
  %203 = icmp ult i64 %201, %199
  %204 = zext i1 %203 to i64
  %205 = add i64 %202, %204
  %206 = icmp slt i64 %205, 0
  br i1 %206, label %196, label %207, !llvm.loop !50

207:                                              ; preds = %196, %182
  %208 = phi i64 [ %189, %182 ], [ %201, %196 ]
  %209 = phi i64 [ %194, %182 ], [ %205, %196 ]
  %210 = phi i64 [ %183, %182 ], [ %200, %196 ]
  %211 = tail call i64 @llvm.fshl.i64(i64 %209, i64 %208, i64 32) #30
  %212 = icmp ugt i64 %167, %211
  br i1 %212, label %213, label %215

213:                                              ; preds = %207
  %214 = udiv i64 %211, %166
  br label %215

215:                                              ; preds = %213, %207
  %216 = phi i64 [ %214, %213 ], [ 4294967295, %207 ]
  %217 = or i64 %216, %210
  br label %218

218:                                              ; preds = %172, %215
  %219 = phi i64 [ %217, %215 ], [ -1, %172 ]
  %220 = sub i64 %219, 4
  %221 = icmp ult i64 %219, 4
  %222 = select i1 %221, i64 0, i64 %220
  %223 = lshr i64 %222, 32
  %224 = and i64 %222, 4294967295
  %225 = mul nuw i64 %224, %171
  %226 = mul nuw i64 %223, %171
  %227 = mul nuw i64 %224, %170
  %228 = mul nuw i64 %223, %170
  %229 = add i64 %226, %227
  %230 = icmp ult i64 %229, %227
  %231 = select i1 %230, i64 4294967296, i64 0
  %232 = lshr i64 %229, 32
  %233 = shl i64 %229, 32
  %234 = add i64 %233, %225
  %235 = icmp ult i64 %234, %233
  %236 = zext i1 %235 to i64
  %237 = add nuw i64 %232, %228
  %238 = add i64 %237, %231
  %239 = mul nuw i64 %224, %168
  %240 = mul nuw i64 %223, %168
  %241 = mul nuw i64 %224, %166
  %242 = mul nuw i64 %223, %166
  %243 = add i64 %240, %241
  %244 = lshr i64 %243, 32
  %245 = shl i64 %243, 32
  %246 = add i64 %245, %239
  %247 = icmp ult i64 %246, %245
  %248 = zext i1 %247 to i64
  %249 = add nuw i64 %244, %242
  %250 = add i64 %249, %248
  %251 = add i64 %238, %246
  %252 = add i64 %251, %236
  %253 = icmp ult i64 %252, %246
  %254 = zext i1 %253 to i64
  %255 = add i64 %250, %254
  %256 = tail call i64 @llvm.fshl.i64(i64 %255, i64 %252, i64 61) #30
  %257 = tail call i64 @llvm.fshl.i64(i64 %252, i64 %234, i64 61) #30
  %258 = tail call i64 @llvm.fshl.i64(i64 %174, i64 %175, i64 61)
  %259 = sub i64 0, %257
  %260 = icmp ne i64 %257, 0
  %261 = sext i1 %260 to i64
  %262 = add i64 %258, %261
  %263 = sub i64 %262, %256
  %264 = add nsw i32 %173, -61
  %265 = icmp sgt i32 %173, 61
  br i1 %265, label %172, label %266, !llvm.loop !101

266:                                              ; preds = %218, %160
  %267 = phi i64 [ %161, %160 ], [ %259, %218 ]
  %268 = phi i64 [ %162, %160 ], [ %263, %218 ]
  %269 = phi i64 [ %153, %160 ], [ %222, %218 ]
  %270 = phi i32 [ %163, %160 ], [ %264, %218 ]
  %271 = icmp sgt i32 %270, -64
  br i1 %271, label %272, label %388

272:                                              ; preds = %266
  %273 = icmp ugt i64 %147, %268
  br i1 %273, label %274, label %320

274:                                              ; preds = %272
  %275 = lshr i64 %145, 32
  %276 = and i64 %145, -4294967296
  %277 = icmp ugt i64 %276, %268
  br i1 %277, label %278, label %281

278:                                              ; preds = %274
  %279 = udiv i64 %268, %275
  %280 = shl i64 %279, 32
  br label %281

281:                                              ; preds = %278, %274
  %282 = phi i64 [ %280, %278 ], [ -4294967296, %274 ]
  %283 = lshr exact i64 %282, 32
  %284 = and i64 %147, 4294967295
  %285 = mul nuw i64 %283, %284
  %286 = mul nuw i64 %283, %275
  %287 = lshr i64 %285, 32
  %288 = shl i64 %285, 32
  %289 = sub i64 %267, %288
  %290 = icmp ult i64 %267, %288
  %291 = sext i1 %290 to i64
  %292 = add nuw i64 %286, %287
  %293 = sub i64 %268, %292
  %294 = add i64 %293, %291
  %295 = icmp slt i64 %294, 0
  br i1 %295, label %296, label %309

296:                                              ; preds = %281
  %297 = shl i64 %147, 32
  br label %298

298:                                              ; preds = %298, %296
  %299 = phi i64 [ %282, %296 ], [ %302, %298 ]
  %300 = phi i64 [ %294, %296 ], [ %307, %298 ]
  %301 = phi i64 [ %289, %296 ], [ %303, %298 ]
  %302 = add i64 %299, -4294967296
  %303 = add i64 %301, %297
  %304 = add i64 %300, %275
  %305 = icmp ult i64 %303, %301
  %306 = zext i1 %305 to i64
  %307 = add i64 %304, %306
  %308 = icmp slt i64 %307, 0
  br i1 %308, label %298, label %309, !llvm.loop !50

309:                                              ; preds = %298, %281
  %310 = phi i64 [ %289, %281 ], [ %303, %298 ]
  %311 = phi i64 [ %294, %281 ], [ %307, %298 ]
  %312 = phi i64 [ %282, %281 ], [ %302, %298 ]
  %313 = tail call i64 @llvm.fshl.i64(i64 %311, i64 %310, i64 32) #30
  %314 = icmp ugt i64 %276, %313
  br i1 %314, label %315, label %317

315:                                              ; preds = %309
  %316 = udiv i64 %313, %275
  br label %317

317:                                              ; preds = %315, %309
  %318 = phi i64 [ %316, %315 ], [ 4294967295, %309 ]
  %319 = or i64 %318, %312
  br label %320

320:                                              ; preds = %272, %317
  %321 = phi i64 [ %319, %317 ], [ -1, %272 ]
  %322 = sub i64 %321, 4
  %323 = icmp ult i64 %321, 4
  %324 = select i1 %323, i64 0, i64 %322
  %325 = sub nsw i32 0, %270
  %326 = zext i32 %325 to i64
  %327 = lshr i64 %324, %326
  %328 = lshr i64 %147, 12
  %329 = tail call i64 @llvm.fshl.i64(i64 %146, i64 %143, i64 52)
  %330 = icmp slt i32 %270, -52
  %331 = add nsw i32 %270, 52
  br i1 %330, label %332, label %341

332:                                              ; preds = %320
  %333 = sub nuw nsw i32 -52, %270
  %334 = zext i32 %333 to i64
  %335 = lshr i64 %268, %334
  %336 = and i32 %331, 63
  %337 = zext i32 %336 to i64
  %338 = shl i64 %268, %337
  %339 = lshr i64 %267, %334
  %340 = or i64 %338, %339
  br label %352

341:                                              ; preds = %320
  %342 = zext i32 %331 to i64
  %343 = shl i64 %267, %342
  %344 = icmp eq i32 %331, 0
  br i1 %344, label %352, label %345

345:                                              ; preds = %341
  %346 = shl i64 %268, %342
  %347 = sub nsw i32 12, %270
  %348 = and i32 %347, 63
  %349 = zext i32 %348 to i64
  %350 = lshr i64 %267, %349
  %351 = or i64 %350, %346
  br label %352

352:                                              ; preds = %345, %341, %332
  %353 = phi i64 [ %340, %332 ], [ %343, %341 ], [ %343, %345 ]
  %354 = phi i64 [ %335, %332 ], [ %268, %341 ], [ %351, %345 ]
  %355 = lshr i64 %329, 32
  %356 = lshr i64 %327, 32
  %357 = and i64 %329, 4294967288
  %358 = and i64 %327, 4294967295
  %359 = mul nuw i64 %358, %357
  %360 = mul nuw i64 %356, %357
  %361 = mul nuw i64 %358, %355
  %362 = add i64 %360, %361
  %363 = icmp ult i64 %362, %361
  %364 = select i1 %363, i64 -4294967296, i64 0
  %365 = lshr i64 %362, 32
  %366 = shl i64 %362, 32
  %367 = add i64 %366, %359
  %368 = icmp ult i64 %367, %366
  %369 = sext i1 %368 to i64
  %370 = lshr i64 %145, 44
  %371 = and i64 %328, 4294967295
  %372 = mul nuw i64 %356, %371
  %373 = mul nuw nsw i64 %358, %370
  %374 = add i64 %372, %373
  %375 = sub i64 %353, %367
  %376 = mul nuw i64 %358, %371
  %377 = mul i64 %374, -4294967296
  %378 = mul nuw i64 %356, %355
  %379 = icmp ult i64 %353, %367
  %380 = sext i1 %379 to i64
  %381 = add i64 %378, %376
  %382 = add i64 %377, %364
  %383 = add i64 %365, %381
  %384 = sub i64 %382, %383
  %385 = add i64 %384, %369
  %386 = add i64 %385, %354
  %387 = add i64 %386, %380
  br label %393

388:                                              ; preds = %266
  %389 = lshr i64 %268, 12
  %390 = tail call i64 @llvm.fshl.i64(i64 %268, i64 %267, i64 52)
  %391 = lshr i64 %147, 12
  %392 = tail call i64 @llvm.fshl.i64(i64 %146, i64 %143, i64 52)
  br label %393

393:                                              ; preds = %388, %352
  %394 = phi i64 [ %375, %352 ], [ %390, %388 ]
  %395 = phi i64 [ %328, %352 ], [ %391, %388 ]
  %396 = phi i64 [ %329, %352 ], [ %392, %388 ]
  %397 = phi i64 [ %387, %352 ], [ %389, %388 ]
  %398 = phi i64 [ %327, %352 ], [ %269, %388 ]
  br label %399

399:                                              ; preds = %399, %393
  %400 = phi i64 [ %394, %393 ], [ %404, %399 ]
  %401 = phi i64 [ %397, %393 ], [ %408, %399 ]
  %402 = phi i64 [ %398, %393 ], [ %403, %399 ]
  %403 = add i64 %402, 1
  %404 = sub i64 %400, %396
  %405 = sub i64 %401, %395
  %406 = icmp ult i64 %400, %396
  %407 = sext i1 %406 to i64
  %408 = add i64 %405, %407
  %409 = icmp sgt i64 %408, -1
  br i1 %409, label %399, label %410, !llvm.loop !102

410:                                              ; preds = %399
  %411 = add i64 %404, %400
  %412 = add i64 %408, %401
  %413 = icmp ult i64 %411, %404
  %414 = zext i1 %413 to i64
  %415 = add i64 %412, %414
  %416 = icmp slt i64 %415, 0
  br i1 %416, label %423, label %417

417:                                              ; preds = %410
  %418 = or i64 %415, %411
  %419 = icmp ne i64 %418, 0
  %420 = and i64 %403, 1
  %421 = icmp eq i64 %420, 0
  %422 = select i1 %419, i1 true, i1 %421
  br i1 %422, label %427, label %423

423:                                              ; preds = %410, %417
  %424 = lshr i64 %401, 63
  %425 = trunc i64 %424 to i8
  %426 = icmp sgt i64 %401, -1
  br i1 %426, label %435, label %427

427:                                              ; preds = %417, %423
  %428 = phi i8 [ %425, %423 ], [ 1, %417 ]
  %429 = phi i64 [ %401, %423 ], [ %408, %417 ]
  %430 = phi i64 [ %400, %423 ], [ %404, %417 ]
  %431 = sub i64 0, %430
  %432 = icmp ne i64 %430, 0
  %433 = sext i1 %432 to i64
  %434 = sub i64 %433, %429
  br label %435

435:                                              ; preds = %427, %423
  %436 = phi i8 [ %425, %423 ], [ %428, %427 ]
  %437 = phi i64 [ %400, %423 ], [ %431, %427 ]
  %438 = phi i64 [ %401, %423 ], [ %434, %427 ]
  %439 = xor i8 %436, %11
  %440 = icmp eq i64 %438, 0
  %441 = select i1 %440, i64 %437, i64 %438
  %442 = select i1 %440, i64 0, i64 %437
  %ctlz.sh142 = lshr i64 %441, 1
  %ctlz.step143 = or i64 %441, %ctlz.sh142
  %ctlz.sh144 = lshr i64 %ctlz.step143, 2
  %ctlz.step145 = or i64 %ctlz.step143, %ctlz.sh144
  %ctlz.sh146 = lshr i64 %ctlz.step145, 4
  %ctlz.step147 = or i64 %ctlz.step145, %ctlz.sh146
  %ctlz.sh148 = lshr i64 %ctlz.step147, 8
  %ctlz.step149 = or i64 %ctlz.step147, %ctlz.sh148
  %ctlz.sh150 = lshr i64 %ctlz.step149, 16
  %ctlz.step151 = or i64 %ctlz.step149, %ctlz.sh150
  %ctlz.sh152 = lshr i64 %ctlz.step151, 32
  %ctlz.step153 = or i64 %ctlz.step151, %ctlz.sh152
  %443 = xor i64 %ctlz.step153, -1
  %cppop.and1154 = and i64 %443, 6148914691236517205
  %ctpop.sh155 = lshr i64 %443, 1
  %cppop.and2156 = and i64 %ctpop.sh155, 6148914691236517205
  %ctpop.step157 = add i64 %cppop.and1154, %cppop.and2156
  %cppop.and1158 = and i64 %ctpop.step157, 3689348814741910323
  %ctpop.sh159 = lshr i64 %ctpop.step157, 2
  %cppop.and2160 = and i64 %ctpop.sh159, 3689348814741910323
  %ctpop.step161 = add i64 %cppop.and1158, %cppop.and2160
  %cppop.and1162 = and i64 %ctpop.step161, 1085102592571150095
  %ctpop.sh163 = lshr i64 %ctpop.step161, 4
  %cppop.and2164 = and i64 %ctpop.sh163, 1085102592571150095
  %ctpop.step165 = add i64 %cppop.and1162, %cppop.and2164
  %cppop.and1166 = and i64 %ctpop.step165, 71777214294589695
  %ctpop.sh167 = lshr i64 %ctpop.step165, 8
  %cppop.and2168 = and i64 %ctpop.sh167, 71777214294589695
  %ctpop.step169 = add i64 %cppop.and1166, %cppop.and2168
  %cppop.and1170 = and i64 %ctpop.step169, 281470681808895
  %ctpop.sh171 = lshr i64 %ctpop.step169, 16
  %cppop.and2172 = and i64 %ctpop.sh171, 281470681808895
  %ctpop.step173 = add i64 %cppop.and1170, %cppop.and2172
  %cppop.and1174 = and i64 %ctpop.step173, 4294967295
  %ctpop.sh175 = lshr i64 %ctpop.step173, 32
  %cppop.and2176 = and i64 %ctpop.sh175, 4294967295
  %ctpop.step177 = add i64 %cppop.and1174, %cppop.and2176
  %ctpop.part178 = add i64 %ctpop.step177, 0
  %444 = trunc i64 %ctpop.part178 to i8
  %445 = add nsw i8 %444, -15
  %446 = sext i8 %445 to i32
  %447 = sub nsw i32 0, %446
  %448 = icmp ugt i8 %444, 14
  br i1 %448, label %449, label %459

449:                                              ; preds = %435
  %450 = zext i32 %446 to i64
  %451 = shl i64 %442, %450
  %452 = icmp eq i8 %445, 0
  br i1 %452, label %468, label %453

453:                                              ; preds = %449
  %454 = shl i64 %441, %450
  %455 = and i32 %447, 63
  %456 = zext i32 %455 to i64
  %457 = lshr i64 %442, %456
  %458 = or i64 %457, %454
  br label %468

459:                                              ; preds = %435
  %460 = and i8 %445, 63
  %461 = zext i8 %460 to i64
  %462 = shl i64 %442, %461
  %463 = shl i64 %441, %461
  %464 = zext i32 %447 to i64
  %465 = lshr i64 %442, %464
  %466 = or i64 %463, %465
  %467 = lshr i64 %441, %464
  br label %468

468:                                              ; preds = %449, %453, %459
  %469 = phi i64 [ %458, %453 ], [ %441, %449 ], [ %467, %459 ]
  %470 = phi i64 [ %451, %453 ], [ %451, %449 ], [ %466, %459 ]
  %471 = phi i64 [ 0, %453 ], [ 0, %449 ], [ %462, %459 ]
  %472 = select i1 %440, i32 -68, i32 -4
  %473 = add nsw i32 %472, %85
  %474 = sub nsw i32 %473, %446
  %475 = tail call fastcc { i64, i64 } @roundAndPackFloat128(i8 noundef zeroext %439, i32 noundef %474, i64 noundef %469, i64 noundef %470, i64 noundef %471, %struct.float_status* noundef %4) #30
  %476 = extractvalue { i64, i64 } %475, 0
  %477 = extractvalue { i64, i64 } %475, 1
  br label %478

478:                                              ; preds = %128, %87, %30, %468, %40, %33, %25
  %479 = phi i64 [ %27, %25 ], [ 0, %40 ], [ %35, %33 ], [ %476, %468 ], [ %0, %30 ], [ %0, %87 ], [ %0, %128 ]
  %480 = phi i64 [ %28, %25 ], [ -140737488355328, %40 ], [ %36, %33 ], [ %477, %468 ], [ %1, %30 ], [ %1, %87 ], [ %1, %128 ]
  %481 = insertvalue { i64, i64 } poison, i64 %479, 0
  %482 = insertvalue { i64, i64 } %481, i64 %480, 1
  ret { i64, i64 } %482
}

; Function Attrs: nofree nosync nounwind uwtable
define { i64, i64 } @float128_sqrt(i64 %0, i64 %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #20 {
  %4 = and i64 %1, 281474976710655
  %5 = lshr i64 %1, 48
  %6 = trunc i64 %5 to i32
  %7 = and i32 %6, 32767
  %8 = icmp eq i32 %7, 32767
  br i1 %8, label %9, label %18

9:                                                ; preds = %3
  %10 = or i64 %4, %0
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %16, label %12

12:                                               ; preds = %9
  %13 = tail call fastcc { i64, i64 } @propagateFloat128NaN(i64 %0, i64 %1, i64 %0, i64 %1, %struct.float_status* noundef %2)
  %14 = extractvalue { i64, i64 } %13, 0
  %15 = extractvalue { i64, i64 } %13, 1
  br label %347

16:                                               ; preds = %9
  %17 = icmp sgt i64 %1, -1
  br i1 %17, label %347, label %25

18:                                               ; preds = %3
  %19 = icmp sgt i64 %1, -1
  br i1 %19, label %29, label %20

20:                                               ; preds = %18
  %21 = zext i32 %7 to i64
  %22 = or i64 %4, %0
  %23 = or i64 %22, %21
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %347, label %25

25:                                               ; preds = %20, %16
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 1
  store i8 %28, i8* %26, align 1
  br label %347

29:                                               ; preds = %18
  %30 = icmp eq i32 %7, 0
  br i1 %30, label %31, label %72

31:                                               ; preds = %29
  %32 = or i64 %4, %0
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %347, label %34

34:                                               ; preds = %31
  %35 = icmp eq i64 %4, 0
  br i1 %35, label %36, label %56

36:                                               ; preds = %34
  %ctlz.sh = lshr i64 %0, 1
  %ctlz.step = or i64 %0, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %37 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %37, 6148914691236517205
  %ctpop.sh = lshr i64 %37, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %38 = trunc i64 %ctpop.part to i8
  %39 = add nsw i8 %38, -15
  %40 = sext i8 %39 to i32
  %41 = icmp ult i8 %38, 15
  br i1 %41, label %42, label %49

42:                                               ; preds = %36
  %43 = sub nsw i32 0, %40
  %44 = zext i32 %43 to i64
  %45 = lshr i64 %0, %44
  %46 = and i32 %40, 63
  %47 = zext i32 %46 to i64
  %48 = shl i64 %0, %47
  br label %52

49:                                               ; preds = %36
  %50 = zext i32 %40 to i64
  %51 = shl i64 %0, %50
  br label %52

52:                                               ; preds = %49, %42
  %53 = phi i64 [ %45, %42 ], [ %51, %49 ]
  %54 = phi i64 [ %48, %42 ], [ 0, %49 ]
  %55 = sub nsw i32 -63, %40
  br label %72

56:                                               ; preds = %34
  %ctlz.sh31 = lshr i64 %4, 1
  %ctlz.step32 = or i64 %4, %ctlz.sh31
  %ctlz.sh33 = lshr i64 %ctlz.step32, 2
  %ctlz.step34 = or i64 %ctlz.step32, %ctlz.sh33
  %ctlz.sh35 = lshr i64 %ctlz.step34, 4
  %ctlz.step36 = or i64 %ctlz.step34, %ctlz.sh35
  %ctlz.sh37 = lshr i64 %ctlz.step36, 8
  %ctlz.step38 = or i64 %ctlz.step36, %ctlz.sh37
  %ctlz.sh39 = lshr i64 %ctlz.step38, 16
  %ctlz.step40 = or i64 %ctlz.step38, %ctlz.sh39
  %ctlz.sh41 = lshr i64 %ctlz.step40, 32
  %ctlz.step42 = or i64 %ctlz.step40, %ctlz.sh41
  %57 = xor i64 %ctlz.step42, -1
  %cppop.and143 = and i64 %57, 6148914691236517205
  %ctpop.sh44 = lshr i64 %57, 1
  %cppop.and245 = and i64 %ctpop.sh44, 6148914691236517205
  %ctpop.step46 = add i64 %cppop.and143, %cppop.and245
  %cppop.and147 = and i64 %ctpop.step46, 3689348814741910323
  %ctpop.sh48 = lshr i64 %ctpop.step46, 2
  %cppop.and249 = and i64 %ctpop.sh48, 3689348814741910323
  %ctpop.step50 = add i64 %cppop.and147, %cppop.and249
  %cppop.and151 = and i64 %ctpop.step50, 1085102592571150095
  %ctpop.sh52 = lshr i64 %ctpop.step50, 4
  %cppop.and253 = and i64 %ctpop.sh52, 1085102592571150095
  %ctpop.step54 = add i64 %cppop.and151, %cppop.and253
  %cppop.and155 = and i64 %ctpop.step54, 71777214294589695
  %ctpop.sh56 = lshr i64 %ctpop.step54, 8
  %cppop.and257 = and i64 %ctpop.sh56, 71777214294589695
  %ctpop.step58 = add i64 %cppop.and155, %cppop.and257
  %cppop.and159 = and i64 %ctpop.step58, 281470681808895
  %ctpop.sh60 = lshr i64 %ctpop.step58, 16
  %cppop.and261 = and i64 %ctpop.sh60, 281470681808895
  %ctpop.step62 = add i64 %cppop.and159, %cppop.and261
  %cppop.and163 = and i64 %ctpop.step62, 4294967295
  %ctpop.sh64 = lshr i64 %ctpop.step62, 32
  %cppop.and265 = and i64 %ctpop.sh64, 4294967295
  %ctpop.step66 = add i64 %cppop.and163, %cppop.and265
  %ctpop.part67 = add i64 %ctpop.step66, 0
  %58 = trunc i64 %ctpop.part67 to i32
  %59 = add nsw i32 %58, -15
  %60 = zext i32 %59 to i64
  %61 = shl i64 %0, %60
  %62 = icmp eq i32 %59, 0
  br i1 %62, label %69, label %63

63:                                               ; preds = %56
  %64 = shl i64 %4, %60
  %65 = sub nsw i64 15, %ctpop.part67
  %66 = and i64 %65, 63
  %67 = lshr i64 %0, %66
  %68 = or i64 %64, %67
  br label %69

69:                                               ; preds = %63, %56
  %70 = phi i64 [ %68, %63 ], [ %4, %56 ]
  %71 = sub nsw i32 16, %58
  br label %72

72:                                               ; preds = %69, %52, %29
  %73 = phi i64 [ %0, %29 ], [ %54, %52 ], [ %61, %69 ]
  %74 = phi i64 [ %4, %29 ], [ %53, %52 ], [ %70, %69 ]
  %75 = phi i32 [ %7, %29 ], [ %55, %52 ], [ %71, %69 ]
  %76 = add nsw i32 %75, -16383
  %77 = ashr i32 %76, 1
  %78 = add nsw i32 %77, 16382
  %79 = or i64 %74, 281474976710656
  %80 = lshr i64 %79, 17
  %81 = trunc i64 %80 to i32
  %82 = lshr i32 %81, 27
  %83 = trunc i32 %82 to i8
  %84 = and i8 %83, 15
  %85 = and i32 %75, 1
  %86 = icmp eq i32 %85, 0
  %87 = lshr i32 %81, 17
  br i1 %86, label %100, label %88

88:                                               ; preds = %72
  %89 = add nuw nsw i32 %87, 16384
  %90 = zext i8 %84 to i64
  %91 = getelementptr inbounds [16 x i16], [16 x i16]* @estimateSqrt32.sqrtOddAdjustments, i64 0, i64 %90
  %92 = load i16, i16* %91, align 2
  %93 = zext i16 %92 to i32
  %94 = sub nsw i32 %89, %93
  %95 = udiv i32 %81, %94
  %96 = shl i32 %95, 14
  %97 = shl nsw i32 %94, 15
  %98 = add i32 %97, %96
  %99 = lshr i32 %81, 1
  br label %115

100:                                              ; preds = %72
  %101 = or i32 %87, 32768
  %102 = zext i8 %84 to i64
  %103 = getelementptr inbounds [16 x i16], [16 x i16]* @estimateSqrt32.sqrtEvenAdjustments, i64 0, i64 %102
  %104 = load i16, i16* %103, align 2
  %105 = zext i16 %104 to i32
  %106 = sub nsw i32 %101, %105
  %107 = udiv i32 %81, %106
  %108 = add i32 %106, %107
  %109 = icmp ugt i32 %108, 131071
  %110 = shl i32 %108, 15
  %111 = select i1 %109, i32 -32768, i32 %110
  %112 = icmp ugt i32 %111, %81
  br i1 %112, label %115, label %113

113:                                              ; preds = %100
  %114 = ashr i32 %81, 1
  br label %125

115:                                              ; preds = %100, %88
  %116 = phi i32 [ %99, %88 ], [ %81, %100 ]
  %117 = phi i32 [ %98, %88 ], [ %111, %100 ]
  %118 = zext i32 %116 to i64
  %119 = shl nuw nsw i64 %118, 31
  %120 = zext i32 %117 to i64
  %121 = udiv i64 %119, %120
  %122 = trunc i64 %121 to i32
  %123 = lshr i32 %117, 1
  %124 = add i32 %123, %122
  br label %125

125:                                              ; preds = %113, %115
  %126 = phi i32 [ %124, %115 ], [ %114, %113 ]
  %127 = zext i32 %126 to i64
  %128 = add nuw nsw i32 %85, 51
  %129 = sub nuw nsw i32 13, %85
  %130 = zext i32 %129 to i64
  %131 = shl i64 %73, %130
  %132 = shl i64 %79, %130
  %133 = zext i32 %128 to i64
  %134 = lshr i64 %73, %133
  %135 = or i64 %134, %132
  %136 = shl nuw i64 %127, 32
  %137 = icmp ugt i64 %136, %135
  br i1 %137, label %138, label %161

138:                                              ; preds = %125
  %139 = udiv i64 %135, %127
  %140 = shl i64 %139, 32
  %141 = and i64 %139, 4294967295
  %142 = mul nuw i64 %141, %127
  %143 = sub i64 %135, %142
  %144 = icmp slt i64 %143, 0
  br i1 %144, label %145, label %151

145:                                              ; preds = %138, %145
  %146 = phi i64 [ %148, %145 ], [ %140, %138 ]
  %147 = phi i64 [ %149, %145 ], [ %143, %138 ]
  %148 = add i64 %146, -4294967296
  %149 = add i64 %147, %127
  %150 = icmp slt i64 %149, 0
  br i1 %150, label %145, label %151, !llvm.loop !50

151:                                              ; preds = %145, %138
  %152 = phi i64 [ %143, %138 ], [ %149, %145 ]
  %153 = phi i64 [ %140, %138 ], [ %148, %145 ]
  %154 = tail call i64 @llvm.fshl.i64(i64 %152, i64 %131, i64 32) #30
  %155 = icmp ugt i64 %136, %154
  br i1 %155, label %156, label %158

156:                                              ; preds = %151
  %157 = udiv i64 %154, %127
  br label %158

158:                                              ; preds = %156, %151
  %159 = phi i64 [ %157, %156 ], [ 4294967295, %151 ]
  %160 = or i64 %159, %153
  br label %161

161:                                              ; preds = %125, %158
  %162 = phi i64 [ %160, %158 ], [ -1, %125 ]
  %163 = shl nuw nsw i64 %127, 30
  %164 = add i64 %162, %163
  %165 = shl i64 %164, 1
  %166 = lshr i64 %164, 32
  %167 = and i64 %164, 4294967295
  %168 = mul nuw i64 %167, %167
  %169 = mul nuw i64 %166, %167
  %170 = mul nuw i64 %166, %166
  %171 = shl i64 %169, 1
  %172 = icmp ult i64 %171, %169
  %173 = select i1 %172, i64 -4294967296, i64 0
  %174 = lshr i64 %171, 32
  %175 = shl i64 %169, 33
  %176 = add i64 %175, %168
  %177 = icmp ult i64 %176, %175
  %178 = sext i1 %177 to i64
  %179 = sub i64 %131, %176
  %180 = icmp ult i64 %131, %176
  %181 = sext i1 %180 to i64
  %182 = add nuw i64 %170, %174
  %183 = sub i64 %135, %182
  %184 = add i64 %183, %173
  %185 = add i64 %184, %178
  %186 = add i64 %185, %181
  %187 = icmp slt i64 %186, 0
  br i1 %187, label %188, label %203

188:                                              ; preds = %161, %188
  %189 = phi i64 [ %194, %188 ], [ %165, %161 ]
  %190 = phi i64 [ %197, %188 ], [ %179, %161 ]
  %191 = phi i64 [ %201, %188 ], [ %186, %161 ]
  %192 = phi i64 [ %193, %188 ], [ %164, %161 ]
  %193 = add i64 %192, -1
  %194 = add i64 %189, -2
  %195 = lshr i64 %193, 63
  %196 = or i64 %194, 1
  %197 = add i64 %196, %190
  %198 = add nsw i64 %195, %191
  %199 = icmp ult i64 %197, %190
  %200 = zext i1 %199 to i64
  %201 = add nsw i64 %198, %200
  %202 = icmp slt i64 %201, 0
  br i1 %202, label %188, label %203, !llvm.loop !103

203:                                              ; preds = %188, %161
  %204 = phi i64 [ %164, %161 ], [ %193, %188 ]
  %205 = phi i64 [ %179, %161 ], [ %197, %188 ]
  %206 = phi i64 [ %165, %161 ], [ %194, %188 ]
  %207 = icmp ugt i64 %206, %205
  br i1 %207, label %208, label %339

208:                                              ; preds = %203
  %209 = lshr i64 %206, 32
  %210 = and i64 %206, -4294967296
  %211 = icmp ugt i64 %210, %205
  br i1 %211, label %212, label %215

212:                                              ; preds = %208
  %213 = udiv i64 %205, %209
  %214 = shl i64 %213, 32
  br label %215

215:                                              ; preds = %212, %208
  %216 = phi i64 [ %214, %212 ], [ -4294967296, %208 ]
  %217 = lshr exact i64 %216, 32
  %218 = and i64 %206, 4294967294
  %219 = mul nuw i64 %217, %218
  %220 = mul nuw i64 %217, %209
  %221 = lshr i64 %219, 32
  %222 = shl i64 %219, 32
  %223 = sub i64 0, %222
  %224 = icmp ne i64 %222, 0
  %225 = sext i1 %224 to i64
  %226 = add nuw i64 %220, %221
  %227 = sub i64 %205, %226
  %228 = add i64 %227, %225
  %229 = icmp slt i64 %228, 0
  br i1 %229, label %230, label %243

230:                                              ; preds = %215
  %231 = shl i64 %206, 32
  br label %232

232:                                              ; preds = %232, %230
  %233 = phi i64 [ %216, %230 ], [ %236, %232 ]
  %234 = phi i64 [ %228, %230 ], [ %241, %232 ]
  %235 = phi i64 [ %223, %230 ], [ %237, %232 ]
  %236 = add i64 %233, -4294967296
  %237 = add i64 %235, %231
  %238 = add i64 %234, %209
  %239 = icmp ult i64 %237, %235
  %240 = zext i1 %239 to i64
  %241 = add i64 %238, %240
  %242 = icmp slt i64 %241, 0
  br i1 %242, label %232, label %243, !llvm.loop !50

243:                                              ; preds = %232, %215
  %244 = phi i64 [ %223, %215 ], [ %237, %232 ]
  %245 = phi i64 [ %228, %215 ], [ %241, %232 ]
  %246 = phi i64 [ %216, %215 ], [ %236, %232 ]
  %247 = tail call i64 @llvm.fshl.i64(i64 %245, i64 %244, i64 32) #30
  %248 = icmp ugt i64 %210, %247
  br i1 %248, label %249, label %251

249:                                              ; preds = %243
  %250 = udiv i64 %247, %209
  br label %251

251:                                              ; preds = %243, %249
  %252 = phi i64 [ %250, %249 ], [ 4294967295, %243 ]
  %253 = or i64 %252, %246
  %254 = and i64 %253, 8190
  %255 = icmp ult i64 %254, 6
  br i1 %255, label %256, label %339

256:                                              ; preds = %251
  %257 = icmp eq i64 %253, 0
  %258 = select i1 %257, i64 1, i64 %253
  %259 = lshr i64 %258, 32
  %260 = and i64 %258, 4294967295
  %261 = mul nuw i64 %260, %218
  %262 = mul nuw i64 %259, %218
  %263 = mul nuw i64 %260, %209
  %264 = mul nuw i64 %259, %209
  %265 = add i64 %262, %263
  %266 = icmp ult i64 %265, %263
  %267 = select i1 %266, i64 -4294967296, i64 0
  %268 = lshr i64 %265, 32
  %269 = shl i64 %265, 32
  %270 = add i64 %269, %261
  %271 = icmp ult i64 %270, %269
  %272 = sext i1 %271 to i64
  %273 = sub i64 0, %270
  %274 = icmp ne i64 %270, 0
  %275 = sext i1 %274 to i64
  %276 = mul nuw i64 %260, %260
  %277 = mul nuw i64 %259, %260
  %278 = mul nuw i64 %259, %259
  %279 = shl i64 %277, 1
  %280 = icmp ult i64 %279, %277
  %281 = select i1 %280, i64 4294967296, i64 0
  %282 = lshr i64 %279, 32
  %283 = shl i64 %277, 33
  %284 = add i64 %283, %276
  %285 = icmp ult i64 %284, %283
  %286 = zext i1 %285 to i64
  %287 = add nuw i64 %282, %278
  %288 = add i64 %287, %281
  %289 = add i64 %288, %286
  %290 = sub i64 0, %284
  %291 = icmp ne i64 %284, 0
  %292 = sub i64 %273, %289
  %293 = icmp ugt i64 %289, %273
  %294 = zext i1 %291 to i64
  %295 = icmp ult i64 %292, %294
  %296 = sext i1 %295 to i64
  %297 = sub i64 %292, %294
  %298 = sext i1 %293 to i64
  %299 = add i64 %264, %268
  %300 = sub i64 %205, %299
  %301 = add i64 %300, %267
  %302 = add i64 %301, %272
  %303 = add i64 %302, %275
  %304 = add i64 %303, %298
  %305 = add i64 %304, %296
  %306 = icmp slt i64 %305, 0
  br i1 %306, label %307, label %329

307:                                              ; preds = %256, %307
  %308 = phi i64 [ %317, %307 ], [ %290, %256 ]
  %309 = phi i64 [ %322, %307 ], [ %297, %256 ]
  %310 = phi i64 [ %327, %307 ], [ %305, %256 ]
  %311 = phi i64 [ %312, %307 ], [ %258, %256 ]
  %312 = add i64 %311, -1
  %313 = shl i64 %312, 1
  %314 = lshr i64 %312, 63
  %315 = or i64 %313, 1
  %316 = or i64 %314, %206
  %317 = add i64 %315, %308
  %318 = icmp ult i64 %317, %308
  %319 = add i64 %316, %309
  %320 = icmp ult i64 %319, %309
  %321 = zext i1 %318 to i64
  %322 = add i64 %319, %321
  %323 = icmp ult i64 %322, %321
  %324 = zext i1 %323 to i64
  %325 = zext i1 %320 to i64
  %326 = add nsw i64 %310, %325
  %327 = add nsw i64 %326, %324
  %328 = icmp slt i64 %327, 0
  br i1 %328, label %307, label %329, !llvm.loop !104

329:                                              ; preds = %307, %256
  %330 = phi i64 [ %258, %256 ], [ %312, %307 ]
  %331 = phi i64 [ %305, %256 ], [ %327, %307 ]
  %332 = phi i64 [ %297, %256 ], [ %322, %307 ]
  %333 = phi i64 [ %290, %256 ], [ %317, %307 ]
  %334 = or i64 %332, %331
  %335 = or i64 %334, %333
  %336 = icmp ne i64 %335, 0
  %337 = zext i1 %336 to i64
  %338 = or i64 %330, %337
  br label %339

339:                                              ; preds = %203, %329, %251
  %340 = phi i64 [ %338, %329 ], [ %253, %251 ], [ -1, %203 ]
  %341 = shl i64 %340, 50
  %342 = tail call i64 @llvm.fshl.i64(i64 %204, i64 %340, i64 50)
  %343 = lshr i64 %204, 14
  %344 = tail call fastcc { i64, i64 } @roundAndPackFloat128(i8 noundef zeroext 0, i32 noundef %78, i64 noundef %343, i64 noundef %342, i64 noundef %341, %struct.float_status* noundef %2)
  %345 = extractvalue { i64, i64 } %344, 0
  %346 = extractvalue { i64, i64 } %344, 1
  br label %347

347:                                              ; preds = %31, %20, %16, %339, %25, %12
  %348 = phi i64 [ %14, %12 ], [ 0, %25 ], [ %345, %339 ], [ %0, %16 ], [ %0, %20 ], [ 0, %31 ]
  %349 = phi i64 [ %15, %12 ], [ -140737488355328, %25 ], [ %346, %339 ], [ %1, %16 ], [ %1, %20 ], [ 0, %31 ]
  %350 = insertvalue { i64, i64 } poison, i64 %348, 0
  %351 = insertvalue { i64, i64 } %350, i64 %349, 1
  ret { i64, i64 } %351
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @float128_eq(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* nocapture noundef %4) local_unnamed_addr #2 {
  %6 = and i64 %1, 9223090561878065152
  %7 = icmp eq i64 %6, 9223090561878065152
  br i1 %7, label %8, label %12

8:                                                ; preds = %5
  %9 = and i64 %1, 281474976710655
  %10 = or i64 %9, %0
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %12, label %19

12:                                               ; preds = %8, %5
  %13 = and i64 %3, 9223090561878065152
  %14 = icmp eq i64 %13, 9223090561878065152
  br i1 %14, label %15, label %23

15:                                               ; preds = %12
  %16 = and i64 %3, 281474976710655
  %17 = or i64 %16, %2
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %23, label %19

19:                                               ; preds = %15, %8
  %20 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %21 = load i8, i8* %20, align 1
  %22 = or i8 %21, 1
  store i8 %22, i8* %20, align 1
  br label %34

23:                                               ; preds = %15, %12
  %24 = icmp eq i64 %0, %2
  br i1 %24, label %25, label %34

25:                                               ; preds = %23
  %26 = icmp eq i64 %1, %3
  br i1 %26, label %34, label %27

27:                                               ; preds = %25
  %28 = icmp eq i64 %0, 0
  br i1 %28, label %29, label %34

29:                                               ; preds = %27
  %30 = or i64 %3, %1
  %31 = and i64 %30, 9223372036854775807
  %32 = icmp eq i64 %31, 0
  %33 = zext i1 %32 to i32
  br label %34

34:                                               ; preds = %23, %27, %29, %25, %19
  %35 = phi i32 [ 0, %19 ], [ 0, %23 ], [ 1, %25 ], [ 0, %27 ], [ %33, %29 ]
  ret i32 %35
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @float128_le(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* nocapture noundef %4) local_unnamed_addr #2 {
  %6 = and i64 %1, 9223090561878065152
  %7 = icmp eq i64 %6, 9223090561878065152
  br i1 %7, label %8, label %12

8:                                                ; preds = %5
  %9 = and i64 %1, 281474976710655
  %10 = or i64 %9, %0
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %12, label %19

12:                                               ; preds = %8, %5
  %13 = and i64 %3, 9223090561878065152
  %14 = icmp eq i64 %13, 9223090561878065152
  br i1 %14, label %15, label %23

15:                                               ; preds = %12
  %16 = and i64 %3, 281474976710655
  %17 = or i64 %16, %2
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %23, label %19

19:                                               ; preds = %15, %8
  %20 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %21 = load i8, i8* %20, align 1
  %22 = or i8 %21, 1
  store i8 %22, i8* %20, align 1
  br label %50

23:                                               ; preds = %15, %12
  %24 = lshr i64 %1, 63
  %25 = trunc i64 %24 to i8
  %26 = lshr i64 %3, 63
  %27 = trunc i64 %26 to i8
  %28 = icmp eq i8 %25, %27
  %29 = icmp sgt i64 %1, -1
  br i1 %28, label %37, label %30

30:                                               ; preds = %23
  br i1 %29, label %31, label %50

31:                                               ; preds = %30
  %32 = or i64 %3, %1
  %33 = shl i64 %32, 1
  %34 = or i64 %2, %0
  %35 = or i64 %34, %33
  %36 = icmp eq i64 %35, 0
  br label %50

37:                                               ; preds = %23
  br i1 %29, label %44, label %38

38:                                               ; preds = %37
  %39 = icmp ult i64 %3, %1
  %40 = icmp eq i64 %3, %1
  %41 = icmp ule i64 %2, %0
  %42 = and i1 %41, %40
  %43 = or i1 %39, %42
  br label %50

44:                                               ; preds = %37
  %45 = icmp ult i64 %1, %3
  %46 = icmp eq i64 %1, %3
  %47 = icmp ule i64 %0, %2
  %48 = and i1 %47, %46
  %49 = or i1 %45, %48
  br label %50

50:                                               ; preds = %38, %44, %30, %31, %19
  %51 = phi i1 [ false, %19 ], [ true, %30 ], [ %36, %31 ], [ %43, %38 ], [ %49, %44 ]
  %52 = zext i1 %51 to i32
  ret i32 %52
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @float128_lt(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* nocapture noundef %4) local_unnamed_addr #2 {
  %6 = and i64 %1, 9223090561878065152
  %7 = icmp eq i64 %6, 9223090561878065152
  br i1 %7, label %8, label %12

8:                                                ; preds = %5
  %9 = and i64 %1, 281474976710655
  %10 = or i64 %9, %0
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %12, label %19

12:                                               ; preds = %8, %5
  %13 = and i64 %3, 9223090561878065152
  %14 = icmp eq i64 %13, 9223090561878065152
  br i1 %14, label %15, label %23

15:                                               ; preds = %12
  %16 = and i64 %3, 281474976710655
  %17 = or i64 %16, %2
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %23, label %19

19:                                               ; preds = %15, %8
  %20 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %21 = load i8, i8* %20, align 1
  %22 = or i8 %21, 1
  store i8 %22, i8* %20, align 1
  br label %50

23:                                               ; preds = %15, %12
  %24 = lshr i64 %1, 63
  %25 = trunc i64 %24 to i8
  %26 = lshr i64 %3, 63
  %27 = trunc i64 %26 to i8
  %28 = icmp eq i8 %25, %27
  %29 = icmp sgt i64 %1, -1
  br i1 %28, label %37, label %30

30:                                               ; preds = %23
  br i1 %29, label %50, label %31

31:                                               ; preds = %30
  %32 = or i64 %3, %1
  %33 = shl i64 %32, 1
  %34 = or i64 %2, %0
  %35 = or i64 %34, %33
  %36 = icmp ne i64 %35, 0
  br label %50

37:                                               ; preds = %23
  br i1 %29, label %44, label %38

38:                                               ; preds = %37
  %39 = icmp ult i64 %3, %1
  %40 = icmp eq i64 %3, %1
  %41 = icmp ult i64 %2, %0
  %42 = and i1 %41, %40
  %43 = or i1 %39, %42
  br label %50

44:                                               ; preds = %37
  %45 = icmp ult i64 %1, %3
  %46 = icmp eq i64 %1, %3
  %47 = icmp ult i64 %0, %2
  %48 = and i1 %47, %46
  %49 = or i1 %45, %48
  br label %50

50:                                               ; preds = %38, %44, %30, %31, %19
  %51 = phi i1 [ false, %19 ], [ false, %30 ], [ %36, %31 ], [ %43, %38 ], [ %49, %44 ]
  %52 = zext i1 %51 to i32
  ret i32 %52
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @float128_unordered(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* nocapture noundef %4) local_unnamed_addr #2 {
  %6 = and i64 %1, 9223090561878065152
  %7 = icmp eq i64 %6, 9223090561878065152
  br i1 %7, label %8, label %12

8:                                                ; preds = %5
  %9 = and i64 %1, 281474976710655
  %10 = or i64 %9, %0
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %12, label %19

12:                                               ; preds = %8, %5
  %13 = and i64 %3, 9223090561878065152
  %14 = icmp eq i64 %13, 9223090561878065152
  br i1 %14, label %15, label %23

15:                                               ; preds = %12
  %16 = and i64 %3, 281474976710655
  %17 = or i64 %16, %2
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %23, label %19

19:                                               ; preds = %15, %8
  %20 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %21 = load i8, i8* %20, align 1
  %22 = or i8 %21, 1
  store i8 %22, i8* %20, align 1
  br label %23

23:                                               ; preds = %12, %15, %19
  %24 = phi i32 [ 1, %19 ], [ 0, %15 ], [ 0, %12 ]
  ret i32 %24
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @float128_eq_quiet(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* nocapture noundef %4) local_unnamed_addr #2 {
  %6 = and i64 %1, 9223090561878065152
  %7 = icmp eq i64 %6, 9223090561878065152
  br i1 %7, label %8, label %12

8:                                                ; preds = %5
  %9 = and i64 %1, 281474976710655
  %10 = or i64 %9, %0
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %12, label %19

12:                                               ; preds = %8, %5
  %13 = and i64 %3, 9223090561878065152
  %14 = icmp eq i64 %13, 9223090561878065152
  br i1 %14, label %15, label %39

15:                                               ; preds = %12
  %16 = and i64 %3, 281474976710655
  %17 = or i64 %16, %2
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %39, label %19

19:                                               ; preds = %15, %8
  %20 = and i64 %1, 9223231299366420480
  %21 = icmp eq i64 %20, 9223090561878065152
  br i1 %21, label %22, label %27

22:                                               ; preds = %19
  %23 = icmp eq i64 %0, 0
  %24 = and i64 %1, 140737488355327
  %25 = icmp eq i64 %24, 0
  %26 = select i1 %23, i1 %25, i1 false
  br i1 %26, label %27, label %35

27:                                               ; preds = %19, %22
  %28 = and i64 %3, 9223231299366420480
  %29 = icmp eq i64 %28, 9223090561878065152
  br i1 %29, label %30, label %50

30:                                               ; preds = %27
  %31 = icmp eq i64 %2, 0
  %32 = and i64 %3, 140737488355327
  %33 = icmp eq i64 %32, 0
  %34 = select i1 %31, i1 %33, i1 false
  br i1 %34, label %50, label %35

35:                                               ; preds = %30, %22
  %36 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %37 = load i8, i8* %36, align 1
  %38 = or i8 %37, 1
  store i8 %38, i8* %36, align 1
  br label %50

39:                                               ; preds = %15, %12
  %40 = icmp eq i64 %0, %2
  br i1 %40, label %41, label %50

41:                                               ; preds = %39
  %42 = icmp eq i64 %1, %3
  br i1 %42, label %50, label %43

43:                                               ; preds = %41
  %44 = icmp eq i64 %0, 0
  br i1 %44, label %45, label %50

45:                                               ; preds = %43
  %46 = or i64 %3, %1
  %47 = and i64 %46, 9223372036854775807
  %48 = icmp eq i64 %47, 0
  %49 = zext i1 %48 to i32
  br label %50

50:                                               ; preds = %27, %39, %43, %45, %41, %30, %35
  %51 = phi i32 [ 0, %35 ], [ 0, %30 ], [ 0, %39 ], [ 1, %41 ], [ 0, %43 ], [ %49, %45 ], [ 0, %27 ]
  ret i32 %51
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @float128_le_quiet(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* nocapture noundef %4) local_unnamed_addr #2 {
  %6 = and i64 %1, 9223090561878065152
  %7 = icmp eq i64 %6, 9223090561878065152
  br i1 %7, label %8, label %12

8:                                                ; preds = %5
  %9 = and i64 %1, 281474976710655
  %10 = or i64 %9, %0
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %12, label %19

12:                                               ; preds = %8, %5
  %13 = and i64 %3, 9223090561878065152
  %14 = icmp eq i64 %13, 9223090561878065152
  br i1 %14, label %15, label %39

15:                                               ; preds = %12
  %16 = and i64 %3, 281474976710655
  %17 = or i64 %16, %2
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %39, label %19

19:                                               ; preds = %15, %8
  %20 = and i64 %1, 9223231299366420480
  %21 = icmp eq i64 %20, 9223090561878065152
  br i1 %21, label %22, label %27

22:                                               ; preds = %19
  %23 = icmp eq i64 %0, 0
  %24 = and i64 %1, 140737488355327
  %25 = icmp eq i64 %24, 0
  %26 = select i1 %23, i1 %25, i1 false
  br i1 %26, label %27, label %35

27:                                               ; preds = %19, %22
  %28 = and i64 %3, 9223231299366420480
  %29 = icmp eq i64 %28, 9223090561878065152
  br i1 %29, label %30, label %66

30:                                               ; preds = %27
  %31 = icmp eq i64 %2, 0
  %32 = and i64 %3, 140737488355327
  %33 = icmp eq i64 %32, 0
  %34 = select i1 %31, i1 %33, i1 false
  br i1 %34, label %66, label %35

35:                                               ; preds = %30, %22
  %36 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %37 = load i8, i8* %36, align 1
  %38 = or i8 %37, 1
  store i8 %38, i8* %36, align 1
  br label %66

39:                                               ; preds = %15, %12
  %40 = lshr i64 %1, 63
  %41 = trunc i64 %40 to i8
  %42 = lshr i64 %3, 63
  %43 = trunc i64 %42 to i8
  %44 = icmp eq i8 %41, %43
  %45 = icmp sgt i64 %1, -1
  br i1 %44, label %53, label %46

46:                                               ; preds = %39
  br i1 %45, label %47, label %66

47:                                               ; preds = %46
  %48 = or i64 %3, %1
  %49 = shl i64 %48, 1
  %50 = or i64 %2, %0
  %51 = or i64 %50, %49
  %52 = icmp eq i64 %51, 0
  br label %66

53:                                               ; preds = %39
  br i1 %45, label %60, label %54

54:                                               ; preds = %53
  %55 = icmp ult i64 %3, %1
  %56 = icmp eq i64 %3, %1
  %57 = icmp ule i64 %2, %0
  %58 = and i1 %57, %56
  %59 = or i1 %55, %58
  br label %66

60:                                               ; preds = %53
  %61 = icmp ult i64 %1, %3
  %62 = icmp eq i64 %1, %3
  %63 = icmp ule i64 %0, %2
  %64 = and i1 %63, %62
  %65 = or i1 %61, %64
  br label %66

66:                                               ; preds = %54, %60, %27, %46, %47, %30, %35
  %67 = phi i1 [ false, %35 ], [ false, %30 ], [ true, %46 ], [ %52, %47 ], [ false, %27 ], [ %59, %54 ], [ %65, %60 ]
  %68 = zext i1 %67 to i32
  ret i32 %68
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @float128_lt_quiet(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* nocapture noundef %4) local_unnamed_addr #2 {
  %6 = and i64 %1, 9223090561878065152
  %7 = icmp eq i64 %6, 9223090561878065152
  br i1 %7, label %8, label %12

8:                                                ; preds = %5
  %9 = and i64 %1, 281474976710655
  %10 = or i64 %9, %0
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %12, label %19

12:                                               ; preds = %8, %5
  %13 = and i64 %3, 9223090561878065152
  %14 = icmp eq i64 %13, 9223090561878065152
  br i1 %14, label %15, label %39

15:                                               ; preds = %12
  %16 = and i64 %3, 281474976710655
  %17 = or i64 %16, %2
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %39, label %19

19:                                               ; preds = %15, %8
  %20 = and i64 %1, 9223231299366420480
  %21 = icmp eq i64 %20, 9223090561878065152
  br i1 %21, label %22, label %27

22:                                               ; preds = %19
  %23 = icmp eq i64 %0, 0
  %24 = and i64 %1, 140737488355327
  %25 = icmp eq i64 %24, 0
  %26 = select i1 %23, i1 %25, i1 false
  br i1 %26, label %27, label %35

27:                                               ; preds = %19, %22
  %28 = and i64 %3, 9223231299366420480
  %29 = icmp eq i64 %28, 9223090561878065152
  br i1 %29, label %30, label %66

30:                                               ; preds = %27
  %31 = icmp eq i64 %2, 0
  %32 = and i64 %3, 140737488355327
  %33 = icmp eq i64 %32, 0
  %34 = select i1 %31, i1 %33, i1 false
  br i1 %34, label %66, label %35

35:                                               ; preds = %30, %22
  %36 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %37 = load i8, i8* %36, align 1
  %38 = or i8 %37, 1
  store i8 %38, i8* %36, align 1
  br label %66

39:                                               ; preds = %15, %12
  %40 = lshr i64 %1, 63
  %41 = trunc i64 %40 to i8
  %42 = lshr i64 %3, 63
  %43 = trunc i64 %42 to i8
  %44 = icmp eq i8 %41, %43
  %45 = icmp sgt i64 %1, -1
  br i1 %44, label %53, label %46

46:                                               ; preds = %39
  br i1 %45, label %66, label %47

47:                                               ; preds = %46
  %48 = or i64 %3, %1
  %49 = shl i64 %48, 1
  %50 = or i64 %2, %0
  %51 = or i64 %50, %49
  %52 = icmp ne i64 %51, 0
  br label %66

53:                                               ; preds = %39
  br i1 %45, label %60, label %54

54:                                               ; preds = %53
  %55 = icmp ult i64 %3, %1
  %56 = icmp eq i64 %3, %1
  %57 = icmp ult i64 %2, %0
  %58 = and i1 %57, %56
  %59 = or i1 %55, %58
  br label %66

60:                                               ; preds = %53
  %61 = icmp ult i64 %1, %3
  %62 = icmp eq i64 %1, %3
  %63 = icmp ult i64 %0, %2
  %64 = and i1 %63, %62
  %65 = or i1 %61, %64
  br label %66

66:                                               ; preds = %54, %60, %27, %46, %47, %30, %35
  %67 = phi i1 [ false, %35 ], [ false, %30 ], [ false, %46 ], [ %52, %47 ], [ false, %27 ], [ %59, %54 ], [ %65, %60 ]
  %68 = zext i1 %67 to i32
  ret i32 %68
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @float128_unordered_quiet(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* nocapture noundef %4) local_unnamed_addr #2 {
  %6 = and i64 %1, 9223090561878065152
  %7 = icmp eq i64 %6, 9223090561878065152
  br i1 %7, label %8, label %12

8:                                                ; preds = %5
  %9 = and i64 %1, 281474976710655
  %10 = or i64 %9, %0
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %12, label %19

12:                                               ; preds = %8, %5
  %13 = and i64 %3, 9223090561878065152
  %14 = icmp eq i64 %13, 9223090561878065152
  br i1 %14, label %15, label %39

15:                                               ; preds = %12
  %16 = and i64 %3, 281474976710655
  %17 = or i64 %16, %2
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %39, label %19

19:                                               ; preds = %15, %8
  %20 = and i64 %1, 9223231299366420480
  %21 = icmp eq i64 %20, 9223090561878065152
  br i1 %21, label %22, label %27

22:                                               ; preds = %19
  %23 = icmp eq i64 %0, 0
  %24 = and i64 %1, 140737488355327
  %25 = icmp eq i64 %24, 0
  %26 = select i1 %23, i1 %25, i1 false
  br i1 %26, label %27, label %35

27:                                               ; preds = %19, %22
  %28 = and i64 %3, 9223231299366420480
  %29 = icmp eq i64 %28, 9223090561878065152
  br i1 %29, label %30, label %39

30:                                               ; preds = %27
  %31 = icmp eq i64 %2, 0
  %32 = and i64 %3, 140737488355327
  %33 = icmp eq i64 %32, 0
  %34 = select i1 %31, i1 %33, i1 false
  br i1 %34, label %39, label %35

35:                                               ; preds = %30, %22
  %36 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %37 = load i8, i8* %36, align 1
  %38 = or i8 %37, 1
  store i8 %38, i8* %36, align 1
  br label %39

39:                                               ; preds = %27, %12, %15, %30, %35
  %40 = phi i32 [ 1, %35 ], [ 1, %30 ], [ 0, %15 ], [ 0, %12 ], [ 1, %27 ]
  ret i32 %40
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define i32 @uint32_to_float32(i32 noundef %0, %struct.float_status* nocapture noundef %1) local_unnamed_addr #14 {
  %3 = zext i32 %0 to i64
  %4 = icmp eq i32 %0, 0
  br i1 %4, label %40, label %5

5:                                                ; preds = %2
  %ctlz.sh = lshr i64 %3, 1
  %ctlz.step = or i64 %3, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %6 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %6, 6148914691236517205
  %ctpop.sh = lshr i64 %6, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %7 = trunc i64 %ctpop.part to i8
  %8 = add nsw i8 %7, -40
  %9 = sext i8 %8 to i32
  %10 = icmp ugt i8 %7, 39
  br i1 %10, label %11, label %18

11:                                               ; preds = %5
  %12 = zext i32 %9 to i64
  %13 = shl i64 %3, %12
  %14 = trunc i64 %13 to i32
  %15 = mul nsw i32 %9, -8388608
  %16 = add nsw i32 %15, 1249902592
  %17 = add i32 %16, %14
  br label %40

18:                                               ; preds = %5
  %19 = add nsw i8 %7, -33
  %20 = sext i8 %19 to i32
  %21 = icmp ult i8 %7, 33
  br i1 %21, label %22, label %32

22:                                               ; preds = %18
  %23 = sub nsw i32 0, %20
  %24 = zext i32 %23 to i64
  %25 = lshr i64 %3, %24
  %26 = and i32 %20, 63
  %27 = zext i32 %26 to i64
  %28 = shl i64 %3, %27
  %29 = icmp ne i64 %28, 0
  %30 = zext i1 %29 to i64
  %31 = or i64 %25, %30
  br label %35

32:                                               ; preds = %18
  %33 = zext i32 %20 to i64
  %34 = shl i64 %3, %33
  br label %35

35:                                               ; preds = %32, %22
  %36 = phi i64 [ %34, %32 ], [ %31, %22 ]
  %37 = sub nsw i32 156, %20
  %38 = trunc i64 %36 to i32
  %39 = tail call fastcc i32 @roundAndPackFloat32(i8 noundef zeroext 0, i32 noundef %37, i32 noundef %38, %struct.float_status* noundef %1) #30
  br label %40

40:                                               ; preds = %2, %11, %35
  %41 = phi i32 [ %17, %11 ], [ %39, %35 ], [ 0, %2 ]
  ret i32 %41
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define i64 @uint32_to_float64(i32 noundef %0, %struct.float_status* nocapture noundef %1) local_unnamed_addr #14 {
  %3 = zext i32 %0 to i64
  %4 = icmp eq i32 %0, 0
  br i1 %4, label %13, label %5

5:                                                ; preds = %2
  %ctlz.sh = lshr i64 %3, 1
  %ctlz.step = or i64 %3, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %6 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %6, 6148914691236517205
  %ctpop.sh = lshr i64 %6, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %7 = trunc i64 %ctpop.part to i32
  %8 = add nuw nsw i64 %ctpop.part, 4294967295
  %9 = sub nuw nsw i32 1085, %7
  %10 = and i64 %8, 4294967295
  %11 = shl i64 %3, %10
  %12 = tail call fastcc i64 @roundAndPackFloat64(i8 noundef zeroext 0, i32 noundef %9, i64 noundef %11, %struct.float_status* noundef %1) #30
  br label %13

13:                                               ; preds = %2, %5
  %14 = phi i64 [ %12, %5 ], [ 0, %2 ]
  ret i64 %14
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define i32 @float32_to_uint32(i32 noundef %0, %struct.float_status* nocapture noundef %1) local_unnamed_addr #14 {
  %3 = tail call i64 @float32_to_int64(i32 noundef %0, %struct.float_status* noundef %1)
  %4 = icmp slt i64 %3, 0
  br i1 %4, label %5, label %9

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %7 = load i8, i8* %6, align 1
  %8 = or i8 %7, 1
  store i8 %8, i8* %6, align 1
  br label %17

9:                                                ; preds = %2
  %10 = icmp ugt i64 %3, 4294967295
  br i1 %10, label %11, label %15

11:                                               ; preds = %9
  %12 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %13 = load i8, i8* %12, align 1
  %14 = or i8 %13, 1
  store i8 %14, i8* %12, align 1
  br label %17

15:                                               ; preds = %9
  %16 = trunc i64 %3 to i32
  br label %17

17:                                               ; preds = %11, %15, %5
  %18 = phi i32 [ 0, %5 ], [ -1, %11 ], [ %16, %15 ]
  ret i32 %18
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @float32_to_uint32_round_to_zero(i32 noundef %0, %struct.float_status* nocapture noundef %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = and i32 %0, 2139095040
  %8 = icmp ne i32 %7, 0
  %9 = and i32 %0, 8388607
  %10 = icmp eq i32 %9, 0
  %11 = or i1 %8, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, 64
  store i8 %15, i8* %13, align 1
  %16 = and i32 %0, -2147483648
  br label %17

17:                                               ; preds = %12, %6, %2
  %18 = phi i32 [ %16, %12 ], [ %0, %6 ], [ %0, %2 ]
  %19 = and i32 %18, 8388607
  %20 = lshr i32 %18, 23
  %21 = and i32 %20, 255
  %22 = add nuw nsw i32 %20, 2
  %23 = icmp ugt i32 %21, 189
  br i1 %23, label %24, label %35

24:                                               ; preds = %17
  %25 = icmp eq i32 %18, -553648128
  br i1 %25, label %61, label %26

26:                                               ; preds = %24
  %27 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %28 = load i8, i8* %27, align 1
  %29 = or i8 %28, 1
  store i8 %29, i8* %27, align 1
  %30 = icmp sgt i32 %18, -1
  br i1 %30, label %70, label %31

31:                                               ; preds = %26
  %32 = icmp eq i32 %21, 255
  %33 = icmp ne i32 %19, 0
  %34 = and i1 %33, %32
  br i1 %34, label %70, label %61

35:                                               ; preds = %17
  %36 = icmp ult i32 %21, 127
  br i1 %36, label %37, label %44

37:                                               ; preds = %35
  %38 = or i32 %21, %19
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %74, label %40

40:                                               ; preds = %37
  %41 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %42 = load i8, i8* %41, align 1
  %43 = or i8 %42, 32
  store i8 %43, i8* %41, align 1
  br label %74

44:                                               ; preds = %35
  %45 = or i32 %18, 8388608
  %46 = zext i32 %45 to i64
  %47 = shl i64 %46, 40
  %48 = sub nuw nsw i32 190, %21
  %49 = zext i32 %48 to i64
  %50 = lshr i64 %47, %49
  %51 = and i32 %22, 63
  %52 = zext i32 %51 to i64
  %53 = shl i64 %47, %52
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %59, label %55

55:                                               ; preds = %44
  %56 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %57 = load i8, i8* %56, align 1
  %58 = or i8 %57, 32
  store i8 %58, i8* %56, align 1
  br label %59

59:                                               ; preds = %55, %44
  %60 = icmp sgt i32 %18, -1
  br i1 %60, label %65, label %61

61:                                               ; preds = %59, %31, %24
  %62 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %63 = load i8, i8* %62, align 1
  %64 = or i8 %63, 1
  store i8 %64, i8* %62, align 1
  br label %77

65:                                               ; preds = %59
  %66 = icmp ugt i64 %50, 4294967295
  br i1 %66, label %67, label %74

67:                                               ; preds = %65
  %68 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %69 = load i8, i8* %68, align 1
  br label %70

70:                                               ; preds = %67, %31, %26
  %71 = phi i8 [ %69, %67 ], [ %29, %31 ], [ %29, %26 ]
  %72 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %73 = or i8 %71, 1
  store i8 %73, i8* %72, align 1
  br label %77

74:                                               ; preds = %40, %37, %65
  %75 = phi i64 [ %50, %65 ], [ 0, %37 ], [ 0, %40 ]
  %76 = trunc i64 %75 to i32
  br label %77

77:                                               ; preds = %70, %74, %61
  %78 = phi i32 [ 0, %61 ], [ -1, %70 ], [ %76, %74 ]
  ret i32 %78
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @float32_to_uint16_round_to_zero(i32 noundef %0, %struct.float_status* nocapture noundef %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = and i32 %0, 2139095040
  %8 = icmp ne i32 %7, 0
  %9 = and i32 %0, 8388607
  %10 = icmp eq i32 %9, 0
  %11 = or i1 %8, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, 64
  store i8 %15, i8* %13, align 1
  %16 = and i32 %0, -2147483648
  br label %17

17:                                               ; preds = %12, %6, %2
  %18 = phi i32 [ %16, %12 ], [ %0, %6 ], [ %0, %2 ]
  %19 = and i32 %18, 8388607
  %20 = lshr i32 %18, 23
  %21 = and i32 %20, 255
  %22 = add nuw nsw i32 %20, 2
  %23 = icmp ugt i32 %21, 189
  br i1 %23, label %24, label %35

24:                                               ; preds = %17
  %25 = icmp eq i32 %18, -553648128
  br i1 %25, label %61, label %26

26:                                               ; preds = %24
  %27 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %28 = load i8, i8* %27, align 1
  %29 = or i8 %28, 1
  store i8 %29, i8* %27, align 1
  %30 = icmp sgt i32 %18, -1
  br i1 %30, label %70, label %31

31:                                               ; preds = %26
  %32 = icmp eq i32 %21, 255
  %33 = icmp ne i32 %19, 0
  %34 = and i1 %33, %32
  br i1 %34, label %70, label %61

35:                                               ; preds = %17
  %36 = icmp ult i32 %21, 127
  br i1 %36, label %37, label %44

37:                                               ; preds = %35
  %38 = or i32 %21, %19
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %74, label %40

40:                                               ; preds = %37
  %41 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %42 = load i8, i8* %41, align 1
  %43 = or i8 %42, 32
  store i8 %43, i8* %41, align 1
  br label %74

44:                                               ; preds = %35
  %45 = or i32 %18, 8388608
  %46 = zext i32 %45 to i64
  %47 = shl i64 %46, 40
  %48 = sub nuw nsw i32 190, %21
  %49 = zext i32 %48 to i64
  %50 = lshr i64 %47, %49
  %51 = and i32 %22, 63
  %52 = zext i32 %51 to i64
  %53 = shl i64 %47, %52
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %59, label %55

55:                                               ; preds = %44
  %56 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %57 = load i8, i8* %56, align 1
  %58 = or i8 %57, 32
  store i8 %58, i8* %56, align 1
  br label %59

59:                                               ; preds = %55, %44
  %60 = icmp sgt i32 %18, -1
  br i1 %60, label %65, label %61

61:                                               ; preds = %59, %31, %24
  %62 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %63 = load i8, i8* %62, align 1
  %64 = or i8 %63, 1
  store i8 %64, i8* %62, align 1
  br label %77

65:                                               ; preds = %59
  %66 = icmp ugt i64 %50, 65535
  br i1 %66, label %67, label %74

67:                                               ; preds = %65
  %68 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %69 = load i8, i8* %68, align 1
  br label %70

70:                                               ; preds = %67, %31, %26
  %71 = phi i8 [ %69, %67 ], [ %29, %31 ], [ %29, %26 ]
  %72 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %73 = or i8 %71, 1
  store i8 %73, i8* %72, align 1
  br label %77

74:                                               ; preds = %40, %37, %65
  %75 = phi i64 [ %50, %65 ], [ 0, %37 ], [ 0, %40 ]
  %76 = trunc i64 %75 to i32
  br label %77

77:                                               ; preds = %70, %74, %61
  %78 = phi i32 [ 0, %61 ], [ 65535, %70 ], [ %76, %74 ]
  ret i32 %78
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define i32 @float64_to_uint32(i64 noundef %0, %struct.float_status* nocapture noundef %1) local_unnamed_addr #14 {
  %3 = tail call i64 @float64_to_int64(i64 noundef %0, %struct.float_status* noundef %1)
  %4 = icmp slt i64 %3, 0
  br i1 %4, label %5, label %9

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %7 = load i8, i8* %6, align 1
  %8 = or i8 %7, 1
  store i8 %8, i8* %6, align 1
  br label %17

9:                                                ; preds = %2
  %10 = icmp ugt i64 %3, 4294967295
  br i1 %10, label %11, label %15

11:                                               ; preds = %9
  %12 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %13 = load i8, i8* %12, align 1
  %14 = or i8 %13, 1
  store i8 %14, i8* %12, align 1
  br label %17

15:                                               ; preds = %9
  %16 = trunc i64 %3 to i32
  br label %17

17:                                               ; preds = %11, %15, %5
  %18 = phi i32 [ 0, %5 ], [ -1, %11 ], [ %16, %15 ]
  ret i32 %18
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @float64_to_uint32_round_to_zero(i64 noundef %0, %struct.float_status* nocapture noundef %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = and i64 %0, 9218868437227405312
  %8 = icmp ne i64 %7, 0
  %9 = and i64 %0, 4503599627370495
  %10 = icmp eq i64 %9, 0
  %11 = or i1 %8, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, 64
  store i8 %15, i8* %13, align 1
  %16 = and i64 %0, -9223372036854775808
  br label %17

17:                                               ; preds = %12, %6, %2
  %18 = phi i64 [ %16, %12 ], [ %0, %6 ], [ %0, %2 ]
  %19 = and i64 %18, 4503599627370495
  %20 = lshr i64 %18, 52
  %21 = trunc i64 %20 to i32
  %22 = and i32 %21, 2047
  %23 = icmp eq i32 %22, 0
  %24 = or i64 %19, 4503599627370496
  %25 = select i1 %23, i64 %19, i64 %24
  %26 = add nsw i32 %22, -1075
  %27 = icmp ugt i32 %22, 1074
  br i1 %27, label %28, label %44

28:                                               ; preds = %17
  %29 = icmp ugt i32 %22, 1085
  br i1 %29, label %30, label %41

30:                                               ; preds = %28
  %31 = icmp eq i64 %18, -4332462841530417152
  br i1 %31, label %72, label %32

32:                                               ; preds = %30
  %33 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %34 = load i8, i8* %33, align 1
  %35 = or i8 %34, 1
  store i8 %35, i8* %33, align 1
  %36 = icmp sgt i64 %18, -1
  br i1 %36, label %81, label %37

37:                                               ; preds = %32
  %38 = icmp eq i32 %22, 2047
  %39 = icmp ne i64 %25, 4503599627370496
  %40 = select i1 %38, i1 %39, i1 false
  br i1 %40, label %81, label %72

41:                                               ; preds = %28
  %42 = zext i32 %26 to i64
  %43 = shl i64 %25, %42
  br label %66

44:                                               ; preds = %17
  %45 = icmp ult i32 %22, 1022
  br i1 %45, label %46, label %54

46:                                               ; preds = %44
  %47 = zext i32 %22 to i64
  %48 = or i64 %25, %47
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %85, label %50

50:                                               ; preds = %46
  %51 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %52 = load i8, i8* %51, align 1
  %53 = or i8 %52, 32
  store i8 %53, i8* %51, align 1
  br label %85

54:                                               ; preds = %44
  %55 = sub nuw nsw i32 1075, %22
  %56 = zext i32 %55 to i64
  %57 = lshr i64 %25, %56
  %58 = and i32 %26, 63
  %59 = zext i32 %58 to i64
  %60 = shl i64 %25, %59
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %66, label %62

62:                                               ; preds = %54
  %63 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %64 = load i8, i8* %63, align 1
  %65 = or i8 %64, 32
  store i8 %65, i8* %63, align 1
  br label %66

66:                                               ; preds = %41, %54, %62
  %67 = phi i64 [ %43, %41 ], [ %57, %62 ], [ %57, %54 ]
  %68 = icmp sgt i64 %18, -1
  %69 = sub nsw i64 0, %67
  %70 = select i1 %68, i64 %67, i64 %69
  %71 = icmp slt i64 %70, 0
  br i1 %71, label %72, label %76

72:                                               ; preds = %37, %30, %66
  %73 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %74 = load i8, i8* %73, align 1
  %75 = or i8 %74, 1
  store i8 %75, i8* %73, align 1
  br label %88

76:                                               ; preds = %66
  %77 = icmp ugt i64 %70, 4294967295
  br i1 %77, label %78, label %85

78:                                               ; preds = %76
  %79 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %80 = load i8, i8* %79, align 1
  br label %81

81:                                               ; preds = %78, %37, %32
  %82 = phi i8 [ %80, %78 ], [ %35, %37 ], [ %35, %32 ]
  %83 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %84 = or i8 %82, 1
  store i8 %84, i8* %83, align 1
  br label %88

85:                                               ; preds = %50, %46, %76
  %86 = phi i64 [ %70, %76 ], [ 0, %46 ], [ 0, %50 ]
  %87 = trunc i64 %86 to i32
  br label %88

88:                                               ; preds = %81, %85, %72
  %89 = phi i32 [ 0, %72 ], [ -1, %81 ], [ %87, %85 ]
  ret i32 %89
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @float64_to_uint16_round_to_zero(i64 noundef %0, %struct.float_status* nocapture noundef %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = and i64 %0, 9218868437227405312
  %8 = icmp ne i64 %7, 0
  %9 = and i64 %0, 4503599627370495
  %10 = icmp eq i64 %9, 0
  %11 = or i1 %8, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %14 = load i8, i8* %13, align 1
  %15 = or i8 %14, 64
  store i8 %15, i8* %13, align 1
  %16 = and i64 %0, -9223372036854775808
  br label %17

17:                                               ; preds = %12, %6, %2
  %18 = phi i64 [ %16, %12 ], [ %0, %6 ], [ %0, %2 ]
  %19 = and i64 %18, 4503599627370495
  %20 = lshr i64 %18, 52
  %21 = trunc i64 %20 to i32
  %22 = and i32 %21, 2047
  %23 = icmp eq i32 %22, 0
  %24 = or i64 %19, 4503599627370496
  %25 = select i1 %23, i64 %19, i64 %24
  %26 = add nsw i32 %22, -1075
  %27 = icmp ugt i32 %22, 1074
  br i1 %27, label %28, label %44

28:                                               ; preds = %17
  %29 = icmp ugt i32 %22, 1085
  br i1 %29, label %30, label %41

30:                                               ; preds = %28
  %31 = icmp eq i64 %18, -4332462841530417152
  br i1 %31, label %72, label %32

32:                                               ; preds = %30
  %33 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %34 = load i8, i8* %33, align 1
  %35 = or i8 %34, 1
  store i8 %35, i8* %33, align 1
  %36 = icmp sgt i64 %18, -1
  br i1 %36, label %81, label %37

37:                                               ; preds = %32
  %38 = icmp eq i32 %22, 2047
  %39 = icmp ne i64 %25, 4503599627370496
  %40 = select i1 %38, i1 %39, i1 false
  br i1 %40, label %81, label %72

41:                                               ; preds = %28
  %42 = zext i32 %26 to i64
  %43 = shl i64 %25, %42
  br label %66

44:                                               ; preds = %17
  %45 = icmp ult i32 %22, 1022
  br i1 %45, label %46, label %54

46:                                               ; preds = %44
  %47 = zext i32 %22 to i64
  %48 = or i64 %25, %47
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %85, label %50

50:                                               ; preds = %46
  %51 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %52 = load i8, i8* %51, align 1
  %53 = or i8 %52, 32
  store i8 %53, i8* %51, align 1
  br label %85

54:                                               ; preds = %44
  %55 = sub nuw nsw i32 1075, %22
  %56 = zext i32 %55 to i64
  %57 = lshr i64 %25, %56
  %58 = and i32 %26, 63
  %59 = zext i32 %58 to i64
  %60 = shl i64 %25, %59
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %66, label %62

62:                                               ; preds = %54
  %63 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %64 = load i8, i8* %63, align 1
  %65 = or i8 %64, 32
  store i8 %65, i8* %63, align 1
  br label %66

66:                                               ; preds = %41, %54, %62
  %67 = phi i64 [ %43, %41 ], [ %57, %62 ], [ %57, %54 ]
  %68 = icmp sgt i64 %18, -1
  %69 = sub nsw i64 0, %67
  %70 = select i1 %68, i64 %67, i64 %69
  %71 = icmp slt i64 %70, 0
  br i1 %71, label %72, label %76

72:                                               ; preds = %37, %30, %66
  %73 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %74 = load i8, i8* %73, align 1
  %75 = or i8 %74, 1
  store i8 %75, i8* %73, align 1
  br label %88

76:                                               ; preds = %66
  %77 = icmp ugt i64 %70, 65535
  br i1 %77, label %78, label %85

78:                                               ; preds = %76
  %79 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %80 = load i8, i8* %79, align 1
  br label %81

81:                                               ; preds = %78, %37, %32
  %82 = phi i8 [ %80, %78 ], [ %35, %37 ], [ %35, %32 ]
  %83 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %84 = or i8 %82, 1
  store i8 %84, i8* %83, align 1
  br label %88

85:                                               ; preds = %50, %46, %76
  %86 = phi i64 [ %70, %76 ], [ 0, %46 ], [ 0, %50 ]
  %87 = trunc i64 %86 to i32
  br label %88

88:                                               ; preds = %81, %85, %72
  %89 = phi i32 [ 0, %72 ], [ 65535, %81 ], [ %87, %85 ]
  ret i32 %89
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define i64 @float64_to_uint64(i64 noundef %0, %struct.float_status* nocapture noundef %1) local_unnamed_addr #14 {
  %3 = add i64 %0, -4332462841530417152
  %4 = tail call i64 @float64_to_int64(i64 noundef %3, %struct.float_status* noundef %1)
  %5 = xor i64 %4, -9223372036854775808
  ret i64 %5
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i64 @float64_to_uint64_round_to_zero(i64 noundef %0, %struct.float_status* nocapture noundef %1) local_unnamed_addr #2 {
  %3 = add i64 %0, -4332462841530417152
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %18, label %7

7:                                                ; preds = %2
  %8 = and i64 %3, 9218868437227405312
  %9 = icmp ne i64 %8, 0
  %10 = and i64 %0, 4503599627370495
  %11 = icmp eq i64 %10, 0
  %12 = or i1 %11, %9
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i64 %3, -9223372036854775808
  br label %18

18:                                               ; preds = %13, %7, %2
  %19 = phi i64 [ %17, %13 ], [ %3, %7 ], [ %3, %2 ]
  %20 = and i64 %19, 4503599627370495
  %21 = lshr i64 %19, 52
  %22 = trunc i64 %21 to i32
  %23 = and i32 %22, 2047
  %24 = icmp eq i32 %23, 0
  %25 = or i64 %20, 4503599627370496
  %26 = select i1 %24, i64 %20, i64 %25
  %27 = add nsw i32 %23, -1075
  %28 = icmp ugt i32 %23, 1074
  br i1 %28, label %29, label %46

29:                                               ; preds = %18
  %30 = icmp ugt i32 %23, 1085
  br i1 %30, label %31, label %43

31:                                               ; preds = %29
  %32 = icmp eq i64 %19, -4332462841530417152
  br i1 %32, label %42, label %33

33:                                               ; preds = %31
  %34 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %35 = load i8, i8* %34, align 1
  %36 = or i8 %35, 1
  store i8 %36, i8* %34, align 1
  %37 = icmp sgt i64 %19, -1
  br i1 %37, label %74, label %38

38:                                               ; preds = %33
  %39 = icmp eq i32 %23, 2047
  %40 = icmp ne i64 %26, 4503599627370496
  %41 = select i1 %39, i1 %40, i1 false
  br i1 %41, label %74, label %42

42:                                               ; preds = %38, %31
  br label %74

43:                                               ; preds = %29
  %44 = zext i32 %27 to i64
  %45 = shl i64 %26, %44
  br label %68

46:                                               ; preds = %18
  %47 = icmp ult i32 %23, 1022
  br i1 %47, label %48, label %56

48:                                               ; preds = %46
  %49 = zext i32 %23 to i64
  %50 = or i64 %26, %49
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %74, label %52

52:                                               ; preds = %48
  %53 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %54 = load i8, i8* %53, align 1
  %55 = or i8 %54, 32
  store i8 %55, i8* %53, align 1
  br label %74

56:                                               ; preds = %46
  %57 = sub nuw nsw i32 1075, %23
  %58 = zext i32 %57 to i64
  %59 = lshr i64 %26, %58
  %60 = and i32 %27, 63
  %61 = zext i32 %60 to i64
  %62 = shl i64 %26, %61
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %68, label %64

64:                                               ; preds = %56
  %65 = getelementptr inbounds %struct.float_status, %struct.float_status* %1, i64 0, i32 2
  %66 = load i8, i8* %65, align 1
  %67 = or i8 %66, 32
  store i8 %67, i8* %65, align 1
  br label %68

68:                                               ; preds = %64, %56, %43
  %69 = phi i64 [ %45, %43 ], [ %59, %64 ], [ %59, %56 ]
  %70 = icmp sgt i64 %19, -1
  %71 = sub nsw i64 0, %69
  %72 = select i1 %70, i64 %69, i64 %71
  %73 = xor i64 %72, -9223372036854775808
  br label %74

74:                                               ; preds = %33, %38, %42, %48, %52, %68
  %75 = phi i64 [ 0, %42 ], [ %73, %68 ], [ -1, %38 ], [ -1, %33 ], [ -9223372036854775808, %52 ], [ -9223372036854775808, %48 ]
  ret i64 %75
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @float32_compare(i32 noundef %0, i32 noundef %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i32 %0, 2139095040
  %9 = icmp ne i32 %8, 0
  %10 = and i32 %0, 8388607
  %11 = icmp eq i32 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i32 %0, -2147483648
  br label %18

18:                                               ; preds = %13, %7
  %19 = phi i32 [ %0, %7 ], [ %17, %13 ]
  %20 = and i32 %1, 2139095040
  %21 = icmp ne i32 %20, 0
  %22 = and i32 %1, 8388607
  %23 = icmp eq i32 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i32 %1, -2147483648
  br label %30

30:                                               ; preds = %25, %18, %3
  %31 = phi i32 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i32 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = and i32 %31, 2139095040
  %34 = icmp ne i32 %33, 2139095040
  %35 = and i32 %31, 8388607
  %36 = icmp eq i32 %35, 0
  %37 = or i1 %34, %36
  br i1 %37, label %38, label %44

38:                                               ; preds = %30
  %39 = and i32 %32, 2139095040
  %40 = icmp ne i32 %39, 2139095040
  %41 = and i32 %32, 8388607
  %42 = icmp eq i32 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %48, label %44

44:                                               ; preds = %38, %30
  %45 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %46 = load i8, i8* %45, align 1
  %47 = or i8 %46, 1
  store i8 %47, i8* %45, align 1
  br label %69

48:                                               ; preds = %38
  %49 = lshr i32 %31, 31
  %50 = trunc i32 %49 to i8
  %51 = lshr i32 %32, 31
  %52 = trunc i32 %51 to i8
  %53 = icmp eq i8 %50, %52
  br i1 %53, label %61, label %54

54:                                               ; preds = %48
  %55 = or i32 %32, %31
  %56 = and i32 %55, 2147483647
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %69, label %58

58:                                               ; preds = %54
  %59 = icmp sgt i32 %31, -1
  %60 = select i1 %59, i32 1, i32 -1
  br label %69

61:                                               ; preds = %48
  %62 = icmp eq i32 %31, %32
  br i1 %62, label %69, label %63

63:                                               ; preds = %61
  %64 = icmp ult i32 %31, %32
  %65 = zext i1 %64 to i32
  %66 = xor i32 %49, %65
  %67 = mul nuw nsw i32 %66, -2
  %68 = or i32 %67, 1
  br label %69

69:                                               ; preds = %44, %54, %58, %61, %63
  %70 = phi i32 [ %60, %58 ], [ %68, %63 ], [ 2, %44 ], [ 0, %54 ], [ 0, %61 ]
  ret i32 %70
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @float32_compare_quiet(i32 noundef %0, i32 noundef %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i32 %0, 2139095040
  %9 = icmp ne i32 %8, 0
  %10 = and i32 %0, 8388607
  %11 = icmp eq i32 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i32 %0, -2147483648
  br label %18

18:                                               ; preds = %13, %7
  %19 = phi i32 [ %0, %7 ], [ %17, %13 ]
  %20 = and i32 %1, 2139095040
  %21 = icmp ne i32 %20, 0
  %22 = and i32 %1, 8388607
  %23 = icmp eq i32 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i32 %1, -2147483648
  br label %30

30:                                               ; preds = %25, %18, %3
  %31 = phi i32 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i32 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = and i32 %31, 2139095040
  %34 = icmp ne i32 %33, 2139095040
  %35 = and i32 %31, 8388607
  %36 = icmp eq i32 %35, 0
  %37 = or i1 %34, %36
  br i1 %37, label %38, label %44

38:                                               ; preds = %30
  %39 = and i32 %32, 2139095040
  %40 = icmp ne i32 %39, 2139095040
  %41 = and i32 %32, 8388607
  %42 = icmp eq i32 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %60, label %44

44:                                               ; preds = %38, %30
  %45 = and i32 %31, 2143289344
  %46 = icmp ne i32 %45, 2139095040
  %47 = and i32 %31, 4194303
  %48 = icmp eq i32 %47, 0
  %49 = or i1 %46, %48
  br i1 %49, label %50, label %56

50:                                               ; preds = %44
  %51 = and i32 %32, 2143289344
  %52 = icmp ne i32 %51, 2139095040
  %53 = and i32 %32, 4194303
  %54 = icmp eq i32 %53, 0
  %55 = or i1 %52, %54
  br i1 %55, label %81, label %56

56:                                               ; preds = %50, %44
  %57 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %58 = load i8, i8* %57, align 1
  %59 = or i8 %58, 1
  store i8 %59, i8* %57, align 1
  br label %81

60:                                               ; preds = %38
  %61 = lshr i32 %31, 31
  %62 = trunc i32 %61 to i8
  %63 = lshr i32 %32, 31
  %64 = trunc i32 %63 to i8
  %65 = icmp eq i8 %62, %64
  br i1 %65, label %73, label %66

66:                                               ; preds = %60
  %67 = or i32 %32, %31
  %68 = and i32 %67, 2147483647
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %81, label %70

70:                                               ; preds = %66
  %71 = icmp sgt i32 %31, -1
  %72 = select i1 %71, i32 1, i32 -1
  br label %81

73:                                               ; preds = %60
  %74 = icmp eq i32 %31, %32
  br i1 %74, label %81, label %75

75:                                               ; preds = %73
  %76 = icmp ult i32 %31, %32
  %77 = zext i1 %76 to i32
  %78 = xor i32 %61, %77
  %79 = mul nuw nsw i32 %78, -2
  %80 = or i32 %79, 1
  br label %81

81:                                               ; preds = %50, %56, %66, %70, %73, %75
  %82 = phi i32 [ %72, %70 ], [ %80, %75 ], [ 2, %56 ], [ 2, %50 ], [ 0, %66 ], [ 0, %73 ]
  ret i32 %82
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @float64_compare(i64 noundef %0, i64 noundef %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i64 %0, 9218868437227405312
  %9 = icmp ne i64 %8, 0
  %10 = and i64 %0, 4503599627370495
  %11 = icmp eq i64 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i64 %0, -9223372036854775808
  br label %18

18:                                               ; preds = %13, %7
  %19 = phi i64 [ %0, %7 ], [ %17, %13 ]
  %20 = and i64 %1, 9218868437227405312
  %21 = icmp ne i64 %20, 0
  %22 = and i64 %1, 4503599627370495
  %23 = icmp eq i64 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i64 %1, -9223372036854775808
  br label %30

30:                                               ; preds = %25, %18, %3
  %31 = phi i64 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i64 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = and i64 %31, 9218868437227405312
  %34 = icmp ne i64 %33, 9218868437227405312
  %35 = and i64 %31, 4503599627370495
  %36 = icmp eq i64 %35, 0
  %37 = or i1 %34, %36
  br i1 %37, label %38, label %44

38:                                               ; preds = %30
  %39 = and i64 %32, 9218868437227405312
  %40 = icmp ne i64 %39, 9218868437227405312
  %41 = and i64 %32, 4503599627370495
  %42 = icmp eq i64 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %48, label %44

44:                                               ; preds = %38, %30
  %45 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %46 = load i8, i8* %45, align 1
  %47 = or i8 %46, 1
  store i8 %47, i8* %45, align 1
  br label %70

48:                                               ; preds = %38
  %49 = lshr i64 %31, 63
  %50 = trunc i64 %49 to i8
  %51 = lshr i64 %32, 63
  %52 = trunc i64 %51 to i8
  %53 = trunc i64 %49 to i32
  %54 = icmp eq i8 %50, %52
  br i1 %54, label %62, label %55

55:                                               ; preds = %48
  %56 = or i64 %32, %31
  %57 = and i64 %56, 9223372036854775807
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %70, label %59

59:                                               ; preds = %55
  %60 = mul nuw nsw i32 %53, -2
  %61 = or i32 %60, 1
  br label %70

62:                                               ; preds = %48
  %63 = icmp eq i64 %31, %32
  br i1 %63, label %70, label %64

64:                                               ; preds = %62
  %65 = icmp ult i64 %31, %32
  %66 = zext i1 %65 to i32
  %67 = xor i32 %66, %53
  %68 = mul nuw nsw i32 %67, -2
  %69 = or i32 %68, 1
  br label %70

70:                                               ; preds = %44, %55, %59, %62, %64
  %71 = phi i32 [ %61, %59 ], [ %69, %64 ], [ 2, %44 ], [ 0, %55 ], [ 0, %62 ]
  ret i32 %71
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @float64_compare_quiet(i64 noundef %0, i64 noundef %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %3
  %8 = and i64 %0, 9218868437227405312
  %9 = icmp ne i64 %8, 0
  %10 = and i64 %0, 4503599627370495
  %11 = icmp eq i64 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i64 %0, -9223372036854775808
  br label %18

18:                                               ; preds = %13, %7
  %19 = phi i64 [ %0, %7 ], [ %17, %13 ]
  %20 = and i64 %1, 9218868437227405312
  %21 = icmp ne i64 %20, 0
  %22 = and i64 %1, 4503599627370495
  %23 = icmp eq i64 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = or i8 %27, 64
  store i8 %28, i8* %26, align 1
  %29 = and i64 %1, -9223372036854775808
  br label %30

30:                                               ; preds = %25, %18, %3
  %31 = phi i64 [ %19, %25 ], [ %19, %18 ], [ %0, %3 ]
  %32 = phi i64 [ %29, %25 ], [ %1, %18 ], [ %1, %3 ]
  %33 = and i64 %31, 9218868437227405312
  %34 = icmp ne i64 %33, 9218868437227405312
  %35 = and i64 %31, 4503599627370495
  %36 = icmp eq i64 %35, 0
  %37 = or i1 %34, %36
  br i1 %37, label %38, label %44

38:                                               ; preds = %30
  %39 = and i64 %32, 9218868437227405312
  %40 = icmp ne i64 %39, 9218868437227405312
  %41 = and i64 %32, 4503599627370495
  %42 = icmp eq i64 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %60, label %44

44:                                               ; preds = %38, %30
  %45 = and i64 %31, 9221120237041090560
  %46 = icmp ne i64 %45, 9218868437227405312
  %47 = and i64 %31, 2251799813685247
  %48 = icmp eq i64 %47, 0
  %49 = or i1 %46, %48
  br i1 %49, label %50, label %56

50:                                               ; preds = %44
  %51 = and i64 %32, 9221120237041090560
  %52 = icmp ne i64 %51, 9218868437227405312
  %53 = and i64 %32, 2251799813685247
  %54 = icmp eq i64 %53, 0
  %55 = or i1 %52, %54
  br i1 %55, label %82, label %56

56:                                               ; preds = %50, %44
  %57 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %58 = load i8, i8* %57, align 1
  %59 = or i8 %58, 1
  store i8 %59, i8* %57, align 1
  br label %82

60:                                               ; preds = %38
  %61 = lshr i64 %31, 63
  %62 = trunc i64 %61 to i8
  %63 = lshr i64 %32, 63
  %64 = trunc i64 %63 to i8
  %65 = trunc i64 %61 to i32
  %66 = icmp eq i8 %62, %64
  br i1 %66, label %74, label %67

67:                                               ; preds = %60
  %68 = or i64 %32, %31
  %69 = and i64 %68, 9223372036854775807
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %82, label %71

71:                                               ; preds = %67
  %72 = mul nuw nsw i32 %65, -2
  %73 = or i32 %72, 1
  br label %82

74:                                               ; preds = %60
  %75 = icmp eq i64 %31, %32
  br i1 %75, label %82, label %76

76:                                               ; preds = %74
  %77 = icmp ult i64 %31, %32
  %78 = zext i1 %77 to i32
  %79 = xor i32 %78, %65
  %80 = mul nuw nsw i32 %79, -2
  %81 = or i32 %80, 1
  br label %82

82:                                               ; preds = %50, %56, %67, %71, %74, %76
  %83 = phi i32 [ %73, %71 ], [ %81, %76 ], [ 2, %56 ], [ 2, %50 ], [ 0, %67 ], [ 0, %74 ]
  ret i32 %83
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @floatx80_compare(i64 %0, i16 %1, i64 %2, i16 %3, %struct.float_status* nocapture noundef %4) local_unnamed_addr #2 {
  %6 = and i16 %1, 32767
  %7 = icmp ne i16 %6, 32767
  %8 = and i64 %0, 9223372036854775807
  %9 = icmp eq i64 %8, 0
  %10 = select i1 %7, i1 true, i1 %9
  br i1 %10, label %11, label %17

11:                                               ; preds = %5
  %12 = and i16 %3, 32767
  %13 = icmp ne i16 %12, 32767
  %14 = and i64 %2, 9223372036854775807
  %15 = icmp eq i64 %14, 0
  %16 = select i1 %13, i1 true, i1 %15
  br i1 %16, label %21, label %17

17:                                               ; preds = %11, %5
  %18 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %19 = load i8, i8* %18, align 1
  %20 = or i8 %19, 1
  store i8 %20, i8* %18, align 1
  br label %52

21:                                               ; preds = %11
  %22 = lshr i16 %1, 15
  %23 = trunc i16 %22 to i8
  %24 = lshr i16 %3, 15
  %25 = trunc i16 %24 to i8
  %26 = zext i16 %22 to i32
  %27 = icmp eq i8 %23, %25
  br i1 %27, label %38, label %28

28:                                               ; preds = %21
  %29 = or i16 %3, %1
  %30 = and i16 %29, 32767
  %31 = icmp eq i16 %30, 0
  %32 = or i64 %2, %0
  %33 = icmp eq i64 %32, 0
  %34 = select i1 %31, i1 %33, i1 false
  br i1 %34, label %52, label %35

35:                                               ; preds = %28
  %36 = mul nuw nsw i32 %26, -2
  %37 = or i32 %36, 1
  br label %52

38:                                               ; preds = %21
  %39 = icmp eq i64 %0, %2
  %40 = icmp eq i16 %1, %3
  %41 = select i1 %39, i1 %40, i1 false
  br i1 %41, label %52, label %42

42:                                               ; preds = %38
  %43 = icmp ult i16 %1, %3
  %44 = icmp ult i64 %0, %2
  %45 = and i1 %44, %40
  %46 = or i1 %43, %45
  %47 = zext i1 %46 to i8
  %48 = xor i8 %47, %23
  %49 = zext i8 %48 to i32
  %50 = mul nuw nsw i32 %49, -2
  %51 = or i32 %50, 1
  br label %52

52:                                               ; preds = %17, %28, %35, %38, %42
  %53 = phi i32 [ %37, %35 ], [ %51, %42 ], [ 2, %17 ], [ 0, %28 ], [ 0, %38 ]
  ret i32 %53
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @floatx80_compare_quiet(i64 %0, i16 %1, i64 %2, i16 %3, %struct.float_status* nocapture noundef %4) local_unnamed_addr #2 {
  %6 = and i16 %1, 32767
  %7 = icmp ne i16 %6, 32767
  %8 = and i64 %0, 9223372036854775807
  %9 = icmp eq i64 %8, 0
  %10 = select i1 %7, i1 true, i1 %9
  br i1 %10, label %11, label %17

11:                                               ; preds = %5
  %12 = and i16 %3, 32767
  %13 = icmp ne i16 %12, 32767
  %14 = and i64 %2, 9223372036854775807
  %15 = icmp eq i64 %14, 0
  %16 = select i1 %13, i1 true, i1 %15
  br i1 %16, label %37, label %17

17:                                               ; preds = %11, %5
  %18 = and i64 %0, -4611686018427387905
  %19 = and i64 %0, 4611686018427387903
  %20 = icmp eq i64 %19, 0
  %21 = select i1 %7, i1 true, i1 %20
  %22 = icmp ne i64 %18, %0
  %23 = select i1 %21, i1 true, i1 %22
  br i1 %23, label %24, label %33

24:                                               ; preds = %17
  %25 = and i64 %2, -4611686018427387905
  %26 = and i16 %3, 32767
  %27 = icmp ne i16 %26, 32767
  %28 = and i64 %2, 4611686018427387903
  %29 = icmp eq i64 %28, 0
  %30 = select i1 %27, i1 true, i1 %29
  %31 = icmp ne i64 %25, %2
  %32 = select i1 %30, i1 true, i1 %31
  br i1 %32, label %68, label %33

33:                                               ; preds = %24, %17
  %34 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %35 = load i8, i8* %34, align 1
  %36 = or i8 %35, 1
  store i8 %36, i8* %34, align 1
  br label %68

37:                                               ; preds = %11
  %38 = lshr i16 %1, 15
  %39 = trunc i16 %38 to i8
  %40 = lshr i16 %3, 15
  %41 = trunc i16 %40 to i8
  %42 = zext i16 %38 to i32
  %43 = icmp eq i8 %39, %41
  br i1 %43, label %54, label %44

44:                                               ; preds = %37
  %45 = or i16 %3, %1
  %46 = and i16 %45, 32767
  %47 = icmp eq i16 %46, 0
  %48 = or i64 %2, %0
  %49 = icmp eq i64 %48, 0
  %50 = select i1 %47, i1 %49, i1 false
  br i1 %50, label %68, label %51

51:                                               ; preds = %44
  %52 = mul nuw nsw i32 %42, -2
  %53 = or i32 %52, 1
  br label %68

54:                                               ; preds = %37
  %55 = icmp eq i64 %0, %2
  %56 = icmp eq i16 %1, %3
  %57 = select i1 %55, i1 %56, i1 false
  br i1 %57, label %68, label %58

58:                                               ; preds = %54
  %59 = icmp ult i16 %1, %3
  %60 = icmp ult i64 %0, %2
  %61 = and i1 %60, %56
  %62 = or i1 %59, %61
  %63 = zext i1 %62 to i8
  %64 = xor i8 %63, %39
  %65 = zext i8 %64 to i32
  %66 = mul nuw nsw i32 %65, -2
  %67 = or i32 %66, 1
  br label %68

68:                                               ; preds = %24, %33, %44, %51, %54, %58
  %69 = phi i32 [ %53, %51 ], [ %67, %58 ], [ 2, %33 ], [ 2, %24 ], [ 0, %44 ], [ 0, %54 ]
  ret i32 %69
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @float128_compare(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* nocapture noundef %4) local_unnamed_addr #2 {
  %6 = and i64 %1, 9223090561878065152
  %7 = icmp eq i64 %6, 9223090561878065152
  br i1 %7, label %8, label %12

8:                                                ; preds = %5
  %9 = and i64 %1, 281474976710655
  %10 = or i64 %9, %0
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %12, label %19

12:                                               ; preds = %8, %5
  %13 = and i64 %3, 9223090561878065152
  %14 = icmp eq i64 %13, 9223090561878065152
  br i1 %14, label %15, label %23

15:                                               ; preds = %12
  %16 = and i64 %3, 281474976710655
  %17 = or i64 %16, %2
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %23, label %19

19:                                               ; preds = %15, %8
  %20 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %21 = load i8, i8* %20, align 1
  %22 = or i8 %21, 1
  store i8 %22, i8* %20, align 1
  br label %53

23:                                               ; preds = %15, %12
  %24 = lshr i64 %1, 63
  %25 = trunc i64 %24 to i8
  %26 = lshr i64 %3, 63
  %27 = trunc i64 %26 to i8
  %28 = icmp eq i8 %25, %27
  br i1 %28, label %39, label %29

29:                                               ; preds = %23
  %30 = or i64 %3, %1
  %31 = shl i64 %30, 1
  %32 = or i64 %2, %0
  %33 = or i64 %32, %31
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %53, label %35

35:                                               ; preds = %29
  %36 = ashr i64 %1, 62
  %37 = trunc i64 %36 to i32
  %38 = or i32 %37, 1
  br label %53

39:                                               ; preds = %23
  %40 = icmp eq i64 %0, %2
  %41 = icmp eq i64 %1, %3
  %42 = select i1 %40, i1 %41, i1 false
  br i1 %42, label %53, label %43

43:                                               ; preds = %39
  %44 = icmp ult i64 %1, %3
  %45 = icmp ult i64 %0, %2
  %46 = and i1 %45, %41
  %47 = or i1 %44, %46
  %48 = zext i1 %47 to i8
  %49 = xor i8 %48, %25
  %50 = zext i8 %49 to i32
  %51 = mul nuw nsw i32 %50, -2
  %52 = or i32 %51, 1
  br label %53

53:                                               ; preds = %19, %29, %35, %39, %43
  %54 = phi i32 [ %38, %35 ], [ %52, %43 ], [ 2, %19 ], [ 0, %29 ], [ 0, %39 ]
  ret i32 %54
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @float128_compare_quiet(i64 %0, i64 %1, i64 %2, i64 %3, %struct.float_status* nocapture noundef %4) local_unnamed_addr #2 {
  %6 = and i64 %1, 9223090561878065152
  %7 = icmp eq i64 %6, 9223090561878065152
  br i1 %7, label %8, label %12

8:                                                ; preds = %5
  %9 = and i64 %1, 281474976710655
  %10 = or i64 %9, %0
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %12, label %19

12:                                               ; preds = %8, %5
  %13 = and i64 %3, 9223090561878065152
  %14 = icmp eq i64 %13, 9223090561878065152
  br i1 %14, label %15, label %39

15:                                               ; preds = %12
  %16 = and i64 %3, 281474976710655
  %17 = or i64 %16, %2
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %39, label %19

19:                                               ; preds = %15, %8
  %20 = and i64 %1, 9223231299366420480
  %21 = icmp eq i64 %20, 9223090561878065152
  br i1 %21, label %22, label %27

22:                                               ; preds = %19
  %23 = icmp eq i64 %0, 0
  %24 = and i64 %1, 140737488355327
  %25 = icmp eq i64 %24, 0
  %26 = select i1 %23, i1 %25, i1 false
  br i1 %26, label %27, label %35

27:                                               ; preds = %22, %19
  %28 = and i64 %3, 9223231299366420480
  %29 = icmp eq i64 %28, 9223090561878065152
  br i1 %29, label %30, label %69

30:                                               ; preds = %27
  %31 = icmp eq i64 %2, 0
  %32 = and i64 %3, 140737488355327
  %33 = icmp eq i64 %32, 0
  %34 = select i1 %31, i1 %33, i1 false
  br i1 %34, label %69, label %35

35:                                               ; preds = %30, %22
  %36 = getelementptr inbounds %struct.float_status, %struct.float_status* %4, i64 0, i32 2
  %37 = load i8, i8* %36, align 1
  %38 = or i8 %37, 1
  store i8 %38, i8* %36, align 1
  br label %69

39:                                               ; preds = %15, %12
  %40 = lshr i64 %1, 63
  %41 = trunc i64 %40 to i8
  %42 = lshr i64 %3, 63
  %43 = trunc i64 %42 to i8
  %44 = icmp eq i8 %41, %43
  br i1 %44, label %55, label %45

45:                                               ; preds = %39
  %46 = or i64 %3, %1
  %47 = shl i64 %46, 1
  %48 = or i64 %2, %0
  %49 = or i64 %48, %47
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %69, label %51

51:                                               ; preds = %45
  %52 = ashr i64 %1, 62
  %53 = trunc i64 %52 to i32
  %54 = or i32 %53, 1
  br label %69

55:                                               ; preds = %39
  %56 = icmp eq i64 %0, %2
  %57 = icmp eq i64 %1, %3
  %58 = select i1 %56, i1 %57, i1 false
  br i1 %58, label %69, label %59

59:                                               ; preds = %55
  %60 = icmp ult i64 %1, %3
  %61 = icmp ult i64 %0, %2
  %62 = and i1 %61, %57
  %63 = or i1 %60, %62
  %64 = zext i1 %63 to i8
  %65 = xor i8 %64, %41
  %66 = zext i8 %65 to i32
  %67 = mul nuw nsw i32 %66, -2
  %68 = or i32 %67, 1
  br label %69

69:                                               ; preds = %27, %30, %35, %45, %51, %55, %59
  %70 = phi i32 [ %54, %51 ], [ %68, %59 ], [ 2, %35 ], [ 2, %30 ], [ 0, %45 ], [ 0, %55 ], [ 2, %27 ]
  ret i32 %70
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @float32_min(i32 noundef %0, i32 noundef %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #2 {
  %4 = tail call fastcc i32 @float32_minmax(i32 noundef %0, i32 noundef %1, i32 noundef 1, %struct.float_status* noundef %2)
  ret i32 %4
}

; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind uwtable willreturn
define internal fastcc i32 @float32_minmax(i32 noundef %0, i32 noundef %1, i32 noundef %2, %struct.float_status* nocapture noundef %3) unnamed_addr #27 {
  %5 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 5
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %31, label %8

8:                                                ; preds = %4
  %9 = and i32 %0, 2139095040
  %10 = icmp ne i32 %9, 0
  %11 = and i32 %0, 8388607
  %12 = icmp eq i32 %11, 0
  %13 = or i1 %10, %12
  br i1 %13, label %19, label %14

14:                                               ; preds = %8
  %15 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %16 = load i8, i8* %15, align 1
  %17 = or i8 %16, 64
  store i8 %17, i8* %15, align 1
  %18 = and i32 %0, -2147483648
  br label %19

19:                                               ; preds = %8, %14
  %20 = phi i32 [ %0, %8 ], [ %18, %14 ]
  %21 = and i32 %1, 2139095040
  %22 = icmp ne i32 %21, 0
  %23 = and i32 %1, 8388607
  %24 = icmp eq i32 %23, 0
  %25 = or i1 %22, %24
  br i1 %25, label %31, label %26

26:                                               ; preds = %19
  %27 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %28 = load i8, i8* %27, align 1
  %29 = or i8 %28, 64
  store i8 %29, i8* %27, align 1
  %30 = and i32 %1, -2147483648
  br label %31

31:                                               ; preds = %4, %19, %26
  %32 = phi i32 [ %20, %26 ], [ %20, %19 ], [ %0, %4 ]
  %33 = phi i32 [ %30, %26 ], [ %1, %19 ], [ %1, %4 ]
  %34 = and i32 %32, 2147483647
  %35 = icmp ult i32 %34, 2139095041
  %36 = and i32 %33, 2147483647
  %37 = icmp ult i32 %36, 2139095041
  %38 = and i1 %35, %37
  br i1 %38, label %93, label %39

39:                                               ; preds = %31
  %40 = shl i32 %32, 1
  %41 = icmp ult i32 %40, -8388608
  %42 = and i32 %32, 2143289344
  %43 = icmp eq i32 %42, 2139095040
  %44 = and i32 %32, 4194303
  %45 = icmp ne i32 %44, 0
  %46 = and i1 %43, %45
  %47 = shl i32 %33, 1
  %48 = icmp ugt i32 %47, -8388609
  %49 = and i32 %33, 2143289344
  %50 = icmp eq i32 %49, 2139095040
  %51 = and i32 %33, 4194303
  %52 = icmp ne i32 %51, 0
  %53 = and i1 %50, %52
  %54 = zext i1 %53 to i8
  %55 = or i1 %46, %53
  br i1 %55, label %56, label %60

56:                                               ; preds = %39
  %57 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %58 = load i8, i8* %57, align 1
  %59 = or i8 %58, 1
  store i8 %59, i8* %57, align 1
  br label %60

60:                                               ; preds = %56, %39
  %61 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 6
  %62 = load i8, i8* %61, align 1
  %63 = icmp eq i8 %62, 0
  br i1 %63, label %64, label %114

64:                                               ; preds = %60
  %65 = icmp ult i32 %40, %47
  br i1 %65, label %71, label %66

66:                                               ; preds = %64
  %67 = icmp ult i32 %47, %40
  br i1 %67, label %71, label %68

68:                                               ; preds = %66
  %69 = icmp ult i32 %32, %33
  %70 = zext i1 %69 to i8
  br label %71

71:                                               ; preds = %68, %66, %64
  %72 = phi i8 [ %70, %68 ], [ 0, %64 ], [ 1, %66 ]
  br i1 %46, label %78, label %73

73:                                               ; preds = %71
  br i1 %41, label %81, label %74

74:                                               ; preds = %73
  %75 = or i8 %72, %54
  %76 = icmp eq i8 %75, 0
  %77 = and i1 %48, %76
  br i1 %77, label %81, label %87

78:                                               ; preds = %71
  %79 = icmp eq i8 %72, 0
  %80 = select i1 %53, i1 %79, i1 %48
  br i1 %80, label %81, label %87

81:                                               ; preds = %78, %74, %73
  %82 = icmp ne i32 %49, 2139095040
  %83 = icmp eq i32 %51, 0
  %84 = or i1 %82, %83
  %85 = or i32 %33, 4194304
  %86 = select i1 %84, i32 %33, i32 %85
  br label %114

87:                                               ; preds = %78, %74
  %88 = icmp ne i32 %42, 2139095040
  %89 = icmp eq i32 %44, 0
  %90 = or i1 %88, %89
  %91 = or i32 %32, 4194304
  %92 = select i1 %90, i32 %32, i32 %91
  br label %114

93:                                               ; preds = %31
  %94 = lshr i32 %32, 31
  %95 = trunc i32 %94 to i8
  %96 = lshr i32 %33, 31
  %97 = trunc i32 %96 to i8
  %98 = icmp eq i8 %95, %97
  %99 = icmp eq i32 %2, 0
  br i1 %98, label %106, label %100

100:                                              ; preds = %93
  %101 = icmp sgt i32 %32, -1
  br i1 %99, label %104, label %102

102:                                              ; preds = %100
  %103 = select i1 %101, i32 %33, i32 %32
  br label %114

104:                                              ; preds = %100
  %105 = select i1 %101, i32 %32, i32 %33
  br label %114

106:                                              ; preds = %93
  %107 = icmp ult i32 %32, %33
  %108 = zext i1 %107 to i8
  %109 = icmp eq i8 %95, %108
  br i1 %99, label %112, label %110

110:                                              ; preds = %106
  %111 = select i1 %109, i32 %33, i32 %32
  br label %114

112:                                              ; preds = %106
  %113 = select i1 %109, i32 %32, i32 %33
  br label %114

114:                                              ; preds = %87, %81, %60, %112, %110, %104, %102
  %115 = phi i32 [ %103, %102 ], [ %105, %104 ], [ %111, %110 ], [ %113, %112 ], [ %86, %81 ], [ %92, %87 ], [ -4194304, %60 ]
  ret i32 %115
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i32 @float32_max(i32 noundef %0, i32 noundef %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #2 {
  %4 = tail call fastcc i32 @float32_minmax(i32 noundef %0, i32 noundef %1, i32 noundef 0, %struct.float_status* noundef %2)
  ret i32 %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i64 @float64_min(i64 noundef %0, i64 noundef %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #2 {
  %4 = tail call fastcc i64 @float64_minmax(i64 noundef %0, i64 noundef %1, i32 noundef 1, %struct.float_status* noundef %2)
  ret i64 %4
}

; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind uwtable willreturn
define internal fastcc i64 @float64_minmax(i64 noundef %0, i64 noundef %1, i32 noundef %2, %struct.float_status* nocapture noundef %3) unnamed_addr #27 {
  %5 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 5
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %31, label %8

8:                                                ; preds = %4
  %9 = and i64 %0, 9218868437227405312
  %10 = icmp ne i64 %9, 0
  %11 = and i64 %0, 4503599627370495
  %12 = icmp eq i64 %11, 0
  %13 = or i1 %10, %12
  br i1 %13, label %19, label %14

14:                                               ; preds = %8
  %15 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %16 = load i8, i8* %15, align 1
  %17 = or i8 %16, 64
  store i8 %17, i8* %15, align 1
  %18 = and i64 %0, -9223372036854775808
  br label %19

19:                                               ; preds = %8, %14
  %20 = phi i64 [ %0, %8 ], [ %18, %14 ]
  %21 = and i64 %1, 9218868437227405312
  %22 = icmp ne i64 %21, 0
  %23 = and i64 %1, 4503599627370495
  %24 = icmp eq i64 %23, 0
  %25 = or i1 %22, %24
  br i1 %25, label %31, label %26

26:                                               ; preds = %19
  %27 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %28 = load i8, i8* %27, align 1
  %29 = or i8 %28, 64
  store i8 %29, i8* %27, align 1
  %30 = and i64 %1, -9223372036854775808
  br label %31

31:                                               ; preds = %4, %19, %26
  %32 = phi i64 [ %20, %26 ], [ %20, %19 ], [ %0, %4 ]
  %33 = phi i64 [ %30, %26 ], [ %1, %19 ], [ %1, %4 ]
  %34 = and i64 %32, 9223372036854775807
  %35 = icmp ult i64 %34, 9218868437227405313
  %36 = and i64 %33, 9223372036854775807
  %37 = icmp ult i64 %36, 9218868437227405313
  %38 = and i1 %35, %37
  br i1 %38, label %93, label %39

39:                                               ; preds = %31
  %40 = shl i64 %32, 1
  %41 = icmp ult i64 %40, -4503599627370496
  %42 = and i64 %32, 9221120237041090560
  %43 = icmp eq i64 %42, 9218868437227405312
  %44 = and i64 %32, 2251799813685247
  %45 = icmp ne i64 %44, 0
  %46 = and i1 %43, %45
  %47 = shl i64 %33, 1
  %48 = icmp ugt i64 %47, -4503599627370497
  %49 = and i64 %33, 9221120237041090560
  %50 = icmp eq i64 %49, 9218868437227405312
  %51 = and i64 %33, 2251799813685247
  %52 = icmp ne i64 %51, 0
  %53 = and i1 %50, %52
  %54 = zext i1 %53 to i8
  %55 = or i1 %46, %53
  br i1 %55, label %56, label %60

56:                                               ; preds = %39
  %57 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 2
  %58 = load i8, i8* %57, align 1
  %59 = or i8 %58, 1
  store i8 %59, i8* %57, align 1
  br label %60

60:                                               ; preds = %56, %39
  %61 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 6
  %62 = load i8, i8* %61, align 1
  %63 = icmp eq i8 %62, 0
  br i1 %63, label %64, label %114

64:                                               ; preds = %60
  %65 = icmp ult i64 %40, %47
  br i1 %65, label %71, label %66

66:                                               ; preds = %64
  %67 = icmp ult i64 %47, %40
  br i1 %67, label %71, label %68

68:                                               ; preds = %66
  %69 = icmp ult i64 %32, %33
  %70 = zext i1 %69 to i8
  br label %71

71:                                               ; preds = %68, %66, %64
  %72 = phi i8 [ %70, %68 ], [ 0, %64 ], [ 1, %66 ]
  br i1 %46, label %78, label %73

73:                                               ; preds = %71
  br i1 %41, label %81, label %74

74:                                               ; preds = %73
  %75 = or i8 %72, %54
  %76 = icmp eq i8 %75, 0
  %77 = and i1 %48, %76
  br i1 %77, label %81, label %87

78:                                               ; preds = %71
  %79 = icmp eq i8 %72, 0
  %80 = select i1 %53, i1 %79, i1 %48
  br i1 %80, label %81, label %87

81:                                               ; preds = %78, %74, %73
  %82 = icmp ne i64 %49, 9218868437227405312
  %83 = icmp eq i64 %51, 0
  %84 = or i1 %82, %83
  %85 = or i64 %33, 2251799813685248
  %86 = select i1 %84, i64 %33, i64 %85
  br label %114

87:                                               ; preds = %78, %74
  %88 = icmp ne i64 %42, 9218868437227405312
  %89 = icmp eq i64 %44, 0
  %90 = or i1 %88, %89
  %91 = or i64 %32, 2251799813685248
  %92 = select i1 %90, i64 %32, i64 %91
  br label %114

93:                                               ; preds = %31
  %94 = lshr i64 %32, 63
  %95 = trunc i64 %94 to i8
  %96 = lshr i64 %33, 63
  %97 = trunc i64 %96 to i8
  %98 = icmp eq i8 %95, %97
  %99 = icmp eq i32 %2, 0
  br i1 %98, label %106, label %100

100:                                              ; preds = %93
  %101 = icmp sgt i64 %32, -1
  br i1 %99, label %104, label %102

102:                                              ; preds = %100
  %103 = select i1 %101, i64 %33, i64 %32
  br label %114

104:                                              ; preds = %100
  %105 = select i1 %101, i64 %32, i64 %33
  br label %114

106:                                              ; preds = %93
  %107 = icmp ult i64 %32, %33
  %108 = zext i1 %107 to i8
  %109 = icmp eq i8 %95, %108
  br i1 %99, label %112, label %110

110:                                              ; preds = %106
  %111 = select i1 %109, i64 %33, i64 %32
  br label %114

112:                                              ; preds = %106
  %113 = select i1 %109, i64 %32, i64 %33
  br label %114

114:                                              ; preds = %87, %81, %60, %112, %110, %104, %102
  %115 = phi i64 [ %103, %102 ], [ %105, %104 ], [ %111, %110 ], [ %113, %112 ], [ %86, %81 ], [ %92, %87 ], [ -2251799813685248, %60 ]
  ret i64 %115
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define i64 @float64_max(i64 noundef %0, i64 noundef %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #2 {
  %4 = tail call fastcc i64 @float64_minmax(i64 noundef %0, i64 noundef %1, i32 noundef 0, %struct.float_status* noundef %2)
  ret i64 %4
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define i32 @float32_scalbn(i32 noundef %0, i32 noundef %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #14 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %18, label %7

7:                                                ; preds = %3
  %8 = and i32 %0, 2139095040
  %9 = icmp ne i32 %8, 0
  %10 = and i32 %0, 8388607
  %11 = icmp eq i32 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i32 %0, -2147483648
  br label %18

18:                                               ; preds = %3, %7, %13
  %19 = phi i32 [ %17, %13 ], [ %0, %7 ], [ %0, %3 ]
  %20 = and i32 %19, 8388607
  %21 = lshr i32 %19, 23
  %22 = and i32 %21, 255
  %23 = lshr i32 %19, 31
  %24 = trunc i32 %23 to i8
  %25 = trunc i32 %21 to i8
  switch i8 %25, label %51 [
    i8 -1, label %26
    i8 0, label %53
  ]

26:                                               ; preds = %18
  %27 = icmp eq i32 %20, 0
  br i1 %27, label %71, label %28

28:                                               ; preds = %26
  %29 = and i32 %19, 2143289344
  %30 = icmp eq i32 %29, 2139095040
  %31 = and i32 %19, 4194303
  %32 = icmp ne i32 %31, 0
  %33 = and i1 %30, %32
  br i1 %33, label %34, label %41

34:                                               ; preds = %28
  %35 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %36 = load i8, i8* %35, align 1
  %37 = or i8 %36, 1
  store i8 %37, i8* %35, align 1
  %38 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %39 = load i8, i8* %38, align 1
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %45, label %71

41:                                               ; preds = %28
  %42 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %43 = load i8, i8* %42, align 1
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %45, label %71

45:                                               ; preds = %41, %34
  %46 = icmp ne i32 %29, 2139095040
  %47 = icmp eq i32 %31, 0
  %48 = or i1 %46, %47
  %49 = or i32 %19, 4194304
  %50 = select i1 %48, i32 %19, i32 %49
  br label %71

51:                                               ; preds = %18
  %52 = or i32 %20, 8388608
  br label %55

53:                                               ; preds = %18
  %54 = icmp eq i32 %20, 0
  br i1 %54, label %71, label %55

55:                                               ; preds = %53, %51
  %56 = phi i32 [ %52, %51 ], [ %20, %53 ]
  %57 = icmp sgt i32 %1, 512
  %58 = icmp sgt i32 %1, -512
  %59 = select i1 %58, i32 %1, i32 -512
  %60 = add i32 %59, 65535
  %61 = select i1 %57, i32 511, i32 %60
  %62 = add nuw i32 %22, %61
  %63 = shl nsw i32 %56, 7
  %64 = shl i32 %62, 16
  %65 = ashr exact i32 %64, 16
  %ctlz.sh = lshr i32 %63, 1
  %ctlz.step = or i32 %63, %ctlz.sh
  %ctlz.sh1 = lshr i32 %ctlz.step, 2
  %ctlz.step2 = or i32 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i32 %ctlz.step2, 4
  %ctlz.step4 = or i32 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i32 %ctlz.step4, 8
  %ctlz.step6 = or i32 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i32 %ctlz.step6, 16
  %ctlz.step8 = or i32 %ctlz.step6, %ctlz.sh7
  %66 = xor i32 %ctlz.step8, -1
  %cppop.and1 = and i32 %66, 1431655765
  %ctpop.sh = lshr i32 %66, 1
  %cppop.and2 = and i32 %ctpop.sh, 1431655765
  %ctpop.step = add i32 %cppop.and1, %cppop.and2
  %cppop.and19 = and i32 %ctpop.step, 858993459
  %ctpop.sh10 = lshr i32 %ctpop.step, 2
  %cppop.and211 = and i32 %ctpop.sh10, 858993459
  %ctpop.step12 = add i32 %cppop.and19, %cppop.and211
  %cppop.and113 = and i32 %ctpop.step12, 252645135
  %ctpop.sh14 = lshr i32 %ctpop.step12, 4
  %cppop.and215 = and i32 %ctpop.sh14, 252645135
  %ctpop.step16 = add i32 %cppop.and113, %cppop.and215
  %cppop.and117 = and i32 %ctpop.step16, 16711935
  %ctpop.sh18 = lshr i32 %ctpop.step16, 8
  %cppop.and219 = and i32 %ctpop.sh18, 16711935
  %ctpop.step20 = add i32 %cppop.and117, %cppop.and219
  %cppop.and121 = and i32 %ctpop.step20, 65535
  %ctpop.sh22 = lshr i32 %ctpop.step20, 16
  %cppop.and223 = and i32 %ctpop.sh22, 65535
  %ctpop.step24 = add i32 %cppop.and121, %cppop.and223
  %ctpop.part = add i32 %ctpop.step24, 0
  %67 = add nsw i32 %ctpop.part, -1
  %68 = sub nsw i32 %65, %67
  %69 = shl i32 %63, %67
  %70 = tail call fastcc i32 @roundAndPackFloat32(i8 noundef zeroext %24, i32 noundef %68, i32 noundef %69, %struct.float_status* noundef nonnull %2) #30
  br label %71

71:                                               ; preds = %45, %34, %41, %53, %26, %55
  %72 = phi i32 [ %70, %55 ], [ %19, %26 ], [ %19, %53 ], [ %50, %45 ], [ -4194304, %34 ], [ -4194304, %41 ]
  ret i32 %72
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define i64 @float64_scalbn(i64 noundef %0, i32 noundef %1, %struct.float_status* nocapture noundef %2) local_unnamed_addr #14 {
  %4 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %18, label %7

7:                                                ; preds = %3
  %8 = and i64 %0, 9218868437227405312
  %9 = icmp ne i64 %8, 0
  %10 = and i64 %0, 4503599627370495
  %11 = icmp eq i64 %10, 0
  %12 = or i1 %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = or i8 %15, 64
  store i8 %16, i8* %14, align 1
  %17 = and i64 %0, -9223372036854775808
  br label %18

18:                                               ; preds = %3, %7, %13
  %19 = phi i64 [ %17, %13 ], [ %0, %7 ], [ %0, %3 ]
  %20 = and i64 %19, 4503599627370495
  %21 = lshr i64 %19, 52
  %22 = trunc i64 %21 to i32
  %23 = and i32 %22, 2047
  %24 = lshr i64 %19, 63
  %25 = trunc i64 %24 to i8
  switch i32 %23, label %51 [
    i32 2047, label %26
    i32 0, label %53
  ]

26:                                               ; preds = %18
  %27 = icmp eq i64 %20, 0
  br i1 %27, label %73, label %28

28:                                               ; preds = %26
  %29 = and i64 %19, 9221120237041090560
  %30 = icmp eq i64 %29, 9218868437227405312
  %31 = and i64 %19, 2251799813685247
  %32 = icmp ne i64 %31, 0
  %33 = and i1 %30, %32
  br i1 %33, label %34, label %41

34:                                               ; preds = %28
  %35 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 2
  %36 = load i8, i8* %35, align 1
  %37 = or i8 %36, 1
  store i8 %37, i8* %35, align 1
  %38 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %39 = load i8, i8* %38, align 1
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %45, label %73

41:                                               ; preds = %28
  %42 = getelementptr inbounds %struct.float_status, %struct.float_status* %2, i64 0, i32 6
  %43 = load i8, i8* %42, align 1
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %45, label %73

45:                                               ; preds = %41, %34
  %46 = icmp ne i64 %29, 9218868437227405312
  %47 = icmp eq i64 %31, 0
  %48 = or i1 %46, %47
  %49 = or i64 %19, 2251799813685248
  %50 = select i1 %48, i64 %19, i64 %49
  br label %73

51:                                               ; preds = %18
  %52 = or i64 %20, 4503599627370496
  br label %55

53:                                               ; preds = %18
  %54 = icmp eq i64 %20, 0
  br i1 %54, label %73, label %55

55:                                               ; preds = %53, %51
  %56 = phi i64 [ %52, %51 ], [ %20, %53 ]
  %57 = icmp sgt i32 %1, 4096
  %58 = icmp sgt i32 %1, -4096
  %59 = select i1 %58, i32 %1, i32 -4096
  %60 = add i32 %59, 65535
  %61 = select i1 %57, i32 4095, i32 %60
  %62 = add nuw i32 %23, %61
  %63 = shl nsw i64 %56, 10
  %64 = shl i32 %62, 16
  %65 = ashr exact i32 %64, 16
  %ctlz.sh = lshr i64 %63, 1
  %ctlz.step = or i64 %63, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %66 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %66, 6148914691236517205
  %ctpop.sh = lshr i64 %66, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %67 = trunc i64 %ctpop.part to i32
  %68 = add nsw i32 %67, -1
  %69 = sub nsw i32 %65, %68
  %70 = zext i32 %68 to i64
  %71 = shl i64 %63, %70
  %72 = tail call fastcc i64 @roundAndPackFloat64(i8 noundef zeroext %25, i32 noundef %69, i64 noundef %71, %struct.float_status* noundef nonnull %2) #30
  br label %73

73:                                               ; preds = %45, %34, %41, %53, %26, %55
  %74 = phi i64 [ %72, %55 ], [ %19, %26 ], [ %19, %53 ], [ %50, %45 ], [ -2251799813685248, %34 ], [ -2251799813685248, %41 ]
  ret i64 %74
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define { i64, i16 } @floatx80_scalbn(i64 %0, i16 %1, i32 noundef %2, %struct.float_status* nocapture noundef %3) local_unnamed_addr #14 {
  %5 = and i16 %1, 32767
  %6 = zext i16 %5 to i32
  %7 = lshr i16 %1, 15
  %8 = trunc i16 %7 to i8
  %9 = icmp eq i16 %5, 32767
  br i1 %9, label %10, label %17

10:                                               ; preds = %4
  %11 = and i64 %0, 9223372036854775807
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %40, label %13

13:                                               ; preds = %10
  %14 = tail call fastcc { i64, i16 } @propagateFloatx80NaN(i64 %0, i16 %1, i64 %0, i16 %1, %struct.float_status* noundef %3)
  %15 = extractvalue { i64, i16 } %14, 0
  %16 = extractvalue { i64, i16 } %14, 1
  br label %40

17:                                               ; preds = %4
  %18 = icmp eq i16 %5, 0
  %19 = icmp eq i64 %0, 0
  %20 = select i1 %18, i1 %19, i1 false
  br i1 %20, label %40, label %21

21:                                               ; preds = %17
  %22 = icmp sgt i32 %2, -65536
  %23 = select i1 %22, i32 %2, i32 -65536
  %24 = icmp slt i32 %23, 65536
  %25 = select i1 %24, i32 %23, i32 65536
  %26 = add nsw i32 %25, %6
  %27 = getelementptr inbounds %struct.float_status, %struct.float_status* %3, i64 0, i32 3
  %28 = load i8, i8* %27, align 1
  %ctlz.sh = lshr i64 %0, 1
  %ctlz.step = or i64 %0, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %29 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %29, 6148914691236517205
  %ctpop.sh = lshr i64 %29, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %30 = trunc i64 %ctpop.part to i32
  %31 = icmp eq i32 %30, 0
  %32 = select i1 %31, i64 0, i64 %ctpop.part
  %33 = shl i64 %0, %32
  %34 = add nsw i32 %26, -64
  %35 = select i1 %19, i32 %34, i32 %26
  %36 = sub nsw i32 %35, %30
  %37 = tail call fastcc { i64, i16 } @roundAndPackFloatx80(i8 noundef signext %28, i8 noundef zeroext %8, i32 noundef %36, i64 noundef %33, i64 noundef 0, %struct.float_status* noundef nonnull %3) #30
  %38 = extractvalue { i64, i16 } %37, 0
  %39 = extractvalue { i64, i16 } %37, 1
  br label %40

40:                                               ; preds = %17, %10, %21, %13
  %41 = phi i64 [ %15, %13 ], [ %38, %21 ], [ %0, %10 ], [ 0, %17 ]
  %42 = phi i16 [ %16, %13 ], [ %39, %21 ], [ %1, %10 ], [ %1, %17 ]
  %43 = insertvalue { i64, i16 } poison, i64 %41, 0
  %44 = insertvalue { i64, i16 } %43, i16 %42, 1
  ret { i64, i16 } %44
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn
define { i64, i64 } @float128_scalbn(i64 %0, i64 %1, i32 noundef %2, %struct.float_status* nocapture noundef %3) local_unnamed_addr #14 {
  %5 = and i64 %1, 281474976710655
  %6 = lshr i64 %1, 48
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 32767
  %9 = lshr i64 %1, 63
  %10 = trunc i64 %9 to i8
  switch i32 %8, label %18 [
    i32 32767, label %11
    i32 0, label %20
  ]

11:                                               ; preds = %4
  %12 = or i64 %5, %0
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %71, label %14

14:                                               ; preds = %11
  %15 = tail call fastcc { i64, i64 } @propagateFloat128NaN(i64 %0, i64 %1, i64 %0, i64 %1, %struct.float_status* noundef %3)
  %16 = extractvalue { i64, i64 } %15, 0
  %17 = extractvalue { i64, i64 } %15, 1
  br label %71

18:                                               ; preds = %4
  %19 = or i64 %5, 281474976710656
  br label %24

20:                                               ; preds = %4
  %21 = icmp eq i64 %5, 0
  %22 = icmp eq i64 %0, 0
  %23 = select i1 %21, i1 %22, i1 false
  br i1 %23, label %71, label %24

24:                                               ; preds = %20, %18
  %25 = phi i64 [ %19, %18 ], [ %5, %20 ]
  %26 = icmp sgt i32 %2, 65536
  %27 = icmp sgt i32 %2, -65536
  %28 = select i1 %27, i32 %2, i32 -65536
  %29 = add nsw i32 %28, -1
  %30 = select i1 %26, i32 65535, i32 %29
  %31 = add nsw i32 %30, %8
  %32 = icmp eq i64 %25, 0
  %33 = select i1 %32, i64 %0, i64 %25
  %34 = select i1 %32, i64 0, i64 %0
  %ctlz.sh = lshr i64 %33, 1
  %ctlz.step = or i64 %33, %ctlz.sh
  %ctlz.sh1 = lshr i64 %ctlz.step, 2
  %ctlz.step2 = or i64 %ctlz.step, %ctlz.sh1
  %ctlz.sh3 = lshr i64 %ctlz.step2, 4
  %ctlz.step4 = or i64 %ctlz.step2, %ctlz.sh3
  %ctlz.sh5 = lshr i64 %ctlz.step4, 8
  %ctlz.step6 = or i64 %ctlz.step4, %ctlz.sh5
  %ctlz.sh7 = lshr i64 %ctlz.step6, 16
  %ctlz.step8 = or i64 %ctlz.step6, %ctlz.sh7
  %ctlz.sh9 = lshr i64 %ctlz.step8, 32
  %ctlz.step10 = or i64 %ctlz.step8, %ctlz.sh9
  %35 = xor i64 %ctlz.step10, -1
  %cppop.and1 = and i64 %35, 6148914691236517205
  %ctpop.sh = lshr i64 %35, 1
  %cppop.and2 = and i64 %ctpop.sh, 6148914691236517205
  %ctpop.step = add i64 %cppop.and1, %cppop.and2
  %cppop.and111 = and i64 %ctpop.step, 3689348814741910323
  %ctpop.sh12 = lshr i64 %ctpop.step, 2
  %cppop.and213 = and i64 %ctpop.sh12, 3689348814741910323
  %ctpop.step14 = add i64 %cppop.and111, %cppop.and213
  %cppop.and115 = and i64 %ctpop.step14, 1085102592571150095
  %ctpop.sh16 = lshr i64 %ctpop.step14, 4
  %cppop.and217 = and i64 %ctpop.sh16, 1085102592571150095
  %ctpop.step18 = add i64 %cppop.and115, %cppop.and217
  %cppop.and119 = and i64 %ctpop.step18, 71777214294589695
  %ctpop.sh20 = lshr i64 %ctpop.step18, 8
  %cppop.and221 = and i64 %ctpop.sh20, 71777214294589695
  %ctpop.step22 = add i64 %cppop.and119, %cppop.and221
  %cppop.and123 = and i64 %ctpop.step22, 281470681808895
  %ctpop.sh24 = lshr i64 %ctpop.step22, 16
  %cppop.and225 = and i64 %ctpop.sh24, 281470681808895
  %ctpop.step26 = add i64 %cppop.and123, %cppop.and225
  %cppop.and127 = and i64 %ctpop.step26, 4294967295
  %ctpop.sh28 = lshr i64 %ctpop.step26, 32
  %cppop.and229 = and i64 %ctpop.sh28, 4294967295
  %ctpop.step30 = add i64 %cppop.and127, %cppop.and229
  %ctpop.part = add i64 %ctpop.step30, 0
  %36 = trunc i64 %ctpop.part to i8
  %37 = add nsw i8 %36, -15
  %38 = sext i8 %37 to i32
  %39 = icmp ugt i8 %36, 14
  br i1 %39, label %40, label %51

40:                                               ; preds = %24
  %41 = zext i32 %38 to i64
  %42 = shl i64 %34, %41
  %43 = icmp eq i8 %37, 0
  br i1 %43, label %61, label %44

44:                                               ; preds = %40
  %45 = shl i64 %33, %41
  %46 = sub nsw i32 0, %38
  %47 = and i32 %46, 63
  %48 = zext i32 %47 to i64
  %49 = lshr i64 %34, %48
  %50 = or i64 %49, %45
  br label %61

51:                                               ; preds = %24
  %52 = sub nsw i32 0, %38
  %53 = and i8 %37, 63
  %54 = zext i8 %53 to i64
  %55 = shl i64 %34, %54
  %56 = shl i64 %33, %54
  %57 = zext i32 %52 to i64
  %58 = lshr i64 %34, %57
  %59 = or i64 %56, %58
  %60 = lshr i64 %33, %57
  br label %61

61:                                               ; preds = %40, %44, %51
  %62 = phi i64 [ %50, %44 ], [ %33, %40 ], [ %60, %51 ]
  %63 = phi i64 [ %42, %44 ], [ %42, %40 ], [ %59, %51 ]
  %64 = phi i64 [ 0, %44 ], [ 0, %40 ], [ %55, %51 ]
  %65 = add nsw i32 %31, -64
  %66 = select i1 %32, i32 %65, i32 %31
  %67 = sub nsw i32 %66, %38
  %68 = tail call fastcc { i64, i64 } @roundAndPackFloat128(i8 noundef zeroext %10, i32 noundef %67, i64 noundef %62, i64 noundef %63, i64 noundef %64, %struct.float_status* noundef %3) #30
  %69 = extractvalue { i64, i64 } %68, 0
  %70 = extractvalue { i64, i64 } %68, 1
  br label %71

71:                                               ; preds = %20, %11, %61, %14
  %72 = phi i64 [ %16, %14 ], [ %69, %61 ], [ %0, %11 ], [ 0, %20 ]
  %73 = phi i64 [ %17, %14 ], [ %70, %61 ], [ %1, %11 ], [ %1, %20 ]
  %74 = insertvalue { i64, i64 } poison, i64 %72, 0
  %75 = insertvalue { i64, i64 } %74, i64 %73, 1
  ret { i64, i64 } %75
}

define i1 @uadds(i16* %0, i16 %1, i16 %2) {
  %4 = add i16 %1, %2
  store i16 %4, i16* %0, align 2
  %5 = icmp ugt i16 %1, %2
  %6 = select i1 %5, i16 %1, i16 %2
  %7 = icmp ult i16 %4, %6
  ret i1 %7
}

define i1 @uadd(i32* %0, i32 %1, i32 %2) {
  %4 = add i32 %1, %2
  store i32 %4, i32* %0, align 4
  %5 = icmp ugt i32 %1, %2
  %6 = select i1 %5, i32 %1, i32 %2
  %7 = icmp ult i32 %4, %6
  ret i1 %7
}

define i1 @uaddl(i64* %0, i64 %1, i64 %2) {
  %4 = add i64 %1, %2
  store i64 %4, i64* %0, align 8
  %5 = icmp ugt i64 %1, %2
  %6 = select i1 %5, i64 %1, i64 %2
  %7 = icmp ult i64 %4, %6
  ret i1 %7
}

declare i8* @memset(i8*, i32, i64)

declare i8* @memcpy(i8*, i8*, i64)

declare double @floor(double)

declare double @ceil(double)

declare private i64 @s2e_dummyTbFunction(i64*)

define void @s2e_dummyMainFunction() {
entry:
  %tbFunctionCall = call i64 @s2e_dummyTbFunction(i64* null)
  ret void
}

attributes #0 = { mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr
attributes #1 = { mustprogress nofree norecurse nosync nounwind uwtable willreturn writeonly "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxs
attributes #2 = { mustprogress nofree norecurse nosync nounwind uwtable willreturn "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+ss
attributes #3 = { uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" }
attributes #4 = { noreturn uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" }
attributes #5 = { nofree nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" }
attributes #6 = { nofree nounwind }
attributes #7 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" }
attributes #8 = { noreturn "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" }
attributes #9 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" }
attributes #10 = { inlinehint uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" }
attributes #11 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #12 = { argmemonly nofree nosync nounwind willreturn }
attributes #13 = { argmemonly nofree nounwind willreturn writeonly }
attributes #14 = { mustprogress nofree nosync nounwind uwtable willreturn "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+
attributes #15 = { argmemonly nofree nounwind willreturn }
attributes #16 = { mustprogress nofree nounwind willreturn writeonly "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" }
attributes #17 = { nofree willreturn }
attributes #18 = { mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxs
attributes #19 = { nofree norecurse nosync nounwind uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" }
attributes #20 = { nofree nosync nounwind uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" }
attributes #21 = { inlinehint nofree norecurse nosync nounwind uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87
attributes #22 = { inlinehint nofree norecurse nosync nounwind readnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+
attributes #23 = { inlinehint nofree norecurse nosync nounwind readonly uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+
attributes #24 = { nofree norecurse nosync nounwind readnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" 
attributes #25 = { mustprogress nofree nosync nounwind readnone uwtable willreturn "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+ss
attributes #26 = { inlinehint mustprogress nofree norecurse nosync nounwind uwtable willreturn writeonly "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features
attributes #27 = { inlinehint mustprogress nofree norecurse nosync nounwind uwtable willreturn "frame-pointer"="all" "min-legal-ve